// lib: , url: package:flutter/src/widgets/editable_text.dart

// class id: 1048907, size: 0x8
class :: {
}

// class id: 296, size: 0x18, field offset: 0x8
//   const constructor, 
class _GlyphHeights extends Object {
}

// class id: 298, size: 0x18, field offset: 0x8
//   const constructor, 
class _KeyFrame extends Object {

  _Mint field_8;
  _Double field_10;
}

// class id: 300, size: 0x18, field offset: 0x8
//   const constructor, 
class ToolbarOptions extends Object {

  bool field_8;
  bool field_c;
  bool field_10;
  bool field_14;
}

// class id: 542, size: 0x70, field offset: 0x64
class _RenderCompositionCallback extends RenderProxyBox {

  _ paint(/* No info */) {
    // ** addr: 0x1f603c, size: 0xa8
    // 0x1f603c: EnterFrame
    //     0x1f603c: stp             fp, lr, [SP, #-0x10]!
    //     0x1f6040: mov             fp, SP
    // 0x1f6044: AllocStack(0x18)
    //     0x1f6044: sub             SP, SP, #0x18
    // 0x1f6048: CheckStackOverflow
    //     0x1f6048: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1f604c: cmp             SP, x16
    //     0x1f6050: b.ls            #0x1f60dc
    // 0x1f6054: ldr             x0, [fp, #0x20]
    // 0x1f6058: LoadField: r1 = r0->field_6b
    //     0x1f6058: ldur            w1, [x0, #0x6b]
    // 0x1f605c: DecompressPointer r1
    //     0x1f605c: add             x1, x1, HEAP, lsl #32
    // 0x1f6060: tbnz            w1, #4, #0x1f60b4
    // 0x1f6064: LoadField: r1 = r0->field_67
    //     0x1f6064: ldur            w1, [x0, #0x67]
    // 0x1f6068: DecompressPointer r1
    //     0x1f6068: add             x1, x1, HEAP, lsl #32
    // 0x1f606c: cmp             w1, NULL
    // 0x1f6070: b.ne            #0x1f60ac
    // 0x1f6074: LoadField: r1 = r0->field_63
    //     0x1f6074: ldur            w1, [x0, #0x63]
    // 0x1f6078: DecompressPointer r1
    //     0x1f6078: add             x1, x1, HEAP, lsl #32
    // 0x1f607c: ldr             x16, [fp, #0x18]
    // 0x1f6080: stp             x1, x16, [SP]
    // 0x1f6084: r0 = addCompositionCallback()
    //     0x1f6084: bl              #0x1f60e4  ; [package:flutter/src/rendering/object.dart] PaintingContext::addCompositionCallback
    // 0x1f6088: ldr             x1, [fp, #0x20]
    // 0x1f608c: StoreField: r1->field_67 = r0
    //     0x1f608c: stur            w0, [x1, #0x67]
    //     0x1f6090: ldurb           w16, [x1, #-1]
    //     0x1f6094: ldurb           w17, [x0, #-1]
    //     0x1f6098: and             x16, x17, x16, lsr #2
    //     0x1f609c: tst             x16, HEAP, lsr #32
    //     0x1f60a0: b.eq            #0x1f60a8
    //     0x1f60a4: bl              #0x3e4608
    // 0x1f60a8: b               #0x1f60b8
    // 0x1f60ac: mov             x1, x0
    // 0x1f60b0: b               #0x1f60b8
    // 0x1f60b4: mov             x1, x0
    // 0x1f60b8: ldr             x16, [fp, #0x18]
    // 0x1f60bc: stp             x16, x1, [SP, #8]
    // 0x1f60c0: ldr             x16, [fp, #0x10]
    // 0x1f60c4: str             x16, [SP]
    // 0x1f60c8: r0 = paint()
    //     0x1f60c8: bl              #0x1f691c  ; [package:flutter/src/rendering/proxy_box.dart] _RenderProxyBox&RenderBox&RenderObjectWithChildMixin&RenderProxyBoxMixin::paint
    // 0x1f60cc: r0 = Null
    //     0x1f60cc: mov             x0, NULL
    // 0x1f60d0: LeaveFrame
    //     0x1f60d0: mov             SP, fp
    //     0x1f60d4: ldp             fp, lr, [SP], #0x10
    // 0x1f60d8: ret
    //     0x1f60d8: ret             
    // 0x1f60dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1f60dc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1f60e0: b               #0x1f6054
  }
  set _ enabled=(/* No info */) {
    // ** addr: 0x2f3460, size: 0x90
    // 0x2f3460: EnterFrame
    //     0x2f3460: stp             fp, lr, [SP, #-0x10]!
    //     0x2f3464: mov             fp, SP
    // 0x2f3468: AllocStack(0x8)
    //     0x2f3468: sub             SP, SP, #8
    // 0x2f346c: CheckStackOverflow
    //     0x2f346c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2f3470: cmp             SP, x16
    //     0x2f3474: b.ls            #0x2f34e8
    // 0x2f3478: ldr             x1, [fp, #0x18]
    // 0x2f347c: ldr             x0, [fp, #0x10]
    // 0x2f3480: StoreField: r1->field_6b = r0
    //     0x2f3480: stur            w0, [x1, #0x6b]
    // 0x2f3484: tbz             w0, #4, #0x2f34bc
    // 0x2f3488: LoadField: r0 = r1->field_67
    //     0x2f3488: ldur            w0, [x1, #0x67]
    // 0x2f348c: DecompressPointer r0
    //     0x2f348c: add             x0, x0, HEAP, lsl #32
    // 0x2f3490: cmp             w0, NULL
    // 0x2f3494: b.ne            #0x2f34a0
    // 0x2f3498: mov             x0, x1
    // 0x2f349c: b               #0x2f34b4
    // 0x2f34a0: str             x0, [SP]
    // 0x2f34a4: ClosureCall
    //     0x2f34a4: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x2f34a8: ldur            x2, [x0, #0x1f]
    //     0x2f34ac: blr             x2
    // 0x2f34b0: ldr             x0, [fp, #0x18]
    // 0x2f34b4: StoreField: r0->field_67 = rNULL
    //     0x2f34b4: stur            NULL, [x0, #0x67]
    // 0x2f34b8: b               #0x2f34d8
    // 0x2f34bc: mov             x0, x1
    // 0x2f34c0: LoadField: r1 = r0->field_67
    //     0x2f34c0: ldur            w1, [x0, #0x67]
    // 0x2f34c4: DecompressPointer r1
    //     0x2f34c4: add             x1, x1, HEAP, lsl #32
    // 0x2f34c8: cmp             w1, NULL
    // 0x2f34cc: b.ne            #0x2f34d8
    // 0x2f34d0: str             x0, [SP]
    // 0x2f34d4: r0 = markNeedsPaint()
    //     0x2f34d4: bl              #0x207bf0  ; [package:flutter/src/rendering/object.dart] RenderObject::markNeedsPaint
    // 0x2f34d8: r0 = Null
    //     0x2f34d8: mov             x0, NULL
    // 0x2f34dc: LeaveFrame
    //     0x2f34dc: mov             SP, fp
    //     0x2f34e0: ldp             fp, lr, [SP], #0x10
    // 0x2f34e4: ret
    //     0x2f34e4: ret             
    // 0x2f34e8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2f34e8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2f34ec: b               #0x2f3478
  }
}

// class id: 640, size: 0xc, field offset: 0x8
//   const constructor, 
class _CodePointBoundary extends TextBoundary {

  _ getTrailingTextBoundaryAt(/* No info */) {
    // ** addr: 0x3c794c, size: 0xf8
    // 0x3c794c: EnterFrame
    //     0x3c794c: stp             fp, lr, [SP, #-0x10]!
    //     0x3c7950: mov             fp, SP
    // 0x3c7954: AllocStack(0x18)
    //     0x3c7954: sub             SP, SP, #0x18
    // 0x3c7958: CheckStackOverflow
    //     0x3c7958: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3c795c: cmp             SP, x16
    //     0x3c7960: b.ls            #0x3c7a3c
    // 0x3c7964: ldr             x0, [fp, #0x18]
    // 0x3c7968: LoadField: r1 = r0->field_7
    //     0x3c7968: ldur            w1, [x0, #7]
    // 0x3c796c: DecompressPointer r1
    //     0x3c796c: add             x1, x1, HEAP, lsl #32
    // 0x3c7970: LoadField: r2 = r1->field_7
    //     0x3c7970: ldur            w2, [x1, #7]
    // 0x3c7974: DecompressPointer r2
    //     0x3c7974: add             x2, x2, HEAP, lsl #32
    // 0x3c7978: cbz             w2, #0x3c798c
    // 0x3c797c: ldr             x3, [fp, #0x10]
    // 0x3c7980: r1 = LoadInt32Instr(r2)
    //     0x3c7980: sbfx            x1, x2, #1, #0x1f
    // 0x3c7984: cmp             x3, x1
    // 0x3c7988: b.lt            #0x3c799c
    // 0x3c798c: r0 = Null
    //     0x3c798c: mov             x0, NULL
    // 0x3c7990: LeaveFrame
    //     0x3c7990: mov             SP, fp
    //     0x3c7994: ldp             fp, lr, [SP], #0x10
    // 0x3c7998: ret
    //     0x3c7998: ret             
    // 0x3c799c: tbz             x3, #0x3f, #0x3c79b0
    // 0x3c79a0: r0 = 0
    //     0x3c79a0: movz            x0, #0
    // 0x3c79a4: LeaveFrame
    //     0x3c79a4: mov             SP, fp
    //     0x3c79a8: ldp             fp, lr, [SP], #0x10
    // 0x3c79ac: ret
    //     0x3c79ac: ret             
    // 0x3c79b0: sub             x4, x1, #1
    // 0x3c79b4: cmp             x3, x4
    // 0x3c79b8: b.ne            #0x3c79cc
    // 0x3c79bc: mov             x0, x2
    // 0x3c79c0: LeaveFrame
    //     0x3c79c0: mov             SP, fp
    //     0x3c79c4: ldp             fp, lr, [SP], #0x10
    // 0x3c79c8: ret
    //     0x3c79c8: ret             
    // 0x3c79cc: cmp             x1, #1
    // 0x3c79d0: b.gt            #0x3c79f4
    // 0x3c79d4: r0 = BoxInt64Instr(r3)
    //     0x3c79d4: sbfiz           x0, x3, #1, #0x1f
    //     0x3c79d8: cmp             x3, x0, asr #1
    //     0x3c79dc: b.eq            #0x3c79e8
    //     0x3c79e0: bl              #0x3e5e54
    //     0x3c79e4: stur            x3, [x0, #7]
    // 0x3c79e8: LeaveFrame
    //     0x3c79e8: mov             SP, fp
    //     0x3c79ec: ldp             fp, lr, [SP], #0x10
    // 0x3c79f0: ret
    //     0x3c79f0: ret             
    // 0x3c79f4: add             x1, x3, #1
    // 0x3c79f8: stur            x1, [fp, #-8]
    // 0x3c79fc: stp             x1, x0, [SP]
    // 0x3c7a00: r0 = _breaksSurrogatePair()
    //     0x3c7a00: bl              #0x3c7a44  ; [package:flutter/src/widgets/editable_text.dart] _CodePointBoundary::_breaksSurrogatePair
    // 0x3c7a04: tbnz            w0, #4, #0x3c7a18
    // 0x3c7a08: ldr             x2, [fp, #0x10]
    // 0x3c7a0c: add             x3, x2, #2
    // 0x3c7a10: mov             x2, x3
    // 0x3c7a14: b               #0x3c7a1c
    // 0x3c7a18: ldur            x2, [fp, #-8]
    // 0x3c7a1c: r0 = BoxInt64Instr(r2)
    //     0x3c7a1c: sbfiz           x0, x2, #1, #0x1f
    //     0x3c7a20: cmp             x2, x0, asr #1
    //     0x3c7a24: b.eq            #0x3c7a30
    //     0x3c7a28: bl              #0x3e5e54
    //     0x3c7a2c: stur            x2, [x0, #7]
    // 0x3c7a30: LeaveFrame
    //     0x3c7a30: mov             SP, fp
    //     0x3c7a34: ldp             fp, lr, [SP], #0x10
    // 0x3c7a38: ret
    //     0x3c7a38: ret             
    // 0x3c7a3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3c7a3c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3c7a40: b               #0x3c7964
  }
  _ _breaksSurrogatePair(/* No info */) {
    // ** addr: 0x3c7a44, size: 0xf8
    // 0x3c7a44: EnterFrame
    //     0x3c7a44: stp             fp, lr, [SP, #-0x10]!
    //     0x3c7a48: mov             fp, SP
    // 0x3c7a4c: AllocStack(0x18)
    //     0x3c7a4c: sub             SP, SP, #0x18
    // 0x3c7a50: CheckStackOverflow
    //     0x3c7a50: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3c7a54: cmp             SP, x16
    //     0x3c7a58: b.ls            #0x3c7b34
    // 0x3c7a5c: ldr             x0, [fp, #0x18]
    // 0x3c7a60: LoadField: r2 = r0->field_7
    //     0x3c7a60: ldur            w2, [x0, #7]
    // 0x3c7a64: DecompressPointer r2
    //     0x3c7a64: add             x2, x2, HEAP, lsl #32
    // 0x3c7a68: ldr             x3, [fp, #0x10]
    // 0x3c7a6c: stur            x2, [fp, #-8]
    // 0x3c7a70: sub             x4, x3, #1
    // 0x3c7a74: r0 = BoxInt64Instr(r4)
    //     0x3c7a74: sbfiz           x0, x4, #1, #0x1f
    //     0x3c7a78: cmp             x4, x0, asr #1
    //     0x3c7a7c: b.eq            #0x3c7a88
    //     0x3c7a80: bl              #0x3e5e54
    //     0x3c7a84: stur            x4, [x0, #7]
    // 0x3c7a88: r1 = LoadClassIdInstr(r2)
    //     0x3c7a88: ldur            x1, [x2, #-1]
    //     0x3c7a8c: ubfx            x1, x1, #0xc, #0x14
    // 0x3c7a90: stp             x0, x2, [SP]
    // 0x3c7a94: mov             x0, x1
    // 0x3c7a98: r0 = GDT[cid_x0 + -0x1000]()
    //     0x3c7a98: sub             lr, x0, #1, lsl #12
    //     0x3c7a9c: ldr             lr, [x21, lr, lsl #3]
    //     0x3c7aa0: blr             lr
    // 0x3c7aa4: r1 = LoadInt32Instr(r0)
    //     0x3c7aa4: sbfx            x1, x0, #1, #0x1f
    // 0x3c7aa8: r2 = 64512
    //     0x3c7aa8: orr             x2, xzr, #0xfc00
    // 0x3c7aac: and             x0, x1, x2
    // 0x3c7ab0: ubfx            x0, x0, #0, #0x20
    // 0x3c7ab4: r17 = 55296
    //     0x3c7ab4: movz            x17, #0xd800
    // 0x3c7ab8: cmp             x0, x17
    // 0x3c7abc: b.ne            #0x3c7b24
    // 0x3c7ac0: ldr             x4, [fp, #0x10]
    // 0x3c7ac4: ldur            x3, [fp, #-8]
    // 0x3c7ac8: r0 = BoxInt64Instr(r4)
    //     0x3c7ac8: sbfiz           x0, x4, #1, #0x1f
    //     0x3c7acc: cmp             x4, x0, asr #1
    //     0x3c7ad0: b.eq            #0x3c7adc
    //     0x3c7ad4: bl              #0x3e5e54
    //     0x3c7ad8: stur            x4, [x0, #7]
    // 0x3c7adc: r1 = LoadClassIdInstr(r3)
    //     0x3c7adc: ldur            x1, [x3, #-1]
    //     0x3c7ae0: ubfx            x1, x1, #0xc, #0x14
    // 0x3c7ae4: stp             x0, x3, [SP]
    // 0x3c7ae8: mov             x0, x1
    // 0x3c7aec: r0 = GDT[cid_x0 + -0x1000]()
    //     0x3c7aec: sub             lr, x0, #1, lsl #12
    //     0x3c7af0: ldr             lr, [x21, lr, lsl #3]
    //     0x3c7af4: blr             lr
    // 0x3c7af8: r1 = LoadInt32Instr(r0)
    //     0x3c7af8: sbfx            x1, x0, #1, #0x1f
    // 0x3c7afc: r2 = 64512
    //     0x3c7afc: orr             x2, xzr, #0xfc00
    // 0x3c7b00: and             x3, x1, x2
    // 0x3c7b04: ubfx            x3, x3, #0, #0x20
    // 0x3c7b08: r17 = 56320
    //     0x3c7b08: movz            x17, #0xdc00
    // 0x3c7b0c: cmp             x3, x17
    // 0x3c7b10: r16 = true
    //     0x3c7b10: add             x16, NULL, #0x20  ; true
    // 0x3c7b14: r17 = false
    //     0x3c7b14: add             x17, NULL, #0x30  ; false
    // 0x3c7b18: csel            x1, x16, x17, eq
    // 0x3c7b1c: mov             x0, x1
    // 0x3c7b20: b               #0x3c7b28
    // 0x3c7b24: r0 = false
    //     0x3c7b24: add             x0, NULL, #0x30  ; false
    // 0x3c7b28: LeaveFrame
    //     0x3c7b28: mov             SP, fp
    //     0x3c7b2c: ldp             fp, lr, [SP], #0x10
    // 0x3c7b30: ret
    //     0x3c7b30: ret             
    // 0x3c7b34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3c7b34: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3c7b38: b               #0x3c7a5c
  }
  _ getLeadingTextBoundaryAt(/* No info */) {
    // ** addr: 0x3c7f24, size: 0xe8
    // 0x3c7f24: EnterFrame
    //     0x3c7f24: stp             fp, lr, [SP, #-0x10]!
    //     0x3c7f28: mov             fp, SP
    // 0x3c7f2c: AllocStack(0x10)
    //     0x3c7f2c: sub             SP, SP, #0x10
    // 0x3c7f30: CheckStackOverflow
    //     0x3c7f30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3c7f34: cmp             SP, x16
    //     0x3c7f38: b.ls            #0x3c8004
    // 0x3c7f3c: ldr             x0, [fp, #0x18]
    // 0x3c7f40: LoadField: r1 = r0->field_7
    //     0x3c7f40: ldur            w1, [x0, #7]
    // 0x3c7f44: DecompressPointer r1
    //     0x3c7f44: add             x1, x1, HEAP, lsl #32
    // 0x3c7f48: LoadField: r2 = r1->field_7
    //     0x3c7f48: ldur            w2, [x1, #7]
    // 0x3c7f4c: DecompressPointer r2
    //     0x3c7f4c: add             x2, x2, HEAP, lsl #32
    // 0x3c7f50: cbz             w2, #0x3c7f5c
    // 0x3c7f54: ldr             x3, [fp, #0x10]
    // 0x3c7f58: tbz             x3, #0x3f, #0x3c7f6c
    // 0x3c7f5c: r0 = Null
    //     0x3c7f5c: mov             x0, NULL
    // 0x3c7f60: LeaveFrame
    //     0x3c7f60: mov             SP, fp
    //     0x3c7f64: ldp             fp, lr, [SP], #0x10
    // 0x3c7f68: ret
    //     0x3c7f68: ret             
    // 0x3c7f6c: cbnz            x3, #0x3c7f80
    // 0x3c7f70: r0 = 0
    //     0x3c7f70: movz            x0, #0
    // 0x3c7f74: LeaveFrame
    //     0x3c7f74: mov             SP, fp
    //     0x3c7f78: ldp             fp, lr, [SP], #0x10
    // 0x3c7f7c: ret
    //     0x3c7f7c: ret             
    // 0x3c7f80: r1 = LoadInt32Instr(r2)
    //     0x3c7f80: sbfx            x1, x2, #1, #0x1f
    // 0x3c7f84: cmp             x3, x1
    // 0x3c7f88: b.lt            #0x3c7f9c
    // 0x3c7f8c: mov             x0, x2
    // 0x3c7f90: LeaveFrame
    //     0x3c7f90: mov             SP, fp
    //     0x3c7f94: ldp             fp, lr, [SP], #0x10
    // 0x3c7f98: ret
    //     0x3c7f98: ret             
    // 0x3c7f9c: cmp             x1, #1
    // 0x3c7fa0: b.gt            #0x3c7fc4
    // 0x3c7fa4: r0 = BoxInt64Instr(r3)
    //     0x3c7fa4: sbfiz           x0, x3, #1, #0x1f
    //     0x3c7fa8: cmp             x3, x0, asr #1
    //     0x3c7fac: b.eq            #0x3c7fb8
    //     0x3c7fb0: bl              #0x3e5e54
    //     0x3c7fb4: stur            x3, [x0, #7]
    // 0x3c7fb8: LeaveFrame
    //     0x3c7fb8: mov             SP, fp
    //     0x3c7fbc: ldp             fp, lr, [SP], #0x10
    // 0x3c7fc0: ret
    //     0x3c7fc0: ret             
    // 0x3c7fc4: stp             x3, x0, [SP]
    // 0x3c7fc8: r0 = _breaksSurrogatePair()
    //     0x3c7fc8: bl              #0x3c7a44  ; [package:flutter/src/widgets/editable_text.dart] _CodePointBoundary::_breaksSurrogatePair
    // 0x3c7fcc: tbnz            w0, #4, #0x3c7fe0
    // 0x3c7fd0: ldr             x2, [fp, #0x10]
    // 0x3c7fd4: sub             x3, x2, #1
    // 0x3c7fd8: mov             x2, x3
    // 0x3c7fdc: b               #0x3c7fe4
    // 0x3c7fe0: ldr             x2, [fp, #0x10]
    // 0x3c7fe4: r0 = BoxInt64Instr(r2)
    //     0x3c7fe4: sbfiz           x0, x2, #1, #0x1f
    //     0x3c7fe8: cmp             x2, x0, asr #1
    //     0x3c7fec: b.eq            #0x3c7ff8
    //     0x3c7ff0: bl              #0x3e5e54
    //     0x3c7ff4: stur            x2, [x0, #7]
    // 0x3c7ff8: LeaveFrame
    //     0x3c7ff8: mov             SP, fp
    //     0x3c7ffc: ldp             fp, lr, [SP], #0x10
    // 0x3c8000: ret
    //     0x3c8000: ret             
    // 0x3c8004: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3c8004: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3c8008: b               #0x3c7f3c
  }
}

// class id: 1056, size: 0x2c, field offset: 0x2c
class TextEditingController extends ValueNotifier<dynamic> {

  get _ selection(/* No info */) {
    // ** addr: 0x22f340, size: 0x18
    // 0x22f340: ldr             x1, [SP]
    // 0x22f344: LoadField: r2 = r1->field_27
    //     0x22f344: ldur            w2, [x1, #0x27]
    // 0x22f348: DecompressPointer r2
    //     0x22f348: add             x2, x2, HEAP, lsl #32
    // 0x22f34c: LoadField: r0 = r2->field_b
    //     0x22f34c: ldur            w0, [x2, #0xb]
    // 0x22f350: DecompressPointer r0
    //     0x22f350: add             x0, x0, HEAP, lsl #32
    // 0x22f354: ret
    //     0x22f354: ret             
  }
  _ clearComposing(/* No info */) {
    // ** addr: 0x23c590, size: 0x58
    // 0x23c590: EnterFrame
    //     0x23c590: stp             fp, lr, [SP, #-0x10]!
    //     0x23c594: mov             fp, SP
    // 0x23c598: AllocStack(0x10)
    //     0x23c598: sub             SP, SP, #0x10
    // 0x23c59c: CheckStackOverflow
    //     0x23c59c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23c5a0: cmp             SP, x16
    //     0x23c5a4: b.ls            #0x23c5e0
    // 0x23c5a8: ldr             x0, [fp, #0x10]
    // 0x23c5ac: LoadField: r1 = r0->field_27
    //     0x23c5ac: ldur            w1, [x0, #0x27]
    // 0x23c5b0: DecompressPointer r1
    //     0x23c5b0: add             x1, x1, HEAP, lsl #32
    // 0x23c5b4: r16 = Instance_TextRange
    //     0x23c5b4: ldr             x16, [PP, #0x5ec0]  ; [pp+0x5ec0] Obj!TextRange@47c001
    // 0x23c5b8: stp             x16, x1, [SP]
    // 0x23c5bc: r4 = const [0, 0x2, 0x2, 0x1, composing, 0x1, null]
    //     0x23c5bc: ldr             x4, [PP, #0x6188]  ; [pp+0x6188] List(7) [0, 0x2, 0x2, 0x1, "composing", 0x1, Null]
    // 0x23c5c0: r0 = copyWith()
    //     0x23c5c0: bl              #0x2498e0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x23c5c4: ldr             x16, [fp, #0x10]
    // 0x23c5c8: stp             x0, x16, [SP]
    // 0x23c5cc: r0 = value=()
    //     0x23c5cc: bl              #0x1fd07c  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x23c5d0: r0 = Null
    //     0x23c5d0: mov             x0, NULL
    // 0x23c5d4: LeaveFrame
    //     0x23c5d4: mov             SP, fp
    //     0x23c5d8: ldp             fp, lr, [SP], #0x10
    // 0x23c5dc: ret
    //     0x23c5dc: ret             
    // 0x23c5e0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23c5e0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23c5e4: b               #0x23c5a8
  }
  set _ selection=(/* No info */) {
    // ** addr: 0x2456bc, size: 0xf4
    // 0x2456bc: EnterFrame
    //     0x2456bc: stp             fp, lr, [SP, #-0x10]!
    //     0x2456c0: mov             fp, SP
    // 0x2456c4: AllocStack(0x18)
    //     0x2456c4: sub             SP, SP, #0x18
    // 0x2456c8: CheckStackOverflow
    //     0x2456c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2456cc: cmp             SP, x16
    //     0x2456d0: b.ls            #0x2457a8
    // 0x2456d4: ldr             x16, [fp, #0x18]
    // 0x2456d8: ldr             lr, [fp, #0x10]
    // 0x2456dc: stp             lr, x16, [SP]
    // 0x2456e0: r0 = isSelectionWithinTextBounds()
    //     0x2456e0: bl              #0x245800  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::isSelectionWithinTextBounds
    // 0x2456e4: tbnz            w0, #4, #0x245770
    // 0x2456e8: ldr             x1, [fp, #0x10]
    // 0x2456ec: LoadField: r0 = r1->field_7
    //     0x2456ec: ldur            x0, [x1, #7]
    // 0x2456f0: LoadField: r2 = r1->field_f
    //     0x2456f0: ldur            x2, [x1, #0xf]
    // 0x2456f4: cmp             x0, x2
    // 0x2456f8: b.ne            #0x245730
    // 0x2456fc: ldr             x16, [fp, #0x18]
    // 0x245700: stp             x1, x16, [SP]
    // 0x245704: r0 = _isSelectionWithinComposingRange()
    //     0x245704: bl              #0x2457b0  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::_isSelectionWithinComposingRange
    // 0x245708: tbnz            w0, #4, #0x245728
    // 0x24570c: ldr             x0, [fp, #0x18]
    // 0x245710: LoadField: r1 = r0->field_27
    //     0x245710: ldur            w1, [x0, #0x27]
    // 0x245714: DecompressPointer r1
    //     0x245714: add             x1, x1, HEAP, lsl #32
    // 0x245718: LoadField: r2 = r1->field_f
    //     0x245718: ldur            w2, [x1, #0xf]
    // 0x24571c: DecompressPointer r2
    //     0x24571c: add             x2, x2, HEAP, lsl #32
    // 0x245720: mov             x1, x2
    // 0x245724: b               #0x245738
    // 0x245728: ldr             x0, [fp, #0x18]
    // 0x24572c: b               #0x245734
    // 0x245730: ldr             x0, [fp, #0x18]
    // 0x245734: r1 = Instance_TextRange
    //     0x245734: ldr             x1, [PP, #0x5ec0]  ; [pp+0x5ec0] Obj!TextRange@47c001
    // 0x245738: LoadField: r2 = r0->field_27
    //     0x245738: ldur            w2, [x0, #0x27]
    // 0x24573c: DecompressPointer r2
    //     0x24573c: add             x2, x2, HEAP, lsl #32
    // 0x245740: ldr             x16, [fp, #0x10]
    // 0x245744: stp             x16, x2, [SP, #8]
    // 0x245748: str             x1, [SP]
    // 0x24574c: r4 = const [0, 0x3, 0x3, 0x1, composing, 0x2, selection, 0x1, null]
    //     0x24574c: ldr             x4, [PP, #0x5ec8]  ; [pp+0x5ec8] List(9) [0, 0x3, 0x3, 0x1, "composing", 0x2, "selection", 0x1, Null]
    // 0x245750: r0 = copyWith()
    //     0x245750: bl              #0x2498e0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x245754: ldr             x16, [fp, #0x18]
    // 0x245758: stp             x0, x16, [SP]
    // 0x24575c: r0 = value=()
    //     0x24575c: bl              #0x1fd07c  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x245760: r0 = Null
    //     0x245760: mov             x0, NULL
    // 0x245764: LeaveFrame
    //     0x245764: mov             SP, fp
    //     0x245768: ldp             fp, lr, [SP], #0x10
    // 0x24576c: ret
    //     0x24576c: ret             
    // 0x245770: ldr             x0, [fp, #0x10]
    // 0x245774: r1 = Null
    //     0x245774: mov             x1, NULL
    // 0x245778: r2 = 4
    //     0x245778: movz            x2, #0x4
    // 0x24577c: r0 = AllocateArray()
    //     0x24577c: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x245780: r17 = "invalid text selection: "
    //     0x245780: ldr             x17, [PP, #0x5ed0]  ; [pp+0x5ed0] "invalid text selection: "
    // 0x245784: StoreField: r0->field_f = r17
    //     0x245784: stur            w17, [x0, #0xf]
    // 0x245788: ldr             x1, [fp, #0x10]
    // 0x24578c: StoreField: r0->field_13 = r1
    //     0x24578c: stur            w1, [x0, #0x13]
    // 0x245790: str             x0, [SP]
    // 0x245794: r0 = _interpolate()
    //     0x245794: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x245798: stp             x0, NULL, [SP]
    // 0x24579c: r0 = FlutterError()
    //     0x24579c: bl              #0x20c984  ; [package:flutter/src/foundation/assertions.dart] FlutterError::FlutterError
    // 0x2457a0: r0 = Throw()
    //     0x2457a0: bl              #0x3e41c8  ; ThrowStub
    // 0x2457a4: brk             #0
    // 0x2457a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2457a8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2457ac: b               #0x2456d4
  }
  _ _isSelectionWithinComposingRange(/* No info */) {
    // ** addr: 0x2457b0, size: 0x50
    // 0x2457b0: ldr             x1, [SP]
    // 0x2457b4: LoadField: r2 = r1->field_7
    //     0x2457b4: ldur            x2, [x1, #7]
    // 0x2457b8: ldr             x3, [SP, #8]
    // 0x2457bc: LoadField: r4 = r3->field_27
    //     0x2457bc: ldur            w4, [x3, #0x27]
    // 0x2457c0: DecompressPointer r4
    //     0x2457c0: add             x4, x4, HEAP, lsl #32
    // 0x2457c4: LoadField: r3 = r4->field_f
    //     0x2457c4: ldur            w3, [x4, #0xf]
    // 0x2457c8: DecompressPointer r3
    //     0x2457c8: add             x3, x3, HEAP, lsl #32
    // 0x2457cc: LoadField: r4 = r3->field_7
    //     0x2457cc: ldur            x4, [x3, #7]
    // 0x2457d0: cmp             x2, x4
    // 0x2457d4: b.lt            #0x2457f8
    // 0x2457d8: LoadField: r2 = r1->field_f
    //     0x2457d8: ldur            x2, [x1, #0xf]
    // 0x2457dc: LoadField: r1 = r3->field_f
    //     0x2457dc: ldur            x1, [x3, #0xf]
    // 0x2457e0: cmp             x2, x1
    // 0x2457e4: r16 = true
    //     0x2457e4: add             x16, NULL, #0x20  ; true
    // 0x2457e8: r17 = false
    //     0x2457e8: add             x17, NULL, #0x30  ; false
    // 0x2457ec: csel            x3, x16, x17, le
    // 0x2457f0: mov             x0, x3
    // 0x2457f4: b               #0x2457fc
    // 0x2457f8: r0 = false
    //     0x2457f8: add             x0, NULL, #0x30  ; false
    // 0x2457fc: ret
    //     0x2457fc: ret             
  }
  _ isSelectionWithinTextBounds(/* No info */) {
    // ** addr: 0x245800, size: 0x98
    // 0x245800: EnterFrame
    //     0x245800: stp             fp, lr, [SP, #-0x10]!
    //     0x245804: mov             fp, SP
    // 0x245808: AllocStack(0x10)
    //     0x245808: sub             SP, SP, #0x10
    // 0x24580c: CheckStackOverflow
    //     0x24580c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x245810: cmp             SP, x16
    //     0x245814: b.ls            #0x245890
    // 0x245818: ldr             x0, [fp, #0x10]
    // 0x24581c: LoadField: r1 = r0->field_7
    //     0x24581c: ldur            x1, [x0, #7]
    // 0x245820: ldr             x2, [fp, #0x18]
    // 0x245824: LoadField: r3 = r2->field_27
    //     0x245824: ldur            w3, [x2, #0x27]
    // 0x245828: DecompressPointer r3
    //     0x245828: add             x3, x3, HEAP, lsl #32
    // 0x24582c: LoadField: r4 = r3->field_7
    //     0x24582c: ldur            w4, [x3, #7]
    // 0x245830: DecompressPointer r4
    //     0x245830: add             x4, x4, HEAP, lsl #32
    // 0x245834: LoadField: r3 = r4->field_7
    //     0x245834: ldur            w3, [x4, #7]
    // 0x245838: DecompressPointer r3
    //     0x245838: add             x3, x3, HEAP, lsl #32
    // 0x24583c: r4 = LoadInt32Instr(r3)
    //     0x24583c: sbfx            x4, x3, #1, #0x1f
    // 0x245840: cmp             x1, x4
    // 0x245844: b.gt            #0x245880
    // 0x245848: LoadField: r1 = r0->field_f
    //     0x245848: ldur            x1, [x0, #0xf]
    // 0x24584c: stur            x1, [fp, #-8]
    // 0x245850: str             x2, [SP]
    // 0x245854: r0 = text()
    //     0x245854: bl              #0x245898  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::text
    // 0x245858: LoadField: r1 = r0->field_7
    //     0x245858: ldur            w1, [x0, #7]
    // 0x24585c: DecompressPointer r1
    //     0x24585c: add             x1, x1, HEAP, lsl #32
    // 0x245860: r2 = LoadInt32Instr(r1)
    //     0x245860: sbfx            x2, x1, #1, #0x1f
    // 0x245864: ldur            x1, [fp, #-8]
    // 0x245868: cmp             x1, x2
    // 0x24586c: r16 = true
    //     0x24586c: add             x16, NULL, #0x20  ; true
    // 0x245870: r17 = false
    //     0x245870: add             x17, NULL, #0x30  ; false
    // 0x245874: csel            x3, x16, x17, le
    // 0x245878: mov             x0, x3
    // 0x24587c: b               #0x245884
    // 0x245880: r0 = false
    //     0x245880: add             x0, NULL, #0x30  ; false
    // 0x245884: LeaveFrame
    //     0x245884: mov             SP, fp
    //     0x245888: ldp             fp, lr, [SP], #0x10
    // 0x24588c: ret
    //     0x24588c: ret             
    // 0x245890: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x245890: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x245894: b               #0x245818
  }
  get _ text(/* No info */) {
    // ** addr: 0x245898, size: 0x18
    // 0x245898: ldr             x1, [SP]
    // 0x24589c: LoadField: r2 = r1->field_27
    //     0x24589c: ldur            w2, [x1, #0x27]
    // 0x2458a0: DecompressPointer r2
    //     0x2458a0: add             x2, x2, HEAP, lsl #32
    // 0x2458a4: LoadField: r0 = r2->field_7
    //     0x2458a4: ldur            w0, [x2, #7]
    // 0x2458a8: DecompressPointer r0
    //     0x2458a8: add             x0, x0, HEAP, lsl #32
    // 0x2458ac: ret
    //     0x2458ac: ret             
  }
}

// class id: 1199, size: 0x18, field offset: 0x14
class _CopySelectionAction extends ContextAction<dynamic> {

  get _ isActionEnabled(/* No info */) {
    // ** addr: 0x326968, size: 0x88
    // 0x326968: EnterFrame
    //     0x326968: stp             fp, lr, [SP, #-0x10]!
    //     0x32696c: mov             fp, SP
    // 0x326970: ldr             x1, [fp, #0x10]
    // 0x326974: LoadField: r2 = r1->field_13
    //     0x326974: ldur            w2, [x1, #0x13]
    // 0x326978: DecompressPointer r2
    //     0x326978: add             x2, x2, HEAP, lsl #32
    // 0x32697c: LoadField: r1 = r2->field_b
    //     0x32697c: ldur            w1, [x2, #0xb]
    // 0x326980: DecompressPointer r1
    //     0x326980: add             x1, x1, HEAP, lsl #32
    // 0x326984: cmp             w1, NULL
    // 0x326988: b.eq            #0x3269ec
    // 0x32698c: LoadField: r2 = r1->field_b
    //     0x32698c: ldur            w2, [x1, #0xb]
    // 0x326990: DecompressPointer r2
    //     0x326990: add             x2, x2, HEAP, lsl #32
    // 0x326994: LoadField: r1 = r2->field_27
    //     0x326994: ldur            w1, [x2, #0x27]
    // 0x326998: DecompressPointer r1
    //     0x326998: add             x1, x1, HEAP, lsl #32
    // 0x32699c: LoadField: r2 = r1->field_b
    //     0x32699c: ldur            w2, [x1, #0xb]
    // 0x3269a0: DecompressPointer r2
    //     0x3269a0: add             x2, x2, HEAP, lsl #32
    // 0x3269a4: LoadField: r3 = r2->field_7
    //     0x3269a4: ldur            x3, [x2, #7]
    // 0x3269a8: tbnz            x3, #0x3f, #0x3269dc
    // 0x3269ac: LoadField: r3 = r2->field_f
    //     0x3269ac: ldur            x3, [x2, #0xf]
    // 0x3269b0: tbnz            x3, #0x3f, #0x3269dc
    // 0x3269b4: LoadField: r2 = r1->field_b
    //     0x3269b4: ldur            w2, [x1, #0xb]
    // 0x3269b8: DecompressPointer r2
    //     0x3269b8: add             x2, x2, HEAP, lsl #32
    // 0x3269bc: LoadField: r1 = r2->field_7
    //     0x3269bc: ldur            x1, [x2, #7]
    // 0x3269c0: LoadField: r3 = r2->field_f
    //     0x3269c0: ldur            x3, [x2, #0xf]
    // 0x3269c4: cmp             x1, x3
    // 0x3269c8: r16 = true
    //     0x3269c8: add             x16, NULL, #0x20  ; true
    // 0x3269cc: r17 = false
    //     0x3269cc: add             x17, NULL, #0x30  ; false
    // 0x3269d0: csel            x2, x16, x17, ne
    // 0x3269d4: mov             x0, x2
    // 0x3269d8: b               #0x3269e0
    // 0x3269dc: r0 = false
    //     0x3269dc: add             x0, NULL, #0x30  ; false
    // 0x3269e0: LeaveFrame
    //     0x3269e0: mov             SP, fp
    //     0x3269e4: ldp             fp, lr, [SP], #0x10
    // 0x3269e8: ret
    //     0x3269e8: ret             
    // 0x3269ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3269ec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ invoke(/* No info */) {
    // ** addr: 0x3851bc, size: 0xd0
    // 0x3851bc: EnterFrame
    //     0x3851bc: stp             fp, lr, [SP, #-0x10]!
    //     0x3851c0: mov             fp, SP
    // 0x3851c4: AllocStack(0x20)
    //     0x3851c4: sub             SP, SP, #0x20
    // 0x3851c8: SetupParameters(_CopySelectionAction this /* r3, fp-0x10 */, dynamic _ /* r4, fp-0x8 */)
    //     0x3851c8: mov             x0, x4
    //     0x3851cc: ldur            w1, [x0, #0x13]
    //     0x3851d0: add             x1, x1, HEAP, lsl #32
    //     0x3851d4: sub             x0, x1, #4
    //     0x3851d8: add             x3, fp, w0, sxtw #2
    //     0x3851dc: ldr             x3, [x3, #0x18]
    //     0x3851e0: stur            x3, [fp, #-0x10]
    //     0x3851e4: add             x4, fp, w0, sxtw #2
    //     0x3851e8: ldr             x4, [x4, #0x10]
    //     0x3851ec: stur            x4, [fp, #-8]
    // 0x3851f0: CheckStackOverflow
    //     0x3851f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3851f4: cmp             SP, x16
    //     0x3851f8: b.ls            #0x385284
    // 0x3851fc: mov             x0, x4
    // 0x385200: r2 = Null
    //     0x385200: mov             x2, NULL
    // 0x385204: r1 = Null
    //     0x385204: mov             x1, NULL
    // 0x385208: r4 = 59
    //     0x385208: movz            x4, #0x3b
    // 0x38520c: branchIfSmi(r0, 0x385218)
    //     0x38520c: tbz             w0, #0, #0x385218
    // 0x385210: r4 = LoadClassIdInstr(r0)
    //     0x385210: ldur            x4, [x0, #-1]
    //     0x385214: ubfx            x4, x4, #0xc, #0x14
    // 0x385218: cmp             x4, #0x44c
    // 0x38521c: b.eq            #0x385234
    // 0x385220: r8 = CopySelectionTextIntent
    //     0x385220: add             x8, PP, #0x11, lsl #12  ; [pp+0x11358] Type: CopySelectionTextIntent
    //     0x385224: ldr             x8, [x8, #0x358]
    // 0x385228: r3 = Null
    //     0x385228: add             x3, PP, #0x12, lsl #12  ; [pp+0x12620] Null
    //     0x38522c: ldr             x3, [x3, #0x620]
    // 0x385230: r0 = CopySelectionTextIntent()
    //     0x385230: bl              #0x2a4e94  ; IsType_CopySelectionTextIntent_Stub
    // 0x385234: ldur            x0, [fp, #-8]
    // 0x385238: LoadField: r1 = r0->field_b
    //     0x385238: ldur            w1, [x0, #0xb]
    // 0x38523c: DecompressPointer r1
    //     0x38523c: add             x1, x1, HEAP, lsl #32
    // 0x385240: tbnz            w1, #4, #0x38525c
    // 0x385244: ldur            x0, [fp, #-0x10]
    // 0x385248: LoadField: r1 = r0->field_13
    //     0x385248: ldur            w1, [x0, #0x13]
    // 0x38524c: DecompressPointer r1
    //     0x38524c: add             x1, x1, HEAP, lsl #32
    // 0x385250: str             x1, [SP]
    // 0x385254: r0 = initState()
    //     0x385254: bl              #0x2cc79c  ; [package:flutter/src/widgets/scrollable.dart] ScrollableState::initState
    // 0x385258: b               #0x385274
    // 0x38525c: ldur            x0, [fp, #-0x10]
    // 0x385260: LoadField: r1 = r0->field_13
    //     0x385260: ldur            w1, [x0, #0x13]
    // 0x385264: DecompressPointer r1
    //     0x385264: add             x1, x1, HEAP, lsl #32
    // 0x385268: r16 = Instance_SelectionChangedCause
    //     0x385268: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x38526c: stp             x16, x1, [SP]
    // 0x385270: r0 = copySelection()
    //     0x385270: bl              #0x27cbfc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copySelection
    // 0x385274: r0 = Null
    //     0x385274: mov             x0, NULL
    // 0x385278: LeaveFrame
    //     0x385278: mov             SP, fp
    //     0x38527c: ldp             fp, lr, [SP], #0x10
    // 0x385280: ret
    //     0x385280: ret             
    // 0x385284: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x385284: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x385288: b               #0x3851fc
  }
}

// class id: 1200, size: 0x18, field offset: 0x14
class _SelectAllAction extends ContextAction<dynamic> {

  get _ isActionEnabled(/* No info */) {
    // ** addr: 0x326930, size: 0x38
    // 0x326930: EnterFrame
    //     0x326930: stp             fp, lr, [SP, #-0x10]!
    //     0x326934: mov             fp, SP
    // 0x326938: ldr             x1, [fp, #0x10]
    // 0x32693c: LoadField: r2 = r1->field_13
    //     0x32693c: ldur            w2, [x1, #0x13]
    // 0x326940: DecompressPointer r2
    //     0x326940: add             x2, x2, HEAP, lsl #32
    // 0x326944: LoadField: r1 = r2->field_b
    //     0x326944: ldur            w1, [x2, #0xb]
    // 0x326948: DecompressPointer r1
    //     0x326948: add             x1, x1, HEAP, lsl #32
    // 0x32694c: cmp             w1, NULL
    // 0x326950: b.eq            #0x326964
    // 0x326954: r0 = true
    //     0x326954: add             x0, NULL, #0x20  ; true
    // 0x326958: LeaveFrame
    //     0x326958: mov             SP, fp
    //     0x32695c: ldp             fp, lr, [SP], #0x10
    // 0x326960: ret
    //     0x326960: ret             
    // 0x326964: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x326964: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ invoke(/* No info */) {
    // ** addr: 0x38501c, size: 0x1a0
    // 0x38501c: EnterFrame
    //     0x38501c: stp             fp, lr, [SP, #-0x10]!
    //     0x385020: mov             fp, SP
    // 0x385024: AllocStack(0x38)
    //     0x385024: sub             SP, SP, #0x38
    // 0x385028: SetupParameters(_SelectAllAction this /* r3, fp-0x10 */, dynamic _ /* r1 */, [dynamic _ = Null /* r4, fp-0x8 */])
    //     0x385028: mov             x0, x4
    //     0x38502c: ldur            w1, [x0, #0x13]
    //     0x385030: add             x1, x1, HEAP, lsl #32
    //     0x385034: sub             x0, x1, #4
    //     0x385038: add             x3, fp, w0, sxtw #2
    //     0x38503c: ldr             x3, [x3, #0x18]
    //     0x385040: stur            x3, [fp, #-0x10]
    //     0x385044: add             x1, fp, w0, sxtw #2
    //     0x385048: ldr             x1, [x1, #0x10]
    //     0x38504c: cmp             w0, #2
    //     0x385050: b.lt            #0x385064
    //     0x385054: add             x2, fp, w0, sxtw #2
    //     0x385058: ldr             x2, [x2, #8]
    //     0x38505c: mov             x4, x2
    //     0x385060: b               #0x385068
    //     0x385064: mov             x4, NULL
    //     0x385068: stur            x4, [fp, #-8]
    // 0x38506c: CheckStackOverflow
    //     0x38506c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x385070: cmp             SP, x16
    //     0x385074: b.ls            #0x3851ac
    // 0x385078: mov             x0, x1
    // 0x38507c: r2 = Null
    //     0x38507c: mov             x2, NULL
    // 0x385080: r1 = Null
    //     0x385080: mov             x1, NULL
    // 0x385084: r4 = 59
    //     0x385084: movz            x4, #0x3b
    // 0x385088: branchIfSmi(r0, 0x385094)
    //     0x385088: tbz             w0, #0, #0x385094
    // 0x38508c: r4 = LoadClassIdInstr(r0)
    //     0x38508c: ldur            x4, [x0, #-1]
    //     0x385090: ubfx            x4, x4, #0xc, #0x14
    // 0x385094: cmp             x4, #0x44d
    // 0x385098: b.eq            #0x3850b0
    // 0x38509c: r8 = SelectAllTextIntent
    //     0x38509c: add             x8, PP, #0x11, lsl #12  ; [pp+0x11348] Type: SelectAllTextIntent
    //     0x3850a0: ldr             x8, [x8, #0x348]
    // 0x3850a4: r3 = Null
    //     0x3850a4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12648] Null
    //     0x3850a8: ldr             x3, [x3, #0x648]
    // 0x3850ac: r0 = SelectAllTextIntent()
    //     0x3850ac: bl              #0x2a4eb4  ; IsType_SelectAllTextIntent_Stub
    // 0x3850b0: ldur            x0, [fp, #-8]
    // 0x3850b4: cmp             w0, NULL
    // 0x3850b8: b.eq            #0x3851b4
    // 0x3850bc: ldur            x1, [fp, #-0x10]
    // 0x3850c0: LoadField: r2 = r1->field_13
    //     0x3850c0: ldur            w2, [x1, #0x13]
    // 0x3850c4: DecompressPointer r2
    //     0x3850c4: add             x2, x2, HEAP, lsl #32
    // 0x3850c8: LoadField: r1 = r2->field_b
    //     0x3850c8: ldur            w1, [x2, #0xb]
    // 0x3850cc: DecompressPointer r1
    //     0x3850cc: add             x1, x1, HEAP, lsl #32
    // 0x3850d0: cmp             w1, NULL
    // 0x3850d4: b.eq            #0x3851b8
    // 0x3850d8: LoadField: r2 = r1->field_b
    //     0x3850d8: ldur            w2, [x1, #0xb]
    // 0x3850dc: DecompressPointer r2
    //     0x3850dc: add             x2, x2, HEAP, lsl #32
    // 0x3850e0: LoadField: r1 = r2->field_27
    //     0x3850e0: ldur            w1, [x2, #0x27]
    // 0x3850e4: DecompressPointer r1
    //     0x3850e4: add             x1, x1, HEAP, lsl #32
    // 0x3850e8: stur            x1, [fp, #-0x18]
    // 0x3850ec: LoadField: r2 = r1->field_7
    //     0x3850ec: ldur            w2, [x1, #7]
    // 0x3850f0: DecompressPointer r2
    //     0x3850f0: add             x2, x2, HEAP, lsl #32
    // 0x3850f4: LoadField: r3 = r2->field_7
    //     0x3850f4: ldur            w3, [x2, #7]
    // 0x3850f8: DecompressPointer r3
    //     0x3850f8: add             x3, x3, HEAP, lsl #32
    // 0x3850fc: stur            x3, [fp, #-0x10]
    // 0x385100: r0 = TextSelection()
    //     0x385100: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x385104: mov             x1, x0
    // 0x385108: r0 = 0
    //     0x385108: movz            x0, #0
    // 0x38510c: stur            x1, [fp, #-0x20]
    // 0x385110: StoreField: r1->field_17 = r0
    //     0x385110: stur            x0, [x1, #0x17]
    // 0x385114: ldur            x0, [fp, #-0x10]
    // 0x385118: r2 = LoadInt32Instr(r0)
    //     0x385118: sbfx            x2, x0, #1, #0x1f
    // 0x38511c: StoreField: r1->field_1f = r2
    //     0x38511c: stur            x2, [x1, #0x1f]
    // 0x385120: r0 = Instance_TextAffinity
    //     0x385120: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x385124: StoreField: r1->field_27 = r0
    //     0x385124: stur            w0, [x1, #0x27]
    // 0x385128: r0 = false
    //     0x385128: add             x0, NULL, #0x30  ; false
    // 0x38512c: StoreField: r1->field_2b = r0
    //     0x38512c: stur            w0, [x1, #0x2b]
    // 0x385130: cmp             x2, #0
    // 0x385134: r16 = true
    //     0x385134: add             x16, NULL, #0x20  ; true
    // 0x385138: r17 = false
    //     0x385138: add             x17, NULL, #0x30  ; false
    // 0x38513c: csel            x0, x16, x17, gt
    // 0x385140: tbnz            w0, #4, #0x38514c
    // 0x385144: r3 = 0
    //     0x385144: movz            x3, #0
    // 0x385148: b               #0x385150
    // 0x38514c: mov             x3, x2
    // 0x385150: tbz             w0, #4, #0x385158
    // 0x385154: r2 = 0
    //     0x385154: movz            x2, #0
    // 0x385158: ldur            x0, [fp, #-0x18]
    // 0x38515c: StoreField: r1->field_7 = r3
    //     0x38515c: stur            x3, [x1, #7]
    // 0x385160: StoreField: r1->field_f = r2
    //     0x385160: stur            x2, [x1, #0xf]
    // 0x385164: r0 = UpdateSelectionIntent()
    //     0x385164: bl              #0x383800  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0x385168: mov             x1, x0
    // 0x38516c: ldur            x0, [fp, #-0x18]
    // 0x385170: StoreField: r1->field_7 = r0
    //     0x385170: stur            w0, [x1, #7]
    // 0x385174: ldur            x0, [fp, #-0x20]
    // 0x385178: StoreField: r1->field_b = r0
    //     0x385178: stur            w0, [x1, #0xb]
    // 0x38517c: r0 = Instance_SelectionChangedCause
    //     0x38517c: ldr             x0, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x385180: StoreField: r1->field_f = r0
    //     0x385180: stur            w0, [x1, #0xf]
    // 0x385184: r16 = <UpdateSelectionIntent>
    //     0x385184: add             x16, PP, #0x11, lsl #12  ; [pp+0x113a0] TypeArguments: <UpdateSelectionIntent>
    //     0x385188: ldr             x16, [x16, #0x3a0]
    // 0x38518c: ldur            lr, [fp, #-8]
    // 0x385190: stp             lr, x16, [SP, #8]
    // 0x385194: str             x1, [SP]
    // 0x385198: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x385198: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x38519c: r0 = invoke()
    //     0x38519c: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x3851a0: LeaveFrame
    //     0x3851a0: mov             SP, fp
    //     0x3851a4: ldp             fp, lr, [SP], #0x10
    // 0x3851a8: ret
    //     0x3851a8: ret             
    // 0x3851ac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3851ac: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3851b0: b               #0x385078
    // 0x3851b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3851b4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x3851b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3851b8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1201, size: 0x20, field offset: 0x14
class _UpdateTextSelectionVerticallyAction<X0 bound DirectionalCaretMovementIntent> extends ContextAction<X0 bound DirectionalCaretMovementIntent> {

  _ stopCurrentVerticalRunIfSelectionChanges(/* No info */) {
    // ** addr: 0x26eef8, size: 0xd0
    // 0x26eef8: EnterFrame
    //     0x26eef8: stp             fp, lr, [SP, #-0x10]!
    //     0x26eefc: mov             fp, SP
    // 0x26ef00: ldr             x1, [fp, #0x10]
    // 0x26ef04: LoadField: r2 = r1->field_1b
    //     0x26ef04: ldur            w2, [x1, #0x1b]
    // 0x26ef08: DecompressPointer r2
    //     0x26ef08: add             x2, x2, HEAP, lsl #32
    // 0x26ef0c: cmp             w2, NULL
    // 0x26ef10: b.ne            #0x26ef24
    // 0x26ef14: r0 = Null
    //     0x26ef14: mov             x0, NULL
    // 0x26ef18: LeaveFrame
    //     0x26ef18: mov             SP, fp
    //     0x26ef1c: ldp             fp, lr, [SP], #0x10
    // 0x26ef20: ret
    //     0x26ef20: ret             
    // 0x26ef24: LoadField: r3 = r1->field_13
    //     0x26ef24: ldur            w3, [x1, #0x13]
    // 0x26ef28: DecompressPointer r3
    //     0x26ef28: add             x3, x3, HEAP, lsl #32
    // 0x26ef2c: LoadField: r4 = r3->field_b
    //     0x26ef2c: ldur            w4, [x3, #0xb]
    // 0x26ef30: DecompressPointer r4
    //     0x26ef30: add             x4, x4, HEAP, lsl #32
    // 0x26ef34: cmp             w4, NULL
    // 0x26ef38: b.eq            #0x26efc4
    // 0x26ef3c: LoadField: r3 = r4->field_b
    //     0x26ef3c: ldur            w3, [x4, #0xb]
    // 0x26ef40: DecompressPointer r3
    //     0x26ef40: add             x3, x3, HEAP, lsl #32
    // 0x26ef44: LoadField: r4 = r3->field_27
    //     0x26ef44: ldur            w4, [x3, #0x27]
    // 0x26ef48: DecompressPointer r4
    //     0x26ef48: add             x4, x4, HEAP, lsl #32
    // 0x26ef4c: LoadField: r3 = r4->field_b
    //     0x26ef4c: ldur            w3, [x4, #0xb]
    // 0x26ef50: DecompressPointer r3
    //     0x26ef50: add             x3, x3, HEAP, lsl #32
    // 0x26ef54: mov             x0, x3
    // 0x26ef58: StoreField: r1->field_1b = r0
    //     0x26ef58: stur            w0, [x1, #0x1b]
    //     0x26ef5c: ldurb           w16, [x1, #-1]
    //     0x26ef60: ldurb           w17, [x0, #-1]
    //     0x26ef64: and             x16, x17, x16, lsr #2
    //     0x26ef68: tst             x16, HEAP, lsr #32
    //     0x26ef6c: b.eq            #0x26ef74
    //     0x26ef70: bl              #0x3e4608
    // 0x26ef74: LoadField: r4 = r3->field_7
    //     0x26ef74: ldur            x4, [x3, #7]
    // 0x26ef78: tbnz            x4, #0x3f, #0x26efac
    // 0x26ef7c: LoadField: r5 = r3->field_f
    //     0x26ef7c: ldur            x5, [x3, #0xf]
    // 0x26ef80: tbnz            x5, #0x3f, #0x26efac
    // 0x26ef84: cmp             x4, x5
    // 0x26ef88: b.ne            #0x26efac
    // 0x26ef8c: LoadField: r4 = r3->field_17
    //     0x26ef8c: ldur            x4, [x3, #0x17]
    // 0x26ef90: LoadField: r5 = r2->field_17
    //     0x26ef90: ldur            x5, [x2, #0x17]
    // 0x26ef94: cmp             x4, x5
    // 0x26ef98: b.ne            #0x26efac
    // 0x26ef9c: LoadField: r4 = r3->field_1f
    //     0x26ef9c: ldur            x4, [x3, #0x1f]
    // 0x26efa0: LoadField: r3 = r2->field_1f
    //     0x26efa0: ldur            x3, [x2, #0x1f]
    // 0x26efa4: cmp             x4, x3
    // 0x26efa8: b.eq            #0x26efb4
    // 0x26efac: StoreField: r1->field_17 = rNULL
    //     0x26efac: stur            NULL, [x1, #0x17]
    // 0x26efb0: StoreField: r1->field_1b = rNULL
    //     0x26efb0: stur            NULL, [x1, #0x1b]
    // 0x26efb4: r0 = Null
    //     0x26efb4: mov             x0, NULL
    // 0x26efb8: LeaveFrame
    //     0x26efb8: mov             SP, fp
    //     0x26efbc: ldp             fp, lr, [SP], #0x10
    // 0x26efc0: ret
    //     0x26efc0: ret             
    // 0x26efc4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26efc4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ isActionEnabled(/* No info */) {
    // ** addr: 0x3268bc, size: 0x74
    // 0x3268bc: EnterFrame
    //     0x3268bc: stp             fp, lr, [SP, #-0x10]!
    //     0x3268c0: mov             fp, SP
    // 0x3268c4: ldr             x1, [fp, #0x10]
    // 0x3268c8: LoadField: r2 = r1->field_13
    //     0x3268c8: ldur            w2, [x1, #0x13]
    // 0x3268cc: DecompressPointer r2
    //     0x3268cc: add             x2, x2, HEAP, lsl #32
    // 0x3268d0: LoadField: r1 = r2->field_b
    //     0x3268d0: ldur            w1, [x2, #0xb]
    // 0x3268d4: DecompressPointer r1
    //     0x3268d4: add             x1, x1, HEAP, lsl #32
    // 0x3268d8: cmp             w1, NULL
    // 0x3268dc: b.eq            #0x32692c
    // 0x3268e0: LoadField: r2 = r1->field_b
    //     0x3268e0: ldur            w2, [x1, #0xb]
    // 0x3268e4: DecompressPointer r2
    //     0x3268e4: add             x2, x2, HEAP, lsl #32
    // 0x3268e8: LoadField: r1 = r2->field_27
    //     0x3268e8: ldur            w1, [x2, #0x27]
    // 0x3268ec: DecompressPointer r1
    //     0x3268ec: add             x1, x1, HEAP, lsl #32
    // 0x3268f0: LoadField: r2 = r1->field_b
    //     0x3268f0: ldur            w2, [x1, #0xb]
    // 0x3268f4: DecompressPointer r2
    //     0x3268f4: add             x2, x2, HEAP, lsl #32
    // 0x3268f8: LoadField: r1 = r2->field_7
    //     0x3268f8: ldur            x1, [x2, #7]
    // 0x3268fc: tbnz            x1, #0x3f, #0x32691c
    // 0x326900: LoadField: r1 = r2->field_f
    //     0x326900: ldur            x1, [x2, #0xf]
    // 0x326904: tbz             x1, #0x3f, #0x326910
    // 0x326908: r2 = false
    //     0x326908: add             x2, NULL, #0x30  ; false
    // 0x32690c: b               #0x326914
    // 0x326910: r2 = true
    //     0x326910: add             x2, NULL, #0x20  ; true
    // 0x326914: mov             x0, x2
    // 0x326918: b               #0x326920
    // 0x32691c: r0 = false
    //     0x32691c: add             x0, NULL, #0x30  ; false
    // 0x326920: LeaveFrame
    //     0x326920: mov             SP, fp
    //     0x326924: ldp             fp, lr, [SP], #0x10
    // 0x326928: ret
    //     0x326928: ret             
    // 0x32692c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x32692c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ invoke(/* No info */) {
    // ** addr: 0x38380c, size: 0x464
    // 0x38380c: EnterFrame
    //     0x38380c: stp             fp, lr, [SP, #-0x10]!
    //     0x383810: mov             fp, SP
    // 0x383814: AllocStack(0x70)
    //     0x383814: sub             SP, SP, #0x70
    // 0x383818: SetupParameters(_UpdateTextSelectionVerticallyAction<X0 bound DirectionalCaretMovementIntent> this /* r3, fp-0x18 */, dynamic _ /* r4, fp-0x10 */, [dynamic _ = Null /* r5, fp-0x8 */])
    //     0x383818: mov             x0, x4
    //     0x38381c: ldur            w1, [x0, #0x13]
    //     0x383820: add             x1, x1, HEAP, lsl #32
    //     0x383824: sub             x0, x1, #4
    //     0x383828: add             x3, fp, w0, sxtw #2
    //     0x38382c: ldr             x3, [x3, #0x18]
    //     0x383830: stur            x3, [fp, #-0x18]
    //     0x383834: add             x4, fp, w0, sxtw #2
    //     0x383838: ldr             x4, [x4, #0x10]
    //     0x38383c: stur            x4, [fp, #-0x10]
    //     0x383840: cmp             w0, #2
    //     0x383844: b.lt            #0x383858
    //     0x383848: add             x1, fp, w0, sxtw #2
    //     0x38384c: ldr             x1, [x1, #8]
    //     0x383850: mov             x5, x1
    //     0x383854: b               #0x38385c
    //     0x383858: mov             x5, NULL
    //     0x38385c: stur            x5, [fp, #-8]
    // 0x383860: CheckStackOverflow
    //     0x383860: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x383864: cmp             SP, x16
    //     0x383868: b.ls            #0x383c58
    // 0x38386c: LoadField: r2 = r3->field_7
    //     0x38386c: ldur            w2, [x3, #7]
    // 0x383870: DecompressPointer r2
    //     0x383870: add             x2, x2, HEAP, lsl #32
    // 0x383874: mov             x0, x4
    // 0x383878: r1 = Null
    //     0x383878: mov             x1, NULL
    // 0x38387c: cmp             w2, NULL
    // 0x383880: b.eq            #0x3838a4
    // 0x383884: LoadField: r4 = r2->field_17
    //     0x383884: ldur            w4, [x2, #0x17]
    // 0x383888: DecompressPointer r4
    //     0x383888: add             x4, x4, HEAP, lsl #32
    // 0x38388c: r8 = X0 bound DirectionalCaretMovementIntent
    //     0x38388c: add             x8, PP, #0x12, lsl #12  ; [pp+0x12658] TypeParameter: X0 bound DirectionalCaretMovementIntent
    //     0x383890: ldr             x8, [x8, #0x658]
    // 0x383894: LoadField: r9 = r4->field_7
    //     0x383894: ldur            x9, [x4, #7]
    // 0x383898: r3 = Null
    //     0x383898: add             x3, PP, #0x12, lsl #12  ; [pp+0x12660] Null
    //     0x38389c: ldr             x3, [x3, #0x660]
    // 0x3838a0: blr             x9
    // 0x3838a4: ldur            x0, [fp, #-0x10]
    // 0x3838a8: LoadField: r1 = r0->field_b
    //     0x3838a8: ldur            w1, [x0, #0xb]
    // 0x3838ac: DecompressPointer r1
    //     0x3838ac: add             x1, x1, HEAP, lsl #32
    // 0x3838b0: tbnz            w1, #4, #0x3838c0
    // 0x3838b4: ldur            x1, [fp, #-0x18]
    // 0x3838b8: r2 = true
    //     0x3838b8: add             x2, NULL, #0x20  ; true
    // 0x3838bc: b               #0x3838e0
    // 0x3838c0: ldur            x1, [fp, #-0x18]
    // 0x3838c4: LoadField: r2 = r1->field_13
    //     0x3838c4: ldur            w2, [x1, #0x13]
    // 0x3838c8: DecompressPointer r2
    //     0x3838c8: add             x2, x2, HEAP, lsl #32
    // 0x3838cc: LoadField: r3 = r2->field_b
    //     0x3838cc: ldur            w3, [x2, #0xb]
    // 0x3838d0: DecompressPointer r3
    //     0x3838d0: add             x3, x3, HEAP, lsl #32
    // 0x3838d4: cmp             w3, NULL
    // 0x3838d8: b.eq            #0x383c60
    // 0x3838dc: r2 = false
    //     0x3838dc: add             x2, NULL, #0x30  ; false
    // 0x3838e0: stur            x2, [fp, #-0x28]
    // 0x3838e4: LoadField: r3 = r1->field_13
    //     0x3838e4: ldur            w3, [x1, #0x13]
    // 0x3838e8: DecompressPointer r3
    //     0x3838e8: add             x3, x3, HEAP, lsl #32
    // 0x3838ec: stur            x3, [fp, #-0x20]
    // 0x3838f0: str             x3, [SP]
    // 0x3838f4: r0 = _textEditingValueforTextLayoutMetrics()
    //     0x3838f4: bl              #0x384f78  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_textEditingValueforTextLayoutMetrics
    // 0x3838f8: stur            x0, [fp, #-0x38]
    // 0x3838fc: LoadField: r1 = r0->field_b
    //     0x3838fc: ldur            w1, [x0, #0xb]
    // 0x383900: DecompressPointer r1
    //     0x383900: add             x1, x1, HEAP, lsl #32
    // 0x383904: stur            x1, [fp, #-0x30]
    // 0x383908: LoadField: r2 = r1->field_7
    //     0x383908: ldur            x2, [x1, #7]
    // 0x38390c: tbnz            x2, #0x3f, #0x383c48
    // 0x383910: LoadField: r2 = r1->field_f
    //     0x383910: ldur            x2, [x1, #0xf]
    // 0x383914: tbnz            x2, #0x3f, #0x383c48
    // 0x383918: ldur            x2, [fp, #-0x18]
    // 0x38391c: LoadField: r3 = r2->field_17
    //     0x38391c: ldur            w3, [x2, #0x17]
    // 0x383920: DecompressPointer r3
    //     0x383920: add             x3, x3, HEAP, lsl #32
    // 0x383924: cmp             w3, NULL
    // 0x383928: b.ne            #0x383934
    // 0x38392c: mov             x0, x2
    // 0x383930: b               #0x383954
    // 0x383934: str             x3, [SP]
    // 0x383938: r0 = isValid()
    //     0x383938: bl              #0x384ef0  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::isValid
    // 0x38393c: tbz             w0, #4, #0x383950
    // 0x383940: ldur            x0, [fp, #-0x18]
    // 0x383944: StoreField: r0->field_17 = rNULL
    //     0x383944: stur            NULL, [x0, #0x17]
    // 0x383948: StoreField: r0->field_1b = rNULL
    //     0x383948: stur            NULL, [x0, #0x1b]
    // 0x38394c: b               #0x383954
    // 0x383950: ldur            x0, [fp, #-0x18]
    // 0x383954: LoadField: r1 = r0->field_17
    //     0x383954: ldur            w1, [x0, #0x17]
    // 0x383958: DecompressPointer r1
    //     0x383958: add             x1, x1, HEAP, lsl #32
    // 0x38395c: cmp             w1, NULL
    // 0x383960: b.ne            #0x3839ac
    // 0x383964: ldur            x1, [fp, #-0x20]
    // 0x383968: LoadField: r0 = r1->field_ab
    //     0x383968: ldur            w0, [x1, #0xab]
    // 0x38396c: DecompressPointer r0
    //     0x38396c: add             x0, x0, HEAP, lsl #32
    // 0x383970: r16 = Sentinel
    //     0x383970: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x383974: cmp             w0, w16
    // 0x383978: b.ne            #0x383984
    // 0x38397c: r2 = renderEditable
    //     0x38397c: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x383980: r0 = InitLateFinalInstanceField()
    //     0x383980: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x383984: stur            x0, [fp, #-0x40]
    // 0x383988: LoadField: r1 = r0->field_e3
    //     0x383988: ldur            w1, [x0, #0xe3]
    // 0x38398c: DecompressPointer r1
    //     0x38398c: add             x1, x1, HEAP, lsl #32
    // 0x383990: str             x1, [SP]
    // 0x383994: r0 = extent()
    //     0x383994: bl              #0x1fc3bc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x383998: ldur            x16, [fp, #-0x40]
    // 0x38399c: stp             x0, x16, [SP]
    // 0x3839a0: r0 = startVerticalCaretMovement()
    //     0x3839a0: bl              #0x383ffc  ; [package:flutter/src/rendering/editable.dart] RenderEditable::startVerticalCaretMovement
    // 0x3839a4: mov             x2, x0
    // 0x3839a8: b               #0x3839b0
    // 0x3839ac: mov             x2, x1
    // 0x3839b0: ldur            x0, [fp, #-0x10]
    // 0x3839b4: stur            x2, [fp, #-0x48]
    // 0x3839b8: r1 = LoadClassIdInstr(r0)
    //     0x3839b8: ldur            x1, [x0, #-1]
    //     0x3839bc: ubfx            x1, x1, #0xc, #0x14
    // 0x3839c0: cmp             x1, #0x455
    // 0x3839c4: b.ne            #0x383a44
    // 0x3839c8: LoadField: r3 = r0->field_7
    //     0x3839c8: ldur            w3, [x0, #7]
    // 0x3839cc: DecompressPointer r3
    //     0x3839cc: add             x3, x3, HEAP, lsl #32
    // 0x3839d0: stur            x3, [fp, #-0x40]
    // 0x3839d4: tbnz            w3, #4, #0x3839e4
    // 0x3839d8: d0 = 1.000000
    //     0x3839d8: fmov            d0, #1.00000000
    // 0x3839dc: d0 = 1.000000
    //     0x3839dc: fmov            d0, #1.00000000
    // 0x3839e0: b               #0x3839ec
    // 0x3839e4: d0 = -1.000000
    //     0x3839e4: fmov            d0, #-1.00000000
    // 0x3839e8: d0 = -1.000000
    //     0x3839e8: fmov            d0, #-1.00000000
    // 0x3839ec: ldur            x1, [fp, #-0x20]
    // 0x3839f0: stur            d0, [fp, #-0x58]
    // 0x3839f4: LoadField: r0 = r1->field_ab
    //     0x3839f4: ldur            w0, [x1, #0xab]
    // 0x3839f8: DecompressPointer r0
    //     0x3839f8: add             x0, x0, HEAP, lsl #32
    // 0x3839fc: r16 = Sentinel
    //     0x3839fc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x383a00: cmp             w0, w16
    // 0x383a04: b.ne            #0x383a10
    // 0x383a08: r2 = renderEditable
    //     0x383a08: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x383a0c: r0 = InitLateFinalInstanceField()
    //     0x383a0c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x383a10: str             x0, [SP]
    // 0x383a14: r0 = size()
    //     0x383a14: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x383a18: LoadField: d0 = r0->field_f
    //     0x383a18: ldur            d0, [x0, #0xf]
    // 0x383a1c: ldur            d1, [fp, #-0x58]
    // 0x383a20: fmul            d2, d1, d0
    // 0x383a24: ldur            x16, [fp, #-0x48]
    // 0x383a28: str             x16, [SP, #8]
    // 0x383a2c: str             d2, [SP]
    // 0x383a30: r0 = moveByOffset()
    //     0x383a30: bl              #0x383e78  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::moveByOffset
    // 0x383a34: tbz             w0, #4, #0x383a7c
    // 0x383a38: ldur            x1, [fp, #-0x40]
    // 0x383a3c: ldur            x0, [fp, #-0x48]
    // 0x383a40: b               #0x383a94
    // 0x383a44: LoadField: r1 = r0->field_7
    //     0x383a44: ldur            w1, [x0, #7]
    // 0x383a48: DecompressPointer r1
    //     0x383a48: add             x1, x1, HEAP, lsl #32
    // 0x383a4c: stur            x1, [fp, #-0x40]
    // 0x383a50: tbnz            w1, #4, #0x383a6c
    // 0x383a54: ldur            x16, [fp, #-0x48]
    // 0x383a58: str             x16, [SP]
    // 0x383a5c: r0 = moveNext()
    //     0x383a5c: bl              #0x3c9ff4  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::moveNext
    // 0x383a60: tbz             w0, #4, #0x383a7c
    // 0x383a64: ldur            x0, [fp, #-0x48]
    // 0x383a68: b               #0x383a90
    // 0x383a6c: ldur            x16, [fp, #-0x48]
    // 0x383a70: str             x16, [SP]
    // 0x383a74: r0 = movePrevious()
    //     0x383a74: bl              #0x383c70  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::movePrevious
    // 0x383a78: tbnz            w0, #4, #0x383a8c
    // 0x383a7c: ldur            x0, [fp, #-0x48]
    // 0x383a80: LoadField: r1 = r0->field_13
    //     0x383a80: ldur            w1, [x0, #0x13]
    // 0x383a84: DecompressPointer r1
    //     0x383a84: add             x1, x1, HEAP, lsl #32
    // 0x383a88: b               #0x383b00
    // 0x383a8c: ldur            x0, [fp, #-0x48]
    // 0x383a90: ldur            x1, [fp, #-0x40]
    // 0x383a94: tbnz            w1, #4, #0x383af4
    // 0x383a98: ldur            x1, [fp, #-0x20]
    // 0x383a9c: LoadField: r2 = r1->field_b
    //     0x383a9c: ldur            w2, [x1, #0xb]
    // 0x383aa0: DecompressPointer r2
    //     0x383aa0: add             x2, x2, HEAP, lsl #32
    // 0x383aa4: cmp             w2, NULL
    // 0x383aa8: b.eq            #0x383c64
    // 0x383aac: LoadField: r3 = r2->field_b
    //     0x383aac: ldur            w3, [x2, #0xb]
    // 0x383ab0: DecompressPointer r3
    //     0x383ab0: add             x3, x3, HEAP, lsl #32
    // 0x383ab4: LoadField: r2 = r3->field_27
    //     0x383ab4: ldur            w2, [x3, #0x27]
    // 0x383ab8: DecompressPointer r2
    //     0x383ab8: add             x2, x2, HEAP, lsl #32
    // 0x383abc: LoadField: r3 = r2->field_7
    //     0x383abc: ldur            w3, [x2, #7]
    // 0x383ac0: DecompressPointer r3
    //     0x383ac0: add             x3, x3, HEAP, lsl #32
    // 0x383ac4: LoadField: r2 = r3->field_7
    //     0x383ac4: ldur            w2, [x3, #7]
    // 0x383ac8: DecompressPointer r2
    //     0x383ac8: add             x2, x2, HEAP, lsl #32
    // 0x383acc: r3 = LoadInt32Instr(r2)
    //     0x383acc: sbfx            x3, x2, #1, #0x1f
    // 0x383ad0: stur            x3, [fp, #-0x50]
    // 0x383ad4: r0 = TextPosition()
    //     0x383ad4: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x383ad8: mov             x1, x0
    // 0x383adc: ldur            x0, [fp, #-0x50]
    // 0x383ae0: StoreField: r1->field_7 = r0
    //     0x383ae0: stur            x0, [x1, #7]
    // 0x383ae4: r0 = Instance_TextAffinity
    //     0x383ae4: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x383ae8: StoreField: r1->field_f = r0
    //     0x383ae8: stur            w0, [x1, #0xf]
    // 0x383aec: mov             x0, x1
    // 0x383af0: b               #0x383afc
    // 0x383af4: r0 = Instance_TextPosition
    //     0x383af4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12670] Obj!TextPosition@47c051
    //     0x383af8: ldr             x0, [x0, #0x670]
    // 0x383afc: mov             x1, x0
    // 0x383b00: ldur            x0, [fp, #-0x28]
    // 0x383b04: stur            x1, [fp, #-0x10]
    // 0x383b08: tbnz            w0, #4, #0x383b50
    // 0x383b0c: LoadField: r0 = r1->field_7
    //     0x383b0c: ldur            x0, [x1, #7]
    // 0x383b10: stur            x0, [fp, #-0x50]
    // 0x383b14: r0 = TextSelection()
    //     0x383b14: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x383b18: mov             x1, x0
    // 0x383b1c: ldur            x0, [fp, #-0x50]
    // 0x383b20: StoreField: r1->field_17 = r0
    //     0x383b20: stur            x0, [x1, #0x17]
    // 0x383b24: StoreField: r1->field_1f = r0
    //     0x383b24: stur            x0, [x1, #0x1f]
    // 0x383b28: ldur            x2, [fp, #-0x10]
    // 0x383b2c: LoadField: r3 = r2->field_f
    //     0x383b2c: ldur            w3, [x2, #0xf]
    // 0x383b30: DecompressPointer r3
    //     0x383b30: add             x3, x3, HEAP, lsl #32
    // 0x383b34: StoreField: r1->field_27 = r3
    //     0x383b34: stur            w3, [x1, #0x27]
    // 0x383b38: r2 = false
    //     0x383b38: add             x2, NULL, #0x30  ; false
    // 0x383b3c: StoreField: r1->field_2b = r2
    //     0x383b3c: stur            w2, [x1, #0x2b]
    // 0x383b40: StoreField: r1->field_7 = r0
    //     0x383b40: stur            x0, [x1, #7]
    // 0x383b44: StoreField: r1->field_f = r0
    //     0x383b44: stur            x0, [x1, #0xf]
    // 0x383b48: mov             x3, x1
    // 0x383b4c: b               #0x383b64
    // 0x383b50: mov             x2, x1
    // 0x383b54: ldur            x16, [fp, #-0x30]
    // 0x383b58: stp             x2, x16, [SP]
    // 0x383b5c: r0 = extendTo()
    //     0x383b5c: bl              #0x3832cc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extendTo
    // 0x383b60: mov             x3, x0
    // 0x383b64: ldur            x2, [fp, #-8]
    // 0x383b68: ldur            x0, [fp, #-0x20]
    // 0x383b6c: ldur            x1, [fp, #-0x38]
    // 0x383b70: stur            x3, [fp, #-0x10]
    // 0x383b74: cmp             w2, NULL
    // 0x383b78: b.eq            #0x383c68
    // 0x383b7c: r0 = UpdateSelectionIntent()
    //     0x383b7c: bl              #0x383800  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0x383b80: mov             x1, x0
    // 0x383b84: ldur            x0, [fp, #-0x38]
    // 0x383b88: StoreField: r1->field_7 = r0
    //     0x383b88: stur            w0, [x1, #7]
    // 0x383b8c: ldur            x0, [fp, #-0x10]
    // 0x383b90: StoreField: r1->field_b = r0
    //     0x383b90: stur            w0, [x1, #0xb]
    // 0x383b94: r2 = Instance_SelectionChangedCause
    //     0x383b94: ldr             x2, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x383b98: StoreField: r1->field_f = r2
    //     0x383b98: stur            w2, [x1, #0xf]
    // 0x383b9c: r16 = <UpdateSelectionIntent>
    //     0x383b9c: add             x16, PP, #0x11, lsl #12  ; [pp+0x113a0] TypeArguments: <UpdateSelectionIntent>
    //     0x383ba0: ldr             x16, [x16, #0x3a0]
    // 0x383ba4: ldur            lr, [fp, #-8]
    // 0x383ba8: stp             lr, x16, [SP, #8]
    // 0x383bac: str             x1, [SP]
    // 0x383bb0: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x383bb0: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x383bb4: r0 = invoke()
    //     0x383bb4: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x383bb8: ldur            x0, [fp, #-0x20]
    // 0x383bbc: LoadField: r1 = r0->field_b
    //     0x383bbc: ldur            w1, [x0, #0xb]
    // 0x383bc0: DecompressPointer r1
    //     0x383bc0: add             x1, x1, HEAP, lsl #32
    // 0x383bc4: cmp             w1, NULL
    // 0x383bc8: b.eq            #0x383c6c
    // 0x383bcc: LoadField: r0 = r1->field_b
    //     0x383bcc: ldur            w0, [x1, #0xb]
    // 0x383bd0: DecompressPointer r0
    //     0x383bd0: add             x0, x0, HEAP, lsl #32
    // 0x383bd4: LoadField: r1 = r0->field_27
    //     0x383bd4: ldur            w1, [x0, #0x27]
    // 0x383bd8: DecompressPointer r1
    //     0x383bd8: add             x1, x1, HEAP, lsl #32
    // 0x383bdc: LoadField: r0 = r1->field_b
    //     0x383bdc: ldur            w0, [x1, #0xb]
    // 0x383be0: DecompressPointer r0
    //     0x383be0: add             x0, x0, HEAP, lsl #32
    // 0x383be4: ldur            x16, [fp, #-0x10]
    // 0x383be8: stp             x16, x0, [SP]
    // 0x383bec: r0 = ==()
    //     0x383bec: bl              #0x35311c  ; [package:flutter/src/services/text_editing.dart] TextSelection::==
    // 0x383bf0: tbnz            w0, #4, #0x383c38
    // 0x383bf4: ldur            x1, [fp, #-0x18]
    // 0x383bf8: ldur            x0, [fp, #-0x48]
    // 0x383bfc: StoreField: r1->field_17 = r0
    //     0x383bfc: stur            w0, [x1, #0x17]
    //     0x383c00: ldurb           w16, [x1, #-1]
    //     0x383c04: ldurb           w17, [x0, #-1]
    //     0x383c08: and             x16, x17, x16, lsr #2
    //     0x383c0c: tst             x16, HEAP, lsr #32
    //     0x383c10: b.eq            #0x383c18
    //     0x383c14: bl              #0x3e4608
    // 0x383c18: ldur            x0, [fp, #-0x10]
    // 0x383c1c: StoreField: r1->field_1b = r0
    //     0x383c1c: stur            w0, [x1, #0x1b]
    //     0x383c20: ldurb           w16, [x1, #-1]
    //     0x383c24: ldurb           w17, [x0, #-1]
    //     0x383c28: and             x16, x17, x16, lsr #2
    //     0x383c2c: tst             x16, HEAP, lsr #32
    //     0x383c30: b.eq            #0x383c38
    //     0x383c34: bl              #0x3e4608
    // 0x383c38: r0 = Null
    //     0x383c38: mov             x0, NULL
    // 0x383c3c: LeaveFrame
    //     0x383c3c: mov             SP, fp
    //     0x383c40: ldp             fp, lr, [SP], #0x10
    // 0x383c44: ret
    //     0x383c44: ret             
    // 0x383c48: r0 = Null
    //     0x383c48: mov             x0, NULL
    // 0x383c4c: LeaveFrame
    //     0x383c4c: mov             SP, fp
    //     0x383c50: ldp             fp, lr, [SP], #0x10
    // 0x383c54: ret
    //     0x383c54: ret             
    // 0x383c58: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x383c58: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x383c5c: b               #0x38386c
    // 0x383c60: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x383c60: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x383c64: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x383c64: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x383c68: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x383c68: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x383c6c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x383c6c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1202, size: 0x2c, field offset: 0x14
class _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> extends ContextAction<X0 bound DirectionalCaretMovementIntent> {

  _ _UpdateTextSelectionAction(/* No info */) {
    // ** addr: 0x2a4ab8, size: 0x1dc
    // 0x2a4ab8: EnterFrame
    //     0x2a4ab8: stp             fp, lr, [SP, #-0x10]!
    //     0x2a4abc: mov             fp, SP
    // 0x2a4ac0: AllocStack(0x20)
    //     0x2a4ac0: sub             SP, SP, #0x20
    // 0x2a4ac4: SetupParameters(_UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> this /* r3, fp-0x8 */, dynamic _ /* r4 */, dynamic _ /* r5 */, dynamic _ /* r6 */, dynamic _ /* r7 */, {dynamic extentAtIndex = false /* r8 */, dynamic isExpand = false /* r1 */})
    //     0x2a4ac4: mov             x0, x4
    //     0x2a4ac8: ldur            w1, [x0, #0x13]
    //     0x2a4acc: add             x1, x1, HEAP, lsl #32
    //     0x2a4ad0: sub             x2, x1, #0xa
    //     0x2a4ad4: add             x3, fp, w2, sxtw #2
    //     0x2a4ad8: ldr             x3, [x3, #0x30]
    //     0x2a4adc: stur            x3, [fp, #-8]
    //     0x2a4ae0: add             x4, fp, w2, sxtw #2
    //     0x2a4ae4: ldr             x4, [x4, #0x28]
    //     0x2a4ae8: add             x5, fp, w2, sxtw #2
    //     0x2a4aec: ldr             x5, [x5, #0x20]
    //     0x2a4af0: add             x6, fp, w2, sxtw #2
    //     0x2a4af4: ldr             x6, [x6, #0x18]
    //     0x2a4af8: add             x7, fp, w2, sxtw #2
    //     0x2a4afc: ldr             x7, [x7, #0x10]
    //     0x2a4b00: ldur            w2, [x0, #0x1f]
    //     0x2a4b04: add             x2, x2, HEAP, lsl #32
    //     0x2a4b08: add             x16, PP, #0x11, lsl #12  ; [pp+0x113b0] "extentAtIndex"
    //     0x2a4b0c: ldr             x16, [x16, #0x3b0]
    //     0x2a4b10: cmp             w2, w16
    //     0x2a4b14: b.ne            #0x2a4b38
    //     0x2a4b18: ldur            w2, [x0, #0x23]
    //     0x2a4b1c: add             x2, x2, HEAP, lsl #32
    //     0x2a4b20: sub             w8, w1, w2
    //     0x2a4b24: add             x2, fp, w8, sxtw #2
    //     0x2a4b28: ldr             x2, [x2, #8]
    //     0x2a4b2c: mov             x8, x2
    //     0x2a4b30: movz            x2, #0x1
    //     0x2a4b34: b               #0x2a4b40
    //     0x2a4b38: add             x8, NULL, #0x30  ; false
    //     0x2a4b3c: movz            x2, #0
    //     0x2a4b40: lsl             x9, x2, #1
    //     0x2a4b44: lsl             w2, w9, #1
    //     0x2a4b48: add             w9, w2, #8
    //     0x2a4b4c: add             x16, x0, w9, sxtw #1
    //     0x2a4b50: ldur            w10, [x16, #0xf]
    //     0x2a4b54: add             x10, x10, HEAP, lsl #32
    //     0x2a4b58: add             x16, PP, #0x11, lsl #12  ; [pp+0x113b8] "isExpand"
    //     0x2a4b5c: ldr             x16, [x16, #0x3b8]
    //     0x2a4b60: cmp             w10, w16
    //     0x2a4b64: b.ne            #0x2a4b88
    //     0x2a4b68: add             w9, w2, #0xa
    //     0x2a4b6c: add             x16, x0, w9, sxtw #1
    //     0x2a4b70: ldur            w2, [x16, #0xf]
    //     0x2a4b74: add             x2, x2, HEAP, lsl #32
    //     0x2a4b78: sub             w0, w1, w2
    //     0x2a4b7c: add             x1, fp, w0, sxtw #2
    //     0x2a4b80: ldr             x1, [x1, #8]
    //     0x2a4b84: b               #0x2a4b8c
    //     0x2a4b88: add             x1, NULL, #0x30  ; false
    // 0x2a4b8c: CheckStackOverflow
    //     0x2a4b8c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a4b90: cmp             SP, x16
    //     0x2a4b94: b.ls            #0x2a4c8c
    // 0x2a4b98: mov             x0, x4
    // 0x2a4b9c: StoreField: r3->field_13 = r0
    //     0x2a4b9c: stur            w0, [x3, #0x13]
    //     0x2a4ba0: ldurb           w16, [x3, #-1]
    //     0x2a4ba4: ldurb           w17, [x0, #-1]
    //     0x2a4ba8: and             x16, x17, x16, lsr #2
    //     0x2a4bac: tst             x16, HEAP, lsr #32
    //     0x2a4bb0: b.eq            #0x2a4bb8
    //     0x2a4bb4: bl              #0x3e4648
    // 0x2a4bb8: mov             x0, x5
    // 0x2a4bbc: StoreField: r3->field_23 = r0
    //     0x2a4bbc: stur            w0, [x3, #0x23]
    //     0x2a4bc0: ldurb           w16, [x3, #-1]
    //     0x2a4bc4: ldurb           w17, [x0, #-1]
    //     0x2a4bc8: and             x16, x17, x16, lsr #2
    //     0x2a4bcc: tst             x16, HEAP, lsr #32
    //     0x2a4bd0: b.eq            #0x2a4bd8
    //     0x2a4bd4: bl              #0x3e4648
    // 0x2a4bd8: mov             x0, x6
    // 0x2a4bdc: StoreField: r3->field_27 = r0
    //     0x2a4bdc: stur            w0, [x3, #0x27]
    //     0x2a4be0: ldurb           w16, [x3, #-1]
    //     0x2a4be4: ldurb           w17, [x0, #-1]
    //     0x2a4be8: and             x16, x17, x16, lsr #2
    //     0x2a4bec: tst             x16, HEAP, lsr #32
    //     0x2a4bf0: b.eq            #0x2a4bf8
    //     0x2a4bf4: bl              #0x3e4648
    // 0x2a4bf8: StoreField: r3->field_17 = r7
    //     0x2a4bf8: stur            w7, [x3, #0x17]
    // 0x2a4bfc: StoreField: r3->field_1b = r1
    //     0x2a4bfc: stur            w1, [x3, #0x1b]
    // 0x2a4c00: StoreField: r3->field_1f = r8
    //     0x2a4c00: stur            w8, [x3, #0x1f]
    // 0x2a4c04: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4c04: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4c08: ldr             x1, [x1, #0xb18]
    // 0x2a4c0c: r0 = ObserverList()
    //     0x2a4c0c: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4c10: mov             x1, x0
    // 0x2a4c14: r0 = false
    //     0x2a4c14: add             x0, NULL, #0x30  ; false
    // 0x2a4c18: stur            x1, [fp, #-0x10]
    // 0x2a4c1c: StoreField: r1->field_f = r0
    //     0x2a4c1c: stur            w0, [x1, #0xf]
    // 0x2a4c20: r0 = Sentinel
    //     0x2a4c20: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4c24: StoreField: r1->field_13 = r0
    //     0x2a4c24: stur            w0, [x1, #0x13]
    // 0x2a4c28: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4c28: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4c2c: ldr             x16, [x16, #0xb18]
    // 0x2a4c30: stp             xzr, x16, [SP]
    // 0x2a4c34: r0 = _GrowableList()
    //     0x2a4c34: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a4c38: ldur            x1, [fp, #-0x10]
    // 0x2a4c3c: StoreField: r1->field_b = r0
    //     0x2a4c3c: stur            w0, [x1, #0xb]
    //     0x2a4c40: ldurb           w16, [x1, #-1]
    //     0x2a4c44: ldurb           w17, [x0, #-1]
    //     0x2a4c48: and             x16, x17, x16, lsr #2
    //     0x2a4c4c: tst             x16, HEAP, lsr #32
    //     0x2a4c50: b.eq            #0x2a4c58
    //     0x2a4c54: bl              #0x3e4608
    // 0x2a4c58: mov             x0, x1
    // 0x2a4c5c: ldur            x1, [fp, #-8]
    // 0x2a4c60: StoreField: r1->field_b = r0
    //     0x2a4c60: stur            w0, [x1, #0xb]
    //     0x2a4c64: ldurb           w16, [x1, #-1]
    //     0x2a4c68: ldurb           w17, [x0, #-1]
    //     0x2a4c6c: and             x16, x17, x16, lsr #2
    //     0x2a4c70: tst             x16, HEAP, lsr #32
    //     0x2a4c74: b.eq            #0x2a4c7c
    //     0x2a4c78: bl              #0x3e4608
    // 0x2a4c7c: r0 = Null
    //     0x2a4c7c: mov             x0, NULL
    // 0x2a4c80: LeaveFrame
    //     0x2a4c80: mov             SP, fp
    //     0x2a4c84: ldp             fp, lr, [SP], #0x10
    // 0x2a4c88: ret
    //     0x2a4c88: ret             
    // 0x2a4c8c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a4c8c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a4c90: b               #0x2a4b98
  }
  _ invoke(/* No info */) {
    // ** addr: 0x382d50, size: 0x57c
    // 0x382d50: EnterFrame
    //     0x382d50: stp             fp, lr, [SP, #-0x10]!
    //     0x382d54: mov             fp, SP
    // 0x382d58: AllocStack(0x80)
    //     0x382d58: sub             SP, SP, #0x80
    // 0x382d5c: SetupParameters(_UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> this /* r3, fp-0x18 */, dynamic _ /* r4, fp-0x10 */, [dynamic _ = Null /* r5, fp-0x8 */])
    //     0x382d5c: mov             x0, x4
    //     0x382d60: ldur            w1, [x0, #0x13]
    //     0x382d64: add             x1, x1, HEAP, lsl #32
    //     0x382d68: sub             x0, x1, #4
    //     0x382d6c: add             x3, fp, w0, sxtw #2
    //     0x382d70: ldr             x3, [x3, #0x18]
    //     0x382d74: stur            x3, [fp, #-0x18]
    //     0x382d78: add             x4, fp, w0, sxtw #2
    //     0x382d7c: ldr             x4, [x4, #0x10]
    //     0x382d80: stur            x4, [fp, #-0x10]
    //     0x382d84: cmp             w0, #2
    //     0x382d88: b.lt            #0x382d9c
    //     0x382d8c: add             x1, fp, w0, sxtw #2
    //     0x382d90: ldr             x1, [x1, #8]
    //     0x382d94: mov             x5, x1
    //     0x382d98: b               #0x382da0
    //     0x382d9c: mov             x5, NULL
    //     0x382da0: stur            x5, [fp, #-8]
    // 0x382da4: CheckStackOverflow
    //     0x382da4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x382da8: cmp             SP, x16
    //     0x382dac: b.ls            #0x3832b4
    // 0x382db0: LoadField: r2 = r3->field_7
    //     0x382db0: ldur            w2, [x3, #7]
    // 0x382db4: DecompressPointer r2
    //     0x382db4: add             x2, x2, HEAP, lsl #32
    // 0x382db8: mov             x0, x4
    // 0x382dbc: r1 = Null
    //     0x382dbc: mov             x1, NULL
    // 0x382dc0: cmp             w2, NULL
    // 0x382dc4: b.eq            #0x382de8
    // 0x382dc8: LoadField: r4 = r2->field_17
    //     0x382dc8: ldur            w4, [x2, #0x17]
    // 0x382dcc: DecompressPointer r4
    //     0x382dcc: add             x4, x4, HEAP, lsl #32
    // 0x382dd0: r8 = X0 bound DirectionalCaretMovementIntent
    //     0x382dd0: add             x8, PP, #0x12, lsl #12  ; [pp+0x126d0] TypeParameter: X0 bound DirectionalCaretMovementIntent
    //     0x382dd4: ldr             x8, [x8, #0x6d0]
    // 0x382dd8: LoadField: r9 = r4->field_7
    //     0x382dd8: ldur            x9, [x4, #7]
    // 0x382ddc: r3 = Null
    //     0x382ddc: add             x3, PP, #0x12, lsl #12  ; [pp+0x126d8] Null
    //     0x382de0: ldr             x3, [x3, #0x6d8]
    // 0x382de4: blr             x9
    // 0x382de8: ldur            x0, [fp, #-0x18]
    // 0x382dec: LoadField: r1 = r0->field_13
    //     0x382dec: ldur            w1, [x0, #0x13]
    // 0x382df0: DecompressPointer r1
    //     0x382df0: add             x1, x1, HEAP, lsl #32
    // 0x382df4: stur            x1, [fp, #-0x58]
    // 0x382df8: LoadField: r2 = r1->field_b
    //     0x382df8: ldur            w2, [x1, #0xb]
    // 0x382dfc: DecompressPointer r2
    //     0x382dfc: add             x2, x2, HEAP, lsl #32
    // 0x382e00: cmp             w2, NULL
    // 0x382e04: b.eq            #0x3832bc
    // 0x382e08: LoadField: r3 = r2->field_b
    //     0x382e08: ldur            w3, [x2, #0xb]
    // 0x382e0c: DecompressPointer r3
    //     0x382e0c: add             x3, x3, HEAP, lsl #32
    // 0x382e10: LoadField: r2 = r3->field_27
    //     0x382e10: ldur            w2, [x3, #0x27]
    // 0x382e14: DecompressPointer r2
    //     0x382e14: add             x2, x2, HEAP, lsl #32
    // 0x382e18: stur            x2, [fp, #-0x28]
    // 0x382e1c: LoadField: r3 = r2->field_b
    //     0x382e1c: ldur            w3, [x2, #0xb]
    // 0x382e20: DecompressPointer r3
    //     0x382e20: add             x3, x3, HEAP, lsl #32
    // 0x382e24: ldur            x4, [fp, #-0x10]
    // 0x382e28: stur            x3, [fp, #-0x50]
    // 0x382e2c: LoadField: r5 = r4->field_b
    //     0x382e2c: ldur            w5, [x4, #0xb]
    // 0x382e30: DecompressPointer r5
    //     0x382e30: add             x5, x5, HEAP, lsl #32
    // 0x382e34: tbnz            w5, #4, #0x382e40
    // 0x382e38: r5 = true
    //     0x382e38: add             x5, NULL, #0x20  ; true
    // 0x382e3c: b               #0x382e44
    // 0x382e40: r5 = false
    //     0x382e40: add             x5, NULL, #0x30  ; false
    // 0x382e44: stur            x5, [fp, #-0x48]
    // 0x382e48: LoadField: r6 = r3->field_7
    //     0x382e48: ldur            x6, [x3, #7]
    // 0x382e4c: stur            x6, [fp, #-0x40]
    // 0x382e50: LoadField: r7 = r3->field_f
    //     0x382e50: ldur            x7, [x3, #0xf]
    // 0x382e54: stur            x7, [fp, #-0x38]
    // 0x382e58: cmp             x6, x7
    // 0x382e5c: b.eq            #0x382f2c
    // 0x382e60: LoadField: r8 = r0->field_17
    //     0x382e60: ldur            w8, [x0, #0x17]
    // 0x382e64: DecompressPointer r8
    //     0x382e64: add             x8, x8, HEAP, lsl #32
    // 0x382e68: tbz             w8, #4, #0x382f1c
    // 0x382e6c: tbnz            w5, #4, #0x382f0c
    // 0x382e70: ldur            x0, [fp, #-8]
    // 0x382e74: cmp             w0, NULL
    // 0x382e78: b.eq            #0x3832c0
    // 0x382e7c: LoadField: r1 = r4->field_7
    //     0x382e7c: ldur            w1, [x4, #7]
    // 0x382e80: DecompressPointer r1
    //     0x382e80: add             x1, x1, HEAP, lsl #32
    // 0x382e84: tbnz            w1, #4, #0x382e90
    // 0x382e88: mov             x1, x7
    // 0x382e8c: b               #0x382e94
    // 0x382e90: mov             x1, x6
    // 0x382e94: stur            x1, [fp, #-0x20]
    // 0x382e98: r0 = TextSelection()
    //     0x382e98: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x382e9c: r2 = Instance_TextAffinity
    //     0x382e9c: ldr             x2, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x382ea0: stur            x0, [fp, #-0x30]
    // 0x382ea4: StoreField: r0->field_27 = r2
    //     0x382ea4: stur            w2, [x0, #0x27]
    // 0x382ea8: ldur            x1, [fp, #-0x20]
    // 0x382eac: StoreField: r0->field_17 = r1
    //     0x382eac: stur            x1, [x0, #0x17]
    // 0x382eb0: StoreField: r0->field_1f = r1
    //     0x382eb0: stur            x1, [x0, #0x1f]
    // 0x382eb4: r8 = false
    //     0x382eb4: add             x8, NULL, #0x30  ; false
    // 0x382eb8: StoreField: r0->field_2b = r8
    //     0x382eb8: stur            w8, [x0, #0x2b]
    // 0x382ebc: StoreField: r0->field_7 = r1
    //     0x382ebc: stur            x1, [x0, #7]
    // 0x382ec0: StoreField: r0->field_f = r1
    //     0x382ec0: stur            x1, [x0, #0xf]
    // 0x382ec4: r0 = UpdateSelectionIntent()
    //     0x382ec4: bl              #0x383800  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0x382ec8: mov             x1, x0
    // 0x382ecc: ldur            x0, [fp, #-0x28]
    // 0x382ed0: StoreField: r1->field_7 = r0
    //     0x382ed0: stur            w0, [x1, #7]
    // 0x382ed4: ldur            x0, [fp, #-0x30]
    // 0x382ed8: StoreField: r1->field_b = r0
    //     0x382ed8: stur            w0, [x1, #0xb]
    // 0x382edc: r9 = Instance_SelectionChangedCause
    //     0x382edc: ldr             x9, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x382ee0: StoreField: r1->field_f = r9
    //     0x382ee0: stur            w9, [x1, #0xf]
    // 0x382ee4: r16 = <UpdateSelectionIntent>
    //     0x382ee4: add             x16, PP, #0x11, lsl #12  ; [pp+0x113a0] TypeArguments: <UpdateSelectionIntent>
    //     0x382ee8: ldr             x16, [x16, #0x3a0]
    // 0x382eec: ldur            lr, [fp, #-8]
    // 0x382ef0: stp             lr, x16, [SP, #8]
    // 0x382ef4: str             x1, [SP]
    // 0x382ef8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x382ef8: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x382efc: r0 = invoke()
    //     0x382efc: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x382f00: LeaveFrame
    //     0x382f00: mov             SP, fp
    //     0x382f04: ldp             fp, lr, [SP], #0x10
    // 0x382f08: ret
    //     0x382f08: ret             
    // 0x382f0c: r8 = false
    //     0x382f0c: add             x8, NULL, #0x30  ; false
    // 0x382f10: r9 = Instance_SelectionChangedCause
    //     0x382f10: ldr             x9, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x382f14: r2 = Instance_TextAffinity
    //     0x382f14: ldr             x2, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x382f18: b               #0x382f38
    // 0x382f1c: r8 = false
    //     0x382f1c: add             x8, NULL, #0x30  ; false
    // 0x382f20: r9 = Instance_SelectionChangedCause
    //     0x382f20: ldr             x9, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x382f24: r2 = Instance_TextAffinity
    //     0x382f24: ldr             x2, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x382f28: b               #0x382f38
    // 0x382f2c: r8 = false
    //     0x382f2c: add             x8, NULL, #0x30  ; false
    // 0x382f30: r9 = Instance_SelectionChangedCause
    //     0x382f30: ldr             x9, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x382f34: r2 = Instance_TextAffinity
    //     0x382f34: ldr             x2, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x382f38: str             x3, [SP]
    // 0x382f3c: r0 = extent()
    //     0x382f3c: bl              #0x1fc3bc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x382f40: mov             x1, x0
    // 0x382f44: ldur            x0, [fp, #-0x10]
    // 0x382f48: stur            x1, [fp, #-0x30]
    // 0x382f4c: LoadField: r2 = r0->field_13
    //     0x382f4c: ldur            w2, [x0, #0x13]
    // 0x382f50: DecompressPointer r2
    //     0x382f50: add             x2, x2, HEAP, lsl #32
    // 0x382f54: tbnz            w2, #4, #0x383000
    // 0x382f58: LoadField: r2 = r0->field_7
    //     0x382f58: ldur            w2, [x0, #7]
    // 0x382f5c: DecompressPointer r2
    //     0x382f5c: add             x2, x2, HEAP, lsl #32
    // 0x382f60: stur            x2, [fp, #-0x28]
    // 0x382f64: tbnz            w2, #4, #0x382fac
    // 0x382f68: ldur            x16, [fp, #-0x18]
    // 0x382f6c: stp             x1, x16, [SP]
    // 0x382f70: r0 = _isAtWordwrapUpstream()
    //     0x382f70: bl              #0x3836bc  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_isAtWordwrapUpstream
    // 0x382f74: tbnz            w0, #4, #0x382fa4
    // 0x382f78: ldur            x0, [fp, #-0x30]
    // 0x382f7c: LoadField: r1 = r0->field_7
    //     0x382f7c: ldur            x1, [x0, #7]
    // 0x382f80: stur            x1, [fp, #-0x20]
    // 0x382f84: r0 = TextPosition()
    //     0x382f84: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x382f88: mov             x1, x0
    // 0x382f8c: ldur            x0, [fp, #-0x20]
    // 0x382f90: StoreField: r1->field_7 = r0
    //     0x382f90: stur            x0, [x1, #7]
    // 0x382f94: r0 = Instance_TextAffinity
    //     0x382f94: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x382f98: StoreField: r1->field_f = r0
    //     0x382f98: stur            w0, [x1, #0xf]
    // 0x382f9c: mov             x0, x1
    // 0x382fa0: b               #0x382ff8
    // 0x382fa4: ldur            x0, [fp, #-0x30]
    // 0x382fa8: b               #0x382fb0
    // 0x382fac: mov             x0, x1
    // 0x382fb0: ldur            x1, [fp, #-0x28]
    // 0x382fb4: tbz             w1, #4, #0x382ff8
    // 0x382fb8: ldur            x16, [fp, #-0x18]
    // 0x382fbc: stp             x0, x16, [SP]
    // 0x382fc0: r0 = _isAtWordwrapDownstream()
    //     0x382fc0: bl              #0x38358c  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_isAtWordwrapDownstream
    // 0x382fc4: tbnz            w0, #4, #0x382ff4
    // 0x382fc8: ldur            x0, [fp, #-0x30]
    // 0x382fcc: LoadField: r1 = r0->field_7
    //     0x382fcc: ldur            x1, [x0, #7]
    // 0x382fd0: stur            x1, [fp, #-0x20]
    // 0x382fd4: r0 = TextPosition()
    //     0x382fd4: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x382fd8: mov             x1, x0
    // 0x382fdc: ldur            x0, [fp, #-0x20]
    // 0x382fe0: StoreField: r1->field_7 = r0
    //     0x382fe0: stur            x0, [x1, #7]
    // 0x382fe4: r0 = Instance_TextAffinity
    //     0x382fe4: ldr             x0, [PP, #0x5328]  ; [pp+0x5328] Obj!TextAffinity@482141
    // 0x382fe8: StoreField: r1->field_f = r0
    //     0x382fe8: stur            w0, [x1, #0xf]
    // 0x382fec: mov             x0, x1
    // 0x382ff0: b               #0x382ff8
    // 0x382ff4: ldur            x0, [fp, #-0x30]
    // 0x382ff8: mov             x1, x0
    // 0x382ffc: b               #0x383008
    // 0x383000: mov             x0, x1
    // 0x383004: mov             x1, x0
    // 0x383008: ldur            x0, [fp, #-0x18]
    // 0x38300c: LoadField: r2 = r0->field_1b
    //     0x38300c: ldur            w2, [x0, #0x1b]
    // 0x383010: DecompressPointer r2
    //     0x383010: add             x2, x2, HEAP, lsl #32
    // 0x383014: stur            x2, [fp, #-0x28]
    // 0x383018: tbnz            w2, #4, #0x383068
    // 0x38301c: ldur            x3, [fp, #-0x10]
    // 0x383020: LoadField: r4 = r3->field_7
    //     0x383020: ldur            w4, [x3, #7]
    // 0x383024: DecompressPointer r4
    //     0x383024: add             x4, x4, HEAP, lsl #32
    // 0x383028: tbnz            w4, #4, #0x383044
    // 0x38302c: ldur            x4, [fp, #-0x50]
    // 0x383030: LoadField: r5 = r4->field_17
    //     0x383030: ldur            x5, [x4, #0x17]
    // 0x383034: LoadField: r6 = r4->field_1f
    //     0x383034: ldur            x6, [x4, #0x1f]
    // 0x383038: cmp             x5, x6
    // 0x38303c: b.le            #0x383068
    // 0x383040: b               #0x383058
    // 0x383044: ldur            x4, [fp, #-0x50]
    // 0x383048: LoadField: r5 = r4->field_17
    //     0x383048: ldur            x5, [x4, #0x17]
    // 0x38304c: LoadField: r6 = r4->field_1f
    //     0x38304c: ldur            x6, [x4, #0x1f]
    // 0x383050: cmp             x5, x6
    // 0x383054: b.ge            #0x383068
    // 0x383058: str             x4, [SP]
    // 0x38305c: r0 = base()
    //     0x38305c: bl              #0x241e04  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0x383060: mov             x4, x0
    // 0x383064: b               #0x38306c
    // 0x383068: mov             x4, x1
    // 0x38306c: ldur            x1, [fp, #-0x18]
    // 0x383070: ldur            x2, [fp, #-0x10]
    // 0x383074: ldur            x3, [fp, #-0x48]
    // 0x383078: stur            x4, [fp, #-0x60]
    // 0x38307c: LoadField: r5 = r2->field_7
    //     0x38307c: ldur            w5, [x2, #7]
    // 0x383080: DecompressPointer r5
    //     0x383080: add             x5, x5, HEAP, lsl #32
    // 0x383084: stur            x5, [fp, #-0x30]
    // 0x383088: LoadField: r0 = r1->field_23
    //     0x383088: ldur            w0, [x1, #0x23]
    // 0x38308c: DecompressPointer r0
    //     0x38308c: add             x0, x0, HEAP, lsl #32
    // 0x383090: str             x0, [SP]
    // 0x383094: ClosureCall
    //     0x383094: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x383098: ldur            x2, [x0, #0x1f]
    //     0x38309c: blr             x2
    // 0x3830a0: ldur            x1, [fp, #-0x18]
    // 0x3830a4: LoadField: r2 = r1->field_27
    //     0x3830a4: ldur            w2, [x1, #0x27]
    // 0x3830a8: DecompressPointer r2
    //     0x3830a8: add             x2, x2, HEAP, lsl #32
    // 0x3830ac: ldur            x16, [fp, #-0x60]
    // 0x3830b0: stp             x16, x2, [SP, #0x10]
    // 0x3830b4: ldur            x16, [fp, #-0x30]
    // 0x3830b8: stp             x0, x16, [SP]
    // 0x3830bc: mov             x0, x2
    // 0x3830c0: ClosureCall
    //     0x3830c0: ldr             x4, [PP, #0xb0]  ; [pp+0xb0] List(5) [0, 0x4, 0x4, 0x4, Null]
    //     0x3830c4: ldur            x2, [x0, #0x1f]
    //     0x3830c8: blr             x2
    // 0x3830cc: mov             x1, x0
    // 0x3830d0: ldur            x0, [fp, #-0x48]
    // 0x3830d4: stur            x1, [fp, #-0x30]
    // 0x3830d8: tbnz            w0, #4, #0x3830e4
    // 0x3830dc: ldur            x2, [fp, #-0x50]
    // 0x3830e0: b               #0x383100
    // 0x3830e4: ldur            x0, [fp, #-0x28]
    // 0x3830e8: tbz             w0, #4, #0x38314c
    // 0x3830ec: ldur            x2, [fp, #-0x50]
    // 0x3830f0: LoadField: r3 = r1->field_7
    //     0x3830f0: ldur            x3, [x1, #7]
    // 0x3830f4: LoadField: r4 = r2->field_17
    //     0x3830f4: ldur            x4, [x2, #0x17]
    // 0x3830f8: cmp             x3, x4
    // 0x3830fc: b.ne            #0x383140
    // 0x383100: LoadField: r0 = r1->field_7
    //     0x383100: ldur            x0, [x1, #7]
    // 0x383104: stur            x0, [fp, #-0x20]
    // 0x383108: r0 = TextSelection()
    //     0x383108: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x38310c: mov             x1, x0
    // 0x383110: ldur            x0, [fp, #-0x20]
    // 0x383114: StoreField: r1->field_17 = r0
    //     0x383114: stur            x0, [x1, #0x17]
    // 0x383118: StoreField: r1->field_1f = r0
    //     0x383118: stur            x0, [x1, #0x1f]
    // 0x38311c: ldur            x2, [fp, #-0x30]
    // 0x383120: LoadField: r3 = r2->field_f
    //     0x383120: ldur            w3, [x2, #0xf]
    // 0x383124: DecompressPointer r3
    //     0x383124: add             x3, x3, HEAP, lsl #32
    // 0x383128: StoreField: r1->field_27 = r3
    //     0x383128: stur            w3, [x1, #0x27]
    // 0x38312c: r3 = false
    //     0x38312c: add             x3, NULL, #0x30  ; false
    // 0x383130: StoreField: r1->field_2b = r3
    //     0x383130: stur            w3, [x1, #0x2b]
    // 0x383134: StoreField: r1->field_7 = r0
    //     0x383134: stur            x0, [x1, #7]
    // 0x383138: StoreField: r1->field_f = r0
    //     0x383138: stur            x0, [x1, #0xf]
    // 0x38313c: b               #0x3831b0
    // 0x383140: mov             x2, x1
    // 0x383144: r3 = false
    //     0x383144: add             x3, NULL, #0x30  ; false
    // 0x383148: b               #0x383154
    // 0x38314c: mov             x2, x1
    // 0x383150: r3 = false
    //     0x383150: add             x3, NULL, #0x30  ; false
    // 0x383154: tbnz            w0, #4, #0x3831a0
    // 0x383158: ldur            x0, [fp, #-0x18]
    // 0x38315c: LoadField: r1 = r0->field_1f
    //     0x38315c: ldur            w1, [x0, #0x1f]
    // 0x383160: DecompressPointer r1
    //     0x383160: add             x1, x1, HEAP, lsl #32
    // 0x383164: tbnz            w1, #4, #0x383170
    // 0x383168: r0 = true
    //     0x383168: add             x0, NULL, #0x20  ; true
    // 0x38316c: b               #0x38318c
    // 0x383170: ldur            x0, [fp, #-0x40]
    // 0x383174: ldur            x1, [fp, #-0x38]
    // 0x383178: cmp             x0, x1
    // 0x38317c: r16 = true
    //     0x38317c: add             x16, NULL, #0x20  ; true
    // 0x383180: r17 = false
    //     0x383180: add             x17, NULL, #0x30  ; false
    // 0x383184: csel            x4, x16, x17, eq
    // 0x383188: mov             x0, x4
    // 0x38318c: ldur            x16, [fp, #-0x50]
    // 0x383190: stp             x2, x16, [SP, #8]
    // 0x383194: str             x0, [SP]
    // 0x383198: r0 = expandTo()
    //     0x383198: bl              #0x38339c  ; [package:flutter/src/services/text_editing.dart] TextSelection::expandTo
    // 0x38319c: b               #0x3831ac
    // 0x3831a0: ldur            x16, [fp, #-0x50]
    // 0x3831a4: stp             x2, x16, [SP]
    // 0x3831a8: r0 = extendTo()
    //     0x3831a8: bl              #0x3832cc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extendTo
    // 0x3831ac: mov             x1, x0
    // 0x3831b0: ldur            x0, [fp, #-0x10]
    // 0x3831b4: LoadField: r2 = r0->field_f
    //     0x3831b4: ldur            w2, [x0, #0xf]
    // 0x3831b8: DecompressPointer r2
    //     0x3831b8: add             x2, x2, HEAP, lsl #32
    // 0x3831bc: tbnz            w2, #4, #0x383230
    // 0x3831c0: ldur            x0, [fp, #-0x50]
    // 0x3831c4: LoadField: r2 = r0->field_17
    //     0x3831c4: ldur            x2, [x0, #0x17]
    // 0x3831c8: LoadField: r3 = r0->field_1f
    //     0x3831c8: ldur            x3, [x0, #0x1f]
    // 0x3831cc: sub             x4, x2, x3
    // 0x3831d0: LoadField: r3 = r1->field_1f
    //     0x3831d0: ldur            x3, [x1, #0x1f]
    // 0x3831d4: sub             x5, x2, x3
    // 0x3831d8: mul             x2, x4, x5
    // 0x3831dc: tbz             x2, #0x3f, #0x383230
    // 0x3831e0: str             x0, [SP]
    // 0x3831e4: r0 = base()
    //     0x3831e4: bl              #0x241e04  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0x3831e8: stur            x0, [fp, #-0x10]
    // 0x3831ec: LoadField: r1 = r0->field_7
    //     0x3831ec: ldur            x1, [x0, #7]
    // 0x3831f0: stur            x1, [fp, #-0x20]
    // 0x3831f4: r0 = TextSelection()
    //     0x3831f4: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x3831f8: mov             x1, x0
    // 0x3831fc: ldur            x0, [fp, #-0x20]
    // 0x383200: StoreField: r1->field_17 = r0
    //     0x383200: stur            x0, [x1, #0x17]
    // 0x383204: StoreField: r1->field_1f = r0
    //     0x383204: stur            x0, [x1, #0x1f]
    // 0x383208: ldur            x2, [fp, #-0x10]
    // 0x38320c: LoadField: r3 = r2->field_f
    //     0x38320c: ldur            w3, [x2, #0xf]
    // 0x383210: DecompressPointer r3
    //     0x383210: add             x3, x3, HEAP, lsl #32
    // 0x383214: StoreField: r1->field_27 = r3
    //     0x383214: stur            w3, [x1, #0x27]
    // 0x383218: r2 = false
    //     0x383218: add             x2, NULL, #0x30  ; false
    // 0x38321c: StoreField: r1->field_2b = r2
    //     0x38321c: stur            w2, [x1, #0x2b]
    // 0x383220: StoreField: r1->field_7 = r0
    //     0x383220: stur            x0, [x1, #7]
    // 0x383224: StoreField: r1->field_f = r0
    //     0x383224: stur            x0, [x1, #0xf]
    // 0x383228: mov             x2, x1
    // 0x38322c: b               #0x383234
    // 0x383230: mov             x2, x1
    // 0x383234: ldur            x1, [fp, #-8]
    // 0x383238: ldur            x0, [fp, #-0x58]
    // 0x38323c: stur            x2, [fp, #-0x18]
    // 0x383240: cmp             w1, NULL
    // 0x383244: b.eq            #0x3832c4
    // 0x383248: LoadField: r3 = r0->field_b
    //     0x383248: ldur            w3, [x0, #0xb]
    // 0x38324c: DecompressPointer r3
    //     0x38324c: add             x3, x3, HEAP, lsl #32
    // 0x383250: cmp             w3, NULL
    // 0x383254: b.eq            #0x3832c8
    // 0x383258: LoadField: r0 = r3->field_b
    //     0x383258: ldur            w0, [x3, #0xb]
    // 0x38325c: DecompressPointer r0
    //     0x38325c: add             x0, x0, HEAP, lsl #32
    // 0x383260: LoadField: r3 = r0->field_27
    //     0x383260: ldur            w3, [x0, #0x27]
    // 0x383264: DecompressPointer r3
    //     0x383264: add             x3, x3, HEAP, lsl #32
    // 0x383268: stur            x3, [fp, #-0x10]
    // 0x38326c: r0 = UpdateSelectionIntent()
    //     0x38326c: bl              #0x383800  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0x383270: mov             x1, x0
    // 0x383274: ldur            x0, [fp, #-0x10]
    // 0x383278: StoreField: r1->field_7 = r0
    //     0x383278: stur            w0, [x1, #7]
    // 0x38327c: ldur            x0, [fp, #-0x18]
    // 0x383280: StoreField: r1->field_b = r0
    //     0x383280: stur            w0, [x1, #0xb]
    // 0x383284: r0 = Instance_SelectionChangedCause
    //     0x383284: ldr             x0, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x383288: StoreField: r1->field_f = r0
    //     0x383288: stur            w0, [x1, #0xf]
    // 0x38328c: r16 = <UpdateSelectionIntent>
    //     0x38328c: add             x16, PP, #0x11, lsl #12  ; [pp+0x113a0] TypeArguments: <UpdateSelectionIntent>
    //     0x383290: ldr             x16, [x16, #0x3a0]
    // 0x383294: ldur            lr, [fp, #-8]
    // 0x383298: stp             lr, x16, [SP, #8]
    // 0x38329c: str             x1, [SP]
    // 0x3832a0: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x3832a0: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x3832a4: r0 = invoke()
    //     0x3832a4: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x3832a8: LeaveFrame
    //     0x3832a8: mov             SP, fp
    //     0x3832ac: ldp             fp, lr, [SP], #0x10
    // 0x3832b0: ret
    //     0x3832b0: ret             
    // 0x3832b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3832b4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3832b8: b               #0x382db0
    // 0x3832bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3832bc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x3832c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3832c0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x3832c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3832c4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x3832c8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3832c8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _isAtWordwrapDownstream(/* No info */) {
    // ** addr: 0x38358c, size: 0x130
    // 0x38358c: EnterFrame
    //     0x38358c: stp             fp, lr, [SP, #-0x10]!
    //     0x383590: mov             fp, SP
    // 0x383594: AllocStack(0x20)
    //     0x383594: sub             SP, SP, #0x20
    // 0x383598: CheckStackOverflow
    //     0x383598: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x38359c: cmp             SP, x16
    //     0x3835a0: b.ls            #0x3836b0
    // 0x3835a4: ldr             x0, [fp, #0x18]
    // 0x3835a8: LoadField: r2 = r0->field_13
    //     0x3835a8: ldur            w2, [x0, #0x13]
    // 0x3835ac: DecompressPointer r2
    //     0x3835ac: add             x2, x2, HEAP, lsl #32
    // 0x3835b0: mov             x1, x2
    // 0x3835b4: stur            x2, [fp, #-8]
    // 0x3835b8: LoadField: r0 = r1->field_ab
    //     0x3835b8: ldur            w0, [x1, #0xab]
    // 0x3835bc: DecompressPointer r0
    //     0x3835bc: add             x0, x0, HEAP, lsl #32
    // 0x3835c0: r16 = Sentinel
    //     0x3835c0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x3835c4: cmp             w0, w16
    // 0x3835c8: b.ne            #0x3835d4
    // 0x3835cc: r2 = renderEditable
    //     0x3835cc: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x3835d0: r0 = InitLateFinalInstanceField()
    //     0x3835d0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x3835d4: ldr             x16, [fp, #0x10]
    // 0x3835d8: stp             x16, x0, [SP]
    // 0x3835dc: r0 = getLineAtOffset()
    //     0x3835dc: bl              #0x246d00  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLineAtOffset
    // 0x3835e0: LoadField: r1 = r0->field_7
    //     0x3835e0: ldur            x1, [x0, #7]
    // 0x3835e4: stur            x1, [fp, #-0x10]
    // 0x3835e8: r16 = TextPosition
    //     0x3835e8: ldr             x16, [PP, #0x52c8]  ; [pp+0x52c8] Type: TextPosition
    // 0x3835ec: r30 = TextPosition
    //     0x3835ec: ldr             lr, [PP, #0x52c8]  ; [pp+0x52c8] Type: TextPosition
    // 0x3835f0: stp             lr, x16, [SP]
    // 0x3835f4: r0 = ==()
    //     0x3835f4: bl              #0x36b020  ; [dart:core] _Type::==
    // 0x3835f8: tbnz            w0, #4, #0x3836a0
    // 0x3835fc: ldr             x1, [fp, #0x10]
    // 0x383600: ldur            x0, [fp, #-0x10]
    // 0x383604: LoadField: r2 = r1->field_7
    //     0x383604: ldur            x2, [x1, #7]
    // 0x383608: cmp             x2, x0
    // 0x38360c: b.ne            #0x3836a0
    // 0x383610: LoadField: r3 = r1->field_f
    //     0x383610: ldur            w3, [x1, #0xf]
    // 0x383614: DecompressPointer r3
    //     0x383614: add             x3, x3, HEAP, lsl #32
    // 0x383618: r16 = Instance_TextAffinity
    //     0x383618: ldr             x16, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x38361c: cmp             w3, w16
    // 0x383620: b.ne            #0x3836a0
    // 0x383624: cbz             x0, #0x3836a0
    // 0x383628: ldur            x0, [fp, #-8]
    // 0x38362c: LoadField: r1 = r0->field_b
    //     0x38362c: ldur            w1, [x0, #0xb]
    // 0x383630: DecompressPointer r1
    //     0x383630: add             x1, x1, HEAP, lsl #32
    // 0x383634: cmp             w1, NULL
    // 0x383638: b.eq            #0x3836b8
    // 0x38363c: LoadField: r0 = r1->field_b
    //     0x38363c: ldur            w0, [x1, #0xb]
    // 0x383640: DecompressPointer r0
    //     0x383640: add             x0, x0, HEAP, lsl #32
    // 0x383644: LoadField: r1 = r0->field_27
    //     0x383644: ldur            w1, [x0, #0x27]
    // 0x383648: DecompressPointer r1
    //     0x383648: add             x1, x1, HEAP, lsl #32
    // 0x38364c: LoadField: r3 = r1->field_7
    //     0x38364c: ldur            w3, [x1, #7]
    // 0x383650: DecompressPointer r3
    //     0x383650: add             x3, x3, HEAP, lsl #32
    // 0x383654: sub             x4, x2, #1
    // 0x383658: r0 = BoxInt64Instr(r4)
    //     0x383658: sbfiz           x0, x4, #1, #0x1f
    //     0x38365c: cmp             x4, x0, asr #1
    //     0x383660: b.eq            #0x38366c
    //     0x383664: bl              #0x3e5e54
    //     0x383668: stur            x4, [x0, #7]
    // 0x38366c: r1 = LoadClassIdInstr(r3)
    //     0x38366c: ldur            x1, [x3, #-1]
    //     0x383670: ubfx            x1, x1, #0xc, #0x14
    // 0x383674: stp             x0, x3, [SP]
    // 0x383678: mov             x0, x1
    // 0x38367c: r0 = GDT[cid_x0 + -0x1000]()
    //     0x38367c: sub             lr, x0, #1, lsl #12
    //     0x383680: ldr             lr, [x21, lr, lsl #3]
    //     0x383684: blr             lr
    // 0x383688: cmp             w0, #0x14
    // 0x38368c: r16 = true
    //     0x38368c: add             x16, NULL, #0x20  ; true
    // 0x383690: r17 = false
    //     0x383690: add             x17, NULL, #0x30  ; false
    // 0x383694: csel            x1, x16, x17, ne
    // 0x383698: mov             x0, x1
    // 0x38369c: b               #0x3836a4
    // 0x3836a0: r0 = false
    //     0x3836a0: add             x0, NULL, #0x30  ; false
    // 0x3836a4: LeaveFrame
    //     0x3836a4: mov             SP, fp
    //     0x3836a8: ldp             fp, lr, [SP], #0x10
    // 0x3836ac: ret
    //     0x3836ac: ret             
    // 0x3836b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3836b0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3836b4: b               #0x3835a4
    // 0x3836b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3836b8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _isAtWordwrapUpstream(/* No info */) {
    // ** addr: 0x3836bc, size: 0x144
    // 0x3836bc: EnterFrame
    //     0x3836bc: stp             fp, lr, [SP, #-0x10]!
    //     0x3836c0: mov             fp, SP
    // 0x3836c4: AllocStack(0x20)
    //     0x3836c4: sub             SP, SP, #0x20
    // 0x3836c8: CheckStackOverflow
    //     0x3836c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3836cc: cmp             SP, x16
    //     0x3836d0: b.ls            #0x3837f4
    // 0x3836d4: ldr             x0, [fp, #0x18]
    // 0x3836d8: LoadField: r2 = r0->field_13
    //     0x3836d8: ldur            w2, [x0, #0x13]
    // 0x3836dc: DecompressPointer r2
    //     0x3836dc: add             x2, x2, HEAP, lsl #32
    // 0x3836e0: mov             x1, x2
    // 0x3836e4: stur            x2, [fp, #-8]
    // 0x3836e8: LoadField: r0 = r1->field_ab
    //     0x3836e8: ldur            w0, [x1, #0xab]
    // 0x3836ec: DecompressPointer r0
    //     0x3836ec: add             x0, x0, HEAP, lsl #32
    // 0x3836f0: r16 = Sentinel
    //     0x3836f0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x3836f4: cmp             w0, w16
    // 0x3836f8: b.ne            #0x383704
    // 0x3836fc: r2 = renderEditable
    //     0x3836fc: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x383700: r0 = InitLateFinalInstanceField()
    //     0x383700: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x383704: ldr             x16, [fp, #0x10]
    // 0x383708: stp             x16, x0, [SP]
    // 0x38370c: r0 = getLineAtOffset()
    //     0x38370c: bl              #0x246d00  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLineAtOffset
    // 0x383710: LoadField: r1 = r0->field_f
    //     0x383710: ldur            x1, [x0, #0xf]
    // 0x383714: stur            x1, [fp, #-0x10]
    // 0x383718: r16 = TextPosition
    //     0x383718: ldr             x16, [PP, #0x52c8]  ; [pp+0x52c8] Type: TextPosition
    // 0x38371c: r30 = TextPosition
    //     0x38371c: ldr             lr, [PP, #0x52c8]  ; [pp+0x52c8] Type: TextPosition
    // 0x383720: stp             lr, x16, [SP]
    // 0x383724: r0 = ==()
    //     0x383724: bl              #0x36b020  ; [dart:core] _Type::==
    // 0x383728: tbnz            w0, #4, #0x3837e4
    // 0x38372c: ldr             x1, [fp, #0x10]
    // 0x383730: ldur            x0, [fp, #-0x10]
    // 0x383734: LoadField: r2 = r1->field_7
    //     0x383734: ldur            x2, [x1, #7]
    // 0x383738: cmp             x2, x0
    // 0x38373c: b.ne            #0x3837e4
    // 0x383740: LoadField: r3 = r1->field_f
    //     0x383740: ldur            w3, [x1, #0xf]
    // 0x383744: DecompressPointer r3
    //     0x383744: add             x3, x3, HEAP, lsl #32
    // 0x383748: r16 = Instance_TextAffinity
    //     0x383748: ldr             x16, [PP, #0x5328]  ; [pp+0x5328] Obj!TextAffinity@482141
    // 0x38374c: cmp             w3, w16
    // 0x383750: b.ne            #0x3837e4
    // 0x383754: ldur            x1, [fp, #-8]
    // 0x383758: LoadField: r3 = r1->field_b
    //     0x383758: ldur            w3, [x1, #0xb]
    // 0x38375c: DecompressPointer r3
    //     0x38375c: add             x3, x3, HEAP, lsl #32
    // 0x383760: cmp             w3, NULL
    // 0x383764: b.eq            #0x3837fc
    // 0x383768: LoadField: r1 = r3->field_b
    //     0x383768: ldur            w1, [x3, #0xb]
    // 0x38376c: DecompressPointer r1
    //     0x38376c: add             x1, x1, HEAP, lsl #32
    // 0x383770: LoadField: r3 = r1->field_27
    //     0x383770: ldur            w3, [x1, #0x27]
    // 0x383774: DecompressPointer r3
    //     0x383774: add             x3, x3, HEAP, lsl #32
    // 0x383778: LoadField: r1 = r3->field_7
    //     0x383778: ldur            w1, [x3, #7]
    // 0x38377c: DecompressPointer r1
    //     0x38377c: add             x1, x1, HEAP, lsl #32
    // 0x383780: LoadField: r4 = r1->field_7
    //     0x383780: ldur            w4, [x1, #7]
    // 0x383784: DecompressPointer r4
    //     0x383784: add             x4, x4, HEAP, lsl #32
    // 0x383788: r1 = LoadInt32Instr(r4)
    //     0x383788: sbfx            x1, x4, #1, #0x1f
    // 0x38378c: cmp             x0, x1
    // 0x383790: b.eq            #0x3837e4
    // 0x383794: LoadField: r4 = r3->field_7
    //     0x383794: ldur            w4, [x3, #7]
    // 0x383798: DecompressPointer r4
    //     0x383798: add             x4, x4, HEAP, lsl #32
    // 0x38379c: r0 = BoxInt64Instr(r2)
    //     0x38379c: sbfiz           x0, x2, #1, #0x1f
    //     0x3837a0: cmp             x2, x0, asr #1
    //     0x3837a4: b.eq            #0x3837b0
    //     0x3837a8: bl              #0x3e5e54
    //     0x3837ac: stur            x2, [x0, #7]
    // 0x3837b0: r1 = LoadClassIdInstr(r4)
    //     0x3837b0: ldur            x1, [x4, #-1]
    //     0x3837b4: ubfx            x1, x1, #0xc, #0x14
    // 0x3837b8: stp             x0, x4, [SP]
    // 0x3837bc: mov             x0, x1
    // 0x3837c0: r0 = GDT[cid_x0 + -0x1000]()
    //     0x3837c0: sub             lr, x0, #1, lsl #12
    //     0x3837c4: ldr             lr, [x21, lr, lsl #3]
    //     0x3837c8: blr             lr
    // 0x3837cc: cmp             w0, #0x14
    // 0x3837d0: r16 = true
    //     0x3837d0: add             x16, NULL, #0x20  ; true
    // 0x3837d4: r17 = false
    //     0x3837d4: add             x17, NULL, #0x30  ; false
    // 0x3837d8: csel            x1, x16, x17, ne
    // 0x3837dc: mov             x0, x1
    // 0x3837e0: b               #0x3837e8
    // 0x3837e4: r0 = false
    //     0x3837e4: add             x0, NULL, #0x30  ; false
    // 0x3837e8: LeaveFrame
    //     0x3837e8: mov             SP, fp
    //     0x3837ec: ldp             fp, lr, [SP], #0x10
    // 0x3837f0: ret
    //     0x3837f0: ret             
    // 0x3837f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3837f4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3837f8: b               #0x3836d4
    // 0x3837fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3837fc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1203, size: 0x20, field offset: 0x14
class _DeleteTextAction<X0 bound DirectionalTextEditingIntent> extends ContextAction<X0 bound DirectionalTextEditingIntent> {

  _ invoke(/* No info */) {
    // ** addr: 0x3827d8, size: 0x4c0
    // 0x3827d8: EnterFrame
    //     0x3827d8: stp             fp, lr, [SP, #-0x10]!
    //     0x3827dc: mov             fp, SP
    // 0x3827e0: AllocStack(0x70)
    //     0x3827e0: sub             SP, SP, #0x70
    // 0x3827e4: SetupParameters(_DeleteTextAction<X0 bound DirectionalTextEditingIntent> this /* r3, fp-0x18 */, dynamic _ /* r4, fp-0x10 */, [dynamic _ = Null /* r5, fp-0x8 */])
    //     0x3827e4: mov             x0, x4
    //     0x3827e8: ldur            w1, [x0, #0x13]
    //     0x3827ec: add             x1, x1, HEAP, lsl #32
    //     0x3827f0: sub             x0, x1, #4
    //     0x3827f4: add             x3, fp, w0, sxtw #2
    //     0x3827f8: ldr             x3, [x3, #0x18]
    //     0x3827fc: stur            x3, [fp, #-0x18]
    //     0x382800: add             x4, fp, w0, sxtw #2
    //     0x382804: ldr             x4, [x4, #0x10]
    //     0x382808: stur            x4, [fp, #-0x10]
    //     0x38280c: cmp             w0, #2
    //     0x382810: b.lt            #0x382824
    //     0x382814: add             x1, fp, w0, sxtw #2
    //     0x382818: ldr             x1, [x1, #8]
    //     0x38281c: mov             x5, x1
    //     0x382820: b               #0x382828
    //     0x382824: mov             x5, NULL
    //     0x382828: stur            x5, [fp, #-8]
    // 0x38282c: CheckStackOverflow
    //     0x38282c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x382830: cmp             SP, x16
    //     0x382834: b.ls            #0x382c74
    // 0x382838: LoadField: r2 = r3->field_7
    //     0x382838: ldur            w2, [x3, #7]
    // 0x38283c: DecompressPointer r2
    //     0x38283c: add             x2, x2, HEAP, lsl #32
    // 0x382840: mov             x0, x4
    // 0x382844: r1 = Null
    //     0x382844: mov             x1, NULL
    // 0x382848: cmp             w2, NULL
    // 0x38284c: b.eq            #0x382870
    // 0x382850: LoadField: r4 = r2->field_17
    //     0x382850: ldur            w4, [x2, #0x17]
    // 0x382854: DecompressPointer r4
    //     0x382854: add             x4, x4, HEAP, lsl #32
    // 0x382858: r8 = X0 bound DirectionalTextEditingIntent
    //     0x382858: add             x8, PP, #0x12, lsl #12  ; [pp+0x12630] TypeParameter: X0 bound DirectionalTextEditingIntent
    //     0x38285c: ldr             x8, [x8, #0x630]
    // 0x382860: LoadField: r9 = r4->field_7
    //     0x382860: ldur            x9, [x4, #7]
    // 0x382864: r3 = Null
    //     0x382864: add             x3, PP, #0x12, lsl #12  ; [pp+0x12638] Null
    //     0x382868: ldr             x3, [x3, #0x638]
    // 0x38286c: blr             x9
    // 0x382870: ldur            x0, [fp, #-0x18]
    // 0x382874: LoadField: r1 = r0->field_13
    //     0x382874: ldur            w1, [x0, #0x13]
    // 0x382878: DecompressPointer r1
    //     0x382878: add             x1, x1, HEAP, lsl #32
    // 0x38287c: stur            x1, [fp, #-0x38]
    // 0x382880: LoadField: r2 = r1->field_b
    //     0x382880: ldur            w2, [x1, #0xb]
    // 0x382884: DecompressPointer r2
    //     0x382884: add             x2, x2, HEAP, lsl #32
    // 0x382888: cmp             w2, NULL
    // 0x38288c: b.eq            #0x382c7c
    // 0x382890: LoadField: r3 = r2->field_b
    //     0x382890: ldur            w3, [x2, #0xb]
    // 0x382894: DecompressPointer r3
    //     0x382894: add             x3, x3, HEAP, lsl #32
    // 0x382898: LoadField: r2 = r3->field_27
    //     0x382898: ldur            w2, [x3, #0x27]
    // 0x38289c: DecompressPointer r2
    //     0x38289c: add             x2, x2, HEAP, lsl #32
    // 0x3828a0: LoadField: r3 = r2->field_b
    //     0x3828a0: ldur            w3, [x2, #0xb]
    // 0x3828a4: DecompressPointer r3
    //     0x3828a4: add             x3, x3, HEAP, lsl #32
    // 0x3828a8: stur            x3, [fp, #-0x30]
    // 0x3828ac: LoadField: r2 = r3->field_7
    //     0x3828ac: ldur            x2, [x3, #7]
    // 0x3828b0: stur            x2, [fp, #-0x28]
    // 0x3828b4: tbnz            x2, #0x3f, #0x382c64
    // 0x3828b8: LoadField: r4 = r3->field_f
    //     0x3828b8: ldur            x4, [x3, #0xf]
    // 0x3828bc: stur            x4, [fp, #-0x20]
    // 0x3828c0: tbnz            x4, #0x3f, #0x382c64
    // 0x3828c4: str             x1, [SP]
    // 0x3828c8: r0 = _characterBoundary()
    //     0x3828c8: bl              #0x382ca4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_characterBoundary
    // 0x3828cc: mov             x2, x0
    // 0x3828d0: ldur            x0, [fp, #-0x28]
    // 0x3828d4: ldur            x1, [fp, #-0x20]
    // 0x3828d8: stur            x2, [fp, #-0x40]
    // 0x3828dc: cmp             x0, x1
    // 0x3828e0: b.eq            #0x382a28
    // 0x3828e4: stp             x0, x2, [SP]
    // 0x3828e8: r0 = getLeadingTextBoundaryAt()
    //     0x3828e8: bl              #0x3c7f24  ; [package:flutter/src/widgets/editable_text.dart] _CodePointBoundary::getLeadingTextBoundaryAt
    // 0x3828ec: cmp             w0, NULL
    // 0x3828f0: b.ne            #0x382930
    // 0x3828f4: ldur            x1, [fp, #-0x38]
    // 0x3828f8: LoadField: r0 = r1->field_b
    //     0x3828f8: ldur            w0, [x1, #0xb]
    // 0x3828fc: DecompressPointer r0
    //     0x3828fc: add             x0, x0, HEAP, lsl #32
    // 0x382900: cmp             w0, NULL
    // 0x382904: b.eq            #0x382c80
    // 0x382908: LoadField: r2 = r0->field_b
    //     0x382908: ldur            w2, [x0, #0xb]
    // 0x38290c: DecompressPointer r2
    //     0x38290c: add             x2, x2, HEAP, lsl #32
    // 0x382910: LoadField: r0 = r2->field_27
    //     0x382910: ldur            w0, [x2, #0x27]
    // 0x382914: DecompressPointer r0
    //     0x382914: add             x0, x0, HEAP, lsl #32
    // 0x382918: LoadField: r2 = r0->field_7
    //     0x382918: ldur            w2, [x0, #7]
    // 0x38291c: DecompressPointer r2
    //     0x38291c: add             x2, x2, HEAP, lsl #32
    // 0x382920: LoadField: r0 = r2->field_7
    //     0x382920: ldur            w0, [x2, #7]
    // 0x382924: DecompressPointer r0
    //     0x382924: add             x0, x0, HEAP, lsl #32
    // 0x382928: r2 = LoadInt32Instr(r0)
    //     0x382928: sbfx            x2, x0, #1, #0x1f
    // 0x38292c: b               #0x382940
    // 0x382930: ldur            x1, [fp, #-0x38]
    // 0x382934: r2 = LoadInt32Instr(r0)
    //     0x382934: sbfx            x2, x0, #1, #0x1f
    //     0x382938: tbz             w0, #0, #0x382940
    //     0x38293c: ldur            x2, [x0, #7]
    // 0x382940: ldur            x0, [fp, #-0x20]
    // 0x382944: stur            x2, [fp, #-0x28]
    // 0x382948: sub             x3, x0, #1
    // 0x38294c: ldur            x16, [fp, #-0x40]
    // 0x382950: stp             x3, x16, [SP]
    // 0x382954: r0 = getTrailingTextBoundaryAt()
    //     0x382954: bl              #0x3c794c  ; [package:flutter/src/widgets/editable_text.dart] _CodePointBoundary::getTrailingTextBoundaryAt
    // 0x382958: cmp             w0, NULL
    // 0x38295c: b.ne            #0x382968
    // 0x382960: r3 = 0
    //     0x382960: movz            x3, #0
    // 0x382964: b               #0x382978
    // 0x382968: r1 = LoadInt32Instr(r0)
    //     0x382968: sbfx            x1, x0, #1, #0x1f
    //     0x38296c: tbz             w0, #0, #0x382974
    //     0x382970: ldur            x1, [x0, #7]
    // 0x382974: mov             x3, x1
    // 0x382978: ldur            x2, [fp, #-8]
    // 0x38297c: ldur            x0, [fp, #-0x38]
    // 0x382980: ldur            x1, [fp, #-0x28]
    // 0x382984: stur            x3, [fp, #-0x20]
    // 0x382988: r0 = TextRange()
    //     0x382988: bl              #0x202c64  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0x38298c: mov             x1, x0
    // 0x382990: ldur            x0, [fp, #-0x28]
    // 0x382994: stur            x1, [fp, #-0x50]
    // 0x382998: StoreField: r1->field_7 = r0
    //     0x382998: stur            x0, [x1, #7]
    // 0x38299c: ldur            x0, [fp, #-0x20]
    // 0x3829a0: StoreField: r1->field_f = r0
    //     0x3829a0: stur            x0, [x1, #0xf]
    // 0x3829a4: ldur            x0, [fp, #-8]
    // 0x3829a8: cmp             w0, NULL
    // 0x3829ac: b.eq            #0x382c84
    // 0x3829b0: ldur            x2, [fp, #-0x38]
    // 0x3829b4: LoadField: r3 = r2->field_b
    //     0x3829b4: ldur            w3, [x2, #0xb]
    // 0x3829b8: DecompressPointer r3
    //     0x3829b8: add             x3, x3, HEAP, lsl #32
    // 0x3829bc: cmp             w3, NULL
    // 0x3829c0: b.eq            #0x382c88
    // 0x3829c4: LoadField: r2 = r3->field_b
    //     0x3829c4: ldur            w2, [x3, #0xb]
    // 0x3829c8: DecompressPointer r2
    //     0x3829c8: add             x2, x2, HEAP, lsl #32
    // 0x3829cc: LoadField: r3 = r2->field_27
    //     0x3829cc: ldur            w3, [x2, #0x27]
    // 0x3829d0: DecompressPointer r3
    //     0x3829d0: add             x3, x3, HEAP, lsl #32
    // 0x3829d4: stur            x3, [fp, #-0x48]
    // 0x3829d8: r0 = ReplaceTextIntent()
    //     0x3829d8: bl              #0x382c98  ; AllocateReplaceTextIntentStub -> ReplaceTextIntent (size=0x18)
    // 0x3829dc: mov             x1, x0
    // 0x3829e0: ldur            x0, [fp, #-0x48]
    // 0x3829e4: StoreField: r1->field_7 = r0
    //     0x3829e4: stur            w0, [x1, #7]
    // 0x3829e8: r0 = ""
    //     0x3829e8: ldr             x0, [PP, #0x1a0]  ; [pp+0x1a0] ""
    // 0x3829ec: StoreField: r1->field_b = r0
    //     0x3829ec: stur            w0, [x1, #0xb]
    // 0x3829f0: ldur            x0, [fp, #-0x50]
    // 0x3829f4: StoreField: r1->field_f = r0
    //     0x3829f4: stur            w0, [x1, #0xf]
    // 0x3829f8: r3 = Instance_SelectionChangedCause
    //     0x3829f8: ldr             x3, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x3829fc: StoreField: r1->field_13 = r3
    //     0x3829fc: stur            w3, [x1, #0x13]
    // 0x382a00: r16 = <ReplaceTextIntent>
    //     0x382a00: add             x16, PP, #0x11, lsl #12  ; [pp+0x113a8] TypeArguments: <ReplaceTextIntent>
    //     0x382a04: ldr             x16, [x16, #0x3a8]
    // 0x382a08: ldur            lr, [fp, #-8]
    // 0x382a0c: stp             lr, x16, [SP, #8]
    // 0x382a10: str             x1, [SP]
    // 0x382a14: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x382a14: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x382a18: r0 = invoke()
    //     0x382a18: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x382a1c: LeaveFrame
    //     0x382a1c: mov             SP, fp
    //     0x382a20: ldp             fp, lr, [SP], #0x10
    // 0x382a24: ret
    //     0x382a24: ret             
    // 0x382a28: ldur            x1, [fp, #-0x18]
    // 0x382a2c: ldur            x4, [fp, #-0x10]
    // 0x382a30: ldur            x2, [fp, #-0x38]
    // 0x382a34: r0 = ""
    //     0x382a34: ldr             x0, [PP, #0x1a0]  ; [pp+0x1a0] ""
    // 0x382a38: r3 = Instance_SelectionChangedCause
    //     0x382a38: ldr             x3, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x382a3c: ldur            x16, [fp, #-0x30]
    // 0x382a40: str             x16, [SP]
    // 0x382a44: r0 = base()
    //     0x382a44: bl              #0x241e04  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0x382a48: mov             x1, x0
    // 0x382a4c: ldur            x0, [fp, #-0x10]
    // 0x382a50: stur            x1, [fp, #-0x50]
    // 0x382a54: LoadField: r2 = r0->field_7
    //     0x382a54: ldur            w2, [x0, #7]
    // 0x382a58: DecompressPointer r2
    //     0x382a58: add             x2, x2, HEAP, lsl #32
    // 0x382a5c: ldur            x3, [fp, #-0x18]
    // 0x382a60: stur            x2, [fp, #-0x48]
    // 0x382a64: LoadField: r0 = r3->field_17
    //     0x382a64: ldur            w0, [x3, #0x17]
    // 0x382a68: DecompressPointer r0
    //     0x382a68: add             x0, x0, HEAP, lsl #32
    // 0x382a6c: str             x0, [SP]
    // 0x382a70: ClosureCall
    //     0x382a70: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x382a74: ldur            x2, [x0, #0x1f]
    //     0x382a78: blr             x2
    // 0x382a7c: mov             x1, x0
    // 0x382a80: ldur            x0, [fp, #-0x18]
    // 0x382a84: LoadField: r2 = r0->field_1b
    //     0x382a84: ldur            w2, [x0, #0x1b]
    // 0x382a88: DecompressPointer r2
    //     0x382a88: add             x2, x2, HEAP, lsl #32
    // 0x382a8c: ldur            x16, [fp, #-0x50]
    // 0x382a90: stp             x16, x2, [SP, #0x10]
    // 0x382a94: ldur            x16, [fp, #-0x48]
    // 0x382a98: stp             x1, x16, [SP]
    // 0x382a9c: mov             x0, x2
    // 0x382aa0: ClosureCall
    //     0x382aa0: ldr             x4, [PP, #0xb0]  ; [pp+0xb0] List(5) [0, 0x4, 0x4, 0x4, Null]
    //     0x382aa4: ldur            x2, [x0, #0x1f]
    //     0x382aa8: blr             x2
    // 0x382aac: LoadField: r1 = r0->field_7
    //     0x382aac: ldur            x1, [x0, #7]
    // 0x382ab0: ldur            x0, [fp, #-0x48]
    // 0x382ab4: stur            x1, [fp, #-0x20]
    // 0x382ab8: tbnz            w0, #4, #0x382b34
    // 0x382abc: ldur            x0, [fp, #-0x30]
    // 0x382ac0: LoadField: r2 = r0->field_17
    //     0x382ac0: ldur            x2, [x0, #0x17]
    // 0x382ac4: ldur            x16, [fp, #-0x40]
    // 0x382ac8: stp             x2, x16, [SP]
    // 0x382acc: r0 = getLeadingTextBoundaryAt()
    //     0x382acc: bl              #0x3c7f24  ; [package:flutter/src/widgets/editable_text.dart] _CodePointBoundary::getLeadingTextBoundaryAt
    // 0x382ad0: cmp             w0, NULL
    // 0x382ad4: b.ne            #0x382b18
    // 0x382ad8: ldur            x1, [fp, #-0x38]
    // 0x382adc: LoadField: r0 = r1->field_b
    //     0x382adc: ldur            w0, [x1, #0xb]
    // 0x382ae0: DecompressPointer r0
    //     0x382ae0: add             x0, x0, HEAP, lsl #32
    // 0x382ae4: cmp             w0, NULL
    // 0x382ae8: b.eq            #0x382c8c
    // 0x382aec: LoadField: r2 = r0->field_b
    //     0x382aec: ldur            w2, [x0, #0xb]
    // 0x382af0: DecompressPointer r2
    //     0x382af0: add             x2, x2, HEAP, lsl #32
    // 0x382af4: LoadField: r0 = r2->field_27
    //     0x382af4: ldur            w0, [x2, #0x27]
    // 0x382af8: DecompressPointer r0
    //     0x382af8: add             x0, x0, HEAP, lsl #32
    // 0x382afc: LoadField: r2 = r0->field_7
    //     0x382afc: ldur            w2, [x0, #7]
    // 0x382b00: DecompressPointer r2
    //     0x382b00: add             x2, x2, HEAP, lsl #32
    // 0x382b04: LoadField: r0 = r2->field_7
    //     0x382b04: ldur            w0, [x2, #7]
    // 0x382b08: DecompressPointer r0
    //     0x382b08: add             x0, x0, HEAP, lsl #32
    // 0x382b0c: r2 = LoadInt32Instr(r0)
    //     0x382b0c: sbfx            x2, x0, #1, #0x1f
    // 0x382b10: mov             x0, x2
    // 0x382b14: b               #0x382b2c
    // 0x382b18: ldur            x1, [fp, #-0x38]
    // 0x382b1c: r2 = LoadInt32Instr(r0)
    //     0x382b1c: sbfx            x2, x0, #1, #0x1f
    //     0x382b20: tbz             w0, #0, #0x382b28
    //     0x382b24: ldur            x2, [x0, #7]
    // 0x382b28: mov             x0, x2
    // 0x382b2c: mov             x1, x0
    // 0x382b30: b               #0x382b74
    // 0x382b34: ldur            x1, [fp, #-0x38]
    // 0x382b38: ldur            x0, [fp, #-0x30]
    // 0x382b3c: LoadField: r2 = r0->field_17
    //     0x382b3c: ldur            x2, [x0, #0x17]
    // 0x382b40: sub             x0, x2, #1
    // 0x382b44: ldur            x16, [fp, #-0x40]
    // 0x382b48: stp             x0, x16, [SP]
    // 0x382b4c: r0 = getTrailingTextBoundaryAt()
    //     0x382b4c: bl              #0x3c794c  ; [package:flutter/src/widgets/editable_text.dart] _CodePointBoundary::getTrailingTextBoundaryAt
    // 0x382b50: cmp             w0, NULL
    // 0x382b54: b.ne            #0x382b60
    // 0x382b58: r0 = 0
    //     0x382b58: movz            x0, #0
    // 0x382b5c: b               #0x382b70
    // 0x382b60: r1 = LoadInt32Instr(r0)
    //     0x382b60: sbfx            x1, x0, #1, #0x1f
    //     0x382b64: tbz             w0, #0, #0x382b6c
    //     0x382b68: ldur            x1, [x0, #7]
    // 0x382b6c: mov             x0, x1
    // 0x382b70: mov             x1, x0
    // 0x382b74: ldur            x0, [fp, #-0x20]
    // 0x382b78: stur            x1, [fp, #-0x28]
    // 0x382b7c: r0 = TextSelection()
    //     0x382b7c: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x382b80: mov             x1, x0
    // 0x382b84: ldur            x0, [fp, #-0x28]
    // 0x382b88: stur            x1, [fp, #-0x18]
    // 0x382b8c: StoreField: r1->field_17 = r0
    //     0x382b8c: stur            x0, [x1, #0x17]
    // 0x382b90: ldur            x2, [fp, #-0x20]
    // 0x382b94: StoreField: r1->field_1f = r2
    //     0x382b94: stur            x2, [x1, #0x1f]
    // 0x382b98: r3 = Instance_TextAffinity
    //     0x382b98: ldr             x3, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x382b9c: StoreField: r1->field_27 = r3
    //     0x382b9c: stur            w3, [x1, #0x27]
    // 0x382ba0: r3 = false
    //     0x382ba0: add             x3, NULL, #0x30  ; false
    // 0x382ba4: StoreField: r1->field_2b = r3
    //     0x382ba4: stur            w3, [x1, #0x2b]
    // 0x382ba8: cmp             x0, x2
    // 0x382bac: r16 = true
    //     0x382bac: add             x16, NULL, #0x20  ; true
    // 0x382bb0: r17 = false
    //     0x382bb0: add             x17, NULL, #0x30  ; false
    // 0x382bb4: csel            x3, x16, x17, lt
    // 0x382bb8: tbnz            w3, #4, #0x382bc4
    // 0x382bbc: mov             x4, x0
    // 0x382bc0: b               #0x382bc8
    // 0x382bc4: mov             x4, x2
    // 0x382bc8: tbnz            w3, #4, #0x382bd4
    // 0x382bcc: mov             x3, x2
    // 0x382bd0: b               #0x382bd8
    // 0x382bd4: mov             x3, x0
    // 0x382bd8: ldur            x2, [fp, #-8]
    // 0x382bdc: ldur            x0, [fp, #-0x38]
    // 0x382be0: StoreField: r1->field_7 = r4
    //     0x382be0: stur            x4, [x1, #7]
    // 0x382be4: StoreField: r1->field_f = r3
    //     0x382be4: stur            x3, [x1, #0xf]
    // 0x382be8: cmp             w2, NULL
    // 0x382bec: b.eq            #0x382c90
    // 0x382bf0: LoadField: r3 = r0->field_b
    //     0x382bf0: ldur            w3, [x0, #0xb]
    // 0x382bf4: DecompressPointer r3
    //     0x382bf4: add             x3, x3, HEAP, lsl #32
    // 0x382bf8: cmp             w3, NULL
    // 0x382bfc: b.eq            #0x382c94
    // 0x382c00: LoadField: r0 = r3->field_b
    //     0x382c00: ldur            w0, [x3, #0xb]
    // 0x382c04: DecompressPointer r0
    //     0x382c04: add             x0, x0, HEAP, lsl #32
    // 0x382c08: LoadField: r3 = r0->field_27
    //     0x382c08: ldur            w3, [x0, #0x27]
    // 0x382c0c: DecompressPointer r3
    //     0x382c0c: add             x3, x3, HEAP, lsl #32
    // 0x382c10: stur            x3, [fp, #-0x10]
    // 0x382c14: r0 = ReplaceTextIntent()
    //     0x382c14: bl              #0x382c98  ; AllocateReplaceTextIntentStub -> ReplaceTextIntent (size=0x18)
    // 0x382c18: mov             x1, x0
    // 0x382c1c: ldur            x0, [fp, #-0x10]
    // 0x382c20: StoreField: r1->field_7 = r0
    //     0x382c20: stur            w0, [x1, #7]
    // 0x382c24: r0 = ""
    //     0x382c24: ldr             x0, [PP, #0x1a0]  ; [pp+0x1a0] ""
    // 0x382c28: StoreField: r1->field_b = r0
    //     0x382c28: stur            w0, [x1, #0xb]
    // 0x382c2c: ldur            x0, [fp, #-0x18]
    // 0x382c30: StoreField: r1->field_f = r0
    //     0x382c30: stur            w0, [x1, #0xf]
    // 0x382c34: r0 = Instance_SelectionChangedCause
    //     0x382c34: ldr             x0, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x382c38: StoreField: r1->field_13 = r0
    //     0x382c38: stur            w0, [x1, #0x13]
    // 0x382c3c: r16 = <ReplaceTextIntent>
    //     0x382c3c: add             x16, PP, #0x11, lsl #12  ; [pp+0x113a8] TypeArguments: <ReplaceTextIntent>
    //     0x382c40: ldr             x16, [x16, #0x3a8]
    // 0x382c44: ldur            lr, [fp, #-8]
    // 0x382c48: stp             lr, x16, [SP, #8]
    // 0x382c4c: str             x1, [SP]
    // 0x382c50: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x382c50: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x382c54: r0 = invoke()
    //     0x382c54: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x382c58: LeaveFrame
    //     0x382c58: mov             SP, fp
    //     0x382c5c: ldp             fp, lr, [SP], #0x10
    // 0x382c60: ret
    //     0x382c60: ret             
    // 0x382c64: r0 = Null
    //     0x382c64: mov             x0, NULL
    // 0x382c68: LeaveFrame
    //     0x382c68: mov             SP, fp
    //     0x382c6c: ldp             fp, lr, [SP], #0x10
    // 0x382c70: ret
    //     0x382c70: ret             
    // 0x382c74: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x382c74: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x382c78: b               #0x382838
    // 0x382c7c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382c7c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x382c80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382c80: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x382c84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382c84: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x382c88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382c88: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x382c8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382c8c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x382c90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382c90: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x382c94: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382c94: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1396, size: 0x18, field offset: 0x14
class _ScribbleFocusableState extends State<dynamic>
    implements ScribbleClient {

  _ onScribbleFocus(/* No info */) {
    // ** addr: 0x23f1c8, size: 0xb4
    // 0x23f1c8: EnterFrame
    //     0x23f1c8: stp             fp, lr, [SP, #-0x10]!
    //     0x23f1cc: mov             fp, SP
    // 0x23f1d0: AllocStack(0x18)
    //     0x23f1d0: sub             SP, SP, #0x18
    // 0x23f1d4: CheckStackOverflow
    //     0x23f1d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23f1d8: cmp             SP, x16
    //     0x23f1dc: b.ls            #0x23f26c
    // 0x23f1e0: ldr             x0, [fp, #0x18]
    // 0x23f1e4: LoadField: r1 = r0->field_b
    //     0x23f1e4: ldur            w1, [x0, #0xb]
    // 0x23f1e8: DecompressPointer r1
    //     0x23f1e8: add             x1, x1, HEAP, lsl #32
    // 0x23f1ec: cmp             w1, NULL
    // 0x23f1f0: b.eq            #0x23f274
    // 0x23f1f4: LoadField: r2 = r1->field_f
    //     0x23f1f4: ldur            w2, [x1, #0xf]
    // 0x23f1f8: DecompressPointer r2
    //     0x23f1f8: add             x2, x2, HEAP, lsl #32
    // 0x23f1fc: str             x2, [SP]
    // 0x23f200: r0 = requestFocus()
    //     0x23f200: bl              #0x24837c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::requestFocus
    // 0x23f204: ldr             x16, [fp, #0x18]
    // 0x23f208: str             x16, [SP]
    // 0x23f20c: r0 = renderEditable()
    //     0x23f20c: bl              #0x23f598  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::renderEditable
    // 0x23f210: cmp             w0, NULL
    // 0x23f214: b.eq            #0x23f230
    // 0x23f218: r16 = Instance_SelectionChangedCause
    //     0x23f218: ldr             x16, [PP, #0x57b8]  ; [pp+0x57b8] Obj!SelectionChangedCause@4806c1
    // 0x23f21c: stp             x16, x0, [SP, #8]
    // 0x23f220: ldr             x16, [fp, #0x10]
    // 0x23f224: str             x16, [SP]
    // 0x23f228: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x23f228: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x23f22c: r0 = selectPositionAt()
    //     0x23f22c: bl              #0x23f2bc  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectPositionAt
    // 0x23f230: ldr             x0, [fp, #0x18]
    // 0x23f234: LoadField: r1 = r0->field_b
    //     0x23f234: ldur            w1, [x0, #0xb]
    // 0x23f238: DecompressPointer r1
    //     0x23f238: add             x1, x1, HEAP, lsl #32
    // 0x23f23c: cmp             w1, NULL
    // 0x23f240: b.eq            #0x23f278
    // 0x23f244: LoadField: r0 = r1->field_17
    //     0x23f244: ldur            w0, [x1, #0x17]
    // 0x23f248: DecompressPointer r0
    //     0x23f248: add             x0, x0, HEAP, lsl #32
    // 0x23f24c: str             x0, [SP]
    // 0x23f250: ClosureCall
    //     0x23f250: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x23f254: ldur            x2, [x0, #0x1f]
    //     0x23f258: blr             x2
    // 0x23f25c: r0 = Null
    //     0x23f25c: mov             x0, NULL
    // 0x23f260: LeaveFrame
    //     0x23f260: mov             SP, fp
    //     0x23f264: ldp             fp, lr, [SP], #0x10
    // 0x23f268: ret
    //     0x23f268: ret             
    // 0x23f26c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23f26c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23f270: b               #0x23f1e0
    // 0x23f274: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23f274: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23f278: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23f278: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ renderEditable(/* No info */) {
    // ** addr: 0x23f598, size: 0xa0
    // 0x23f598: EnterFrame
    //     0x23f598: stp             fp, lr, [SP, #-0x10]!
    //     0x23f59c: mov             fp, SP
    // 0x23f5a0: AllocStack(0x10)
    //     0x23f5a0: sub             SP, SP, #0x10
    // 0x23f5a4: CheckStackOverflow
    //     0x23f5a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23f5a8: cmp             SP, x16
    //     0x23f5ac: b.ls            #0x23f62c
    // 0x23f5b0: ldr             x0, [fp, #0x10]
    // 0x23f5b4: LoadField: r1 = r0->field_b
    //     0x23f5b4: ldur            w1, [x0, #0xb]
    // 0x23f5b8: DecompressPointer r1
    //     0x23f5b8: add             x1, x1, HEAP, lsl #32
    // 0x23f5bc: cmp             w1, NULL
    // 0x23f5c0: b.eq            #0x23f634
    // 0x23f5c4: LoadField: r0 = r1->field_13
    //     0x23f5c4: ldur            w0, [x1, #0x13]
    // 0x23f5c8: DecompressPointer r0
    //     0x23f5c8: add             x0, x0, HEAP, lsl #32
    // 0x23f5cc: str             x0, [SP]
    // 0x23f5d0: r0 = _currentElement()
    //     0x23f5d0: bl              #0x214908  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0x23f5d4: cmp             w0, NULL
    // 0x23f5d8: b.ne            #0x23f5e4
    // 0x23f5dc: r3 = Null
    //     0x23f5dc: mov             x3, NULL
    // 0x23f5e0: b               #0x23f5f0
    // 0x23f5e4: str             x0, [SP]
    // 0x23f5e8: r0 = findRenderObject()
    //     0x23f5e8: bl              #0x21322c  ; [package:flutter/src/widgets/framework.dart] Element::findRenderObject
    // 0x23f5ec: mov             x3, x0
    // 0x23f5f0: mov             x0, x3
    // 0x23f5f4: stur            x3, [fp, #-8]
    // 0x23f5f8: r2 = Null
    //     0x23f5f8: mov             x2, NULL
    // 0x23f5fc: r1 = Null
    //     0x23f5fc: mov             x1, NULL
    // 0x23f600: r4 = LoadClassIdInstr(r0)
    //     0x23f600: ldur            x4, [x0, #-1]
    //     0x23f604: ubfx            x4, x4, #0xc, #0x14
    // 0x23f608: cmp             x4, #0x208
    // 0x23f60c: b.eq            #0x23f61c
    // 0x23f610: r8 = RenderEditable?
    //     0x23f610: ldr             x8, [PP, #0x4e78]  ; [pp+0x4e78] Type: RenderEditable?
    // 0x23f614: r3 = Null
    //     0x23f614: ldr             x3, [PP, #0x4e80]  ; [pp+0x4e80] Null
    // 0x23f618: r0 = DefaultNullableTypeTest()
    //     0x23f618: bl              #0x3e3e40  ; DefaultNullableTypeTestStub
    // 0x23f61c: ldur            x0, [fp, #-8]
    // 0x23f620: LeaveFrame
    //     0x23f620: mov             SP, fp
    //     0x23f624: ldp             fp, lr, [SP], #0x10
    // 0x23f628: ret
    //     0x23f628: ret             
    // 0x23f62c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23f62c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23f630: b               #0x23f5b0
    // 0x23f634: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23f634: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ bounds(/* No info */) {
    // ** addr: 0x240584, size: 0x138
    // 0x240584: EnterFrame
    //     0x240584: stp             fp, lr, [SP, #-0x10]!
    //     0x240588: mov             fp, SP
    // 0x24058c: AllocStack(0x30)
    //     0x24058c: sub             SP, SP, #0x30
    // 0x240590: CheckStackOverflow
    //     0x240590: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x240594: cmp             SP, x16
    //     0x240598: b.ls            #0x2406b0
    // 0x24059c: ldr             x0, [fp, #0x10]
    // 0x2405a0: LoadField: r1 = r0->field_f
    //     0x2405a0: ldur            w1, [x0, #0xf]
    // 0x2405a4: DecompressPointer r1
    //     0x2405a4: add             x1, x1, HEAP, lsl #32
    // 0x2405a8: cmp             w1, NULL
    // 0x2405ac: b.eq            #0x2406b8
    // 0x2405b0: str             x1, [SP]
    // 0x2405b4: r0 = renderObject()
    //     0x2405b4: bl              #0x3b4f6c  ; [package:flutter/src/widgets/framework.dart] Element::renderObject
    // 0x2405b8: mov             x3, x0
    // 0x2405bc: r2 = Null
    //     0x2405bc: mov             x2, NULL
    // 0x2405c0: r1 = Null
    //     0x2405c0: mov             x1, NULL
    // 0x2405c4: stur            x3, [fp, #-8]
    // 0x2405c8: r4 = LoadClassIdInstr(r0)
    //     0x2405c8: ldur            x4, [x0, #-1]
    //     0x2405cc: ubfx            x4, x4, #0xc, #0x14
    // 0x2405d0: sub             x4, x4, #0x1f0
    // 0x2405d4: cmp             x4, #0x62
    // 0x2405d8: b.ls            #0x2405e8
    // 0x2405dc: r8 = RenderBox?
    //     0x2405dc: ldr             x8, [PP, #0x2df8]  ; [pp+0x2df8] Type: RenderBox?
    // 0x2405e0: r3 = Null
    //     0x2405e0: ldr             x3, [PP, #0x4d48]  ; [pp+0x4d48] Null
    // 0x2405e4: r0 = RenderBox?()
    //     0x2405e4: bl              #0x1d8b14  ; IsType_RenderBox?_Stub
    // 0x2405e8: ldur            x0, [fp, #-8]
    // 0x2405ec: cmp             w0, NULL
    // 0x2405f0: b.eq            #0x240618
    // 0x2405f4: ldr             x1, [fp, #0x10]
    // 0x2405f8: LoadField: r2 = r1->field_f
    //     0x2405f8: ldur            w2, [x1, #0xf]
    // 0x2405fc: DecompressPointer r2
    //     0x2405fc: add             x2, x2, HEAP, lsl #32
    // 0x240600: cmp             w2, NULL
    // 0x240604: b.eq            #0x240618
    // 0x240608: LoadField: r1 = r0->field_17
    //     0x240608: ldur            w1, [x0, #0x17]
    // 0x24060c: DecompressPointer r1
    //     0x24060c: add             x1, x1, HEAP, lsl #32
    // 0x240610: cmp             w1, NULL
    // 0x240614: b.ne            #0x240628
    // 0x240618: r0 = Instance_Rect
    //     0x240618: ldr             x0, [PP, #0x4d58]  ; [pp+0x4d58] Obj!Rect@47d421
    // 0x24061c: LeaveFrame
    //     0x24061c: mov             SP, fp
    //     0x240620: ldp             fp, lr, [SP], #0x10
    // 0x240624: ret
    //     0x240624: ret             
    // 0x240628: stp             NULL, x0, [SP]
    // 0x24062c: r0 = getTransformTo()
    //     0x24062c: bl              #0x1ee828  ; [package:flutter/src/rendering/object.dart] RenderObject::getTransformTo
    // 0x240630: stur            x0, [fp, #-0x10]
    // 0x240634: ldur            x16, [fp, #-8]
    // 0x240638: str             x16, [SP]
    // 0x24063c: r0 = size()
    //     0x24063c: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x240640: LoadField: d0 = r0->field_7
    //     0x240640: ldur            d0, [x0, #7]
    // 0x240644: stur            d0, [fp, #-0x18]
    // 0x240648: ldur            x16, [fp, #-8]
    // 0x24064c: str             x16, [SP]
    // 0x240650: r0 = size()
    //     0x240650: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x240654: LoadField: d0 = r0->field_f
    //     0x240654: ldur            d0, [x0, #0xf]
    // 0x240658: ldur            d1, [fp, #-0x18]
    // 0x24065c: d2 = 0.000000
    //     0x24065c: eor             v2.16b, v2.16b, v2.16b
    // 0x240660: d2 = 0.000000
    //     0x240660: eor             v2.16b, v2.16b, v2.16b
    // 0x240664: fadd            d3, d2, d1
    // 0x240668: stur            d3, [fp, #-0x20]
    // 0x24066c: fadd            d1, d2, d0
    // 0x240670: stur            d1, [fp, #-0x18]
    // 0x240674: r0 = Rect()
    //     0x240674: bl              #0x1af134  ; AllocateRectStub -> Rect (size=0x28)
    // 0x240678: d0 = 0.000000
    //     0x240678: eor             v0.16b, v0.16b, v0.16b
    // 0x24067c: d0 = 0.000000
    //     0x24067c: eor             v0.16b, v0.16b, v0.16b
    // 0x240680: StoreField: r0->field_7 = d0
    //     0x240680: stur            d0, [x0, #7]
    // 0x240684: StoreField: r0->field_f = d0
    //     0x240684: stur            d0, [x0, #0xf]
    // 0x240688: ldur            d0, [fp, #-0x20]
    // 0x24068c: StoreField: r0->field_17 = d0
    //     0x24068c: stur            d0, [x0, #0x17]
    // 0x240690: ldur            d0, [fp, #-0x18]
    // 0x240694: StoreField: r0->field_1f = d0
    //     0x240694: stur            d0, [x0, #0x1f]
    // 0x240698: ldur            x16, [fp, #-0x10]
    // 0x24069c: stp             x0, x16, [SP]
    // 0x2406a0: r0 = transformRect()
    //     0x2406a0: bl              #0x1f4888  ; [package:flutter/src/painting/matrix_utils.dart] MatrixUtils::transformRect
    // 0x2406a4: LeaveFrame
    //     0x2406a4: mov             SP, fp
    //     0x2406a8: ldp             fp, lr, [SP], #0x10
    // 0x2406ac: ret
    //     0x2406ac: ret             
    // 0x2406b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2406b0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2406b4: b               #0x24059c
    // 0x2406b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2406b8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ isInScribbleRect(/* No info */) {
    // ** addr: 0x2409a8, size: 0x214
    // 0x2409a8: EnterFrame
    //     0x2409a8: stp             fp, lr, [SP, #-0x10]!
    //     0x2409ac: mov             fp, SP
    // 0x2409b0: AllocStack(0x40)
    //     0x2409b0: sub             SP, SP, #0x40
    // 0x2409b4: CheckStackOverflow
    //     0x2409b4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2409b8: cmp             SP, x16
    //     0x2409bc: b.ls            #0x240bac
    // 0x2409c0: r1 = 1
    //     0x2409c0: movz            x1, #0x1
    // 0x2409c4: r0 = AllocateContext()
    //     0x2409c4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2409c8: mov             x1, x0
    // 0x2409cc: ldr             x0, [fp, #0x18]
    // 0x2409d0: stur            x1, [fp, #-8]
    // 0x2409d4: StoreField: r1->field_f = r0
    //     0x2409d4: stur            w0, [x1, #0xf]
    // 0x2409d8: str             x0, [SP]
    // 0x2409dc: r0 = bounds()
    //     0x2409dc: bl              #0x240584  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::bounds
    // 0x2409e0: stur            x0, [fp, #-0x10]
    // 0x2409e4: ldr             x16, [fp, #0x18]
    // 0x2409e8: str             x16, [SP]
    // 0x2409ec: r0 = renderEditable()
    //     0x2409ec: bl              #0x23f598  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::renderEditable
    // 0x2409f0: cmp             w0, NULL
    // 0x2409f4: b.ne            #0x240a00
    // 0x2409f8: r0 = Null
    //     0x2409f8: mov             x0, NULL
    // 0x2409fc: b               #0x240a04
    // 0x240a00: r0 = false
    //     0x240a00: add             x0, NULL, #0x30  ; false
    // 0x240a04: cmp             w0, NULL
    // 0x240a08: b.eq            #0x240a20
    // 0x240a0c: tbnz            w0, #4, #0x240a20
    // 0x240a10: r0 = false
    //     0x240a10: add             x0, NULL, #0x30  ; false
    // 0x240a14: LeaveFrame
    //     0x240a14: mov             SP, fp
    //     0x240a18: ldp             fp, lr, [SP], #0x10
    // 0x240a1c: ret
    //     0x240a1c: ret             
    // 0x240a20: ldur            x0, [fp, #-0x10]
    // 0x240a24: r16 = Instance_Rect
    //     0x240a24: ldr             x16, [PP, #0x4d58]  ; [pp+0x4d58] Obj!Rect@47d421
    // 0x240a28: cmp             w0, w16
    // 0x240a2c: b.eq            #0x240a94
    // 0x240a30: r16 = Rect
    //     0x240a30: ldr             x16, [PP, #0x4d88]  ; [pp+0x4d88] Type: Rect
    // 0x240a34: r30 = Rect
    //     0x240a34: ldr             lr, [PP, #0x4d88]  ; [pp+0x4d88] Type: Rect
    // 0x240a38: stp             lr, x16, [SP]
    // 0x240a3c: r0 = ==()
    //     0x240a3c: bl              #0x36b020  ; [dart:core] _Type::==
    // 0x240a40: tbz             w0, #4, #0x240a4c
    // 0x240a44: ldur            x0, [fp, #-0x10]
    // 0x240a48: b               #0x240aa4
    // 0x240a4c: ldur            x0, [fp, #-0x10]
    // 0x240a50: r1 = Instance_Rect
    //     0x240a50: ldr             x1, [PP, #0x4d58]  ; [pp+0x4d58] Obj!Rect@47d421
    // 0x240a54: LoadField: d0 = r1->field_7
    //     0x240a54: ldur            d0, [x1, #7]
    // 0x240a58: LoadField: d1 = r0->field_7
    //     0x240a58: ldur            d1, [x0, #7]
    // 0x240a5c: fcmp            d0, d1
    // 0x240a60: b.ne            #0x240aa4
    // 0x240a64: LoadField: d0 = r1->field_f
    //     0x240a64: ldur            d0, [x1, #0xf]
    // 0x240a68: LoadField: d1 = r0->field_f
    //     0x240a68: ldur            d1, [x0, #0xf]
    // 0x240a6c: fcmp            d0, d1
    // 0x240a70: b.ne            #0x240aa4
    // 0x240a74: LoadField: d0 = r1->field_17
    //     0x240a74: ldur            d0, [x1, #0x17]
    // 0x240a78: LoadField: d1 = r0->field_17
    //     0x240a78: ldur            d1, [x0, #0x17]
    // 0x240a7c: fcmp            d0, d1
    // 0x240a80: b.ne            #0x240aa4
    // 0x240a84: LoadField: d0 = r1->field_1f
    //     0x240a84: ldur            d0, [x1, #0x1f]
    // 0x240a88: LoadField: d1 = r0->field_1f
    //     0x240a88: ldur            d1, [x0, #0x1f]
    // 0x240a8c: fcmp            d0, d1
    // 0x240a90: b.ne            #0x240aa4
    // 0x240a94: r0 = false
    //     0x240a94: add             x0, NULL, #0x30  ; false
    // 0x240a98: LeaveFrame
    //     0x240a98: mov             SP, fp
    //     0x240a9c: ldp             fp, lr, [SP], #0x10
    // 0x240aa0: ret
    //     0x240aa0: ret             
    // 0x240aa4: ldr             x1, [fp, #0x10]
    // 0x240aa8: LoadField: d0 = r0->field_17
    //     0x240aa8: ldur            d0, [x0, #0x17]
    // 0x240aac: LoadField: d1 = r1->field_7
    //     0x240aac: ldur            d1, [x1, #7]
    // 0x240ab0: fcmp            d1, d0
    // 0x240ab4: b.ge            #0x240ae8
    // 0x240ab8: LoadField: d0 = r1->field_17
    //     0x240ab8: ldur            d0, [x1, #0x17]
    // 0x240abc: LoadField: d1 = r0->field_7
    //     0x240abc: ldur            d1, [x0, #7]
    // 0x240ac0: fcmp            d1, d0
    // 0x240ac4: b.ge            #0x240ae8
    // 0x240ac8: LoadField: d0 = r0->field_1f
    //     0x240ac8: ldur            d0, [x0, #0x1f]
    // 0x240acc: LoadField: d1 = r1->field_f
    //     0x240acc: ldur            d1, [x1, #0xf]
    // 0x240ad0: fcmp            d1, d0
    // 0x240ad4: b.ge            #0x240ae8
    // 0x240ad8: LoadField: d0 = r1->field_1f
    //     0x240ad8: ldur            d0, [x1, #0x1f]
    // 0x240adc: LoadField: d1 = r0->field_f
    //     0x240adc: ldur            d1, [x0, #0xf]
    // 0x240ae0: fcmp            d1, d0
    // 0x240ae4: b.lt            #0x240af8
    // 0x240ae8: r0 = false
    //     0x240ae8: add             x0, NULL, #0x30  ; false
    // 0x240aec: LeaveFrame
    //     0x240aec: mov             SP, fp
    //     0x240af0: ldp             fp, lr, [SP], #0x10
    // 0x240af4: ret
    //     0x240af4: ret             
    // 0x240af8: ldr             x2, [fp, #0x18]
    // 0x240afc: stp             x1, x0, [SP]
    // 0x240b00: r0 = intersect()
    //     0x240b00: bl              #0x2047a0  ; [dart:ui] Rect::intersect
    // 0x240b04: stur            x0, [fp, #-0x10]
    // 0x240b08: r0 = HitTestResult()
    //     0x240b08: bl              #0x24117c  ; AllocateHitTestResultStub -> HitTestResult (size=0x14)
    // 0x240b0c: stur            x0, [fp, #-0x18]
    // 0x240b10: str             x0, [SP]
    // 0x240b14: r0 = HitTestResult()
    //     0x240b14: bl              #0x241068  ; [package:flutter/src/gestures/hit_test.dart] HitTestResult::HitTestResult
    // 0x240b18: r0 = LoadStaticField(0x970)
    //     0x240b18: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x240b1c: ldr             x0, [x0, #0x12e0]
    // 0x240b20: stur            x0, [fp, #-0x20]
    // 0x240b24: cmp             w0, NULL
    // 0x240b28: b.eq            #0x240bb4
    // 0x240b2c: ldur            x16, [fp, #-0x10]
    // 0x240b30: str             x16, [SP]
    // 0x240b34: r0 = center()
    //     0x240b34: bl              #0x2352ec  ; [dart:ui] Rect::center
    // 0x240b38: mov             x1, x0
    // 0x240b3c: ldr             x0, [fp, #0x18]
    // 0x240b40: stur            x1, [fp, #-0x10]
    // 0x240b44: LoadField: r2 = r0->field_f
    //     0x240b44: ldur            w2, [x0, #0xf]
    // 0x240b48: DecompressPointer r2
    //     0x240b48: add             x2, x2, HEAP, lsl #32
    // 0x240b4c: cmp             w2, NULL
    // 0x240b50: b.eq            #0x240bb8
    // 0x240b54: str             x2, [SP]
    // 0x240b58: r0 = of()
    //     0x240b58: bl              #0x240da4  ; [package:flutter/src/widgets/view.dart] View::of
    // 0x240b5c: LoadField: r1 = r0->field_7
    //     0x240b5c: ldur            x1, [x0, #7]
    // 0x240b60: ldur            x16, [fp, #-0x20]
    // 0x240b64: ldur            lr, [fp, #-0x18]
    // 0x240b68: stp             lr, x16, [SP, #0x10]
    // 0x240b6c: ldur            x16, [fp, #-0x10]
    // 0x240b70: stp             x1, x16, [SP]
    // 0x240b74: r0 = hitTestInView()
    //     0x240b74: bl              #0x240bbc  ; [package:flutter/src/widgets/binding.dart] _WidgetsFlutterBinding&BindingBase&GestureBinding&SchedulerBinding&ServicesBinding&PaintingBinding&SemanticsBinding&RendererBinding::hitTestInView
    // 0x240b78: ldur            x0, [fp, #-0x18]
    // 0x240b7c: LoadField: r3 = r0->field_7
    //     0x240b7c: ldur            w3, [x0, #7]
    // 0x240b80: DecompressPointer r3
    //     0x240b80: add             x3, x3, HEAP, lsl #32
    // 0x240b84: ldur            x2, [fp, #-8]
    // 0x240b88: stur            x3, [fp, #-0x10]
    // 0x240b8c: r1 = Function '<anonymous closure>':.
    //     0x240b8c: ldr             x1, [PP, #0x4d90]  ; [pp+0x4d90] AnonymousClosure: (0x241188), in [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::isInScribbleRect (0x2409a8)
    // 0x240b90: r0 = AllocateClosure()
    //     0x240b90: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x240b94: ldur            x16, [fp, #-0x10]
    // 0x240b98: stp             x0, x16, [SP]
    // 0x240b9c: r0 = any()
    //     0x240b9c: bl              #0x3362c0  ; [dart:collection] ListBase::any
    // 0x240ba0: LeaveFrame
    //     0x240ba0: mov             SP, fp
    //     0x240ba4: ldp             fp, lr, [SP], #0x10
    // 0x240ba8: ret
    //     0x240ba8: ret             
    // 0x240bac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x240bac: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x240bb0: b               #0x2409c0
    // 0x240bb4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x240bb4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x240bb8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x240bb8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] bool <anonymous closure>(dynamic, HitTestEntry<HitTestTarget>) {
    // ** addr: 0x241188, size: 0x7c
    // 0x241188: EnterFrame
    //     0x241188: stp             fp, lr, [SP, #-0x10]!
    //     0x24118c: mov             fp, SP
    // 0x241190: AllocStack(0x18)
    //     0x241190: sub             SP, SP, #0x18
    // 0x241194: SetupParameters()
    //     0x241194: ldr             x0, [fp, #0x18]
    //     0x241198: ldur            w1, [x0, #0x17]
    //     0x24119c: add             x1, x1, HEAP, lsl #32
    // 0x2411a0: CheckStackOverflow
    //     0x2411a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2411a4: cmp             SP, x16
    //     0x2411a8: b.ls            #0x2411fc
    // 0x2411ac: ldr             x0, [fp, #0x10]
    // 0x2411b0: LoadField: r2 = r0->field_b
    //     0x2411b0: ldur            w2, [x0, #0xb]
    // 0x2411b4: DecompressPointer r2
    //     0x2411b4: add             x2, x2, HEAP, lsl #32
    // 0x2411b8: stur            x2, [fp, #-8]
    // 0x2411bc: LoadField: r0 = r1->field_f
    //     0x2411bc: ldur            w0, [x1, #0xf]
    // 0x2411c0: DecompressPointer r0
    //     0x2411c0: add             x0, x0, HEAP, lsl #32
    // 0x2411c4: str             x0, [SP]
    // 0x2411c8: r0 = renderEditable()
    //     0x2411c8: bl              #0x23f598  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::renderEditable
    // 0x2411cc: mov             x1, x0
    // 0x2411d0: ldur            x0, [fp, #-8]
    // 0x2411d4: r2 = LoadClassIdInstr(r0)
    //     0x2411d4: ldur            x2, [x0, #-1]
    //     0x2411d8: ubfx            x2, x2, #0xc, #0x14
    // 0x2411dc: stp             x1, x0, [SP]
    // 0x2411e0: mov             x0, x2
    // 0x2411e4: mov             lr, x0
    // 0x2411e8: ldr             lr, [x21, lr, lsl #3]
    // 0x2411ec: blr             lr
    // 0x2411f0: LeaveFrame
    //     0x2411f0: mov             SP, fp
    //     0x2411f4: ldp             fp, lr, [SP], #0x10
    // 0x2411f8: ret
    //     0x2411f8: ret             
    // 0x2411fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2411fc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x241200: b               #0x2411ac
  }
  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x26f098, size: 0xa4
    // 0x26f098: EnterFrame
    //     0x26f098: stp             fp, lr, [SP, #-0x10]!
    //     0x26f09c: mov             fp, SP
    // 0x26f0a0: ldr             x0, [fp, #0x10]
    // 0x26f0a4: r2 = Null
    //     0x26f0a4: mov             x2, NULL
    // 0x26f0a8: r1 = Null
    //     0x26f0a8: mov             x1, NULL
    // 0x26f0ac: r4 = 59
    //     0x26f0ac: movz            x4, #0x3b
    // 0x26f0b0: branchIfSmi(r0, 0x26f0bc)
    //     0x26f0b0: tbz             w0, #0, #0x26f0bc
    // 0x26f0b4: r4 = LoadClassIdInstr(r0)
    //     0x26f0b4: ldur            x4, [x0, #-1]
    //     0x26f0b8: ubfx            x4, x4, #0xc, #0x14
    // 0x26f0bc: cmp             x4, #0x6a4
    // 0x26f0c0: b.eq            #0x26f0d8
    // 0x26f0c4: r8 = _ScribbleFocusable
    //     0x26f0c4: add             x8, PP, #0x13, lsl #12  ; [pp+0x13d20] Type: _ScribbleFocusable
    //     0x26f0c8: ldr             x8, [x8, #0xd20]
    // 0x26f0cc: r3 = Null
    //     0x26f0cc: add             x3, PP, #0x13, lsl #12  ; [pp+0x13d28] Null
    //     0x26f0d0: ldr             x3, [x3, #0xd28]
    // 0x26f0d4: r0 = _ScribbleFocusable()
    //     0x26f0d4: bl              #0x23f27c  ; IsType__ScribbleFocusable_Stub
    // 0x26f0d8: ldr             x3, [fp, #0x18]
    // 0x26f0dc: LoadField: r2 = r3->field_7
    //     0x26f0dc: ldur            w2, [x3, #7]
    // 0x26f0e0: DecompressPointer r2
    //     0x26f0e0: add             x2, x2, HEAP, lsl #32
    // 0x26f0e4: ldr             x0, [fp, #0x10]
    // 0x26f0e8: r1 = Null
    //     0x26f0e8: mov             x1, NULL
    // 0x26f0ec: cmp             w2, NULL
    // 0x26f0f0: b.eq            #0x26f114
    // 0x26f0f4: LoadField: r4 = r2->field_17
    //     0x26f0f4: ldur            w4, [x2, #0x17]
    // 0x26f0f8: DecompressPointer r4
    //     0x26f0f8: add             x4, x4, HEAP, lsl #32
    // 0x26f0fc: r8 = X0 bound StatefulWidget
    //     0x26f0fc: add             x8, PP, #9, lsl #12  ; [pp+0x9ce0] TypeParameter: X0 bound StatefulWidget
    //     0x26f100: ldr             x8, [x8, #0xce0]
    // 0x26f104: LoadField: r9 = r4->field_7
    //     0x26f104: ldur            x9, [x4, #7]
    // 0x26f108: r3 = Null
    //     0x26f108: add             x3, PP, #0x13, lsl #12  ; [pp+0x13d38] Null
    //     0x26f10c: ldr             x3, [x3, #0xd38]
    // 0x26f110: blr             x9
    // 0x26f114: ldr             x1, [fp, #0x18]
    // 0x26f118: LoadField: r2 = r1->field_b
    //     0x26f118: ldur            w2, [x1, #0xb]
    // 0x26f11c: DecompressPointer r2
    //     0x26f11c: add             x2, x2, HEAP, lsl #32
    // 0x26f120: cmp             w2, NULL
    // 0x26f124: b.eq            #0x26f138
    // 0x26f128: r0 = Null
    //     0x26f128: mov             x0, NULL
    // 0x26f12c: LeaveFrame
    //     0x26f12c: mov             SP, fp
    //     0x26f130: ldp             fp, lr, [SP], #0x10
    // 0x26f134: ret
    //     0x26f134: ret             
    // 0x26f138: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26f138: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x2a5134, size: 0x34
    // 0x2a5134: EnterFrame
    //     0x2a5134: stp             fp, lr, [SP, #-0x10]!
    //     0x2a5138: mov             fp, SP
    // 0x2a513c: ldr             x1, [fp, #0x18]
    // 0x2a5140: LoadField: r2 = r1->field_b
    //     0x2a5140: ldur            w2, [x1, #0xb]
    // 0x2a5144: DecompressPointer r2
    //     0x2a5144: add             x2, x2, HEAP, lsl #32
    // 0x2a5148: cmp             w2, NULL
    // 0x2a514c: b.eq            #0x2a5164
    // 0x2a5150: LoadField: r0 = r2->field_b
    //     0x2a5150: ldur            w0, [x2, #0xb]
    // 0x2a5154: DecompressPointer r0
    //     0x2a5154: add             x0, x0, HEAP, lsl #32
    // 0x2a5158: LeaveFrame
    //     0x2a5158: mov             SP, fp
    //     0x2a515c: ldp             fp, lr, [SP], #0x10
    // 0x2a5160: ret
    //     0x2a5160: ret             
    // 0x2a5164: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a5164: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2b06d4, size: 0x44
    // 0x2b06d4: EnterFrame
    //     0x2b06d4: stp             fp, lr, [SP, #-0x10]!
    //     0x2b06d8: mov             fp, SP
    // 0x2b06dc: AllocStack(0x8)
    //     0x2b06dc: sub             SP, SP, #8
    // 0x2b06e0: CheckStackOverflow
    //     0x2b06e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b06e4: cmp             SP, x16
    //     0x2b06e8: b.ls            #0x2b0710
    // 0x2b06ec: ldr             x0, [fp, #0x10]
    // 0x2b06f0: LoadField: r1 = r0->field_13
    //     0x2b06f0: ldur            w1, [x0, #0x13]
    // 0x2b06f4: DecompressPointer r1
    //     0x2b06f4: add             x1, x1, HEAP, lsl #32
    // 0x2b06f8: str             x1, [SP]
    // 0x2b06fc: r0 = unregisterScribbleElement()
    //     0x2b06fc: bl              #0x2b0718  ; [package:flutter/src/services/text_input.dart] TextInput::unregisterScribbleElement
    // 0x2b0700: r0 = Null
    //     0x2b0700: mov             x0, NULL
    // 0x2b0704: LeaveFrame
    //     0x2b0704: mov             SP, fp
    //     0x2b0708: ldp             fp, lr, [SP], #0x10
    // 0x2b070c: ret
    //     0x2b070c: ret             
    // 0x2b0710: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b0710: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b0714: b               #0x2b06ec
  }
  _ initState(/* No info */) {
    // ** addr: 0x2cbe8c, size: 0x58
    // 0x2cbe8c: EnterFrame
    //     0x2cbe8c: stp             fp, lr, [SP, #-0x10]!
    //     0x2cbe90: mov             fp, SP
    // 0x2cbe94: AllocStack(0x10)
    //     0x2cbe94: sub             SP, SP, #0x10
    // 0x2cbe98: CheckStackOverflow
    //     0x2cbe98: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cbe9c: cmp             SP, x16
    //     0x2cbea0: b.ls            #0x2cbed8
    // 0x2cbea4: ldr             x0, [fp, #0x10]
    // 0x2cbea8: LoadField: r1 = r0->field_b
    //     0x2cbea8: ldur            w1, [x0, #0xb]
    // 0x2cbeac: DecompressPointer r1
    //     0x2cbeac: add             x1, x1, HEAP, lsl #32
    // 0x2cbeb0: cmp             w1, NULL
    // 0x2cbeb4: b.eq            #0x2cbee0
    // 0x2cbeb8: LoadField: r1 = r0->field_13
    //     0x2cbeb8: ldur            w1, [x0, #0x13]
    // 0x2cbebc: DecompressPointer r1
    //     0x2cbebc: add             x1, x1, HEAP, lsl #32
    // 0x2cbec0: stp             x0, x1, [SP]
    // 0x2cbec4: r0 = registerScribbleElement()
    //     0x2cbec4: bl              #0x2cbee4  ; [package:flutter/src/services/text_input.dart] TextInput::registerScribbleElement
    // 0x2cbec8: r0 = Null
    //     0x2cbec8: mov             x0, NULL
    // 0x2cbecc: LeaveFrame
    //     0x2cbecc: mov             SP, fp
    //     0x2cbed0: ldp             fp, lr, [SP], #0x10
    // 0x2cbed4: ret
    //     0x2cbed4: ret             
    // 0x2cbed8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cbed8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cbedc: b               #0x2cbea4
    // 0x2cbee0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2cbee0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _ScribbleFocusableState(/* No info */) {
    // ** addr: 0x2ceddc, size: 0xac
    // 0x2ceddc: EnterFrame
    //     0x2ceddc: stp             fp, lr, [SP, #-0x10]!
    //     0x2cede0: mov             fp, SP
    // 0x2cede4: AllocStack(0x8)
    //     0x2cede4: sub             SP, SP, #8
    // 0x2cede8: CheckStackOverflow
    //     0x2cede8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cedec: cmp             SP, x16
    //     0x2cedf0: b.ls            #0x2cee80
    // 0x2cedf4: r2 = LoadStaticField(0x9a8)
    //     0x2cedf4: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x2cedf8: ldr             x2, [x2, #0x1350]
    // 0x2cedfc: r0 = LoadInt32Instr(r2)
    //     0x2cedfc: sbfx            x0, x2, #1, #0x1f
    //     0x2cee00: tbz             w2, #0, #0x2cee08
    //     0x2cee04: ldur            x0, [x2, #7]
    // 0x2cee08: add             x3, x0, #1
    // 0x2cee0c: r0 = BoxInt64Instr(r3)
    //     0x2cee0c: sbfiz           x0, x3, #1, #0x1f
    //     0x2cee10: cmp             x3, x0, asr #1
    //     0x2cee14: b.eq            #0x2cee20
    //     0x2cee18: bl              #0x3e5e54
    //     0x2cee1c: stur            x3, [x0, #7]
    // 0x2cee20: StoreStaticField(0x9a8, r0)
    //     0x2cee20: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x2cee24: str             x0, [x1, #0x1350]
    // 0x2cee28: r0 = 59
    //     0x2cee28: movz            x0, #0x3b
    // 0x2cee2c: branchIfSmi(r2, 0x2cee38)
    //     0x2cee2c: tbz             w2, #0, #0x2cee38
    // 0x2cee30: r0 = LoadClassIdInstr(r2)
    //     0x2cee30: ldur            x0, [x2, #-1]
    //     0x2cee34: ubfx            x0, x0, #0xc, #0x14
    // 0x2cee38: str             x2, [SP]
    // 0x2cee3c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x2cee3c: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x2cee40: r0 = GDT[cid_x0 + 0x3916]()
    //     0x2cee40: movz            x17, #0x3916
    //     0x2cee44: add             lr, x0, x17
    //     0x2cee48: ldr             lr, [x21, lr, lsl #3]
    //     0x2cee4c: blr             lr
    // 0x2cee50: ldr             x1, [fp, #0x10]
    // 0x2cee54: StoreField: r1->field_13 = r0
    //     0x2cee54: stur            w0, [x1, #0x13]
    //     0x2cee58: ldurb           w16, [x1, #-1]
    //     0x2cee5c: ldurb           w17, [x0, #-1]
    //     0x2cee60: and             x16, x17, x16, lsr #2
    //     0x2cee64: tst             x16, HEAP, lsr #32
    //     0x2cee68: b.eq            #0x2cee70
    //     0x2cee6c: bl              #0x3e4608
    // 0x2cee70: r0 = Null
    //     0x2cee70: mov             x0, NULL
    // 0x2cee74: LeaveFrame
    //     0x2cee74: mov             SP, fp
    //     0x2cee78: ldp             fp, lr, [SP], #0x10
    // 0x2cee7c: ret
    //     0x2cee7c: ret             
    // 0x2cee80: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cee80: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cee84: b               #0x2cedf4
  }
}

// class id: 1397, size: 0x18, field offset: 0x14
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin extends State<dynamic>
     with AutomaticKeepAliveClientMixin<X0 bound StatefulWidget> {

  _ updateKeepAlive(/* No info */) {
    // ** addr: 0x26e130, size: 0x7c
    // 0x26e130: EnterFrame
    //     0x26e130: stp             fp, lr, [SP, #-0x10]!
    //     0x26e134: mov             fp, SP
    // 0x26e138: AllocStack(0x8)
    //     0x26e138: sub             SP, SP, #8
    // 0x26e13c: CheckStackOverflow
    //     0x26e13c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26e140: cmp             SP, x16
    //     0x26e144: b.ls            #0x26e1a4
    // 0x26e148: ldr             x16, [fp, #0x10]
    // 0x26e14c: str             x16, [SP]
    // 0x26e150: r0 = wantKeepAlive()
    //     0x26e150: bl              #0x23dc64  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::wantKeepAlive
    // 0x26e154: tbnz            w0, #4, #0x26e178
    // 0x26e158: ldr             x0, [fp, #0x10]
    // 0x26e15c: LoadField: r1 = r0->field_13
    //     0x26e15c: ldur            w1, [x0, #0x13]
    // 0x26e160: DecompressPointer r1
    //     0x26e160: add             x1, x1, HEAP, lsl #32
    // 0x26e164: cmp             w1, NULL
    // 0x26e168: b.ne            #0x26e194
    // 0x26e16c: str             x0, [SP]
    // 0x26e170: r0 = _ensureKeepAlive()
    //     0x26e170: bl              #0x26664c  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_ensureKeepAlive
    // 0x26e174: b               #0x26e194
    // 0x26e178: ldr             x0, [fp, #0x10]
    // 0x26e17c: LoadField: r1 = r0->field_13
    //     0x26e17c: ldur            w1, [x0, #0x13]
    // 0x26e180: DecompressPointer r1
    //     0x26e180: add             x1, x1, HEAP, lsl #32
    // 0x26e184: cmp             w1, NULL
    // 0x26e188: b.eq            #0x26e194
    // 0x26e18c: str             x0, [SP]
    // 0x26e190: r0 = _releaseKeepAlive()
    //     0x26e190: bl              #0x2665f4  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_releaseKeepAlive
    // 0x26e194: r0 = Null
    //     0x26e194: mov             x0, NULL
    // 0x26e198: LeaveFrame
    //     0x26e198: mov             SP, fp
    //     0x26e19c: ldp             fp, lr, [SP], #0x10
    // 0x26e1a0: ret
    //     0x26e1a0: ret             
    // 0x26e1a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26e1a4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26e1a8: b               #0x26e148
  }
  _ deactivate(/* No info */) {
    // ** addr: 0x278e60, size: 0x4c
    // 0x278e60: EnterFrame
    //     0x278e60: stp             fp, lr, [SP, #-0x10]!
    //     0x278e64: mov             fp, SP
    // 0x278e68: AllocStack(0x8)
    //     0x278e68: sub             SP, SP, #8
    // 0x278e6c: CheckStackOverflow
    //     0x278e6c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x278e70: cmp             SP, x16
    //     0x278e74: b.ls            #0x278ea4
    // 0x278e78: ldr             x0, [fp, #0x10]
    // 0x278e7c: LoadField: r1 = r0->field_13
    //     0x278e7c: ldur            w1, [x0, #0x13]
    // 0x278e80: DecompressPointer r1
    //     0x278e80: add             x1, x1, HEAP, lsl #32
    // 0x278e84: cmp             w1, NULL
    // 0x278e88: b.eq            #0x278e94
    // 0x278e8c: str             x0, [SP]
    // 0x278e90: r0 = _releaseKeepAlive()
    //     0x278e90: bl              #0x2665f4  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_releaseKeepAlive
    // 0x278e94: r0 = Null
    //     0x278e94: mov             x0, NULL
    // 0x278e98: LeaveFrame
    //     0x278e98: mov             SP, fp
    //     0x278e9c: ldp             fp, lr, [SP], #0x10
    // 0x278ea0: ret
    //     0x278ea0: ret             
    // 0x278ea4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x278ea4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x278ea8: b               #0x278e78
  }
  _ build(/* No info */) {
    // ** addr: 0x2a19b4, size: 0x7c
    // 0x2a19b4: EnterFrame
    //     0x2a19b4: stp             fp, lr, [SP, #-0x10]!
    //     0x2a19b8: mov             fp, SP
    // 0x2a19bc: AllocStack(0x8)
    //     0x2a19bc: sub             SP, SP, #8
    // 0x2a19c0: CheckStackOverflow
    //     0x2a19c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a19c4: cmp             SP, x16
    //     0x2a19c8: b.ls            #0x2a1a24
    // 0x2a19cc: ldr             x0, [fp, #0x18]
    // 0x2a19d0: LoadField: r1 = r0->field_b
    //     0x2a19d0: ldur            w1, [x0, #0xb]
    // 0x2a19d4: DecompressPointer r1
    //     0x2a19d4: add             x1, x1, HEAP, lsl #32
    // 0x2a19d8: cmp             w1, NULL
    // 0x2a19dc: b.eq            #0x2a1a2c
    // 0x2a19e0: LoadField: r2 = r1->field_f
    //     0x2a19e0: ldur            w2, [x1, #0xf]
    // 0x2a19e4: DecompressPointer r2
    //     0x2a19e4: add             x2, x2, HEAP, lsl #32
    // 0x2a19e8: str             x2, [SP]
    // 0x2a19ec: r0 = hasFocus()
    //     0x2a19ec: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x2a19f0: tbnz            w0, #4, #0x2a1a10
    // 0x2a19f4: ldr             x0, [fp, #0x18]
    // 0x2a19f8: LoadField: r1 = r0->field_13
    //     0x2a19f8: ldur            w1, [x0, #0x13]
    // 0x2a19fc: DecompressPointer r1
    //     0x2a19fc: add             x1, x1, HEAP, lsl #32
    // 0x2a1a00: cmp             w1, NULL
    // 0x2a1a04: b.ne            #0x2a1a10
    // 0x2a1a08: str             x0, [SP]
    // 0x2a1a0c: r0 = _ensureKeepAlive()
    //     0x2a1a0c: bl              #0x26664c  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_ensureKeepAlive
    // 0x2a1a10: r0 = Instance__NullWidget
    //     0x2a1a10: add             x0, PP, #0x11, lsl #12  ; [pp+0x114a0] Obj!_NullWidget@47bae1
    //     0x2a1a14: ldr             x0, [x0, #0x4a0]
    // 0x2a1a18: LeaveFrame
    //     0x2a1a18: mov             SP, fp
    //     0x2a1a1c: ldp             fp, lr, [SP], #0x10
    // 0x2a1a20: ret
    //     0x2a1a20: ret             
    // 0x2a1a24: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a1a24: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a1a28: b               #0x2a19cc
    // 0x2a1a2c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a1a2c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0x2cbd1c, size: 0x68
    // 0x2cbd1c: EnterFrame
    //     0x2cbd1c: stp             fp, lr, [SP, #-0x10]!
    //     0x2cbd20: mov             fp, SP
    // 0x2cbd24: AllocStack(0x8)
    //     0x2cbd24: sub             SP, SP, #8
    // 0x2cbd28: CheckStackOverflow
    //     0x2cbd28: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cbd2c: cmp             SP, x16
    //     0x2cbd30: b.ls            #0x2cbd78
    // 0x2cbd34: ldr             x0, [fp, #0x10]
    // 0x2cbd38: LoadField: r1 = r0->field_b
    //     0x2cbd38: ldur            w1, [x0, #0xb]
    // 0x2cbd3c: DecompressPointer r1
    //     0x2cbd3c: add             x1, x1, HEAP, lsl #32
    // 0x2cbd40: cmp             w1, NULL
    // 0x2cbd44: b.eq            #0x2cbd80
    // 0x2cbd48: LoadField: r2 = r1->field_f
    //     0x2cbd48: ldur            w2, [x1, #0xf]
    // 0x2cbd4c: DecompressPointer r2
    //     0x2cbd4c: add             x2, x2, HEAP, lsl #32
    // 0x2cbd50: str             x2, [SP]
    // 0x2cbd54: r0 = hasFocus()
    //     0x2cbd54: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x2cbd58: tbnz            w0, #4, #0x2cbd68
    // 0x2cbd5c: ldr             x16, [fp, #0x10]
    // 0x2cbd60: str             x16, [SP]
    // 0x2cbd64: r0 = _ensureKeepAlive()
    //     0x2cbd64: bl              #0x26664c  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_ensureKeepAlive
    // 0x2cbd68: r0 = Null
    //     0x2cbd68: mov             x0, NULL
    // 0x2cbd6c: LeaveFrame
    //     0x2cbd6c: mov             SP, fp
    //     0x2cbd70: ldp             fp, lr, [SP], #0x10
    // 0x2cbd74: ret
    //     0x2cbd74: ret             
    // 0x2cbd78: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cbd78: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cbd7c: b               #0x2cbd34
    // 0x2cbd80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2cbd80: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1398, size: 0x18, field offset: 0x18
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver extends _EditableTextState&State&AutomaticKeepAliveClientMixin
     with WidgetsBindingObserver {
}

// class id: 1399, size: 0x20, field offset: 0x18
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x1c2bbc, size: 0x180
    // 0x1c2bbc: EnterFrame
    //     0x1c2bbc: stp             fp, lr, [SP, #-0x10]!
    //     0x1c2bc0: mov             fp, SP
    // 0x1c2bc4: AllocStack(0x20)
    //     0x1c2bc4: sub             SP, SP, #0x20
    // 0x1c2bc8: CheckStackOverflow
    //     0x1c2bc8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c2bcc: cmp             SP, x16
    //     0x1c2bd0: b.ls            #0x1c2d2c
    // 0x1c2bd4: ldr             x0, [fp, #0x18]
    // 0x1c2bd8: LoadField: r1 = r0->field_1b
    //     0x1c2bd8: ldur            w1, [x0, #0x1b]
    // 0x1c2bdc: DecompressPointer r1
    //     0x1c2bdc: add             x1, x1, HEAP, lsl #32
    // 0x1c2be0: cmp             w1, NULL
    // 0x1c2be4: b.ne            #0x1c2bf0
    // 0x1c2be8: str             x0, [SP]
    // 0x1c2bec: r0 = _updateTickerModeNotifier()
    //     0x1c2bec: bl              #0x1c2db8  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x1c2bf0: ldr             x0, [fp, #0x18]
    // 0x1c2bf4: LoadField: r1 = r0->field_17
    //     0x1c2bf4: ldur            w1, [x0, #0x17]
    // 0x1c2bf8: DecompressPointer r1
    //     0x1c2bf8: add             x1, x1, HEAP, lsl #32
    // 0x1c2bfc: cmp             w1, NULL
    // 0x1c2c00: b.ne            #0x1c2c94
    // 0x1c2c04: r0 = InitLateStaticField(0x4d8) // [dart:collection] ::_uninitializedIndex
    //     0x1c2c04: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1c2c08: ldr             x0, [x0, #0x9b0]
    //     0x1c2c0c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1c2c10: cmp             w0, w16
    //     0x1c2c14: b.ne            #0x1c2c20
    //     0x1c2c18: ldr             x2, [PP, #0x348]  ; [pp+0x348] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x4d8)
    //     0x1c2c1c: bl              #0x3e406c
    // 0x1c2c20: r1 = <_WidgetTicker>
    //     0x1c2c20: ldr             x1, [PP, #0x5aa0]  ; [pp+0x5aa0] TypeArguments: <_WidgetTicker>
    // 0x1c2c24: stur            x0, [fp, #-8]
    // 0x1c2c28: r0 = _Set()
    //     0x1c2c28: bl              #0x191298  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x1c2c2c: mov             x1, x0
    // 0x1c2c30: ldur            x0, [fp, #-8]
    // 0x1c2c34: stur            x1, [fp, #-0x10]
    // 0x1c2c38: StoreField: r1->field_1b = r0
    //     0x1c2c38: stur            w0, [x1, #0x1b]
    // 0x1c2c3c: StoreField: r1->field_b = rZR
    //     0x1c2c3c: stur            wzr, [x1, #0xb]
    // 0x1c2c40: r0 = InitLateStaticField(0x4dc) // [dart:collection] ::_uninitializedData
    //     0x1c2c40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1c2c44: ldr             x0, [x0, #0x9b8]
    //     0x1c2c48: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1c2c4c: cmp             w0, w16
    //     0x1c2c50: b.ne            #0x1c2c5c
    //     0x1c2c54: ldr             x2, [PP, #0x358]  ; [pp+0x358] Field <::._uninitializedData@3220832>: static late final (offset: 0x4dc)
    //     0x1c2c58: bl              #0x3e406c
    // 0x1c2c5c: mov             x1, x0
    // 0x1c2c60: ldur            x0, [fp, #-0x10]
    // 0x1c2c64: StoreField: r0->field_f = r1
    //     0x1c2c64: stur            w1, [x0, #0xf]
    // 0x1c2c68: StoreField: r0->field_13 = rZR
    //     0x1c2c68: stur            wzr, [x0, #0x13]
    // 0x1c2c6c: StoreField: r0->field_17 = rZR
    //     0x1c2c6c: stur            wzr, [x0, #0x17]
    // 0x1c2c70: ldr             x1, [fp, #0x18]
    // 0x1c2c74: StoreField: r1->field_17 = r0
    //     0x1c2c74: stur            w0, [x1, #0x17]
    //     0x1c2c78: ldurb           w16, [x1, #-1]
    //     0x1c2c7c: ldurb           w17, [x0, #-1]
    //     0x1c2c80: and             x16, x17, x16, lsr #2
    //     0x1c2c84: tst             x16, HEAP, lsr #32
    //     0x1c2c88: b.eq            #0x1c2c90
    //     0x1c2c8c: bl              #0x3e4608
    // 0x1c2c90: b               #0x1c2c98
    // 0x1c2c94: mov             x1, x0
    // 0x1c2c98: ldr             x0, [fp, #0x10]
    // 0x1c2c9c: r0 = _WidgetTicker()
    //     0x1c2c9c: bl              #0x1bfbb4  ; Allocate_WidgetTickerStub -> _WidgetTicker (size=0x20)
    // 0x1c2ca0: mov             x2, x0
    // 0x1c2ca4: ldr             x1, [fp, #0x18]
    // 0x1c2ca8: stur            x2, [fp, #-8]
    // 0x1c2cac: StoreField: r2->field_1b = r1
    //     0x1c2cac: stur            w1, [x2, #0x1b]
    // 0x1c2cb0: r0 = false
    //     0x1c2cb0: add             x0, NULL, #0x30  ; false
    // 0x1c2cb4: StoreField: r2->field_b = r0
    //     0x1c2cb4: stur            w0, [x2, #0xb]
    // 0x1c2cb8: ldr             x0, [fp, #0x10]
    // 0x1c2cbc: StoreField: r2->field_13 = r0
    //     0x1c2cbc: stur            w0, [x2, #0x13]
    // 0x1c2cc0: LoadField: r0 = r1->field_1b
    //     0x1c2cc0: ldur            w0, [x1, #0x1b]
    // 0x1c2cc4: DecompressPointer r0
    //     0x1c2cc4: add             x0, x0, HEAP, lsl #32
    // 0x1c2cc8: cmp             w0, NULL
    // 0x1c2ccc: b.eq            #0x1c2d34
    // 0x1c2cd0: r3 = LoadClassIdInstr(r0)
    //     0x1c2cd0: ldur            x3, [x0, #-1]
    //     0x1c2cd4: ubfx            x3, x3, #0xc, #0x14
    // 0x1c2cd8: str             x0, [SP]
    // 0x1c2cdc: mov             x0, x3
    // 0x1c2ce0: r0 = GDT[cid_x0 + -0xfff]()
    //     0x1c2ce0: sub             lr, x0, #0xfff
    //     0x1c2ce4: ldr             lr, [x21, lr, lsl #3]
    //     0x1c2ce8: blr             lr
    // 0x1c2cec: eor             x1, x0, #0x10
    // 0x1c2cf0: ldur            x16, [fp, #-8]
    // 0x1c2cf4: stp             x1, x16, [SP]
    // 0x1c2cf8: r0 = muted=()
    //     0x1c2cf8: bl              #0x189680  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x1c2cfc: ldr             x0, [fp, #0x18]
    // 0x1c2d00: LoadField: r1 = r0->field_17
    //     0x1c2d00: ldur            w1, [x0, #0x17]
    // 0x1c2d04: DecompressPointer r1
    //     0x1c2d04: add             x1, x1, HEAP, lsl #32
    // 0x1c2d08: cmp             w1, NULL
    // 0x1c2d0c: b.eq            #0x1c2d38
    // 0x1c2d10: ldur            x16, [fp, #-8]
    // 0x1c2d14: stp             x16, x1, [SP]
    // 0x1c2d18: r0 = add()
    //     0x1c2d18: bl              #0x3d8c30  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x1c2d1c: ldur            x0, [fp, #-8]
    // 0x1c2d20: LeaveFrame
    //     0x1c2d20: mov             SP, fp
    //     0x1c2d24: ldp             fp, lr, [SP], #0x10
    // 0x1c2d28: ret
    //     0x1c2d28: ret             
    // 0x1c2d2c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c2d2c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c2d30: b               #0x1c2bd4
    // 0x1c2d34: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c2d34: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c2d38: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c2d38: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x1c2db8, size: 0x140
    // 0x1c2db8: EnterFrame
    //     0x1c2db8: stp             fp, lr, [SP, #-0x10]!
    //     0x1c2dbc: mov             fp, SP
    // 0x1c2dc0: AllocStack(0x20)
    //     0x1c2dc0: sub             SP, SP, #0x20
    // 0x1c2dc4: CheckStackOverflow
    //     0x1c2dc4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c2dc8: cmp             SP, x16
    //     0x1c2dcc: b.ls            #0x1c2eec
    // 0x1c2dd0: ldr             x0, [fp, #0x10]
    // 0x1c2dd4: LoadField: r1 = r0->field_f
    //     0x1c2dd4: ldur            w1, [x0, #0xf]
    // 0x1c2dd8: DecompressPointer r1
    //     0x1c2dd8: add             x1, x1, HEAP, lsl #32
    // 0x1c2ddc: cmp             w1, NULL
    // 0x1c2de0: b.eq            #0x1c2ef4
    // 0x1c2de4: str             x1, [SP]
    // 0x1c2de8: r0 = getNotifier()
    //     0x1c2de8: bl              #0x1bf5f0  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x1c2dec: mov             x1, x0
    // 0x1c2df0: ldr             x0, [fp, #0x10]
    // 0x1c2df4: stur            x1, [fp, #-0x10]
    // 0x1c2df8: LoadField: r2 = r0->field_1b
    //     0x1c2df8: ldur            w2, [x0, #0x1b]
    // 0x1c2dfc: DecompressPointer r2
    //     0x1c2dfc: add             x2, x2, HEAP, lsl #32
    // 0x1c2e00: stur            x2, [fp, #-8]
    // 0x1c2e04: cmp             w1, w2
    // 0x1c2e08: b.ne            #0x1c2e1c
    // 0x1c2e0c: r0 = Null
    //     0x1c2e0c: mov             x0, NULL
    // 0x1c2e10: LeaveFrame
    //     0x1c2e10: mov             SP, fp
    //     0x1c2e14: ldp             fp, lr, [SP], #0x10
    // 0x1c2e18: ret
    //     0x1c2e18: ret             
    // 0x1c2e1c: cmp             w2, NULL
    // 0x1c2e20: b.eq            #0x1c2e74
    // 0x1c2e24: r1 = 1
    //     0x1c2e24: movz            x1, #0x1
    // 0x1c2e28: r0 = AllocateContext()
    //     0x1c2e28: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c2e2c: mov             x1, x0
    // 0x1c2e30: ldr             x0, [fp, #0x10]
    // 0x1c2e34: StoreField: r1->field_f = r0
    //     0x1c2e34: stur            w0, [x1, #0xf]
    // 0x1c2e38: mov             x2, x1
    // 0x1c2e3c: r1 = Function '_updateTickers@216311458':.
    //     0x1c2e3c: add             x1, PP, #0x11, lsl #12  ; [pp+0x111a8] AnonymousClosure: (0x1c2ef8), in [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers (0x1c2f40)
    //     0x1c2e40: ldr             x1, [x1, #0x1a8]
    // 0x1c2e44: r0 = AllocateClosure()
    //     0x1c2e44: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c2e48: mov             x1, x0
    // 0x1c2e4c: ldur            x0, [fp, #-8]
    // 0x1c2e50: r2 = LoadClassIdInstr(r0)
    //     0x1c2e50: ldur            x2, [x0, #-1]
    //     0x1c2e54: ubfx            x2, x2, #0xc, #0x14
    // 0x1c2e58: stp             x1, x0, [SP]
    // 0x1c2e5c: mov             x0, x2
    // 0x1c2e60: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x1c2e60: sub             lr, x0, #0xd8f
    //     0x1c2e64: ldr             lr, [x21, lr, lsl #3]
    //     0x1c2e68: blr             lr
    // 0x1c2e6c: ldr             x0, [fp, #0x10]
    // 0x1c2e70: ldur            x1, [fp, #-0x10]
    // 0x1c2e74: r1 = 1
    //     0x1c2e74: movz            x1, #0x1
    // 0x1c2e78: r0 = AllocateContext()
    //     0x1c2e78: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c2e7c: mov             x1, x0
    // 0x1c2e80: ldr             x0, [fp, #0x10]
    // 0x1c2e84: StoreField: r1->field_f = r0
    //     0x1c2e84: stur            w0, [x1, #0xf]
    // 0x1c2e88: mov             x2, x1
    // 0x1c2e8c: r1 = Function '_updateTickers@216311458':.
    //     0x1c2e8c: add             x1, PP, #0x11, lsl #12  ; [pp+0x111a8] AnonymousClosure: (0x1c2ef8), in [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers (0x1c2f40)
    //     0x1c2e90: ldr             x1, [x1, #0x1a8]
    // 0x1c2e94: r0 = AllocateClosure()
    //     0x1c2e94: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c2e98: ldur            x1, [fp, #-0x10]
    // 0x1c2e9c: r2 = LoadClassIdInstr(r1)
    //     0x1c2e9c: ldur            x2, [x1, #-1]
    //     0x1c2ea0: ubfx            x2, x2, #0xc, #0x14
    // 0x1c2ea4: stp             x0, x1, [SP]
    // 0x1c2ea8: mov             x0, x2
    // 0x1c2eac: r0 = GDT[cid_x0 + -0x7f2]()
    //     0x1c2eac: sub             lr, x0, #0x7f2
    //     0x1c2eb0: ldr             lr, [x21, lr, lsl #3]
    //     0x1c2eb4: blr             lr
    // 0x1c2eb8: ldur            x0, [fp, #-0x10]
    // 0x1c2ebc: ldr             x1, [fp, #0x10]
    // 0x1c2ec0: StoreField: r1->field_1b = r0
    //     0x1c2ec0: stur            w0, [x1, #0x1b]
    //     0x1c2ec4: ldurb           w16, [x1, #-1]
    //     0x1c2ec8: ldurb           w17, [x0, #-1]
    //     0x1c2ecc: and             x16, x17, x16, lsr #2
    //     0x1c2ed0: tst             x16, HEAP, lsr #32
    //     0x1c2ed4: b.eq            #0x1c2edc
    //     0x1c2ed8: bl              #0x3e4608
    // 0x1c2edc: r0 = Null
    //     0x1c2edc: mov             x0, NULL
    // 0x1c2ee0: LeaveFrame
    //     0x1c2ee0: mov             SP, fp
    //     0x1c2ee4: ldp             fp, lr, [SP], #0x10
    // 0x1c2ee8: ret
    //     0x1c2ee8: ret             
    // 0x1c2eec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c2eec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c2ef0: b               #0x1c2dd0
    // 0x1c2ef4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c2ef4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTickers(dynamic) {
    // ** addr: 0x1c2ef8, size: 0x48
    // 0x1c2ef8: EnterFrame
    //     0x1c2ef8: stp             fp, lr, [SP, #-0x10]!
    //     0x1c2efc: mov             fp, SP
    // 0x1c2f00: AllocStack(0x8)
    //     0x1c2f00: sub             SP, SP, #8
    // 0x1c2f04: SetupParameters()
    //     0x1c2f04: ldr             x0, [fp, #0x10]
    //     0x1c2f08: ldur            w1, [x0, #0x17]
    //     0x1c2f0c: add             x1, x1, HEAP, lsl #32
    // 0x1c2f10: CheckStackOverflow
    //     0x1c2f10: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c2f14: cmp             SP, x16
    //     0x1c2f18: b.ls            #0x1c2f38
    // 0x1c2f1c: LoadField: r0 = r1->field_f
    //     0x1c2f1c: ldur            w0, [x1, #0xf]
    // 0x1c2f20: DecompressPointer r0
    //     0x1c2f20: add             x0, x0, HEAP, lsl #32
    // 0x1c2f24: str             x0, [SP]
    // 0x1c2f28: r0 = _updateTickers()
    //     0x1c2f28: bl              #0x1c2f40  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers
    // 0x1c2f2c: LeaveFrame
    //     0x1c2f2c: mov             SP, fp
    //     0x1c2f30: ldp             fp, lr, [SP], #0x10
    // 0x1c2f34: ret
    //     0x1c2f34: ret             
    // 0x1c2f38: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c2f38: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c2f3c: b               #0x1c2f1c
  }
  _ _updateTickers(/* No info */) {
    // ** addr: 0x1c2f40, size: 0x168
    // 0x1c2f40: EnterFrame
    //     0x1c2f40: stp             fp, lr, [SP, #-0x10]!
    //     0x1c2f44: mov             fp, SP
    // 0x1c2f48: AllocStack(0x28)
    //     0x1c2f48: sub             SP, SP, #0x28
    // 0x1c2f4c: CheckStackOverflow
    //     0x1c2f4c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c2f50: cmp             SP, x16
    //     0x1c2f54: b.ls            #0x1c3090
    // 0x1c2f58: ldr             x1, [fp, #0x10]
    // 0x1c2f5c: LoadField: r0 = r1->field_17
    //     0x1c2f5c: ldur            w0, [x1, #0x17]
    // 0x1c2f60: DecompressPointer r0
    //     0x1c2f60: add             x0, x0, HEAP, lsl #32
    // 0x1c2f64: cmp             w0, NULL
    // 0x1c2f68: b.eq            #0x1c3080
    // 0x1c2f6c: LoadField: r0 = r1->field_1b
    //     0x1c2f6c: ldur            w0, [x1, #0x1b]
    // 0x1c2f70: DecompressPointer r0
    //     0x1c2f70: add             x0, x0, HEAP, lsl #32
    // 0x1c2f74: cmp             w0, NULL
    // 0x1c2f78: b.eq            #0x1c3098
    // 0x1c2f7c: r2 = LoadClassIdInstr(r0)
    //     0x1c2f7c: ldur            x2, [x0, #-1]
    //     0x1c2f80: ubfx            x2, x2, #0xc, #0x14
    // 0x1c2f84: str             x0, [SP]
    // 0x1c2f88: mov             x0, x2
    // 0x1c2f8c: r0 = GDT[cid_x0 + -0xfff]()
    //     0x1c2f8c: sub             lr, x0, #0xfff
    //     0x1c2f90: ldr             lr, [x21, lr, lsl #3]
    //     0x1c2f94: blr             lr
    // 0x1c2f98: eor             x1, x0, #0x10
    // 0x1c2f9c: ldr             x0, [fp, #0x10]
    // 0x1c2fa0: stur            x1, [fp, #-8]
    // 0x1c2fa4: LoadField: r2 = r0->field_17
    //     0x1c2fa4: ldur            w2, [x0, #0x17]
    // 0x1c2fa8: DecompressPointer r2
    //     0x1c2fa8: add             x2, x2, HEAP, lsl #32
    // 0x1c2fac: cmp             w2, NULL
    // 0x1c2fb0: b.eq            #0x1c309c
    // 0x1c2fb4: str             x2, [SP]
    // 0x1c2fb8: r0 = iterator()
    //     0x1c2fb8: bl              #0x34cfcc  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x1c2fbc: stur            x0, [fp, #-0x18]
    // 0x1c2fc0: LoadField: r2 = r0->field_7
    //     0x1c2fc0: ldur            w2, [x0, #7]
    // 0x1c2fc4: DecompressPointer r2
    //     0x1c2fc4: add             x2, x2, HEAP, lsl #32
    // 0x1c2fc8: stur            x2, [fp, #-0x10]
    // 0x1c2fcc: ldur            x1, [fp, #-8]
    // 0x1c2fd0: CheckStackOverflow
    //     0x1c2fd0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c2fd4: cmp             SP, x16
    //     0x1c2fd8: b.ls            #0x1c30a0
    // 0x1c2fdc: str             x0, [SP]
    // 0x1c2fe0: r0 = moveNext()
    //     0x1c2fe0: bl              #0x39b2b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x1c2fe4: tbnz            w0, #4, #0x1c3080
    // 0x1c2fe8: ldur            x3, [fp, #-0x18]
    // 0x1c2fec: LoadField: r4 = r3->field_33
    //     0x1c2fec: ldur            w4, [x3, #0x33]
    // 0x1c2ff0: DecompressPointer r4
    //     0x1c2ff0: add             x4, x4, HEAP, lsl #32
    // 0x1c2ff4: stur            x4, [fp, #-0x20]
    // 0x1c2ff8: cmp             w4, NULL
    // 0x1c2ffc: b.ne            #0x1c3030
    // 0x1c3000: mov             x0, x4
    // 0x1c3004: ldur            x2, [fp, #-0x10]
    // 0x1c3008: r1 = Null
    //     0x1c3008: mov             x1, NULL
    // 0x1c300c: cmp             w2, NULL
    // 0x1c3010: b.eq            #0x1c3030
    // 0x1c3014: LoadField: r4 = r2->field_17
    //     0x1c3014: ldur            w4, [x2, #0x17]
    // 0x1c3018: DecompressPointer r4
    //     0x1c3018: add             x4, x4, HEAP, lsl #32
    // 0x1c301c: r8 = X0
    //     0x1c301c: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x1c3020: LoadField: r9 = r4->field_7
    //     0x1c3020: ldur            x9, [x4, #7]
    // 0x1c3024: r3 = Null
    //     0x1c3024: add             x3, PP, #0x11, lsl #12  ; [pp+0x11198] Null
    //     0x1c3028: ldr             x3, [x3, #0x198]
    // 0x1c302c: blr             x9
    // 0x1c3030: ldur            x1, [fp, #-8]
    // 0x1c3034: ldur            x0, [fp, #-0x20]
    // 0x1c3038: LoadField: r2 = r0->field_b
    //     0x1c3038: ldur            w2, [x0, #0xb]
    // 0x1c303c: DecompressPointer r2
    //     0x1c303c: add             x2, x2, HEAP, lsl #32
    // 0x1c3040: cmp             w1, w2
    // 0x1c3044: b.eq            #0x1c3074
    // 0x1c3048: StoreField: r0->field_b = r1
    //     0x1c3048: stur            w1, [x0, #0xb]
    // 0x1c304c: tbnz            w1, #4, #0x1c305c
    // 0x1c3050: str             x0, [SP]
    // 0x1c3054: r0 = unscheduleTick()
    //     0x1c3054: bl              #0x1bf3c4  ; [package:flutter/src/scheduler/ticker.dart] Ticker::unscheduleTick
    // 0x1c3058: b               #0x1c3074
    // 0x1c305c: str             x0, [SP]
    // 0x1c3060: r0 = shouldScheduleTick()
    //     0x1c3060: bl              #0x1bf37c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::shouldScheduleTick
    // 0x1c3064: tbnz            w0, #4, #0x1c3074
    // 0x1c3068: ldur            x16, [fp, #-0x20]
    // 0x1c306c: str             x16, [SP]
    // 0x1c3070: r0 = scheduleTick()
    //     0x1c3070: bl              #0x189704  ; [package:flutter/src/scheduler/ticker.dart] Ticker::scheduleTick
    // 0x1c3074: ldur            x0, [fp, #-0x18]
    // 0x1c3078: ldur            x2, [fp, #-0x10]
    // 0x1c307c: b               #0x1c2fcc
    // 0x1c3080: r0 = Null
    //     0x1c3080: mov             x0, NULL
    // 0x1c3084: LeaveFrame
    //     0x1c3084: mov             SP, fp
    //     0x1c3088: ldp             fp, lr, [SP], #0x10
    // 0x1c308c: ret
    //     0x1c308c: ret             
    // 0x1c3090: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c3090: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c3094: b               #0x1c2f58
    // 0x1c3098: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c3098: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c309c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c309c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c30a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c30a0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c30a4: b               #0x1c2fdc
  }
  _ activate(/* No info */) {
    // ** addr: 0x264118, size: 0x48
    // 0x264118: EnterFrame
    //     0x264118: stp             fp, lr, [SP, #-0x10]!
    //     0x26411c: mov             fp, SP
    // 0x264120: AllocStack(0x8)
    //     0x264120: sub             SP, SP, #8
    // 0x264124: CheckStackOverflow
    //     0x264124: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x264128: cmp             SP, x16
    //     0x26412c: b.ls            #0x264158
    // 0x264130: ldr             x16, [fp, #0x10]
    // 0x264134: str             x16, [SP]
    // 0x264138: r0 = _updateTickerModeNotifier()
    //     0x264138: bl              #0x1c2db8  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x26413c: ldr             x16, [fp, #0x10]
    // 0x264140: str             x16, [SP]
    // 0x264144: r0 = _updateTickers()
    //     0x264144: bl              #0x1c2f40  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers
    // 0x264148: r0 = Null
    //     0x264148: mov             x0, NULL
    // 0x26414c: LeaveFrame
    //     0x26414c: mov             SP, fp
    //     0x264150: ldp             fp, lr, [SP], #0x10
    // 0x264154: ret
    //     0x264154: ret             
    // 0x264158: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x264158: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26415c: b               #0x264130
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2b050c, size: 0xa0
    // 0x2b050c: EnterFrame
    //     0x2b050c: stp             fp, lr, [SP, #-0x10]!
    //     0x2b0510: mov             fp, SP
    // 0x2b0514: AllocStack(0x18)
    //     0x2b0514: sub             SP, SP, #0x18
    // 0x2b0518: CheckStackOverflow
    //     0x2b0518: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b051c: cmp             SP, x16
    //     0x2b0520: b.ls            #0x2b05a4
    // 0x2b0524: ldr             x0, [fp, #0x10]
    // 0x2b0528: LoadField: r1 = r0->field_1b
    //     0x2b0528: ldur            w1, [x0, #0x1b]
    // 0x2b052c: DecompressPointer r1
    //     0x2b052c: add             x1, x1, HEAP, lsl #32
    // 0x2b0530: stur            x1, [fp, #-8]
    // 0x2b0534: cmp             w1, NULL
    // 0x2b0538: b.ne            #0x2b0544
    // 0x2b053c: mov             x1, x0
    // 0x2b0540: b               #0x2b0590
    // 0x2b0544: r1 = 1
    //     0x2b0544: movz            x1, #0x1
    // 0x2b0548: r0 = AllocateContext()
    //     0x2b0548: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2b054c: mov             x1, x0
    // 0x2b0550: ldr             x0, [fp, #0x10]
    // 0x2b0554: StoreField: r1->field_f = r0
    //     0x2b0554: stur            w0, [x1, #0xf]
    // 0x2b0558: mov             x2, x1
    // 0x2b055c: r1 = Function '_updateTickers@216311458':.
    //     0x2b055c: add             x1, PP, #0x11, lsl #12  ; [pp+0x111a8] AnonymousClosure: (0x1c2ef8), in [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers (0x1c2f40)
    //     0x2b0560: ldr             x1, [x1, #0x1a8]
    // 0x2b0564: r0 = AllocateClosure()
    //     0x2b0564: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b0568: mov             x1, x0
    // 0x2b056c: ldur            x0, [fp, #-8]
    // 0x2b0570: r2 = LoadClassIdInstr(r0)
    //     0x2b0570: ldur            x2, [x0, #-1]
    //     0x2b0574: ubfx            x2, x2, #0xc, #0x14
    // 0x2b0578: stp             x1, x0, [SP]
    // 0x2b057c: mov             x0, x2
    // 0x2b0580: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x2b0580: sub             lr, x0, #0xd8f
    //     0x2b0584: ldr             lr, [x21, lr, lsl #3]
    //     0x2b0588: blr             lr
    // 0x2b058c: ldr             x1, [fp, #0x10]
    // 0x2b0590: StoreField: r1->field_1b = rNULL
    //     0x2b0590: stur            NULL, [x1, #0x1b]
    // 0x2b0594: r0 = Null
    //     0x2b0594: mov             x0, NULL
    // 0x2b0598: LeaveFrame
    //     0x2b0598: mov             SP, fp
    //     0x2b059c: ldp             fp, lr, [SP], #0x10
    // 0x2b05a0: ret
    //     0x2b05a0: ret             
    // 0x2b05a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b05a4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b05a8: b               #0x2b0524
  }
  _ _removeTicker(/* No info */) {
    // ** addr: 0x326ec4, size: 0x54
    // 0x326ec4: EnterFrame
    //     0x326ec4: stp             fp, lr, [SP, #-0x10]!
    //     0x326ec8: mov             fp, SP
    // 0x326ecc: AllocStack(0x10)
    //     0x326ecc: sub             SP, SP, #0x10
    // 0x326ed0: CheckStackOverflow
    //     0x326ed0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x326ed4: cmp             SP, x16
    //     0x326ed8: b.ls            #0x326f0c
    // 0x326edc: ldr             x0, [fp, #0x18]
    // 0x326ee0: LoadField: r1 = r0->field_17
    //     0x326ee0: ldur            w1, [x0, #0x17]
    // 0x326ee4: DecompressPointer r1
    //     0x326ee4: add             x1, x1, HEAP, lsl #32
    // 0x326ee8: cmp             w1, NULL
    // 0x326eec: b.eq            #0x326f14
    // 0x326ef0: ldr             x16, [fp, #0x10]
    // 0x326ef4: stp             x16, x1, [SP]
    // 0x326ef8: r0 = remove()
    //     0x326ef8: bl              #0x3df624  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::remove
    // 0x326efc: r0 = Null
    //     0x326efc: mov             x0, NULL
    // 0x326f00: LeaveFrame
    //     0x326f00: mov             SP, fp
    //     0x326f04: ldp             fp, lr, [SP], #0x10
    // 0x326f08: ret
    //     0x326f08: ret             
    // 0x326f0c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x326f0c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x326f10: b               #0x326edc
    // 0x326f14: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x326f14: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1400, size: 0x20, field offset: 0x20
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin
     with TextSelectionDelegate {
}

// class id: 1401, size: 0x20, field offset: 0x20
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate&TextInputClient extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate
     with TextInputClient {
}

// class id: 1402, size: 0xd0, field offset: 0x20
class EditableTextState extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate&TextInputClient
    implements AutofillClient {

  late final RenderEditable renderEditable; // offset: 0xac
  late final Simulation _iosBlinkCursorSimulation; // offset: 0x28
  late SpellCheckConfiguration _spellCheckConfiguration; // offset: 0x60
  late TextStyle _style; // offset: 0x64
  late final Map<Type, Action<Intent>> _actions; // offset: 0xcc
  late final Action<ReplaceTextIntent> _replaceTextAction; // offset: 0xc0
  late final Action<UpdateSelectionIntent> _updateSelectionAction; // offset: 0xc4
  late final _UpdateTextSelectionVerticallyAction<DirectionalCaretMovementIntent> _verticalSelectionUpdateAction; // offset: 0xc8
  late final Action<TransposeCharactersIntent> _transposeCharactersAction; // offset: 0xbc
  late double _lastBottomViewInset; // offset: 0x98

  get _ _value(/* No info */) {
    // ** addr: 0x22c0b0, size: 0x3c
    // 0x22c0b0: EnterFrame
    //     0x22c0b0: stp             fp, lr, [SP, #-0x10]!
    //     0x22c0b4: mov             fp, SP
    // 0x22c0b8: ldr             x1, [fp, #0x10]
    // 0x22c0bc: LoadField: r2 = r1->field_b
    //     0x22c0bc: ldur            w2, [x1, #0xb]
    // 0x22c0c0: DecompressPointer r2
    //     0x22c0c0: add             x2, x2, HEAP, lsl #32
    // 0x22c0c4: cmp             w2, NULL
    // 0x22c0c8: b.eq            #0x22c0e8
    // 0x22c0cc: LoadField: r1 = r2->field_b
    //     0x22c0cc: ldur            w1, [x2, #0xb]
    // 0x22c0d0: DecompressPointer r1
    //     0x22c0d0: add             x1, x1, HEAP, lsl #32
    // 0x22c0d4: LoadField: r0 = r1->field_27
    //     0x22c0d4: ldur            w0, [x1, #0x27]
    // 0x22c0d8: DecompressPointer r0
    //     0x22c0d8: add             x0, x0, HEAP, lsl #32
    // 0x22c0dc: LeaveFrame
    //     0x22c0dc: mov             SP, fp
    //     0x22c0e0: ldp             fp, lr, [SP], #0x10
    // 0x22c0e4: ret
    //     0x22c0e4: ret             
    // 0x22c0e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c0e8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ userUpdateTextEditingValue(/* No info */) {
    // ** addr: 0x22c13c, size: 0x170
    // 0x22c13c: EnterFrame
    //     0x22c13c: stp             fp, lr, [SP, #-0x10]!
    //     0x22c140: mov             fp, SP
    // 0x22c144: AllocStack(0x20)
    //     0x22c144: sub             SP, SP, #0x20
    // 0x22c148: CheckStackOverflow
    //     0x22c148: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22c14c: cmp             SP, x16
    //     0x22c150: b.ls            #0x22c294
    // 0x22c154: ldr             x0, [fp, #0x20]
    // 0x22c158: LoadField: r1 = r0->field_b
    //     0x22c158: ldur            w1, [x0, #0xb]
    // 0x22c15c: DecompressPointer r1
    //     0x22c15c: add             x1, x1, HEAP, lsl #32
    // 0x22c160: cmp             w1, NULL
    // 0x22c164: b.eq            #0x22c29c
    // 0x22c168: LoadField: r2 = r1->field_b
    //     0x22c168: ldur            w2, [x1, #0xb]
    // 0x22c16c: DecompressPointer r2
    //     0x22c16c: add             x2, x2, HEAP, lsl #32
    // 0x22c170: LoadField: r1 = r2->field_27
    //     0x22c170: ldur            w1, [x2, #0x27]
    // 0x22c174: DecompressPointer r1
    //     0x22c174: add             x1, x1, HEAP, lsl #32
    // 0x22c178: ldr             x16, [fp, #0x18]
    // 0x22c17c: stp             x16, x1, [SP]
    // 0x22c180: r0 = ==()
    //     0x22c180: bl              #0x3688c0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x22c184: eor             x1, x0, #0x10
    // 0x22c188: tbnz            w1, #4, #0x22c19c
    // 0x22c18c: ldr             x16, [fp, #0x20]
    // 0x22c190: r30 = true
    //     0x22c190: add             lr, NULL, #0x20  ; true
    // 0x22c194: stp             lr, x16, [SP]
    // 0x22c198: r0 = _scheduleShowCaretOnScreen()
    //     0x22c198: bl              #0x24868c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x22c19c: ldr             x0, [fp, #0x20]
    // 0x22c1a0: LoadField: r1 = r0->field_b
    //     0x22c1a0: ldur            w1, [x0, #0xb]
    // 0x22c1a4: DecompressPointer r1
    //     0x22c1a4: add             x1, x1, HEAP, lsl #32
    // 0x22c1a8: cmp             w1, NULL
    // 0x22c1ac: b.eq            #0x22c2a0
    // 0x22c1b0: LoadField: r2 = r1->field_b
    //     0x22c1b0: ldur            w2, [x1, #0xb]
    // 0x22c1b4: DecompressPointer r2
    //     0x22c1b4: add             x2, x2, HEAP, lsl #32
    // 0x22c1b8: LoadField: r1 = r2->field_27
    //     0x22c1b8: ldur            w1, [x2, #0x27]
    // 0x22c1bc: DecompressPointer r1
    //     0x22c1bc: add             x1, x1, HEAP, lsl #32
    // 0x22c1c0: ldr             x16, [fp, #0x18]
    // 0x22c1c4: stp             x1, x16, [SP]
    // 0x22c1c8: r0 = ==()
    //     0x22c1c8: bl              #0x3688c0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x22c1cc: tbnz            w0, #4, #0x22c264
    // 0x22c1d0: ldr             x0, [fp, #0x20]
    // 0x22c1d4: LoadField: r1 = r0->field_b
    //     0x22c1d4: ldur            w1, [x0, #0xb]
    // 0x22c1d8: DecompressPointer r1
    //     0x22c1d8: add             x1, x1, HEAP, lsl #32
    // 0x22c1dc: cmp             w1, NULL
    // 0x22c1e0: b.eq            #0x22c2a4
    // 0x22c1e4: LoadField: r2 = r1->field_f
    //     0x22c1e4: ldur            w2, [x1, #0xf]
    // 0x22c1e8: DecompressPointer r2
    //     0x22c1e8: add             x2, x2, HEAP, lsl #32
    // 0x22c1ec: str             x2, [SP]
    // 0x22c1f0: r0 = hasFocus()
    //     0x22c1f0: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x22c1f4: tbz             w0, #4, #0x22c254
    // 0x22c1f8: ldr             x0, [fp, #0x20]
    // 0x22c1fc: str             x0, [SP]
    // 0x22c200: r0 = _flagInternalFocus()
    //     0x22c200: bl              #0x2483d0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_flagInternalFocus
    // 0x22c204: ldr             x0, [fp, #0x20]
    // 0x22c208: LoadField: r1 = r0->field_b
    //     0x22c208: ldur            w1, [x0, #0xb]
    // 0x22c20c: DecompressPointer r1
    //     0x22c20c: add             x1, x1, HEAP, lsl #32
    // 0x22c210: cmp             w1, NULL
    // 0x22c214: b.eq            #0x22c2a8
    // 0x22c218: LoadField: r2 = r1->field_f
    //     0x22c218: ldur            w2, [x1, #0xf]
    // 0x22c21c: DecompressPointer r2
    //     0x22c21c: add             x2, x2, HEAP, lsl #32
    // 0x22c220: str             x2, [SP]
    // 0x22c224: r0 = requestFocus()
    //     0x22c224: bl              #0x24837c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::requestFocus
    // 0x22c228: ldr             x16, [fp, #0x20]
    // 0x22c22c: str             x16, [SP]
    // 0x22c230: r0 = _createSelectionOverlay()
    //     0x22c230: bl              #0x245c6c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay
    // 0x22c234: ldr             x1, [fp, #0x20]
    // 0x22c238: StoreField: r1->field_3f = r0
    //     0x22c238: stur            w0, [x1, #0x3f]
    //     0x22c23c: ldurb           w16, [x1, #-1]
    //     0x22c240: ldurb           w17, [x0, #-1]
    //     0x22c244: and             x16, x17, x16, lsr #2
    //     0x22c248: tst             x16, HEAP, lsr #32
    //     0x22c24c: b.eq            #0x22c254
    //     0x22c250: bl              #0x3e4608
    // 0x22c254: r0 = Null
    //     0x22c254: mov             x0, NULL
    // 0x22c258: LeaveFrame
    //     0x22c258: mov             SP, fp
    //     0x22c25c: ldp             fp, lr, [SP], #0x10
    // 0x22c260: ret
    //     0x22c260: ret             
    // 0x22c264: ldr             x1, [fp, #0x20]
    // 0x22c268: ldr             x16, [fp, #0x18]
    // 0x22c26c: stp             x16, x1, [SP, #0x10]
    // 0x22c270: ldr             x16, [fp, #0x10]
    // 0x22c274: r30 = true
    //     0x22c274: add             lr, NULL, #0x20  ; true
    // 0x22c278: stp             lr, x16, [SP]
    // 0x22c27c: r4 = const [0, 0x4, 0x4, 0x3, userInteraction, 0x3, null]
    //     0x22c27c: ldr             x4, [PP, #0x5938]  ; [pp+0x5938] List(7) [0, 0x4, 0x4, 0x3, "userInteraction", 0x3, Null]
    // 0x22c280: r0 = _formatAndSetValue()
    //     0x22c280: bl              #0x22c2ac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_formatAndSetValue
    // 0x22c284: r0 = Null
    //     0x22c284: mov             x0, NULL
    // 0x22c288: LeaveFrame
    //     0x22c288: mov             SP, fp
    //     0x22c28c: ldp             fp, lr, [SP], #0x10
    // 0x22c290: ret
    //     0x22c290: ret             
    // 0x22c294: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22c294: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22c298: b               #0x22c154
    // 0x22c29c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c29c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c2a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c2a0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c2a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c2a4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c2a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c2a8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _formatAndSetValue(/* No info */) {
    // ** addr: 0x22c2ac, size: 0x554
    // 0x22c2ac: EnterFrame
    //     0x22c2ac: stp             fp, lr, [SP, #-0x10]!
    //     0x22c2b0: mov             fp, SP
    // 0x22c2b4: AllocStack(0x110)
    //     0x22c2b4: sub             SP, SP, #0x110
    // 0x22c2b8: SetupParameters(EditableTextState this /* r3, fp-0xc8 */, dynamic _ /* r4, fp-0xc0 */, dynamic _ /* r5, fp-0xb8 */, {dynamic userInteraction = false /* r0, fp-0xb0 */})
    //     0x22c2b8: mov             x0, x4
    //     0x22c2bc: ldur            w1, [x0, #0x13]
    //     0x22c2c0: add             x1, x1, HEAP, lsl #32
    //     0x22c2c4: sub             x2, x1, #6
    //     0x22c2c8: add             x3, fp, w2, sxtw #2
    //     0x22c2cc: ldr             x3, [x3, #0x20]
    //     0x22c2d0: stur            x3, [fp, #-0xc8]
    //     0x22c2d4: add             x4, fp, w2, sxtw #2
    //     0x22c2d8: ldr             x4, [x4, #0x18]
    //     0x22c2dc: stur            x4, [fp, #-0xc0]
    //     0x22c2e0: add             x5, fp, w2, sxtw #2
    //     0x22c2e4: ldr             x5, [x5, #0x10]
    //     0x22c2e8: stur            x5, [fp, #-0xb8]
    //     0x22c2ec: ldur            w2, [x0, #0x1f]
    //     0x22c2f0: add             x2, x2, HEAP, lsl #32
    //     0x22c2f4: ldr             x16, [PP, #0x5940]  ; [pp+0x5940] "userInteraction"
    //     0x22c2f8: cmp             w2, w16
    //     0x22c2fc: b.ne            #0x22c31c
    //     0x22c300: ldur            w2, [x0, #0x23]
    //     0x22c304: add             x2, x2, HEAP, lsl #32
    //     0x22c308: sub             w0, w1, w2
    //     0x22c30c: add             x1, fp, w0, sxtw #2
    //     0x22c310: ldr             x1, [x1, #8]
    //     0x22c314: mov             x0, x1
    //     0x22c318: b               #0x22c320
    //     0x22c31c: add             x0, NULL, #0x30  ; false
    //     0x22c320: stur            x0, [fp, #-0xb0]
    // 0x22c324: CheckStackOverflow
    //     0x22c324: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22c328: cmp             SP, x16
    //     0x22c32c: b.ls            #0x22c7e0
    // 0x22c330: r1 = 1
    //     0x22c330: movz            x1, #0x1
    // 0x22c334: r0 = AllocateContext()
    //     0x22c334: bl              #0x3e4e00  ; AllocateContextStub
    // 0x22c338: mov             x2, x0
    // 0x22c33c: ldur            x1, [fp, #-0xc8]
    // 0x22c340: stur            x2, [fp, #-0xd8]
    // 0x22c344: StoreField: r2->field_f = r1
    //     0x22c344: stur            w1, [x2, #0xf]
    // 0x22c348: LoadField: r0 = r1->field_b
    //     0x22c348: ldur            w0, [x1, #0xb]
    // 0x22c34c: DecompressPointer r0
    //     0x22c34c: add             x0, x0, HEAP, lsl #32
    // 0x22c350: cmp             w0, NULL
    // 0x22c354: b.eq            #0x22c7e8
    // 0x22c358: LoadField: r3 = r0->field_b
    //     0x22c358: ldur            w3, [x0, #0xb]
    // 0x22c35c: DecompressPointer r3
    //     0x22c35c: add             x3, x3, HEAP, lsl #32
    // 0x22c360: LoadField: r4 = r3->field_27
    //     0x22c360: ldur            w4, [x3, #0x27]
    // 0x22c364: DecompressPointer r4
    //     0x22c364: add             x4, x4, HEAP, lsl #32
    // 0x22c368: stur            x4, [fp, #-0xd0]
    // 0x22c36c: LoadField: r0 = r4->field_7
    //     0x22c36c: ldur            w0, [x4, #7]
    // 0x22c370: DecompressPointer r0
    //     0x22c370: add             x0, x0, HEAP, lsl #32
    // 0x22c374: ldur            x3, [fp, #-0xc0]
    // 0x22c378: LoadField: r5 = r3->field_7
    //     0x22c378: ldur            w5, [x3, #7]
    // 0x22c37c: DecompressPointer r5
    //     0x22c37c: add             x5, x5, HEAP, lsl #32
    // 0x22c380: r6 = LoadClassIdInstr(r0)
    //     0x22c380: ldur            x6, [x0, #-1]
    //     0x22c384: ubfx            x6, x6, #0xc, #0x14
    // 0x22c388: stp             x5, x0, [SP]
    // 0x22c38c: mov             x0, x6
    // 0x22c390: mov             lr, x0
    // 0x22c394: ldr             lr, [x21, lr, lsl #3]
    // 0x22c398: blr             lr
    // 0x22c39c: eor             x1, x0, #0x10
    // 0x22c3a0: ldur            x0, [fp, #-0xd0]
    // 0x22c3a4: stur            x1, [fp, #-0xe8]
    // 0x22c3a8: LoadField: r2 = r0->field_f
    //     0x22c3a8: ldur            w2, [x0, #0xf]
    // 0x22c3ac: DecompressPointer r2
    //     0x22c3ac: add             x2, x2, HEAP, lsl #32
    // 0x22c3b0: LoadField: r3 = r2->field_7
    //     0x22c3b0: ldur            x3, [x2, #7]
    // 0x22c3b4: LoadField: r4 = r2->field_f
    //     0x22c3b4: ldur            x4, [x2, #0xf]
    // 0x22c3b8: cmp             x3, x4
    // 0x22c3bc: b.eq            #0x22c3e8
    // 0x22c3c0: ldur            x2, [fp, #-0xc0]
    // 0x22c3c4: LoadField: r3 = r2->field_f
    //     0x22c3c4: ldur            w3, [x2, #0xf]
    // 0x22c3c8: DecompressPointer r3
    //     0x22c3c8: add             x3, x3, HEAP, lsl #32
    // 0x22c3cc: LoadField: r4 = r3->field_7
    //     0x22c3cc: ldur            x4, [x3, #7]
    // 0x22c3d0: LoadField: r5 = r3->field_f
    //     0x22c3d0: ldur            x5, [x3, #0xf]
    // 0x22c3d4: cmp             x4, x5
    // 0x22c3d8: r16 = true
    //     0x22c3d8: add             x16, NULL, #0x20  ; true
    // 0x22c3dc: r17 = false
    //     0x22c3dc: add             x17, NULL, #0x30  ; false
    // 0x22c3e0: csel            x3, x16, x17, eq
    // 0x22c3e4: b               #0x22c3f0
    // 0x22c3e8: ldur            x2, [fp, #-0xc0]
    // 0x22c3ec: r3 = false
    //     0x22c3ec: add             x3, NULL, #0x30  ; false
    // 0x22c3f0: stur            x3, [fp, #-0xe0]
    // 0x22c3f4: LoadField: r4 = r0->field_b
    //     0x22c3f4: ldur            w4, [x0, #0xb]
    // 0x22c3f8: DecompressPointer r4
    //     0x22c3f8: add             x4, x4, HEAP, lsl #32
    // 0x22c3fc: LoadField: r5 = r2->field_b
    //     0x22c3fc: ldur            w5, [x2, #0xb]
    // 0x22c400: DecompressPointer r5
    //     0x22c400: add             x5, x5, HEAP, lsl #32
    // 0x22c404: stp             x5, x4, [SP]
    // 0x22c408: r0 = ==()
    //     0x22c408: bl              #0x35311c  ; [package:flutter/src/services/text_editing.dart] TextSelection::==
    // 0x22c40c: eor             x3, x0, #0x10
    // 0x22c410: ldur            x0, [fp, #-0xe8]
    // 0x22c414: stur            x3, [fp, #-0xf0]
    // 0x22c418: tbz             w0, #4, #0x22c424
    // 0x22c41c: ldur            x0, [fp, #-0xe0]
    // 0x22c420: tbnz            w0, #4, #0x22c498
    // 0x22c424: ldur            x0, [fp, #-0xc8]
    // 0x22c428: LoadField: r1 = r0->field_b
    //     0x22c428: ldur            w1, [x0, #0xb]
    // 0x22c42c: DecompressPointer r1
    //     0x22c42c: add             x1, x1, HEAP, lsl #32
    // 0x22c430: cmp             w1, NULL
    // 0x22c434: b.eq            #0x22c7ec
    // 0x22c438: LoadField: r4 = r1->field_b7
    //     0x22c438: ldur            w4, [x1, #0xb7]
    // 0x22c43c: DecompressPointer r4
    //     0x22c43c: add             x4, x4, HEAP, lsl #32
    // 0x22c440: ldur            x2, [fp, #-0xd8]
    // 0x22c444: stur            x4, [fp, #-0xe0]
    // 0x22c448: r1 = Function '<anonymous closure>':.
    //     0x22c448: ldr             x1, [PP, #0x5948]  ; [pp+0x5948] AnonymousClosure: (0x245ba0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_formatAndSetValue (0x22c2ac)
    // 0x22c44c: r0 = AllocateClosure()
    //     0x22c44c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x22c450: r16 = <TextEditingValue>
    //     0x22c450: ldr             x16, [PP, #0x5950]  ; [pp+0x5950] TypeArguments: <TextEditingValue>
    // 0x22c454: ldur            lr, [fp, #-0xe0]
    // 0x22c458: stp             lr, x16, [SP, #0x10]
    // 0x22c45c: ldur            x16, [fp, #-0xc0]
    // 0x22c460: stp             x0, x16, [SP]
    // 0x22c464: r4 = const [0x1, 0x3, 0x3, 0x3, null]
    //     0x22c464: ldr             x4, [PP, #0x328]  ; [pp+0x328] List(5) [0x1, 0x3, 0x3, 0x3, Null]
    // 0x22c468: r0 = fold()
    //     0x22c468: bl              #0x24595c  ; [dart:collection] ListBase::fold
    // 0x22c46c: stur            x0, [fp, #-0xd8]
    // 0x22c470: ldur            x16, [fp, #-0xc8]
    // 0x22c474: str             x16, [SP]
    // 0x22c478: r0 = spellCheckEnabled()
    //     0x22c478: bl              #0x245924  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::spellCheckEnabled
    // 0x22c47c: ldur            x5, [fp, #-0xd8]
    // 0x22c480: ldur            x4, [fp, #-0xb8]
    // 0x22c484: ldur            x3, [fp, #-0xb0]
    // 0x22c488: ldur            x2, [fp, #-0xc8]
    // 0x22c48c: ldur            x1, [fp, #-0xd0]
    // 0x22c490: ldur            x0, [fp, #-0xf0]
    // 0x22c494: b               #0x22c564
    // 0x22c498: ldur            x5, [fp, #-0xc0]
    // 0x22c49c: ldur            x4, [fp, #-0xb8]
    // 0x22c4a0: ldur            x3, [fp, #-0xb0]
    // 0x22c4a4: ldur            x2, [fp, #-0xc8]
    // 0x22c4a8: ldur            x1, [fp, #-0xd0]
    // 0x22c4ac: ldur            x0, [fp, #-0xf0]
    // 0x22c4b0: b               #0x22c564
    // 0x22c4b4: r3 = 2
    //     0x22c4b4: movz            x3, #0x2
    // 0x22c4b8: sub             SP, fp, #0x110
    // 0x22c4bc: mov             x2, x3
    // 0x22c4c0: mov             x4, x0
    // 0x22c4c4: stur            x0, [fp, #-0xb0]
    // 0x22c4c8: mov             x0, x1
    // 0x22c4cc: stur            x1, [fp, #-0xb8]
    // 0x22c4d0: r1 = Null
    //     0x22c4d0: mov             x1, NULL
    // 0x22c4d4: r0 = AllocateArray()
    //     0x22c4d4: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x22c4d8: stur            x0, [fp, #-0xc0]
    // 0x22c4dc: r17 = "while applying input formatters"
    //     0x22c4dc: ldr             x17, [PP, #0x5958]  ; [pp+0x5958] "while applying input formatters"
    // 0x22c4e0: StoreField: r0->field_f = r17
    //     0x22c4e0: stur            w17, [x0, #0xf]
    // 0x22c4e4: r1 = <Object>
    //     0x22c4e4: ldr             x1, [PP, #0x2910]  ; [pp+0x2910] TypeArguments: <Object>
    // 0x22c4e8: r0 = AllocateGrowableArray()
    //     0x22c4e8: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x22c4ec: mov             x2, x0
    // 0x22c4f0: ldur            x0, [fp, #-0xc0]
    // 0x22c4f4: stur            x2, [fp, #-0xc8]
    // 0x22c4f8: StoreField: r2->field_f = r0
    //     0x22c4f8: stur            w0, [x2, #0xf]
    // 0x22c4fc: r3 = 2
    //     0x22c4fc: movz            x3, #0x2
    // 0x22c500: StoreField: r2->field_b = r3
    //     0x22c500: stur            w3, [x2, #0xb]
    // 0x22c504: r1 = <List<Object>>
    //     0x22c504: ldr             x1, [PP, #0x2230]  ; [pp+0x2230] TypeArguments: <List<Object>>
    // 0x22c508: r0 = ErrorDescription()
    //     0x22c508: bl              #0x1be81c  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x22c50c: r4 = true
    //     0x22c50c: add             x4, NULL, #0x20  ; true
    // 0x22c510: StoreField: r0->field_f = r4
    //     0x22c510: stur            w4, [x0, #0xf]
    // 0x22c514: ldur            x1, [fp, #-0xc8]
    // 0x22c518: StoreField: r0->field_b = r1
    //     0x22c518: stur            w1, [x0, #0xb]
    // 0x22c51c: r0 = FlutterErrorDetails()
    //     0x22c51c: bl              #0x1be794  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x22c520: mov             x1, x0
    // 0x22c524: ldur            x0, [fp, #-0xb0]
    // 0x22c528: StoreField: r1->field_7 = r0
    //     0x22c528: stur            w0, [x1, #7]
    // 0x22c52c: ldur            x0, [fp, #-0xb8]
    // 0x22c530: StoreField: r1->field_b = r0
    //     0x22c530: stur            w0, [x1, #0xb]
    // 0x22c534: r5 = "widgets"
    //     0x22c534: ldr             x5, [PP, #0x57e0]  ; [pp+0x57e0] "widgets"
    // 0x22c538: StoreField: r1->field_f = r5
    //     0x22c538: stur            w5, [x1, #0xf]
    // 0x22c53c: r6 = false
    //     0x22c53c: add             x6, NULL, #0x30  ; false
    // 0x22c540: StoreField: r1->field_13 = r6
    //     0x22c540: stur            w6, [x1, #0x13]
    // 0x22c544: str             x1, [SP]
    // 0x22c548: r0 = reportError()
    //     0x22c548: bl              #0x1b6ba0  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x22c54c: ldur            x5, [fp, #-0x10]
    // 0x22c550: ldur            x4, [fp, #-0x18]
    // 0x22c554: ldur            x3, [fp, #-0x20]
    // 0x22c558: ldur            x2, [fp, #-0x60]
    // 0x22c55c: ldur            x1, [fp, #-0x68]
    // 0x22c560: ldur            x0, [fp, #-0x80]
    // 0x22c564: stur            x5, [fp, #-0xb8]
    // 0x22c568: stur            x4, [fp, #-0xc0]
    // 0x22c56c: stur            x3, [fp, #-0xc8]
    // 0x22c570: stur            x2, [fp, #-0xd0]
    // 0x22c574: stur            x1, [fp, #-0xd8]
    // 0x22c578: stur            x0, [fp, #-0xe0]
    // 0x22c57c: LoadField: r6 = r2->field_b
    //     0x22c57c: ldur            w6, [x2, #0xb]
    // 0x22c580: DecompressPointer r6
    //     0x22c580: add             x6, x6, HEAP, lsl #32
    // 0x22c584: cmp             w6, NULL
    // 0x22c588: b.eq            #0x22c7f0
    // 0x22c58c: LoadField: r7 = r6->field_b
    //     0x22c58c: ldur            w7, [x6, #0xb]
    // 0x22c590: DecompressPointer r7
    //     0x22c590: add             x7, x7, HEAP, lsl #32
    // 0x22c594: LoadField: r6 = r7->field_27
    //     0x22c594: ldur            w6, [x7, #0x27]
    // 0x22c598: DecompressPointer r6
    //     0x22c598: add             x6, x6, HEAP, lsl #32
    // 0x22c59c: LoadField: r7 = r6->field_b
    //     0x22c59c: ldur            w7, [x6, #0xb]
    // 0x22c5a0: DecompressPointer r7
    //     0x22c5a0: add             x7, x7, HEAP, lsl #32
    // 0x22c5a4: stur            x7, [fp, #-0xb0]
    // 0x22c5a8: str             x2, [SP]
    // 0x22c5ac: r0 = beginBatchEdit()
    //     0x22c5ac: bl              #0x24590c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::beginBatchEdit
    // 0x22c5b0: ldur            x16, [fp, #-0xd0]
    // 0x22c5b4: ldur            lr, [fp, #-0xb8]
    // 0x22c5b8: stp             lr, x16, [SP]
    // 0x22c5bc: r0 = _value=()
    //     0x22c5bc: bl              #0x2458b0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_value=
    // 0x22c5c0: ldur            x0, [fp, #-0xe0]
    // 0x22c5c4: tbnz            w0, #5, #0x22c5cc
    // 0x22c5c8: r0 = AssertBoolean()
    //     0x22c5c8: bl              #0x3e4180  ; AssertBooleanStub
    // 0x22c5cc: ldur            x0, [fp, #-0xe0]
    // 0x22c5d0: tbz             w0, #4, #0x22c644
    // 0x22c5d4: ldur            x1, [fp, #-0xc8]
    // 0x22c5d8: mov             x0, x1
    // 0x22c5dc: tbnz            w0, #5, #0x22c5e4
    // 0x22c5e0: r0 = AssertBoolean()
    //     0x22c5e0: bl              #0x3e4180  ; AssertBooleanStub
    // 0x22c5e4: ldur            x0, [fp, #-0xc8]
    // 0x22c5e8: tbnz            w0, #4, #0x22c6a8
    // 0x22c5ec: ldur            x1, [fp, #-0xc0]
    // 0x22c5f0: r0 = 59
    //     0x22c5f0: movz            x0, #0x3b
    // 0x22c5f4: branchIfSmi(r1, 0x22c600)
    //     0x22c5f4: tbz             w1, #0, #0x22c600
    // 0x22c5f8: r0 = LoadClassIdInstr(r1)
    //     0x22c5f8: ldur            x0, [x1, #-1]
    //     0x22c5fc: ubfx            x0, x0, #0xc, #0x14
    // 0x22c600: r16 = Instance_SelectionChangedCause
    //     0x22c600: ldr             x16, [PP, #0x57b0]  ; [pp+0x57b0] Obj!SelectionChangedCause@480761
    // 0x22c604: stp             x16, x1, [SP]
    // 0x22c608: mov             lr, x0
    // 0x22c60c: ldr             lr, [x21, lr, lsl #3]
    // 0x22c610: blr             lr
    // 0x22c614: tbz             w0, #4, #0x22c644
    // 0x22c618: ldur            x1, [fp, #-0xc0]
    // 0x22c61c: r0 = 59
    //     0x22c61c: movz            x0, #0x3b
    // 0x22c620: branchIfSmi(r1, 0x22c62c)
    //     0x22c620: tbz             w1, #0, #0x22c62c
    // 0x22c624: r0 = LoadClassIdInstr(r1)
    //     0x22c624: ldur            x0, [x1, #-1]
    //     0x22c628: ubfx            x0, x0, #0xc, #0x14
    // 0x22c62c: r16 = Instance_SelectionChangedCause
    //     0x22c62c: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x22c630: stp             x16, x1, [SP]
    // 0x22c634: mov             lr, x0
    // 0x22c638: ldr             lr, [x21, lr, lsl #3]
    // 0x22c63c: blr             lr
    // 0x22c640: tbnz            w0, #4, #0x22c6a8
    // 0x22c644: ldur            x1, [fp, #-0xb8]
    // 0x22c648: ldur            x0, [fp, #-0xd0]
    // 0x22c64c: LoadField: r2 = r0->field_b
    //     0x22c64c: ldur            w2, [x0, #0xb]
    // 0x22c650: DecompressPointer r2
    //     0x22c650: add             x2, x2, HEAP, lsl #32
    // 0x22c654: cmp             w2, NULL
    // 0x22c658: b.eq            #0x22c7f4
    // 0x22c65c: LoadField: r3 = r2->field_b
    //     0x22c65c: ldur            w3, [x2, #0xb]
    // 0x22c660: DecompressPointer r3
    //     0x22c660: add             x3, x3, HEAP, lsl #32
    // 0x22c664: LoadField: r2 = r3->field_27
    //     0x22c664: ldur            w2, [x3, #0x27]
    // 0x22c668: DecompressPointer r2
    //     0x22c668: add             x2, x2, HEAP, lsl #32
    // 0x22c66c: LoadField: r3 = r2->field_b
    //     0x22c66c: ldur            w3, [x2, #0xb]
    // 0x22c670: DecompressPointer r3
    //     0x22c670: add             x3, x3, HEAP, lsl #32
    // 0x22c674: stp             x3, x0, [SP, #8]
    // 0x22c678: ldur            x16, [fp, #-0xc0]
    // 0x22c67c: str             x16, [SP]
    // 0x22c680: r0 = _handleSelectionChanged()
    //     0x22c680: bl              #0x241e80  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x22c684: ldur            x0, [fp, #-0xb8]
    // 0x22c688: LoadField: r1 = r0->field_b
    //     0x22c688: ldur            w1, [x0, #0xb]
    // 0x22c68c: DecompressPointer r1
    //     0x22c68c: add             x1, x1, HEAP, lsl #32
    // 0x22c690: ldur            x16, [fp, #-0xd0]
    // 0x22c694: ldur            lr, [fp, #-0xb0]
    // 0x22c698: stp             lr, x16, [SP, #0x10]
    // 0x22c69c: ldur            x16, [fp, #-0xc0]
    // 0x22c6a0: stp             x16, x1, [SP]
    // 0x22c6a4: r0 = _bringIntoViewBySelectionState()
    //     0x22c6a4: bl              #0x241470  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_bringIntoViewBySelectionState
    // 0x22c6a8: ldur            x1, [fp, #-0xd0]
    // 0x22c6ac: ldur            x0, [fp, #-0xd8]
    // 0x22c6b0: LoadField: r2 = r1->field_b
    //     0x22c6b0: ldur            w2, [x1, #0xb]
    // 0x22c6b4: DecompressPointer r2
    //     0x22c6b4: add             x2, x2, HEAP, lsl #32
    // 0x22c6b8: cmp             w2, NULL
    // 0x22c6bc: b.eq            #0x22c7f8
    // 0x22c6c0: LoadField: r3 = r2->field_b
    //     0x22c6c0: ldur            w3, [x2, #0xb]
    // 0x22c6c4: DecompressPointer r3
    //     0x22c6c4: add             x3, x3, HEAP, lsl #32
    // 0x22c6c8: LoadField: r2 = r3->field_27
    //     0x22c6c8: ldur            w2, [x3, #0x27]
    // 0x22c6cc: DecompressPointer r2
    //     0x22c6cc: add             x2, x2, HEAP, lsl #32
    // 0x22c6d0: LoadField: r3 = r2->field_7
    //     0x22c6d0: ldur            w3, [x2, #7]
    // 0x22c6d4: DecompressPointer r3
    //     0x22c6d4: add             x3, x3, HEAP, lsl #32
    // 0x22c6d8: LoadField: r2 = r0->field_7
    //     0x22c6d8: ldur            w2, [x0, #7]
    // 0x22c6dc: DecompressPointer r2
    //     0x22c6dc: add             x2, x2, HEAP, lsl #32
    // 0x22c6e0: r0 = LoadClassIdInstr(r2)
    //     0x22c6e0: ldur            x0, [x2, #-1]
    //     0x22c6e4: ubfx            x0, x0, #0xc, #0x14
    // 0x22c6e8: stp             x3, x2, [SP]
    // 0x22c6ec: mov             lr, x0
    // 0x22c6f0: ldr             lr, [x21, lr, lsl #3]
    // 0x22c6f4: blr             lr
    // 0x22c6f8: tbz             w0, #4, #0x22c714
    // 0x22c6fc: ldur            x0, [fp, #-0xd0]
    // 0x22c700: LoadField: r1 = r0->field_b
    //     0x22c700: ldur            w1, [x0, #0xb]
    // 0x22c704: DecompressPointer r1
    //     0x22c704: add             x1, x1, HEAP, lsl #32
    // 0x22c708: cmp             w1, NULL
    // 0x22c70c: b.eq            #0x22c7fc
    // 0x22c710: b               #0x22c7c8
    // 0x22c714: ldur            x0, [fp, #-0xd0]
    // 0x22c718: b               #0x22c7c8
    // 0x22c71c: r5 = "widgets"
    //     0x22c71c: ldr             x5, [PP, #0x57e0]  ; [pp+0x57e0] "widgets"
    // 0x22c720: r4 = true
    //     0x22c720: add             x4, NULL, #0x20  ; true
    // 0x22c724: r6 = false
    //     0x22c724: add             x6, NULL, #0x30  ; false
    // 0x22c728: r3 = 2
    //     0x22c728: movz            x3, #0x2
    // 0x22c72c: sub             SP, fp, #0x110
    // 0x22c730: mov             x2, x3
    // 0x22c734: mov             x7, x0
    // 0x22c738: stur            x0, [fp, #-0xb0]
    // 0x22c73c: mov             x0, x1
    // 0x22c740: stur            x1, [fp, #-0xb8]
    // 0x22c744: r1 = Null
    //     0x22c744: mov             x1, NULL
    // 0x22c748: r0 = AllocateArray()
    //     0x22c748: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x22c74c: stur            x0, [fp, #-0xc0]
    // 0x22c750: r17 = "while calling onChanged"
    //     0x22c750: ldr             x17, [PP, #0x5960]  ; [pp+0x5960] "while calling onChanged"
    // 0x22c754: StoreField: r0->field_f = r17
    //     0x22c754: stur            w17, [x0, #0xf]
    // 0x22c758: r1 = <Object>
    //     0x22c758: ldr             x1, [PP, #0x2910]  ; [pp+0x2910] TypeArguments: <Object>
    // 0x22c75c: r0 = AllocateGrowableArray()
    //     0x22c75c: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x22c760: mov             x2, x0
    // 0x22c764: ldur            x0, [fp, #-0xc0]
    // 0x22c768: stur            x2, [fp, #-0xc8]
    // 0x22c76c: StoreField: r2->field_f = r0
    //     0x22c76c: stur            w0, [x2, #0xf]
    // 0x22c770: r0 = 2
    //     0x22c770: movz            x0, #0x2
    // 0x22c774: StoreField: r2->field_b = r0
    //     0x22c774: stur            w0, [x2, #0xb]
    // 0x22c778: r1 = <List<Object>>
    //     0x22c778: ldr             x1, [PP, #0x2230]  ; [pp+0x2230] TypeArguments: <List<Object>>
    // 0x22c77c: r0 = ErrorDescription()
    //     0x22c77c: bl              #0x1be81c  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x22c780: mov             x1, x0
    // 0x22c784: r0 = true
    //     0x22c784: add             x0, NULL, #0x20  ; true
    // 0x22c788: StoreField: r1->field_f = r0
    //     0x22c788: stur            w0, [x1, #0xf]
    // 0x22c78c: ldur            x0, [fp, #-0xc8]
    // 0x22c790: StoreField: r1->field_b = r0
    //     0x22c790: stur            w0, [x1, #0xb]
    // 0x22c794: r0 = FlutterErrorDetails()
    //     0x22c794: bl              #0x1be794  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x22c798: mov             x1, x0
    // 0x22c79c: ldur            x0, [fp, #-0xb0]
    // 0x22c7a0: StoreField: r1->field_7 = r0
    //     0x22c7a0: stur            w0, [x1, #7]
    // 0x22c7a4: ldur            x0, [fp, #-0xb8]
    // 0x22c7a8: StoreField: r1->field_b = r0
    //     0x22c7a8: stur            w0, [x1, #0xb]
    // 0x22c7ac: r0 = "widgets"
    //     0x22c7ac: ldr             x0, [PP, #0x57e0]  ; [pp+0x57e0] "widgets"
    // 0x22c7b0: StoreField: r1->field_f = r0
    //     0x22c7b0: stur            w0, [x1, #0xf]
    // 0x22c7b4: r0 = false
    //     0x22c7b4: add             x0, NULL, #0x30  ; false
    // 0x22c7b8: StoreField: r1->field_13 = r0
    //     0x22c7b8: stur            w0, [x1, #0x13]
    // 0x22c7bc: str             x1, [SP]
    // 0x22c7c0: r0 = reportError()
    //     0x22c7c0: bl              #0x1b6ba0  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x22c7c4: ldur            x0, [fp, #-0x60]
    // 0x22c7c8: str             x0, [SP]
    // 0x22c7cc: r0 = endBatchEdit()
    //     0x22c7cc: bl              #0x22c800  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::endBatchEdit
    // 0x22c7d0: r0 = Null
    //     0x22c7d0: mov             x0, NULL
    // 0x22c7d4: LeaveFrame
    //     0x22c7d4: mov             SP, fp
    //     0x22c7d8: ldp             fp, lr, [SP], #0x10
    // 0x22c7dc: ret
    //     0x22c7dc: ret             
    // 0x22c7e0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22c7e0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22c7e4: b               #0x22c330
    // 0x22c7e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c7e8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c7ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c7ec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c7f0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c7f0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c7f4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c7f4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c7f8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c7f8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c7fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c7fc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ endBatchEdit(/* No info */) {
    // ** addr: 0x22c800, size: 0x48
    // 0x22c800: EnterFrame
    //     0x22c800: stp             fp, lr, [SP, #-0x10]!
    //     0x22c804: mov             fp, SP
    // 0x22c808: AllocStack(0x8)
    //     0x22c808: sub             SP, SP, #8
    // 0x22c80c: CheckStackOverflow
    //     0x22c80c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22c810: cmp             SP, x16
    //     0x22c814: b.ls            #0x22c840
    // 0x22c818: ldr             x0, [fp, #0x10]
    // 0x22c81c: LoadField: r1 = r0->field_87
    //     0x22c81c: ldur            x1, [x0, #0x87]
    // 0x22c820: sub             x2, x1, #1
    // 0x22c824: StoreField: r0->field_87 = r2
    //     0x22c824: stur            x2, [x0, #0x87]
    // 0x22c828: str             x0, [SP]
    // 0x22c82c: r0 = _updateRemoteEditingValueIfNeeded()
    //     0x22c82c: bl              #0x22c848  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateRemoteEditingValueIfNeeded
    // 0x22c830: r0 = Null
    //     0x22c830: mov             x0, NULL
    // 0x22c834: LeaveFrame
    //     0x22c834: mov             SP, fp
    //     0x22c838: ldp             fp, lr, [SP], #0x10
    // 0x22c83c: ret
    //     0x22c83c: ret             
    // 0x22c840: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22c840: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22c844: b               #0x22c818
  }
  _ _updateRemoteEditingValueIfNeeded(/* No info */) {
    // ** addr: 0x22c848, size: 0xf4
    // 0x22c848: EnterFrame
    //     0x22c848: stp             fp, lr, [SP, #-0x10]!
    //     0x22c84c: mov             fp, SP
    // 0x22c850: AllocStack(0x18)
    //     0x22c850: sub             SP, SP, #0x18
    // 0x22c854: CheckStackOverflow
    //     0x22c854: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22c858: cmp             SP, x16
    //     0x22c85c: b.ls            #0x22c92c
    // 0x22c860: ldr             x0, [fp, #0x10]
    // 0x22c864: LoadField: r1 = r0->field_87
    //     0x22c864: ldur            x1, [x0, #0x87]
    // 0x22c868: cmp             x1, #0
    // 0x22c86c: b.gt            #0x22c87c
    // 0x22c870: str             x0, [SP]
    // 0x22c874: r0 = _hasInputConnection()
    //     0x22c874: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x22c878: tbz             w0, #4, #0x22c88c
    // 0x22c87c: r0 = Null
    //     0x22c87c: mov             x0, NULL
    // 0x22c880: LeaveFrame
    //     0x22c880: mov             SP, fp
    //     0x22c884: ldp             fp, lr, [SP], #0x10
    // 0x22c888: ret
    //     0x22c888: ret             
    // 0x22c88c: ldr             x0, [fp, #0x10]
    // 0x22c890: LoadField: r1 = r0->field_b
    //     0x22c890: ldur            w1, [x0, #0xb]
    // 0x22c894: DecompressPointer r1
    //     0x22c894: add             x1, x1, HEAP, lsl #32
    // 0x22c898: cmp             w1, NULL
    // 0x22c89c: b.eq            #0x22c934
    // 0x22c8a0: LoadField: r2 = r1->field_b
    //     0x22c8a0: ldur            w2, [x1, #0xb]
    // 0x22c8a4: DecompressPointer r2
    //     0x22c8a4: add             x2, x2, HEAP, lsl #32
    // 0x22c8a8: LoadField: r1 = r2->field_27
    //     0x22c8a8: ldur            w1, [x2, #0x27]
    // 0x22c8ac: DecompressPointer r1
    //     0x22c8ac: add             x1, x1, HEAP, lsl #32
    // 0x22c8b0: stur            x1, [fp, #-8]
    // 0x22c8b4: LoadField: r2 = r0->field_73
    //     0x22c8b4: ldur            w2, [x0, #0x73]
    // 0x22c8b8: DecompressPointer r2
    //     0x22c8b8: add             x2, x2, HEAP, lsl #32
    // 0x22c8bc: stp             x2, x1, [SP]
    // 0x22c8c0: r0 = ==()
    //     0x22c8c0: bl              #0x3688c0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x22c8c4: tbnz            w0, #4, #0x22c8d8
    // 0x22c8c8: r0 = Null
    //     0x22c8c8: mov             x0, NULL
    // 0x22c8cc: LeaveFrame
    //     0x22c8cc: mov             SP, fp
    //     0x22c8d0: ldp             fp, lr, [SP], #0x10
    // 0x22c8d4: ret
    //     0x22c8d4: ret             
    // 0x22c8d8: ldr             x0, [fp, #0x10]
    // 0x22c8dc: LoadField: r1 = r0->field_3b
    //     0x22c8dc: ldur            w1, [x0, #0x3b]
    // 0x22c8e0: DecompressPointer r1
    //     0x22c8e0: add             x1, x1, HEAP, lsl #32
    // 0x22c8e4: cmp             w1, NULL
    // 0x22c8e8: b.eq            #0x22c938
    // 0x22c8ec: ldur            x16, [fp, #-8]
    // 0x22c8f0: stp             x16, x1, [SP]
    // 0x22c8f4: r0 = setEditingState()
    //     0x22c8f4: bl              #0x22c93c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setEditingState
    // 0x22c8f8: ldur            x0, [fp, #-8]
    // 0x22c8fc: ldr             x1, [fp, #0x10]
    // 0x22c900: StoreField: r1->field_73 = r0
    //     0x22c900: stur            w0, [x1, #0x73]
    //     0x22c904: ldurb           w16, [x1, #-1]
    //     0x22c908: ldurb           w17, [x0, #-1]
    //     0x22c90c: and             x16, x17, x16, lsr #2
    //     0x22c910: tst             x16, HEAP, lsr #32
    //     0x22c914: b.eq            #0x22c91c
    //     0x22c918: bl              #0x3e4608
    // 0x22c91c: r0 = Null
    //     0x22c91c: mov             x0, NULL
    // 0x22c920: LeaveFrame
    //     0x22c920: mov             SP, fp
    //     0x22c924: ldp             fp, lr, [SP], #0x10
    // 0x22c928: ret
    //     0x22c928: ret             
    // 0x22c92c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22c92c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22c930: b               #0x22c860
    // 0x22c934: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c934: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x22c938: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22c938: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ removeTextPlaceholder(/* No info */) {
    // ** addr: 0x22efb0, size: 0x8c
    // 0x22efb0: EnterFrame
    //     0x22efb0: stp             fp, lr, [SP, #-0x10]!
    //     0x22efb4: mov             fp, SP
    // 0x22efb8: AllocStack(0x10)
    //     0x22efb8: sub             SP, SP, #0x10
    // 0x22efbc: CheckStackOverflow
    //     0x22efbc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22efc0: cmp             SP, x16
    //     0x22efc4: b.ls            #0x22f030
    // 0x22efc8: r1 = 1
    //     0x22efc8: movz            x1, #0x1
    // 0x22efcc: r0 = AllocateContext()
    //     0x22efcc: bl              #0x3e4e00  ; AllocateContextStub
    // 0x22efd0: mov             x1, x0
    // 0x22efd4: ldr             x0, [fp, #0x10]
    // 0x22efd8: StoreField: r1->field_f = r0
    //     0x22efd8: stur            w0, [x1, #0xf]
    // 0x22efdc: LoadField: r2 = r0->field_b
    //     0x22efdc: ldur            w2, [x0, #0xb]
    // 0x22efe0: DecompressPointer r2
    //     0x22efe0: add             x2, x2, HEAP, lsl #32
    // 0x22efe4: cmp             w2, NULL
    // 0x22efe8: b.eq            #0x22f038
    // 0x22efec: LoadField: r2 = r0->field_af
    //     0x22efec: ldur            x2, [x0, #0xaf]
    // 0x22eff0: cmn             x2, #1
    // 0x22eff4: b.ne            #0x22f008
    // 0x22eff8: r0 = Null
    //     0x22eff8: mov             x0, NULL
    // 0x22effc: LeaveFrame
    //     0x22effc: mov             SP, fp
    //     0x22f000: ldp             fp, lr, [SP], #0x10
    // 0x22f004: ret
    //     0x22f004: ret             
    // 0x22f008: mov             x2, x1
    // 0x22f00c: r1 = Function '<anonymous closure>':.
    //     0x22f00c: ldr             x1, [PP, #0x4e90]  ; [pp+0x4e90] AnonymousClosure: (0x22f278), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::removeTextPlaceholder (0x22efb0)
    // 0x22f010: r0 = AllocateClosure()
    //     0x22f010: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x22f014: ldr             x16, [fp, #0x10]
    // 0x22f018: stp             x0, x16, [SP]
    // 0x22f01c: r0 = setState()
    //     0x22f01c: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x22f020: r0 = Null
    //     0x22f020: mov             x0, NULL
    // 0x22f024: LeaveFrame
    //     0x22f024: mov             SP, fp
    //     0x22f028: ldp             fp, lr, [SP], #0x10
    // 0x22f02c: ret
    //     0x22f02c: ret             
    // 0x22f030: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22f030: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22f034: b               #0x22efc8
    // 0x22f038: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22f038: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x22f278, size: 0x24
    // 0x22f278: r1 = -1
    //     0x22f278: movn            x1, #0
    // 0x22f27c: ldr             x2, [SP]
    // 0x22f280: LoadField: r3 = r2->field_17
    //     0x22f280: ldur            w3, [x2, #0x17]
    // 0x22f284: DecompressPointer r3
    //     0x22f284: add             x3, x3, HEAP, lsl #32
    // 0x22f288: LoadField: r2 = r3->field_f
    //     0x22f288: ldur            w2, [x3, #0xf]
    // 0x22f28c: DecompressPointer r2
    //     0x22f28c: add             x2, x2, HEAP, lsl #32
    // 0x22f290: StoreField: r2->field_af = r1
    //     0x22f290: stur            x1, [x2, #0xaf]
    // 0x22f294: r0 = Null
    //     0x22f294: mov             x0, NULL
    // 0x22f298: ret
    //     0x22f298: ret             
  }
  _ insertTextPlaceholder(/* No info */) {
    // ** addr: 0x22f29c, size: 0xa4
    // 0x22f29c: EnterFrame
    //     0x22f29c: stp             fp, lr, [SP, #-0x10]!
    //     0x22f2a0: mov             fp, SP
    // 0x22f2a4: AllocStack(0x18)
    //     0x22f2a4: sub             SP, SP, #0x18
    // 0x22f2a8: CheckStackOverflow
    //     0x22f2a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22f2ac: cmp             SP, x16
    //     0x22f2b0: b.ls            #0x22f334
    // 0x22f2b4: r1 = 1
    //     0x22f2b4: movz            x1, #0x1
    // 0x22f2b8: r0 = AllocateContext()
    //     0x22f2b8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x22f2bc: mov             x1, x0
    // 0x22f2c0: ldr             x0, [fp, #0x10]
    // 0x22f2c4: stur            x1, [fp, #-8]
    // 0x22f2c8: StoreField: r1->field_f = r0
    //     0x22f2c8: stur            w0, [x1, #0xf]
    // 0x22f2cc: LoadField: r2 = r0->field_b
    //     0x22f2cc: ldur            w2, [x0, #0xb]
    // 0x22f2d0: DecompressPointer r2
    //     0x22f2d0: add             x2, x2, HEAP, lsl #32
    // 0x22f2d4: cmp             w2, NULL
    // 0x22f2d8: b.eq            #0x22f33c
    // 0x22f2dc: LoadField: r3 = r2->field_b
    //     0x22f2dc: ldur            w3, [x2, #0xb]
    // 0x22f2e0: DecompressPointer r3
    //     0x22f2e0: add             x3, x3, HEAP, lsl #32
    // 0x22f2e4: str             x3, [SP]
    // 0x22f2e8: r0 = selection()
    //     0x22f2e8: bl              #0x22f340  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::selection
    // 0x22f2ec: LoadField: r1 = r0->field_7
    //     0x22f2ec: ldur            x1, [x0, #7]
    // 0x22f2f0: tbnz            x1, #0x3f, #0x22f324
    // 0x22f2f4: LoadField: r1 = r0->field_f
    //     0x22f2f4: ldur            x1, [x0, #0xf]
    // 0x22f2f8: tbnz            x1, #0x3f, #0x22f324
    // 0x22f2fc: ldur            x2, [fp, #-8]
    // 0x22f300: r1 = Function '<anonymous closure>':.
    //     0x22f300: ldr             x1, [PP, #0x4e98]  ; [pp+0x4e98] AnonymousClosure: (0x22f358), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::insertTextPlaceholder (0x22f29c)
    // 0x22f304: r0 = AllocateClosure()
    //     0x22f304: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x22f308: ldr             x16, [fp, #0x10]
    // 0x22f30c: stp             x0, x16, [SP]
    // 0x22f310: r0 = setState()
    //     0x22f310: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x22f314: r0 = Null
    //     0x22f314: mov             x0, NULL
    // 0x22f318: LeaveFrame
    //     0x22f318: mov             SP, fp
    //     0x22f31c: ldp             fp, lr, [SP], #0x10
    // 0x22f320: ret
    //     0x22f320: ret             
    // 0x22f324: r0 = Null
    //     0x22f324: mov             x0, NULL
    // 0x22f328: LeaveFrame
    //     0x22f328: mov             SP, fp
    //     0x22f32c: ldp             fp, lr, [SP], #0x10
    // 0x22f330: ret
    //     0x22f330: ret             
    // 0x22f334: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22f334: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22f338: b               #0x22f2b4
    // 0x22f33c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22f33c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x22f358, size: 0x78
    // 0x22f358: EnterFrame
    //     0x22f358: stp             fp, lr, [SP, #-0x10]!
    //     0x22f35c: mov             fp, SP
    // 0x22f360: ldr             x1, [fp, #0x10]
    // 0x22f364: LoadField: r2 = r1->field_17
    //     0x22f364: ldur            w2, [x1, #0x17]
    // 0x22f368: DecompressPointer r2
    //     0x22f368: add             x2, x2, HEAP, lsl #32
    // 0x22f36c: LoadField: r1 = r2->field_f
    //     0x22f36c: ldur            w1, [x2, #0xf]
    // 0x22f370: DecompressPointer r1
    //     0x22f370: add             x1, x1, HEAP, lsl #32
    // 0x22f374: LoadField: r2 = r1->field_b
    //     0x22f374: ldur            w2, [x1, #0xb]
    // 0x22f378: DecompressPointer r2
    //     0x22f378: add             x2, x2, HEAP, lsl #32
    // 0x22f37c: cmp             w2, NULL
    // 0x22f380: b.eq            #0x22f3cc
    // 0x22f384: LoadField: r3 = r2->field_b
    //     0x22f384: ldur            w3, [x2, #0xb]
    // 0x22f388: DecompressPointer r3
    //     0x22f388: add             x3, x3, HEAP, lsl #32
    // 0x22f38c: LoadField: r2 = r3->field_27
    //     0x22f38c: ldur            w2, [x3, #0x27]
    // 0x22f390: DecompressPointer r2
    //     0x22f390: add             x2, x2, HEAP, lsl #32
    // 0x22f394: LoadField: r3 = r2->field_7
    //     0x22f394: ldur            w3, [x2, #7]
    // 0x22f398: DecompressPointer r3
    //     0x22f398: add             x3, x3, HEAP, lsl #32
    // 0x22f39c: LoadField: r4 = r3->field_7
    //     0x22f39c: ldur            w4, [x3, #7]
    // 0x22f3a0: DecompressPointer r4
    //     0x22f3a0: add             x4, x4, HEAP, lsl #32
    // 0x22f3a4: LoadField: r3 = r2->field_b
    //     0x22f3a4: ldur            w3, [x2, #0xb]
    // 0x22f3a8: DecompressPointer r3
    //     0x22f3a8: add             x3, x3, HEAP, lsl #32
    // 0x22f3ac: LoadField: r2 = r3->field_f
    //     0x22f3ac: ldur            x2, [x3, #0xf]
    // 0x22f3b0: r3 = LoadInt32Instr(r4)
    //     0x22f3b0: sbfx            x3, x4, #1, #0x1f
    // 0x22f3b4: sub             x4, x3, x2
    // 0x22f3b8: StoreField: r1->field_af = r4
    //     0x22f3b8: stur            x4, [x1, #0xaf]
    // 0x22f3bc: r0 = Null
    //     0x22f3bc: mov             x0, NULL
    // 0x22f3c0: LeaveFrame
    //     0x22f3c0: mov             SP, fp
    //     0x22f3c4: ldp             fp, lr, [SP], #0x10
    // 0x22f3c8: ret
    //     0x22f3c8: ret             
    // 0x22f3cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22f3cc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ showToolbar(/* No info */) {
    // ** addr: 0x22f3d0, size: 0x98
    // 0x22f3d0: EnterFrame
    //     0x22f3d0: stp             fp, lr, [SP, #-0x10]!
    //     0x22f3d4: mov             fp, SP
    // 0x22f3d8: AllocStack(0x8)
    //     0x22f3d8: sub             SP, SP, #8
    // 0x22f3dc: CheckStackOverflow
    //     0x22f3dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22f3e0: cmp             SP, x16
    //     0x22f3e4: b.ls            #0x22f45c
    // 0x22f3e8: ldr             x0, [fp, #0x10]
    // 0x22f3ec: LoadField: r1 = r0->field_3f
    //     0x22f3ec: ldur            w1, [x0, #0x3f]
    // 0x22f3f0: DecompressPointer r1
    //     0x22f3f0: add             x1, x1, HEAP, lsl #32
    // 0x22f3f4: cmp             w1, NULL
    // 0x22f3f8: b.ne            #0x22f40c
    // 0x22f3fc: r0 = false
    //     0x22f3fc: add             x0, NULL, #0x30  ; false
    // 0x22f400: LeaveFrame
    //     0x22f400: mov             SP, fp
    //     0x22f404: ldp             fp, lr, [SP], #0x10
    // 0x22f408: ret
    //     0x22f408: ret             
    // 0x22f40c: LoadField: r1 = r0->field_37
    //     0x22f40c: ldur            w1, [x0, #0x37]
    // 0x22f410: DecompressPointer r1
    //     0x22f410: add             x1, x1, HEAP, lsl #32
    // 0x22f414: str             x1, [SP]
    // 0x22f418: r0 = update()
    //     0x22f418: bl              #0x232930  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::update
    // 0x22f41c: ldr             x0, [fp, #0x10]
    // 0x22f420: LoadField: r1 = r0->field_33
    //     0x22f420: ldur            w1, [x0, #0x33]
    // 0x22f424: DecompressPointer r1
    //     0x22f424: add             x1, x1, HEAP, lsl #32
    // 0x22f428: str             x1, [SP]
    // 0x22f42c: r0 = update()
    //     0x22f42c: bl              #0x2326d0  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::update
    // 0x22f430: ldr             x0, [fp, #0x10]
    // 0x22f434: LoadField: r1 = r0->field_3f
    //     0x22f434: ldur            w1, [x0, #0x3f]
    // 0x22f438: DecompressPointer r1
    //     0x22f438: add             x1, x1, HEAP, lsl #32
    // 0x22f43c: cmp             w1, NULL
    // 0x22f440: b.eq            #0x22f464
    // 0x22f444: str             x1, [SP]
    // 0x22f448: r0 = showToolbar()
    //     0x22f448: bl              #0x22f468  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::showToolbar
    // 0x22f44c: r0 = true
    //     0x22f44c: add             x0, NULL, #0x20  ; true
    // 0x22f450: LeaveFrame
    //     0x22f450: mov             SP, fp
    //     0x22f454: ldp             fp, lr, [SP], #0x10
    // 0x22f458: ret
    //     0x22f458: ret             
    // 0x22f45c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22f45c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22f460: b               #0x22f3e8
    // 0x22f464: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x22f464: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ showAutocorrectionPromptRect(/* No info */) {
    // ** addr: 0x232b54, size: 0x90
    // 0x232b54: EnterFrame
    //     0x232b54: stp             fp, lr, [SP, #-0x10]!
    //     0x232b58: mov             fp, SP
    // 0x232b5c: AllocStack(0x10)
    //     0x232b5c: sub             SP, SP, #0x10
    // 0x232b60: CheckStackOverflow
    //     0x232b60: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x232b64: cmp             SP, x16
    //     0x232b68: b.ls            #0x232bdc
    // 0x232b6c: r1 = 3
    //     0x232b6c: movz            x1, #0x3
    // 0x232b70: r0 = AllocateContext()
    //     0x232b70: bl              #0x3e4e00  ; AllocateContextStub
    // 0x232b74: mov             x2, x0
    // 0x232b78: ldr             x3, [fp, #0x20]
    // 0x232b7c: StoreField: r2->field_f = r3
    //     0x232b7c: stur            w3, [x2, #0xf]
    // 0x232b80: ldr             x4, [fp, #0x18]
    // 0x232b84: r0 = BoxInt64Instr(r4)
    //     0x232b84: sbfiz           x0, x4, #1, #0x1f
    //     0x232b88: cmp             x4, x0, asr #1
    //     0x232b8c: b.eq            #0x232b98
    //     0x232b90: bl              #0x3e5e54
    //     0x232b94: stur            x4, [x0, #7]
    // 0x232b98: StoreField: r2->field_13 = r0
    //     0x232b98: stur            w0, [x2, #0x13]
    // 0x232b9c: ldr             x4, [fp, #0x10]
    // 0x232ba0: r0 = BoxInt64Instr(r4)
    //     0x232ba0: sbfiz           x0, x4, #1, #0x1f
    //     0x232ba4: cmp             x4, x0, asr #1
    //     0x232ba8: b.eq            #0x232bb4
    //     0x232bac: bl              #0x3e5e54
    //     0x232bb0: stur            x4, [x0, #7]
    // 0x232bb4: StoreField: r2->field_17 = r0
    //     0x232bb4: stur            w0, [x2, #0x17]
    // 0x232bb8: r1 = Function '<anonymous closure>':.
    //     0x232bb8: ldr             x1, [PP, #0x54b0]  ; [pp+0x54b0] AnonymousClosure: (0x232be4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::showAutocorrectionPromptRect (0x232b54)
    // 0x232bbc: r0 = AllocateClosure()
    //     0x232bbc: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x232bc0: ldr             x16, [fp, #0x20]
    // 0x232bc4: stp             x0, x16, [SP]
    // 0x232bc8: r0 = setState()
    //     0x232bc8: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x232bcc: r0 = Null
    //     0x232bcc: mov             x0, NULL
    // 0x232bd0: LeaveFrame
    //     0x232bd0: mov             SP, fp
    //     0x232bd4: ldp             fp, lr, [SP], #0x10
    // 0x232bd8: ret
    //     0x232bd8: ret             
    // 0x232bdc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x232bdc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x232be0: b               #0x232b6c
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x232be4, size: 0x98
    // 0x232be4: EnterFrame
    //     0x232be4: stp             fp, lr, [SP, #-0x10]!
    //     0x232be8: mov             fp, SP
    // 0x232bec: AllocStack(0x18)
    //     0x232bec: sub             SP, SP, #0x18
    // 0x232bf0: SetupParameters()
    //     0x232bf0: ldr             x0, [fp, #0x10]
    //     0x232bf4: ldur            w1, [x0, #0x17]
    //     0x232bf8: add             x1, x1, HEAP, lsl #32
    // 0x232bfc: LoadField: r0 = r1->field_f
    //     0x232bfc: ldur            w0, [x1, #0xf]
    // 0x232c00: DecompressPointer r0
    //     0x232c00: add             x0, x0, HEAP, lsl #32
    // 0x232c04: stur            x0, [fp, #-0x18]
    // 0x232c08: LoadField: r2 = r1->field_17
    //     0x232c08: ldur            w2, [x1, #0x17]
    // 0x232c0c: DecompressPointer r2
    //     0x232c0c: add             x2, x2, HEAP, lsl #32
    // 0x232c10: stur            x2, [fp, #-0x10]
    // 0x232c14: LoadField: r3 = r1->field_13
    //     0x232c14: ldur            w3, [x1, #0x13]
    // 0x232c18: DecompressPointer r3
    //     0x232c18: add             x3, x3, HEAP, lsl #32
    // 0x232c1c: r1 = LoadInt32Instr(r3)
    //     0x232c1c: sbfx            x1, x3, #1, #0x1f
    //     0x232c20: tbz             w3, #0, #0x232c28
    //     0x232c24: ldur            x1, [x3, #7]
    // 0x232c28: stur            x1, [fp, #-8]
    // 0x232c2c: r0 = TextRange()
    //     0x232c2c: bl              #0x202c64  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0x232c30: ldur            x1, [fp, #-8]
    // 0x232c34: StoreField: r0->field_7 = r1
    //     0x232c34: stur            x1, [x0, #7]
    // 0x232c38: ldur            x1, [fp, #-0x10]
    // 0x232c3c: r2 = LoadInt32Instr(r1)
    //     0x232c3c: sbfx            x2, x1, #1, #0x1f
    //     0x232c40: tbz             w1, #0, #0x232c48
    //     0x232c44: ldur            x2, [x1, #7]
    // 0x232c48: StoreField: r0->field_f = r2
    //     0x232c48: stur            x2, [x0, #0xf]
    // 0x232c4c: ldur            x1, [fp, #-0x18]
    // 0x232c50: StoreField: r1->field_b7 = r0
    //     0x232c50: stur            w0, [x1, #0xb7]
    //     0x232c54: ldurb           w16, [x1, #-1]
    //     0x232c58: ldurb           w17, [x0, #-1]
    //     0x232c5c: and             x16, x17, x16, lsr #2
    //     0x232c60: tst             x16, HEAP, lsr #32
    //     0x232c64: b.eq            #0x232c6c
    //     0x232c68: bl              #0x3e4608
    // 0x232c6c: r0 = Null
    //     0x232c6c: mov             x0, NULL
    // 0x232c70: LeaveFrame
    //     0x232c70: mov             SP, fp
    //     0x232c74: ldp             fp, lr, [SP], #0x10
    // 0x232c78: ret
    //     0x232c78: ret             
  }
  _ connectionClosed(/* No info */) {
    // ** addr: 0x232c7c, size: 0x94
    // 0x232c7c: EnterFrame
    //     0x232c7c: stp             fp, lr, [SP, #-0x10]!
    //     0x232c80: mov             fp, SP
    // 0x232c84: AllocStack(0x8)
    //     0x232c84: sub             SP, SP, #8
    // 0x232c88: CheckStackOverflow
    //     0x232c88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x232c8c: cmp             SP, x16
    //     0x232c90: b.ls            #0x232d00
    // 0x232c94: ldr             x16, [fp, #0x10]
    // 0x232c98: str             x16, [SP]
    // 0x232c9c: r0 = _hasInputConnection()
    //     0x232c9c: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x232ca0: tbnz            w0, #4, #0x232cf0
    // 0x232ca4: ldr             x0, [fp, #0x10]
    // 0x232ca8: LoadField: r1 = r0->field_3b
    //     0x232ca8: ldur            w1, [x0, #0x3b]
    // 0x232cac: DecompressPointer r1
    //     0x232cac: add             x1, x1, HEAP, lsl #32
    // 0x232cb0: cmp             w1, NULL
    // 0x232cb4: b.eq            #0x232d08
    // 0x232cb8: str             x1, [SP]
    // 0x232cbc: r0 = connectionClosedReceived()
    //     0x232cbc: bl              #0x2336b0  ; [package:flutter/src/services/text_input.dart] TextInputConnection::connectionClosedReceived
    // 0x232cc0: ldr             x0, [fp, #0x10]
    // 0x232cc4: StoreField: r0->field_3b = rNULL
    //     0x232cc4: stur            NULL, [x0, #0x3b]
    // 0x232cc8: StoreField: r0->field_73 = rNULL
    //     0x232cc8: stur            NULL, [x0, #0x73]
    // 0x232ccc: LoadField: r1 = r0->field_b
    //     0x232ccc: ldur            w1, [x0, #0xb]
    // 0x232cd0: DecompressPointer r1
    //     0x232cd0: add             x1, x1, HEAP, lsl #32
    // 0x232cd4: cmp             w1, NULL
    // 0x232cd8: b.eq            #0x232d0c
    // 0x232cdc: LoadField: r0 = r1->field_f
    //     0x232cdc: ldur            w0, [x1, #0xf]
    // 0x232ce0: DecompressPointer r0
    //     0x232ce0: add             x0, x0, HEAP, lsl #32
    // 0x232ce4: str             x0, [SP]
    // 0x232ce8: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x232ce8: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x232cec: r0 = unfocus()
    //     0x232cec: bl              #0x232d10  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::unfocus
    // 0x232cf0: r0 = Null
    //     0x232cf0: mov             x0, NULL
    // 0x232cf4: LeaveFrame
    //     0x232cf4: mov             SP, fp
    //     0x232cf8: ldp             fp, lr, [SP], #0x10
    // 0x232cfc: ret
    //     0x232cfc: ret             
    // 0x232d00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x232d00: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x232d04: b               #0x232c94
    // 0x232d08: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x232d08: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x232d0c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x232d0c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ updateFloatingCursor(/* No info */) {
    // ** addr: 0x2336fc, size: 0x48c
    // 0x2336fc: EnterFrame
    //     0x2336fc: stp             fp, lr, [SP, #-0x10]!
    //     0x233700: mov             fp, SP
    // 0x233704: AllocStack(0x48)
    //     0x233704: sub             SP, SP, #0x48
    // 0x233708: CheckStackOverflow
    //     0x233708: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23370c: cmp             SP, x16
    //     0x233710: b.ls            #0x233b68
    // 0x233714: ldr             x0, [fp, #0x18]
    // 0x233718: LoadField: r1 = r0->field_67
    //     0x233718: ldur            w1, [x0, #0x67]
    // 0x23371c: DecompressPointer r1
    //     0x23371c: add             x1, x1, HEAP, lsl #32
    // 0x233720: cmp             w1, NULL
    // 0x233724: b.ne            #0x23379c
    // 0x233728: r1 = <double>
    //     0x233728: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x23372c: r0 = AnimationController()
    //     0x23372c: bl              #0x2174fc  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x233730: stur            x0, [fp, #-8]
    // 0x233734: ldr             x16, [fp, #0x18]
    // 0x233738: stp             x16, x0, [SP]
    // 0x23373c: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x23373c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x233740: r0 = AnimationController()
    //     0x233740: bl              #0x2362c8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x233744: r1 = 1
    //     0x233744: movz            x1, #0x1
    // 0x233748: r0 = AllocateContext()
    //     0x233748: bl              #0x3e4e00  ; AllocateContextStub
    // 0x23374c: mov             x1, x0
    // 0x233750: ldr             x0, [fp, #0x18]
    // 0x233754: StoreField: r1->field_f = r0
    //     0x233754: stur            w0, [x1, #0xf]
    // 0x233758: mov             x2, x1
    // 0x23375c: r1 = Function '_onFloatingCursorResetTick@148183791':.
    //     0x23375c: ldr             x1, [PP, #0x55a8]  ; [pp+0x55a8] AnonymousClosure: (0x2365b0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onFloatingCursorResetTick (0x235df4)
    // 0x233760: r0 = AllocateClosure()
    //     0x233760: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x233764: ldur            x16, [fp, #-8]
    // 0x233768: stp             x0, x16, [SP]
    // 0x23376c: r0 = addListener()
    //     0x23376c: bl              #0x370130  ; [package:flutter/src/animation/animation_controller.dart] _AnimationController&Animation&AnimationEagerListenerMixin&AnimationLocalListenersMixin::addListener
    // 0x233770: ldur            x0, [fp, #-8]
    // 0x233774: ldr             x2, [fp, #0x18]
    // 0x233778: StoreField: r2->field_67 = r0
    //     0x233778: stur            w0, [x2, #0x67]
    //     0x23377c: ldurb           w16, [x2, #-1]
    //     0x233780: ldurb           w17, [x0, #-1]
    //     0x233784: and             x16, x17, x16, lsr #2
    //     0x233788: tst             x16, HEAP, lsr #32
    //     0x23378c: b.eq            #0x233794
    //     0x233790: bl              #0x3e4628
    // 0x233794: ldur            x1, [fp, #-8]
    // 0x233798: b               #0x2337a0
    // 0x23379c: mov             x2, x0
    // 0x2337a0: ldr             x0, [fp, #0x10]
    // 0x2337a4: LoadField: r3 = r0->field_b
    //     0x2337a4: ldur            w3, [x0, #0xb]
    // 0x2337a8: DecompressPointer r3
    //     0x2337a8: add             x3, x3, HEAP, lsl #32
    // 0x2337ac: stur            x3, [fp, #-8]
    // 0x2337b0: LoadField: r4 = r3->field_7
    //     0x2337b0: ldur            x4, [x3, #7]
    // 0x2337b4: cmp             x4, #1
    // 0x2337b8: b.gt            #0x233ad0
    // 0x2337bc: cmp             x4, #0
    // 0x2337c0: b.gt            #0x23397c
    // 0x2337c4: str             x1, [SP]
    // 0x2337c8: r0 = isAnimating()
    //     0x2337c8: bl              #0x23628c  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::isAnimating
    // 0x2337cc: tbnz            w0, #4, #0x2337fc
    // 0x2337d0: ldr             x1, [fp, #0x18]
    // 0x2337d4: LoadField: r0 = r1->field_67
    //     0x2337d4: ldur            w0, [x1, #0x67]
    // 0x2337d8: DecompressPointer r0
    //     0x2337d8: add             x0, x0, HEAP, lsl #32
    // 0x2337dc: cmp             w0, NULL
    // 0x2337e0: b.eq            #0x233b70
    // 0x2337e4: str             x0, [SP]
    // 0x2337e8: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x2337e8: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x2337ec: r0 = stop()
    //     0x2337ec: bl              #0x20a610  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::stop
    // 0x2337f0: ldr             x16, [fp, #0x18]
    // 0x2337f4: str             x16, [SP]
    // 0x2337f8: r0 = _onFloatingCursorResetTick()
    //     0x2337f8: bl              #0x235df4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onFloatingCursorResetTick
    // 0x2337fc: ldr             x1, [fp, #0x18]
    // 0x233800: ldr             x0, [fp, #0x10]
    // 0x233804: r16 = false
    //     0x233804: add             x16, NULL, #0x30  ; false
    // 0x233808: stp             x16, x1, [SP]
    // 0x23380c: r4 = const [0, 0x2, 0x2, 0x1, resetCharTicks, 0x1, null]
    //     0x23380c: ldr             x4, [PP, #0x55b0]  ; [pp+0x55b0] List(7) [0, 0x2, 0x2, 0x1, "resetCharTicks", 0x1, Null]
    // 0x233810: r0 = _stopCursorBlink()
    //     0x233810: bl              #0x235d24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x233814: ldr             x16, [fp, #0x18]
    // 0x233818: str             x16, [SP]
    // 0x23381c: r0 = _cursorBlinkOpacityController()
    //     0x23381c: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x233820: str             x0, [SP, #8]
    // 0x233824: d0 = 1.000000
    //     0x233824: fmov            d0, #1.00000000
    // 0x233828: d0 = 1.000000
    //     0x233828: fmov            d0, #1.00000000
    // 0x23382c: str             d0, [SP]
    // 0x233830: r0 = value=()
    //     0x233830: bl              #0x209ef4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x233834: ldr             x0, [fp, #0x10]
    // 0x233838: LoadField: r1 = r0->field_7
    //     0x233838: ldur            w1, [x0, #7]
    // 0x23383c: DecompressPointer r1
    //     0x23383c: add             x1, x1, HEAP, lsl #32
    // 0x233840: mov             x0, x1
    // 0x233844: ldr             x2, [fp, #0x18]
    // 0x233848: StoreField: r2->field_7f = r0
    //     0x233848: stur            w0, [x2, #0x7f]
    //     0x23384c: ldurb           w16, [x2, #-1]
    //     0x233850: ldurb           w17, [x0, #-1]
    //     0x233854: and             x16, x17, x16, lsr #2
    //     0x233858: tst             x16, HEAP, lsr #32
    //     0x23385c: b.eq            #0x233864
    //     0x233860: bl              #0x3e4628
    // 0x233864: mov             x1, x2
    // 0x233868: LoadField: r0 = r1->field_ab
    //     0x233868: ldur            w0, [x1, #0xab]
    // 0x23386c: DecompressPointer r0
    //     0x23386c: add             x0, x0, HEAP, lsl #32
    // 0x233870: r16 = Sentinel
    //     0x233870: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x233874: cmp             w0, w16
    // 0x233878: b.ne            #0x233884
    // 0x23387c: r2 = renderEditable
    //     0x23387c: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x233880: r0 = InitLateFinalInstanceField()
    //     0x233880: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x233884: stur            x0, [fp, #-0x20]
    // 0x233888: LoadField: r1 = r0->field_e3
    //     0x233888: ldur            w1, [x0, #0xe3]
    // 0x23388c: DecompressPointer r1
    //     0x23388c: add             x1, x1, HEAP, lsl #32
    // 0x233890: LoadField: r2 = r1->field_17
    //     0x233890: ldur            x2, [x1, #0x17]
    // 0x233894: stur            x2, [fp, #-0x18]
    // 0x233898: LoadField: r3 = r1->field_27
    //     0x233898: ldur            w3, [x1, #0x27]
    // 0x23389c: DecompressPointer r3
    //     0x23389c: add             x3, x3, HEAP, lsl #32
    // 0x2338a0: stur            x3, [fp, #-0x10]
    // 0x2338a4: r0 = TextPosition()
    //     0x2338a4: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x2338a8: mov             x1, x0
    // 0x2338ac: ldur            x0, [fp, #-0x18]
    // 0x2338b0: stur            x1, [fp, #-0x28]
    // 0x2338b4: StoreField: r1->field_7 = r0
    //     0x2338b4: stur            x0, [x1, #7]
    // 0x2338b8: ldur            x0, [fp, #-0x10]
    // 0x2338bc: StoreField: r1->field_f = r0
    //     0x2338bc: stur            w0, [x1, #0xf]
    // 0x2338c0: ldur            x16, [fp, #-0x20]
    // 0x2338c4: stp             x1, x16, [SP]
    // 0x2338c8: r0 = getLocalRectForCaret()
    //     0x2338c8: bl              #0x235354  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x2338cc: mov             x2, x0
    // 0x2338d0: ldr             x1, [fp, #0x18]
    // 0x2338d4: StoreField: r1->field_77 = r0
    //     0x2338d4: stur            w0, [x1, #0x77]
    //     0x2338d8: ldurb           w16, [x1, #-1]
    //     0x2338dc: ldurb           w17, [x0, #-1]
    //     0x2338e0: and             x16, x17, x16, lsr #2
    //     0x2338e4: tst             x16, HEAP, lsr #32
    //     0x2338e8: b.eq            #0x2338f0
    //     0x2338ec: bl              #0x3e4608
    // 0x2338f0: str             x2, [SP]
    // 0x2338f4: r0 = center()
    //     0x2338f4: bl              #0x2352ec  ; [dart:ui] Rect::center
    // 0x2338f8: stur            x0, [fp, #-0x10]
    // 0x2338fc: ldr             x16, [fp, #0x18]
    // 0x233900: str             x16, [SP]
    // 0x233904: r0 = _floatingCursorOffset()
    //     0x233904: bl              #0x235264  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x233908: ldur            x16, [fp, #-0x10]
    // 0x23390c: stp             x0, x16, [SP]
    // 0x233910: r0 = -()
    //     0x233910: bl              #0x193d48  ; [dart:ui] Offset::-
    // 0x233914: mov             x2, x0
    // 0x233918: ldr             x1, [fp, #0x18]
    // 0x23391c: StoreField: r1->field_83 = r0
    //     0x23391c: stur            w0, [x1, #0x83]
    //     0x233920: ldurb           w16, [x1, #-1]
    //     0x233924: ldurb           w17, [x0, #-1]
    //     0x233928: and             x16, x17, x16, lsr #2
    //     0x23392c: tst             x16, HEAP, lsr #32
    //     0x233930: b.eq            #0x233938
    //     0x233934: bl              #0x3e4608
    // 0x233938: ldur            x0, [fp, #-0x28]
    // 0x23393c: StoreField: r1->field_7b = r0
    //     0x23393c: stur            w0, [x1, #0x7b]
    //     0x233940: ldurb           w16, [x1, #-1]
    //     0x233944: ldurb           w17, [x0, #-1]
    //     0x233948: and             x16, x17, x16, lsr #2
    //     0x23394c: tst             x16, HEAP, lsr #32
    //     0x233950: b.eq            #0x233958
    //     0x233954: bl              #0x3e4608
    // 0x233958: LoadField: r0 = r1->field_ab
    //     0x233958: ldur            w0, [x1, #0xab]
    // 0x23395c: DecompressPointer r0
    //     0x23395c: add             x0, x0, HEAP, lsl #32
    // 0x233960: ldur            x16, [fp, #-8]
    // 0x233964: stp             x16, x0, [SP, #0x10]
    // 0x233968: ldur            x16, [fp, #-0x28]
    // 0x23396c: stp             x16, x2, [SP]
    // 0x233970: r4 = const [0, 0x4, 0x4, 0x4, null]
    //     0x233970: ldr             x4, [PP, #0xb0]  ; [pp+0xb0] List(5) [0, 0x4, 0x4, 0x4, Null]
    // 0x233974: r0 = setFloatingCursor()
    //     0x233974: bl              #0x234af8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x233978: b               #0x233b58
    // 0x23397c: mov             x1, x2
    // 0x233980: LoadField: r2 = r0->field_7
    //     0x233980: ldur            w2, [x0, #7]
    // 0x233984: DecompressPointer r2
    //     0x233984: add             x2, x2, HEAP, lsl #32
    // 0x233988: LoadField: r0 = r1->field_7f
    //     0x233988: ldur            w0, [x1, #0x7f]
    // 0x23398c: DecompressPointer r0
    //     0x23398c: add             x0, x0, HEAP, lsl #32
    // 0x233990: cmp             w0, NULL
    // 0x233994: b.eq            #0x233b74
    // 0x233998: stp             x0, x2, [SP]
    // 0x23399c: r0 = -()
    //     0x23399c: bl              #0x193d48  ; [dart:ui] Offset::-
    // 0x2339a0: ldr             x1, [fp, #0x18]
    // 0x2339a4: stur            x0, [fp, #-0x10]
    // 0x2339a8: LoadField: r2 = r1->field_77
    //     0x2339a8: ldur            w2, [x1, #0x77]
    // 0x2339ac: DecompressPointer r2
    //     0x2339ac: add             x2, x2, HEAP, lsl #32
    // 0x2339b0: cmp             w2, NULL
    // 0x2339b4: b.eq            #0x233b78
    // 0x2339b8: str             x2, [SP]
    // 0x2339bc: r0 = center()
    //     0x2339bc: bl              #0x2352ec  ; [dart:ui] Rect::center
    // 0x2339c0: ldur            x16, [fp, #-0x10]
    // 0x2339c4: stp             x16, x0, [SP]
    // 0x2339c8: r0 = +()
    //     0x2339c8: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x2339cc: stur            x0, [fp, #-0x10]
    // 0x2339d0: ldr             x16, [fp, #0x18]
    // 0x2339d4: str             x16, [SP]
    // 0x2339d8: r0 = _floatingCursorOffset()
    //     0x2339d8: bl              #0x235264  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x2339dc: ldur            x16, [fp, #-0x10]
    // 0x2339e0: stp             x0, x16, [SP]
    // 0x2339e4: r0 = -()
    //     0x2339e4: bl              #0x193d48  ; [dart:ui] Offset::-
    // 0x2339e8: ldr             x1, [fp, #0x18]
    // 0x2339ec: stur            x0, [fp, #-0x10]
    // 0x2339f0: LoadField: r0 = r1->field_ab
    //     0x2339f0: ldur            w0, [x1, #0xab]
    // 0x2339f4: DecompressPointer r0
    //     0x2339f4: add             x0, x0, HEAP, lsl #32
    // 0x2339f8: r16 = Sentinel
    //     0x2339f8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2339fc: cmp             w0, w16
    // 0x233a00: b.ne            #0x233a0c
    // 0x233a04: r2 = renderEditable
    //     0x233a04: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x233a08: r0 = InitLateFinalInstanceField()
    //     0x233a08: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x233a0c: ldur            x16, [fp, #-0x10]
    // 0x233a10: stp             x16, x0, [SP]
    // 0x233a14: r0 = calculateBoundedFloatingCursorOffset()
    //     0x233a14: bl              #0x2343b4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::calculateBoundedFloatingCursorOffset
    // 0x233a18: mov             x2, x0
    // 0x233a1c: ldr             x1, [fp, #0x18]
    // 0x233a20: stur            x2, [fp, #-0x20]
    // 0x233a24: StoreField: r1->field_83 = r0
    //     0x233a24: stur            w0, [x1, #0x83]
    //     0x233a28: ldurb           w16, [x1, #-1]
    //     0x233a2c: ldurb           w17, [x0, #-1]
    //     0x233a30: and             x16, x17, x16, lsr #2
    //     0x233a34: tst             x16, HEAP, lsr #32
    //     0x233a38: b.eq            #0x233a40
    //     0x233a3c: bl              #0x3e4608
    // 0x233a40: LoadField: r0 = r1->field_ab
    //     0x233a40: ldur            w0, [x1, #0xab]
    // 0x233a44: DecompressPointer r0
    //     0x233a44: add             x0, x0, HEAP, lsl #32
    // 0x233a48: stur            x0, [fp, #-0x10]
    // 0x233a4c: str             x1, [SP]
    // 0x233a50: r0 = _floatingCursorOffset()
    //     0x233a50: bl              #0x235264  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x233a54: ldur            x16, [fp, #-0x20]
    // 0x233a58: stp             x0, x16, [SP]
    // 0x233a5c: r0 = +()
    //     0x233a5c: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x233a60: ldur            x16, [fp, #-0x10]
    // 0x233a64: stp             x0, x16, [SP]
    // 0x233a68: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x233a68: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x233a6c: r0 = localToGlobal()
    //     0x233a6c: bl              #0x228d48  ; [package:flutter/src/rendering/box.dart] RenderBox::localToGlobal
    // 0x233a70: ldur            x16, [fp, #-0x10]
    // 0x233a74: stp             x0, x16, [SP]
    // 0x233a78: r0 = getPositionForPoint()
    //     0x233a78: bl              #0x234334  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getPositionForPoint
    // 0x233a7c: mov             x2, x0
    // 0x233a80: ldr             x1, [fp, #0x18]
    // 0x233a84: StoreField: r1->field_7b = r0
    //     0x233a84: stur            w0, [x1, #0x7b]
    //     0x233a88: ldurb           w16, [x1, #-1]
    //     0x233a8c: ldurb           w17, [x0, #-1]
    //     0x233a90: and             x16, x17, x16, lsr #2
    //     0x233a94: tst             x16, HEAP, lsr #32
    //     0x233a98: b.eq            #0x233aa0
    //     0x233a9c: bl              #0x3e4608
    // 0x233aa0: LoadField: r0 = r1->field_ab
    //     0x233aa0: ldur            w0, [x1, #0xab]
    // 0x233aa4: DecompressPointer r0
    //     0x233aa4: add             x0, x0, HEAP, lsl #32
    // 0x233aa8: LoadField: r3 = r1->field_83
    //     0x233aa8: ldur            w3, [x1, #0x83]
    // 0x233aac: DecompressPointer r3
    //     0x233aac: add             x3, x3, HEAP, lsl #32
    // 0x233ab0: cmp             w3, NULL
    // 0x233ab4: b.eq            #0x233b7c
    // 0x233ab8: ldur            x16, [fp, #-8]
    // 0x233abc: stp             x16, x0, [SP, #0x10]
    // 0x233ac0: stp             x2, x3, [SP]
    // 0x233ac4: r4 = const [0, 0x4, 0x4, 0x4, null]
    //     0x233ac4: ldr             x4, [PP, #0xb0]  ; [pp+0xb0] List(5) [0, 0x4, 0x4, 0x4, Null]
    // 0x233ac8: r0 = setFloatingCursor()
    //     0x233ac8: bl              #0x234af8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x233acc: b               #0x233b58
    // 0x233ad0: mov             x1, x2
    // 0x233ad4: d0 = 1.000000
    //     0x233ad4: fmov            d0, #1.00000000
    // 0x233ad8: d0 = 1.000000
    //     0x233ad8: fmov            d0, #1.00000000
    // 0x233adc: str             x1, [SP]
    // 0x233ae0: r0 = _startCursorBlink()
    //     0x233ae0: bl              #0x233c28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x233ae4: ldr             x0, [fp, #0x18]
    // 0x233ae8: LoadField: r1 = r0->field_7b
    //     0x233ae8: ldur            w1, [x0, #0x7b]
    // 0x233aec: DecompressPointer r1
    //     0x233aec: add             x1, x1, HEAP, lsl #32
    // 0x233af0: cmp             w1, NULL
    // 0x233af4: b.eq            #0x233b58
    // 0x233af8: LoadField: r1 = r0->field_83
    //     0x233af8: ldur            w1, [x0, #0x83]
    // 0x233afc: DecompressPointer r1
    //     0x233afc: add             x1, x1, HEAP, lsl #32
    // 0x233b00: cmp             w1, NULL
    // 0x233b04: b.eq            #0x233b58
    // 0x233b08: LoadField: r1 = r0->field_67
    //     0x233b08: ldur            w1, [x0, #0x67]
    // 0x233b0c: DecompressPointer r1
    //     0x233b0c: add             x1, x1, HEAP, lsl #32
    // 0x233b10: cmp             w1, NULL
    // 0x233b14: b.eq            #0x233b80
    // 0x233b18: stp             xzr, x1, [SP]
    // 0x233b1c: r0 = value=()
    //     0x233b1c: bl              #0x209ef4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x233b20: ldr             x0, [fp, #0x18]
    // 0x233b24: LoadField: r1 = r0->field_67
    //     0x233b24: ldur            w1, [x0, #0x67]
    // 0x233b28: DecompressPointer r1
    //     0x233b28: add             x1, x1, HEAP, lsl #32
    // 0x233b2c: cmp             w1, NULL
    // 0x233b30: b.eq            #0x233b84
    // 0x233b34: str             x1, [SP, #0x18]
    // 0x233b38: d0 = 1.000000
    //     0x233b38: fmov            d0, #1.00000000
    // 0x233b3c: d0 = 1.000000
    //     0x233b3c: fmov            d0, #1.00000000
    // 0x233b40: str             d0, [SP, #0x10]
    // 0x233b44: r16 = Instance_Duration
    //     0x233b44: ldr             x16, [PP, #0x55c0]  ; [pp+0x55c0] Obj!Duration@482bc1
    // 0x233b48: r30 = Instance__DecelerateCurve
    //     0x233b48: ldr             lr, [PP, #0x55c8]  ; [pp+0x55c8] Obj!_DecelerateCurve@47bb61
    // 0x233b4c: stp             lr, x16, [SP]
    // 0x233b50: r4 = const [0, 0x4, 0x4, 0x3, curve, 0x3, null]
    //     0x233b50: ldr             x4, [PP, #0x55d0]  ; [pp+0x55d0] List(7) [0, 0x4, 0x4, 0x3, "curve", 0x3, Null]
    // 0x233b54: r0 = animateTo()
    //     0x233b54: bl              #0x233b88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateTo
    // 0x233b58: r0 = Null
    //     0x233b58: mov             x0, NULL
    // 0x233b5c: LeaveFrame
    //     0x233b5c: mov             SP, fp
    //     0x233b60: ldp             fp, lr, [SP], #0x10
    // 0x233b64: ret
    //     0x233b64: ret             
    // 0x233b68: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x233b68: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x233b6c: b               #0x233714
    // 0x233b70: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233b70: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x233b74: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233b74: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x233b78: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233b78: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x233b7c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233b7c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x233b80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233b80: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x233b84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233b84: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _startCursorBlink(/* No info */) {
    // ** addr: 0x233c28, size: 0x190
    // 0x233c28: EnterFrame
    //     0x233c28: stp             fp, lr, [SP, #-0x10]!
    //     0x233c2c: mov             fp, SP
    // 0x233c30: AllocStack(0x20)
    //     0x233c30: sub             SP, SP, #0x20
    // 0x233c34: CheckStackOverflow
    //     0x233c34: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x233c38: cmp             SP, x16
    //     0x233c3c: b.ls            #0x233da8
    // 0x233c40: r1 = 1
    //     0x233c40: movz            x1, #0x1
    // 0x233c44: r0 = AllocateContext()
    //     0x233c44: bl              #0x3e4e00  ; AllocateContextStub
    // 0x233c48: ldr             x1, [fp, #0x10]
    // 0x233c4c: stur            x0, [fp, #-8]
    // 0x233c50: StoreField: r0->field_f = r1
    //     0x233c50: stur            w1, [x0, #0xf]
    // 0x233c54: LoadField: r2 = r1->field_b
    //     0x233c54: ldur            w2, [x1, #0xb]
    // 0x233c58: DecompressPointer r2
    //     0x233c58: add             x2, x2, HEAP, lsl #32
    // 0x233c5c: cmp             w2, NULL
    // 0x233c60: b.eq            #0x233db0
    // 0x233c64: LoadField: r3 = r2->field_33
    //     0x233c64: ldur            w3, [x2, #0x33]
    // 0x233c68: DecompressPointer r3
    //     0x233c68: add             x3, x3, HEAP, lsl #32
    // 0x233c6c: tbz             w3, #4, #0x233c80
    // 0x233c70: r0 = Null
    //     0x233c70: mov             x0, NULL
    // 0x233c74: LeaveFrame
    //     0x233c74: mov             SP, fp
    //     0x233c78: ldp             fp, lr, [SP], #0x10
    // 0x233c7c: ret
    //     0x233c7c: ret             
    // 0x233c80: LoadField: r2 = r1->field_6f
    //     0x233c80: ldur            w2, [x1, #0x6f]
    // 0x233c84: DecompressPointer r2
    //     0x233c84: add             x2, x2, HEAP, lsl #32
    // 0x233c88: tbz             w2, #4, #0x233c9c
    // 0x233c8c: r0 = Null
    //     0x233c8c: mov             x0, NULL
    // 0x233c90: LeaveFrame
    //     0x233c90: mov             SP, fp
    //     0x233c94: ldp             fp, lr, [SP], #0x10
    // 0x233c98: ret
    //     0x233c98: ret             
    // 0x233c9c: LoadField: r2 = r1->field_1f
    //     0x233c9c: ldur            w2, [x1, #0x1f]
    // 0x233ca0: DecompressPointer r2
    //     0x233ca0: add             x2, x2, HEAP, lsl #32
    // 0x233ca4: cmp             w2, NULL
    // 0x233ca8: b.eq            #0x233cb8
    // 0x233cac: str             x2, [SP]
    // 0x233cb0: r0 = cancel()
    //     0x233cb0: bl              #0x1a238c  ; [dart:isolate] _Timer::cancel
    // 0x233cb4: ldr             x1, [fp, #0x10]
    // 0x233cb8: str             x1, [SP]
    // 0x233cbc: r0 = _cursorBlinkOpacityController()
    //     0x233cbc: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x233cc0: str             x0, [SP, #8]
    // 0x233cc4: d0 = 1.000000
    //     0x233cc4: fmov            d0, #1.00000000
    // 0x233cc8: d0 = 1.000000
    //     0x233cc8: fmov            d0, #1.00000000
    // 0x233ccc: str             d0, [SP]
    // 0x233cd0: r0 = value=()
    //     0x233cd0: bl              #0x209ef4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x233cd4: ldr             x1, [fp, #0x10]
    // 0x233cd8: LoadField: r0 = r1->field_b
    //     0x233cd8: ldur            w0, [x1, #0xb]
    // 0x233cdc: DecompressPointer r0
    //     0x233cdc: add             x0, x0, HEAP, lsl #32
    // 0x233ce0: cmp             w0, NULL
    // 0x233ce4: b.eq            #0x233db4
    // 0x233ce8: LoadField: r2 = r0->field_d3
    //     0x233ce8: ldur            w2, [x0, #0xd3]
    // 0x233cec: DecompressPointer r2
    //     0x233cec: add             x2, x2, HEAP, lsl #32
    // 0x233cf0: tbnz            w2, #4, #0x233d60
    // 0x233cf4: str             x1, [SP]
    // 0x233cf8: r0 = _cursorBlinkOpacityController()
    //     0x233cf8: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x233cfc: ldr             x1, [fp, #0x10]
    // 0x233d00: stur            x0, [fp, #-0x10]
    // 0x233d04: LoadField: r0 = r1->field_27
    //     0x233d04: ldur            w0, [x1, #0x27]
    // 0x233d08: DecompressPointer r0
    //     0x233d08: add             x0, x0, HEAP, lsl #32
    // 0x233d0c: r16 = Sentinel
    //     0x233d0c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x233d10: cmp             w0, w16
    // 0x233d14: b.ne            #0x233d20
    // 0x233d18: r2 = _iosBlinkCursorSimulation
    //     0x233d18: ldr             x2, [PP, #0x56c8]  ; [pp+0x56c8] Field <EditableTextState._iosBlinkCursorSimulation@148183791>: late final (offset: 0x28)
    // 0x233d1c: r0 = InitLateFinalInstanceField()
    //     0x233d1c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x233d20: ldur            x16, [fp, #-0x10]
    // 0x233d24: stp             x0, x16, [SP]
    // 0x233d28: r0 = animateWith()
    //     0x233d28: bl              #0x217218  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateWith
    // 0x233d2c: stur            x0, [fp, #-0x10]
    // 0x233d30: r1 = 1
    //     0x233d30: movz            x1, #0x1
    // 0x233d34: r0 = AllocateContext()
    //     0x233d34: bl              #0x3e4e00  ; AllocateContextStub
    // 0x233d38: mov             x1, x0
    // 0x233d3c: ldr             x0, [fp, #0x10]
    // 0x233d40: StoreField: r1->field_f = r0
    //     0x233d40: stur            w0, [x1, #0xf]
    // 0x233d44: mov             x2, x1
    // 0x233d48: r1 = Function '_onCursorTick@148183791':.
    //     0x233d48: ldr             x1, [PP, #0x56d0]  ; [pp+0x56d0] AnonymousClosure: (0x2342a4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick (0x233f90)
    // 0x233d4c: r0 = AllocateClosure()
    //     0x233d4c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x233d50: ldur            x16, [fp, #-0x10]
    // 0x233d54: stp             x0, x16, [SP]
    // 0x233d58: r0 = whenComplete()
    //     0x233d58: bl              #0x3d0e44  ; [package:flutter/src/scheduler/ticker.dart] TickerFuture::whenComplete
    // 0x233d5c: b               #0x233d98
    // 0x233d60: mov             x0, x1
    // 0x233d64: ldur            x2, [fp, #-8]
    // 0x233d68: r1 = Function '<anonymous closure>':.
    //     0x233d68: ldr             x1, [PP, #0x56d8]  ; [pp+0x56d8] AnonymousClosure: (0x233f44), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink (0x233c28)
    // 0x233d6c: r0 = AllocateClosure()
    //     0x233d6c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x233d70: stp             x0, NULL, [SP]
    // 0x233d74: r0 = Timer.periodic()
    //     0x233d74: bl              #0x233db8  ; [dart:async] Timer::Timer.periodic
    // 0x233d78: ldr             x1, [fp, #0x10]
    // 0x233d7c: StoreField: r1->field_1f = r0
    //     0x233d7c: stur            w0, [x1, #0x1f]
    //     0x233d80: ldurb           w16, [x1, #-1]
    //     0x233d84: ldurb           w17, [x0, #-1]
    //     0x233d88: and             x16, x17, x16, lsr #2
    //     0x233d8c: tst             x16, HEAP, lsr #32
    //     0x233d90: b.eq            #0x233d98
    //     0x233d94: bl              #0x3e4608
    // 0x233d98: r0 = Null
    //     0x233d98: mov             x0, NULL
    // 0x233d9c: LeaveFrame
    //     0x233d9c: mov             SP, fp
    //     0x233da0: ldp             fp, lr, [SP], #0x10
    // 0x233da4: ret
    //     0x233da4: ret             
    // 0x233da8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x233da8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x233dac: b               #0x233c40
    // 0x233db0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233db0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x233db4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x233db4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Timer) {
    // ** addr: 0x233f44, size: 0x4c
    // 0x233f44: EnterFrame
    //     0x233f44: stp             fp, lr, [SP, #-0x10]!
    //     0x233f48: mov             fp, SP
    // 0x233f4c: AllocStack(0x8)
    //     0x233f4c: sub             SP, SP, #8
    // 0x233f50: SetupParameters()
    //     0x233f50: ldr             x0, [fp, #0x18]
    //     0x233f54: ldur            w1, [x0, #0x17]
    //     0x233f58: add             x1, x1, HEAP, lsl #32
    // 0x233f5c: CheckStackOverflow
    //     0x233f5c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x233f60: cmp             SP, x16
    //     0x233f64: b.ls            #0x233f88
    // 0x233f68: LoadField: r0 = r1->field_f
    //     0x233f68: ldur            w0, [x1, #0xf]
    // 0x233f6c: DecompressPointer r0
    //     0x233f6c: add             x0, x0, HEAP, lsl #32
    // 0x233f70: str             x0, [SP]
    // 0x233f74: r0 = _onCursorTick()
    //     0x233f74: bl              #0x233f90  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick
    // 0x233f78: r0 = Null
    //     0x233f78: mov             x0, NULL
    // 0x233f7c: LeaveFrame
    //     0x233f7c: mov             SP, fp
    //     0x233f80: ldp             fp, lr, [SP], #0x10
    // 0x233f84: ret
    //     0x233f84: ret             
    // 0x233f88: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x233f88: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x233f8c: b               #0x233f68
  }
  _ _onCursorTick(/* No info */) {
    // ** addr: 0x233f90, size: 0x248
    // 0x233f90: EnterFrame
    //     0x233f90: stp             fp, lr, [SP, #-0x10]!
    //     0x233f94: mov             fp, SP
    // 0x233f98: AllocStack(0x20)
    //     0x233f98: sub             SP, SP, #0x20
    // 0x233f9c: CheckStackOverflow
    //     0x233f9c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x233fa0: cmp             SP, x16
    //     0x233fa4: b.ls            #0x2341c0
    // 0x233fa8: r1 = 1
    //     0x233fa8: movz            x1, #0x1
    // 0x233fac: r0 = AllocateContext()
    //     0x233fac: bl              #0x3e4e00  ; AllocateContextStub
    // 0x233fb0: mov             x1, x0
    // 0x233fb4: ldr             x0, [fp, #0x10]
    // 0x233fb8: stur            x1, [fp, #-8]
    // 0x233fbc: StoreField: r1->field_f = r0
    //     0x233fbc: stur            w0, [x1, #0xf]
    // 0x233fc0: LoadField: r2 = r0->field_9b
    //     0x233fc0: ldur            x2, [x0, #0x9b]
    // 0x233fc4: cmp             x2, #0
    // 0x233fc8: b.le            #0x234040
    // 0x233fcc: r2 = LoadStaticField(0x970)
    //     0x233fcc: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x233fd0: ldr             x2, [x2, #0x12e0]
    // 0x233fd4: cmp             w2, NULL
    // 0x233fd8: b.eq            #0x2341c8
    // 0x233fdc: r0 = InitLateStaticField(0x834) // [dart:ui] PlatformDispatcher::_instance
    //     0x233fdc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x233fe0: ldr             x0, [x0, #0x1068]
    //     0x233fe4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x233fe8: cmp             w0, w16
    //     0x233fec: b.ne            #0x233ff8
    //     0x233ff0: ldr             x2, [PP, #0x270]  ; [pp+0x270] Field <PlatformDispatcher._instance@15065589>: static late final (offset: 0x834)
    //     0x233ff4: bl              #0x3e406c
    // 0x233ff8: LoadField: r1 = r0->field_77
    //     0x233ff8: ldur            w1, [x0, #0x77]
    // 0x233ffc: DecompressPointer r1
    //     0x233ffc: add             x1, x1, HEAP, lsl #32
    // 0x234000: tbnz            w1, #4, #0x234018
    // 0x234004: ldr             x0, [fp, #0x10]
    // 0x234008: LoadField: r1 = r0->field_9b
    //     0x234008: ldur            x1, [x0, #0x9b]
    // 0x23400c: sub             x2, x1, #1
    // 0x234010: mov             x1, x2
    // 0x234014: b               #0x234020
    // 0x234018: ldr             x0, [fp, #0x10]
    // 0x23401c: r1 = 0
    //     0x23401c: movz            x1, #0
    // 0x234020: StoreField: r0->field_9b = r1
    //     0x234020: stur            x1, [x0, #0x9b]
    // 0x234024: cbnz            x1, #0x234040
    // 0x234028: r1 = Function '<anonymous closure>':.
    //     0x234028: ldr             x1, [PP, #0x56e0]  ; [pp+0x56e0] Function: [dart:ui] _NativeScene::_NativeScene._ (0x3daaf0)
    // 0x23402c: r2 = Null
    //     0x23402c: mov             x2, NULL
    // 0x234030: r0 = AllocateClosure()
    //     0x234030: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x234034: ldr             x16, [fp, #0x10]
    // 0x234038: stp             x0, x16, [SP]
    // 0x23403c: r0 = setState()
    //     0x23403c: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x234040: ldr             x0, [fp, #0x10]
    // 0x234044: LoadField: r1 = r0->field_b
    //     0x234044: ldur            w1, [x0, #0xb]
    // 0x234048: DecompressPointer r1
    //     0x234048: add             x1, x1, HEAP, lsl #32
    // 0x23404c: cmp             w1, NULL
    // 0x234050: b.eq            #0x2341cc
    // 0x234054: LoadField: r2 = r1->field_d3
    //     0x234054: ldur            w2, [x1, #0xd3]
    // 0x234058: DecompressPointer r2
    //     0x234058: add             x2, x2, HEAP, lsl #32
    // 0x23405c: tbnz            w2, #4, #0x2340bc
    // 0x234060: LoadField: r1 = r0->field_1f
    //     0x234060: ldur            w1, [x0, #0x1f]
    // 0x234064: DecompressPointer r1
    //     0x234064: add             x1, x1, HEAP, lsl #32
    // 0x234068: cmp             w1, NULL
    // 0x23406c: b.eq            #0x23407c
    // 0x234070: str             x1, [SP]
    // 0x234074: r0 = cancel()
    //     0x234074: bl              #0x1a238c  ; [dart:isolate] _Timer::cancel
    // 0x234078: ldr             x0, [fp, #0x10]
    // 0x23407c: ldur            x2, [fp, #-8]
    // 0x234080: r1 = Function '<anonymous closure>':.
    //     0x234080: ldr             x1, [PP, #0x56e8]  ; [pp+0x56e8] AnonymousClosure: (0x2341d8), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick (0x233f90)
    // 0x234084: r0 = AllocateClosure()
    //     0x234084: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x234088: r16 = Instance_Duration
    //     0x234088: ldr             x16, [PP, #0x1f80]  ; [pp+0x1f80] Obj!Duration@482ba1
    // 0x23408c: stp             x16, NULL, [SP, #8]
    // 0x234090: str             x0, [SP]
    // 0x234094: r0 = Timer()
    //     0x234094: bl              #0x19fab0  ; [dart:async] Timer::Timer
    // 0x234098: ldr             x3, [fp, #0x10]
    // 0x23409c: StoreField: r3->field_1f = r0
    //     0x23409c: stur            w0, [x3, #0x1f]
    //     0x2340a0: ldurb           w16, [x3, #-1]
    //     0x2340a4: ldurb           w17, [x0, #-1]
    //     0x2340a8: and             x16, x17, x16, lsr #2
    //     0x2340ac: tst             x16, HEAP, lsr #32
    //     0x2340b0: b.eq            #0x2340b8
    //     0x2340b4: bl              #0x3e4648
    // 0x2340b8: b               #0x2341b0
    // 0x2340bc: mov             x3, x0
    // 0x2340c0: LoadField: r0 = r3->field_1f
    //     0x2340c0: ldur            w0, [x3, #0x1f]
    // 0x2340c4: DecompressPointer r0
    //     0x2340c4: add             x0, x0, HEAP, lsl #32
    // 0x2340c8: cmp             w0, NULL
    // 0x2340cc: b.ne            #0x2340d8
    // 0x2340d0: r0 = Null
    //     0x2340d0: mov             x0, NULL
    // 0x2340d4: b               #0x2340f0
    // 0x2340d8: LoadField: r1 = r0->field_7
    //     0x2340d8: ldur            w1, [x0, #7]
    // 0x2340dc: DecompressPointer r1
    //     0x2340dc: add             x1, x1, HEAP, lsl #32
    // 0x2340e0: cmp             w1, NULL
    // 0x2340e4: r16 = true
    //     0x2340e4: add             x16, NULL, #0x20  ; true
    // 0x2340e8: r17 = false
    //     0x2340e8: add             x17, NULL, #0x30  ; false
    // 0x2340ec: csel            x0, x16, x17, ne
    // 0x2340f0: cmp             w0, NULL
    // 0x2340f4: b.eq            #0x2340fc
    // 0x2340f8: tbz             w0, #4, #0x234148
    // 0x2340fc: LoadField: r0 = r3->field_6f
    //     0x2340fc: ldur            w0, [x3, #0x6f]
    // 0x234100: DecompressPointer r0
    //     0x234100: add             x0, x0, HEAP, lsl #32
    // 0x234104: tbnz            w0, #4, #0x234140
    // 0x234108: ldur            x2, [fp, #-8]
    // 0x23410c: r1 = Function '<anonymous closure>':.
    //     0x23410c: ldr             x1, [PP, #0x56f0]  ; [pp+0x56f0] AnonymousClosure: (0x233f44), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink (0x233c28)
    // 0x234110: r0 = AllocateClosure()
    //     0x234110: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x234114: stp             x0, NULL, [SP]
    // 0x234118: r0 = Timer.periodic()
    //     0x234118: bl              #0x233db8  ; [dart:async] Timer::Timer.periodic
    // 0x23411c: ldr             x1, [fp, #0x10]
    // 0x234120: StoreField: r1->field_1f = r0
    //     0x234120: stur            w0, [x1, #0x1f]
    //     0x234124: ldurb           w16, [x1, #-1]
    //     0x234128: ldurb           w17, [x0, #-1]
    //     0x23412c: and             x16, x17, x16, lsr #2
    //     0x234130: tst             x16, HEAP, lsr #32
    //     0x234134: b.eq            #0x23413c
    //     0x234138: bl              #0x3e4608
    // 0x23413c: b               #0x23414c
    // 0x234140: mov             x1, x3
    // 0x234144: b               #0x23414c
    // 0x234148: mov             x1, x3
    // 0x23414c: str             x1, [SP]
    // 0x234150: r0 = _cursorBlinkOpacityController()
    //     0x234150: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x234154: stur            x0, [fp, #-8]
    // 0x234158: ldr             x16, [fp, #0x10]
    // 0x23415c: str             x16, [SP]
    // 0x234160: r0 = _cursorBlinkOpacityController()
    //     0x234160: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x234164: LoadField: r1 = r0->field_37
    //     0x234164: ldur            w1, [x0, #0x37]
    // 0x234168: DecompressPointer r1
    //     0x234168: add             x1, x1, HEAP, lsl #32
    // 0x23416c: r16 = Sentinel
    //     0x23416c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x234170: cmp             w1, w16
    // 0x234174: b.eq            #0x2341d0
    // 0x234178: LoadField: d0 = r1->field_7
    //     0x234178: ldur            d0, [x1, #7]
    // 0x23417c: d1 = 0.000000
    //     0x23417c: eor             v1.16b, v1.16b, v1.16b
    // 0x234180: d1 = 0.000000
    //     0x234180: eor             v1.16b, v1.16b, v1.16b
    // 0x234184: fcmp            d0, d1
    // 0x234188: b.ne            #0x234198
    // 0x23418c: d0 = 1.000000
    //     0x23418c: fmov            d0, #1.00000000
    // 0x234190: d0 = 1.000000
    //     0x234190: fmov            d0, #1.00000000
    // 0x234194: b               #0x2341a0
    // 0x234198: d0 = 0.000000
    //     0x234198: eor             v0.16b, v0.16b, v0.16b
    // 0x23419c: d0 = 0.000000
    //     0x23419c: eor             v0.16b, v0.16b, v0.16b
    // 0x2341a0: ldur            x16, [fp, #-8]
    // 0x2341a4: str             x16, [SP, #8]
    // 0x2341a8: str             d0, [SP]
    // 0x2341ac: r0 = value=()
    //     0x2341ac: bl              #0x209ef4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x2341b0: r0 = Null
    //     0x2341b0: mov             x0, NULL
    // 0x2341b4: LeaveFrame
    //     0x2341b4: mov             SP, fp
    //     0x2341b8: ldp             fp, lr, [SP], #0x10
    // 0x2341bc: ret
    //     0x2341bc: ret             
    // 0x2341c0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2341c0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2341c4: b               #0x233fa8
    // 0x2341c8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2341c8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2341cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2341cc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2341d0: r9 = _value
    //     0x2341d0: ldr             x9, [PP, #0x5638]  ; [pp+0x5638] Field <AnimationController._value@337066280>: late (offset: 0x38)
    // 0x2341d4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2341d4: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x2341d8, size: 0xcc
    // 0x2341d8: EnterFrame
    //     0x2341d8: stp             fp, lr, [SP, #-0x10]!
    //     0x2341dc: mov             fp, SP
    // 0x2341e0: AllocStack(0x28)
    //     0x2341e0: sub             SP, SP, #0x28
    // 0x2341e4: SetupParameters()
    //     0x2341e4: ldr             x0, [fp, #0x10]
    //     0x2341e8: ldur            w1, [x0, #0x17]
    //     0x2341ec: add             x1, x1, HEAP, lsl #32
    //     0x2341f0: stur            x1, [fp, #-8]
    // 0x2341f4: CheckStackOverflow
    //     0x2341f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2341f8: cmp             SP, x16
    //     0x2341fc: b.ls            #0x23429c
    // 0x234200: LoadField: r0 = r1->field_f
    //     0x234200: ldur            w0, [x1, #0xf]
    // 0x234204: DecompressPointer r0
    //     0x234204: add             x0, x0, HEAP, lsl #32
    // 0x234208: str             x0, [SP]
    // 0x23420c: r0 = _cursorBlinkOpacityController()
    //     0x23420c: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x234210: mov             x2, x0
    // 0x234214: ldur            x0, [fp, #-8]
    // 0x234218: stur            x2, [fp, #-0x10]
    // 0x23421c: LoadField: r1 = r0->field_f
    //     0x23421c: ldur            w1, [x0, #0xf]
    // 0x234220: DecompressPointer r1
    //     0x234220: add             x1, x1, HEAP, lsl #32
    // 0x234224: LoadField: r0 = r1->field_27
    //     0x234224: ldur            w0, [x1, #0x27]
    // 0x234228: DecompressPointer r0
    //     0x234228: add             x0, x0, HEAP, lsl #32
    // 0x23422c: r16 = Sentinel
    //     0x23422c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x234230: cmp             w0, w16
    // 0x234234: b.ne            #0x234240
    // 0x234238: r2 = _iosBlinkCursorSimulation
    //     0x234238: ldr             x2, [PP, #0x56c8]  ; [pp+0x56c8] Field <EditableTextState._iosBlinkCursorSimulation@148183791>: late final (offset: 0x28)
    // 0x23423c: r0 = InitLateFinalInstanceField()
    //     0x23423c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x234240: ldur            x16, [fp, #-0x10]
    // 0x234244: stp             x0, x16, [SP]
    // 0x234248: r0 = animateWith()
    //     0x234248: bl              #0x217218  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateWith
    // 0x23424c: mov             x1, x0
    // 0x234250: ldur            x0, [fp, #-8]
    // 0x234254: stur            x1, [fp, #-0x18]
    // 0x234258: LoadField: r2 = r0->field_f
    //     0x234258: ldur            w2, [x0, #0xf]
    // 0x23425c: DecompressPointer r2
    //     0x23425c: add             x2, x2, HEAP, lsl #32
    // 0x234260: stur            x2, [fp, #-0x10]
    // 0x234264: r1 = 1
    //     0x234264: movz            x1, #0x1
    // 0x234268: r0 = AllocateContext()
    //     0x234268: bl              #0x3e4e00  ; AllocateContextStub
    // 0x23426c: mov             x1, x0
    // 0x234270: ldur            x0, [fp, #-0x10]
    // 0x234274: StoreField: r1->field_f = r0
    //     0x234274: stur            w0, [x1, #0xf]
    // 0x234278: mov             x2, x1
    // 0x23427c: r1 = Function '_onCursorTick@148183791':.
    //     0x23427c: ldr             x1, [PP, #0x56d0]  ; [pp+0x56d0] AnonymousClosure: (0x2342a4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick (0x233f90)
    // 0x234280: r0 = AllocateClosure()
    //     0x234280: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x234284: ldur            x16, [fp, #-0x18]
    // 0x234288: stp             x0, x16, [SP]
    // 0x23428c: r0 = whenComplete()
    //     0x23428c: bl              #0x3d0e44  ; [package:flutter/src/scheduler/ticker.dart] TickerFuture::whenComplete
    // 0x234290: LeaveFrame
    //     0x234290: mov             SP, fp
    //     0x234294: ldp             fp, lr, [SP], #0x10
    // 0x234298: ret
    //     0x234298: ret             
    // 0x23429c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23429c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2342a0: b               #0x234200
  }
  [closure] void _onCursorTick(dynamic) {
    // ** addr: 0x2342a4, size: 0x48
    // 0x2342a4: EnterFrame
    //     0x2342a4: stp             fp, lr, [SP, #-0x10]!
    //     0x2342a8: mov             fp, SP
    // 0x2342ac: AllocStack(0x8)
    //     0x2342ac: sub             SP, SP, #8
    // 0x2342b0: SetupParameters()
    //     0x2342b0: ldr             x0, [fp, #0x10]
    //     0x2342b4: ldur            w1, [x0, #0x17]
    //     0x2342b8: add             x1, x1, HEAP, lsl #32
    // 0x2342bc: CheckStackOverflow
    //     0x2342bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2342c0: cmp             SP, x16
    //     0x2342c4: b.ls            #0x2342e4
    // 0x2342c8: LoadField: r0 = r1->field_f
    //     0x2342c8: ldur            w0, [x1, #0xf]
    // 0x2342cc: DecompressPointer r0
    //     0x2342cc: add             x0, x0, HEAP, lsl #32
    // 0x2342d0: str             x0, [SP]
    // 0x2342d4: r0 = _onCursorTick()
    //     0x2342d4: bl              #0x233f90  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick
    // 0x2342d8: LeaveFrame
    //     0x2342d8: mov             SP, fp
    //     0x2342dc: ldp             fp, lr, [SP], #0x10
    // 0x2342e0: ret
    //     0x2342e0: ret             
    // 0x2342e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2342e4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2342e8: b               #0x2342c8
  }
  Simulation _iosBlinkCursorSimulation(EditableTextState) {
    // ** addr: 0x2342ec, size: 0x3c
    // 0x2342ec: EnterFrame
    //     0x2342ec: stp             fp, lr, [SP, #-0x10]!
    //     0x2342f0: mov             fp, SP
    // 0x2342f4: r0 = _DiscreteKeyFrameSimulation()
    //     0x2342f4: bl              #0x234328  ; Allocate_DiscreteKeyFrameSimulationStub -> _DiscreteKeyFrameSimulation (size=0x20)
    // 0x2342f8: r1 = 0
    //     0x2342f8: movz            x1, #0
    // 0x2342fc: StoreField: r0->field_17 = r1
    //     0x2342fc: stur            x1, [x0, #0x17]
    // 0x234300: r1 = const [Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame']
    //     0x234300: ldr             x1, [PP, #0x56f8]  ; [pp+0x56f8] List<_KeyFrame>(11)
    // 0x234304: StoreField: r0->field_13 = r1
    //     0x234304: stur            w1, [x0, #0x13]
    // 0x234308: d0 = 1.000000
    //     0x234308: fmov            d0, #1.00000000
    // 0x23430c: d0 = 1.000000
    //     0x23430c: fmov            d0, #1.00000000
    // 0x234310: StoreField: r0->field_b = d0
    //     0x234310: stur            d0, [x0, #0xb]
    // 0x234314: r1 = Instance_Tolerance
    //     0x234314: ldr             x1, [PP, #0x5658]  ; [pp+0x5658] Obj!Tolerance@472e81
    // 0x234318: StoreField: r0->field_7 = r1
    //     0x234318: stur            w1, [x0, #7]
    // 0x23431c: LeaveFrame
    //     0x23431c: mov             SP, fp
    //     0x234320: ldp             fp, lr, [SP], #0x10
    // 0x234324: ret
    //     0x234324: ret             
  }
  get _ _floatingCursorOffset(/* No info */) {
    // ** addr: 0x235264, size: 0x88
    // 0x235264: EnterFrame
    //     0x235264: stp             fp, lr, [SP, #-0x10]!
    //     0x235268: mov             fp, SP
    // 0x23526c: AllocStack(0x10)
    //     0x23526c: sub             SP, SP, #0x10
    // 0x235270: CheckStackOverflow
    //     0x235270: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x235274: cmp             SP, x16
    //     0x235278: b.ls            #0x2352e4
    // 0x23527c: ldr             x1, [fp, #0x10]
    // 0x235280: LoadField: r0 = r1->field_ab
    //     0x235280: ldur            w0, [x1, #0xab]
    // 0x235284: DecompressPointer r0
    //     0x235284: add             x0, x0, HEAP, lsl #32
    // 0x235288: r16 = Sentinel
    //     0x235288: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x23528c: cmp             w0, w16
    // 0x235290: b.ne            #0x23529c
    // 0x235294: r2 = renderEditable
    //     0x235294: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x235298: r0 = InitLateFinalInstanceField()
    //     0x235298: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x23529c: LoadField: r1 = r0->field_b7
    //     0x23529c: ldur            w1, [x0, #0xb7]
    // 0x2352a0: DecompressPointer r1
    //     0x2352a0: add             x1, x1, HEAP, lsl #32
    // 0x2352a4: str             x1, [SP]
    // 0x2352a8: r0 = preferredLineHeight()
    //     0x2352a8: bl              #0x1d5004  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x2352ac: mov             v1.16b, v0.16b
    // 0x2352b0: d0 = 2.000000
    //     0x2352b0: fmov            d0, #2.00000000
    // 0x2352b4: d0 = 2.000000
    //     0x2352b4: fmov            d0, #2.00000000
    // 0x2352b8: fdiv            d2, d1, d0
    // 0x2352bc: stur            d2, [fp, #-8]
    // 0x2352c0: r0 = Offset()
    //     0x2352c0: bl              #0x193cb0  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x2352c4: d0 = 0.000000
    //     0x2352c4: eor             v0.16b, v0.16b, v0.16b
    // 0x2352c8: d0 = 0.000000
    //     0x2352c8: eor             v0.16b, v0.16b, v0.16b
    // 0x2352cc: StoreField: r0->field_7 = d0
    //     0x2352cc: stur            d0, [x0, #7]
    // 0x2352d0: ldur            d0, [fp, #-8]
    // 0x2352d4: StoreField: r0->field_f = d0
    //     0x2352d4: stur            d0, [x0, #0xf]
    // 0x2352d8: LeaveFrame
    //     0x2352d8: mov             SP, fp
    //     0x2352dc: ldp             fp, lr, [SP], #0x10
    // 0x2352e0: ret
    //     0x2352e0: ret             
    // 0x2352e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2352e4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2352e8: b               #0x23527c
  }
  get _ _cursorBlinkOpacityController(/* No info */) {
    // ** addr: 0x23587c, size: 0xb8
    // 0x23587c: EnterFrame
    //     0x23587c: stp             fp, lr, [SP, #-0x10]!
    //     0x235880: mov             fp, SP
    // 0x235884: AllocStack(0x18)
    //     0x235884: sub             SP, SP, #0x18
    // 0x235888: CheckStackOverflow
    //     0x235888: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23588c: cmp             SP, x16
    //     0x235890: b.ls            #0x23592c
    // 0x235894: ldr             x0, [fp, #0x10]
    // 0x235898: LoadField: r1 = r0->field_23
    //     0x235898: ldur            w1, [x0, #0x23]
    // 0x23589c: DecompressPointer r1
    //     0x23589c: add             x1, x1, HEAP, lsl #32
    // 0x2358a0: cmp             w1, NULL
    // 0x2358a4: b.ne            #0x23591c
    // 0x2358a8: r1 = <double>
    //     0x2358a8: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2358ac: r0 = AnimationController()
    //     0x2358ac: bl              #0x2174fc  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x2358b0: stur            x0, [fp, #-8]
    // 0x2358b4: ldr             x16, [fp, #0x10]
    // 0x2358b8: stp             x16, x0, [SP]
    // 0x2358bc: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x2358bc: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x2358c0: r0 = AnimationController()
    //     0x2358c0: bl              #0x2362c8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x2358c4: r1 = 1
    //     0x2358c4: movz            x1, #0x1
    // 0x2358c8: r0 = AllocateContext()
    //     0x2358c8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2358cc: mov             x1, x0
    // 0x2358d0: ldr             x0, [fp, #0x10]
    // 0x2358d4: StoreField: r1->field_f = r0
    //     0x2358d4: stur            w0, [x1, #0xf]
    // 0x2358d8: mov             x2, x1
    // 0x2358dc: r1 = Function '_onCursorColorTick@148183791':.
    //     0x2358dc: ldr             x1, [PP, #0x5770]  ; [pp+0x5770] AnonymousClosure: (0x235934), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorColorTick (0x23597c)
    // 0x2358e0: r0 = AllocateClosure()
    //     0x2358e0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2358e4: ldur            x16, [fp, #-8]
    // 0x2358e8: stp             x0, x16, [SP]
    // 0x2358ec: r0 = addListener()
    //     0x2358ec: bl              #0x370130  ; [package:flutter/src/animation/animation_controller.dart] _AnimationController&Animation&AnimationEagerListenerMixin&AnimationLocalListenersMixin::addListener
    // 0x2358f0: ldur            x0, [fp, #-8]
    // 0x2358f4: ldr             x2, [fp, #0x10]
    // 0x2358f8: StoreField: r2->field_23 = r0
    //     0x2358f8: stur            w0, [x2, #0x23]
    //     0x2358fc: ldurb           w16, [x2, #-1]
    //     0x235900: ldurb           w17, [x0, #-1]
    //     0x235904: and             x16, x17, x16, lsr #2
    //     0x235908: tst             x16, HEAP, lsr #32
    //     0x23590c: b.eq            #0x235914
    //     0x235910: bl              #0x3e4628
    // 0x235914: ldur            x0, [fp, #-8]
    // 0x235918: b               #0x235920
    // 0x23591c: mov             x0, x1
    // 0x235920: LeaveFrame
    //     0x235920: mov             SP, fp
    //     0x235924: ldp             fp, lr, [SP], #0x10
    // 0x235928: ret
    //     0x235928: ret             
    // 0x23592c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23592c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x235930: b               #0x235894
  }
  [closure] void _onCursorColorTick(dynamic) {
    // ** addr: 0x235934, size: 0x48
    // 0x235934: EnterFrame
    //     0x235934: stp             fp, lr, [SP, #-0x10]!
    //     0x235938: mov             fp, SP
    // 0x23593c: AllocStack(0x8)
    //     0x23593c: sub             SP, SP, #8
    // 0x235940: SetupParameters()
    //     0x235940: ldr             x0, [fp, #0x10]
    //     0x235944: ldur            w1, [x0, #0x17]
    //     0x235948: add             x1, x1, HEAP, lsl #32
    // 0x23594c: CheckStackOverflow
    //     0x23594c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x235950: cmp             SP, x16
    //     0x235954: b.ls            #0x235974
    // 0x235958: LoadField: r0 = r1->field_f
    //     0x235958: ldur            w0, [x1, #0xf]
    // 0x23595c: DecompressPointer r0
    //     0x23595c: add             x0, x0, HEAP, lsl #32
    // 0x235960: str             x0, [SP]
    // 0x235964: r0 = _onCursorColorTick()
    //     0x235964: bl              #0x23597c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorColorTick
    // 0x235968: LeaveFrame
    //     0x235968: mov             SP, fp
    //     0x23596c: ldp             fp, lr, [SP], #0x10
    // 0x235970: ret
    //     0x235970: ret             
    // 0x235974: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x235974: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x235978: b               #0x235958
  }
  _ _onCursorColorTick(/* No info */) {
    // ** addr: 0x23597c, size: 0x250
    // 0x23597c: EnterFrame
    //     0x23597c: stp             fp, lr, [SP, #-0x10]!
    //     0x235980: mov             fp, SP
    // 0x235984: AllocStack(0x20)
    //     0x235984: sub             SP, SP, #0x20
    // 0x235988: CheckStackOverflow
    //     0x235988: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23598c: cmp             SP, x16
    //     0x235990: b.ls            #0x235ba8
    // 0x235994: ldr             x1, [fp, #0x10]
    // 0x235998: LoadField: r0 = r1->field_b
    //     0x235998: ldur            w0, [x1, #0xb]
    // 0x23599c: DecompressPointer r0
    //     0x23599c: add             x0, x0, HEAP, lsl #32
    // 0x2359a0: cmp             w0, NULL
    // 0x2359a4: b.eq            #0x235bb0
    // 0x2359a8: LoadField: r2 = r0->field_6b
    //     0x2359a8: ldur            w2, [x0, #0x6b]
    // 0x2359ac: DecompressPointer r2
    //     0x2359ac: add             x2, x2, HEAP, lsl #32
    // 0x2359b0: r0 = LoadClassIdInstr(r2)
    //     0x2359b0: ldur            x0, [x2, #-1]
    //     0x2359b4: ubfx            x0, x0, #0xc, #0x14
    // 0x2359b8: sub             x16, x0, #0x7ee
    // 0x2359bc: cmp             x16, #1
    // 0x2359c0: b.ls            #0x2359d4
    // 0x2359c4: cmp             x0, #0x7ea
    // 0x2359c8: b.eq            #0x2359d4
    // 0x2359cc: cmp             x0, #0x7ec
    // 0x2359d0: b.ne            #0x2359e0
    // 0x2359d4: LoadField: r0 = r2->field_7
    //     0x2359d4: ldur            x0, [x2, #7]
    // 0x2359d8: mov             x2, x0
    // 0x2359dc: b               #0x2359ec
    // 0x2359e0: LoadField: r0 = r2->field_f
    //     0x2359e0: ldur            w0, [x2, #0xf]
    // 0x2359e4: DecompressPointer r0
    //     0x2359e4: add             x0, x0, HEAP, lsl #32
    // 0x2359e8: LoadField: r2 = r0->field_7
    //     0x2359e8: ldur            x2, [x0, #7]
    // 0x2359ec: d0 = 255.000000
    //     0x2359ec: ldr             d0, [PP, #0x5778]  ; [pp+0x5778] IMM: double(255) from 0x406fe00000000000
    // 0x2359f0: d0 = 255.000000
    //     0x2359f0: ldr             d0, [PP, #0x5778]  ; [pp+0x5778] IMM: double(255) from 0x406fe00000000000
    // 0x2359f4: r0 = 4278190080
    //     0x2359f4: orr             x0, xzr, #0xff000000
    // 0x2359f8: ubfx            x2, x2, #0, #0x20
    // 0x2359fc: and             x3, x2, x0
    // 0x235a00: ubfx            x3, x3, #0, #0x20
    // 0x235a04: asr             x0, x3, #0x18
    // 0x235a08: scvtf           d1, x0
    // 0x235a0c: fdiv            d2, d1, d0
    // 0x235a10: stur            d2, [fp, #-0x10]
    // 0x235a14: str             x1, [SP]
    // 0x235a18: r0 = _cursorBlinkOpacityController()
    //     0x235a18: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x235a1c: LoadField: r1 = r0->field_37
    //     0x235a1c: ldur            w1, [x0, #0x37]
    // 0x235a20: DecompressPointer r1
    //     0x235a20: add             x1, x1, HEAP, lsl #32
    // 0x235a24: r16 = Sentinel
    //     0x235a24: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x235a28: cmp             w1, w16
    // 0x235a2c: b.eq            #0x235bb4
    // 0x235a30: stur            x1, [fp, #-8]
    // 0x235a34: LoadField: d0 = r1->field_7
    //     0x235a34: ldur            d0, [x1, #7]
    // 0x235a38: ldur            d1, [fp, #-0x10]
    // 0x235a3c: fcmp            d1, d0
    // 0x235a40: b.le            #0x235a4c
    // 0x235a44: LoadField: d0 = r1->field_7
    //     0x235a44: ldur            d0, [x1, #7]
    // 0x235a48: b               #0x235ab8
    // 0x235a4c: fcmp            d0, d1
    // 0x235a50: b.le            #0x235a5c
    // 0x235a54: mov             v0.16b, v1.16b
    // 0x235a58: b               #0x235ab8
    // 0x235a5c: d2 = 0.000000
    //     0x235a5c: eor             v2.16b, v2.16b, v2.16b
    // 0x235a60: d2 = 0.000000
    //     0x235a60: eor             v2.16b, v2.16b, v2.16b
    // 0x235a64: fcmp            d1, d2
    // 0x235a68: b.ne            #0x235a80
    // 0x235a6c: fadd            d3, d1, d0
    // 0x235a70: fmul            d4, d3, d1
    // 0x235a74: fmul            d1, d4, d0
    // 0x235a78: mov             v0.16b, v1.16b
    // 0x235a7c: b               #0x235ab8
    // 0x235a80: fcmp            d1, d2
    // 0x235a84: b.ne            #0x235a9c
    // 0x235a88: str             x1, [SP]
    // 0x235a8c: r0 = isNegative()
    //     0x235a8c: bl              #0x3e3414  ; [dart:core] _Double::isNegative
    // 0x235a90: tbnz            w0, #4, #0x235a9c
    // 0x235a94: ldur            x0, [fp, #-8]
    // 0x235a98: b               #0x235aac
    // 0x235a9c: ldur            x0, [fp, #-8]
    // 0x235aa0: LoadField: d0 = r0->field_7
    //     0x235aa0: ldur            d0, [x0, #7]
    // 0x235aa4: fcmp            d0, d0
    // 0x235aa8: b.vc            #0x235ab4
    // 0x235aac: LoadField: d0 = r0->field_7
    //     0x235aac: ldur            d0, [x0, #7]
    // 0x235ab0: b               #0x235ab8
    // 0x235ab4: ldur            d0, [fp, #-0x10]
    // 0x235ab8: ldr             x0, [fp, #0x10]
    // 0x235abc: mov             x1, x0
    // 0x235ac0: stur            d0, [fp, #-0x10]
    // 0x235ac4: LoadField: r0 = r1->field_ab
    //     0x235ac4: ldur            w0, [x1, #0xab]
    // 0x235ac8: DecompressPointer r0
    //     0x235ac8: add             x0, x0, HEAP, lsl #32
    // 0x235acc: r16 = Sentinel
    //     0x235acc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x235ad0: cmp             w0, w16
    // 0x235ad4: b.ne            #0x235ae0
    // 0x235ad8: r2 = renderEditable
    //     0x235ad8: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x235adc: r0 = InitLateFinalInstanceField()
    //     0x235adc: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x235ae0: mov             x1, x0
    // 0x235ae4: ldr             x0, [fp, #0x10]
    // 0x235ae8: stur            x1, [fp, #-8]
    // 0x235aec: LoadField: r2 = r0->field_b
    //     0x235aec: ldur            w2, [x0, #0xb]
    // 0x235af0: DecompressPointer r2
    //     0x235af0: add             x2, x2, HEAP, lsl #32
    // 0x235af4: cmp             w2, NULL
    // 0x235af8: b.eq            #0x235bbc
    // 0x235afc: LoadField: r3 = r2->field_6b
    //     0x235afc: ldur            w3, [x2, #0x6b]
    // 0x235b00: DecompressPointer r3
    //     0x235b00: add             x3, x3, HEAP, lsl #32
    // 0x235b04: str             x3, [SP, #8]
    // 0x235b08: ldur            d0, [fp, #-0x10]
    // 0x235b0c: str             d0, [SP]
    // 0x235b10: r0 = withOpacity()
    //     0x235b10: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x235b14: ldur            x16, [fp, #-8]
    // 0x235b18: stp             x0, x16, [SP]
    // 0x235b1c: r0 = cursorColor=()
    //     0x235b1c: bl              #0x235bcc  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorColor=
    // 0x235b20: ldr             x0, [fp, #0x10]
    // 0x235b24: LoadField: r1 = r0->field_2b
    //     0x235b24: ldur            w1, [x0, #0x2b]
    // 0x235b28: DecompressPointer r1
    //     0x235b28: add             x1, x1, HEAP, lsl #32
    // 0x235b2c: stur            x1, [fp, #-8]
    // 0x235b30: LoadField: r2 = r0->field_b
    //     0x235b30: ldur            w2, [x0, #0xb]
    // 0x235b34: DecompressPointer r2
    //     0x235b34: add             x2, x2, HEAP, lsl #32
    // 0x235b38: cmp             w2, NULL
    // 0x235b3c: b.eq            #0x235bc0
    // 0x235b40: LoadField: r3 = r2->field_33
    //     0x235b40: ldur            w3, [x2, #0x33]
    // 0x235b44: DecompressPointer r3
    //     0x235b44: add             x3, x3, HEAP, lsl #32
    // 0x235b48: tbnz            w3, #4, #0x235b88
    // 0x235b4c: str             x0, [SP]
    // 0x235b50: r0 = _cursorBlinkOpacityController()
    //     0x235b50: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x235b54: LoadField: r1 = r0->field_37
    //     0x235b54: ldur            w1, [x0, #0x37]
    // 0x235b58: DecompressPointer r1
    //     0x235b58: add             x1, x1, HEAP, lsl #32
    // 0x235b5c: r16 = Sentinel
    //     0x235b5c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x235b60: cmp             w1, w16
    // 0x235b64: b.eq            #0x235bc4
    // 0x235b68: LoadField: d0 = r1->field_7
    //     0x235b68: ldur            d0, [x1, #7]
    // 0x235b6c: d1 = 0.000000
    //     0x235b6c: eor             v1.16b, v1.16b, v1.16b
    // 0x235b70: d1 = 0.000000
    //     0x235b70: eor             v1.16b, v1.16b, v1.16b
    // 0x235b74: fcmp            d0, d1
    // 0x235b78: r16 = true
    //     0x235b78: add             x16, NULL, #0x20  ; true
    // 0x235b7c: r17 = false
    //     0x235b7c: add             x17, NULL, #0x30  ; false
    // 0x235b80: csel            x0, x16, x17, gt
    // 0x235b84: b               #0x235b8c
    // 0x235b88: r0 = false
    //     0x235b88: add             x0, NULL, #0x30  ; false
    // 0x235b8c: ldur            x16, [fp, #-8]
    // 0x235b90: stp             x0, x16, [SP]
    // 0x235b94: r0 = value=()
    //     0x235b94: bl              #0x1fd07c  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x235b98: r0 = Null
    //     0x235b98: mov             x0, NULL
    // 0x235b9c: LeaveFrame
    //     0x235b9c: mov             SP, fp
    //     0x235ba0: ldp             fp, lr, [SP], #0x10
    // 0x235ba4: ret
    //     0x235ba4: ret             
    // 0x235ba8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x235ba8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x235bac: b               #0x235994
    // 0x235bb0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x235bb0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x235bb4: r9 = _value
    //     0x235bb4: ldr             x9, [PP, #0x5638]  ; [pp+0x5638] Field <AnimationController._value@337066280>: late (offset: 0x38)
    // 0x235bb8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x235bb8: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x235bbc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x235bbc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x235bc0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x235bc0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x235bc4: r9 = _value
    //     0x235bc4: ldr             x9, [PP, #0x5638]  ; [pp+0x5638] Field <AnimationController._value@337066280>: late (offset: 0x38)
    // 0x235bc8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x235bc8: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ _stopCursorBlink(/* No info */) {
    // ** addr: 0x235d24, size: 0xd0
    // 0x235d24: EnterFrame
    //     0x235d24: stp             fp, lr, [SP, #-0x10]!
    //     0x235d28: mov             fp, SP
    // 0x235d2c: AllocStack(0x20)
    //     0x235d2c: sub             SP, SP, #0x20
    // 0x235d30: SetupParameters(EditableTextState this /* r3, fp-0x10 */, {dynamic resetCharTicks = true /* r0, fp-0x8 */})
    //     0x235d30: mov             x0, x4
    //     0x235d34: ldur            w1, [x0, #0x13]
    //     0x235d38: add             x1, x1, HEAP, lsl #32
    //     0x235d3c: sub             x2, x1, #2
    //     0x235d40: add             x3, fp, w2, sxtw #2
    //     0x235d44: ldr             x3, [x3, #0x10]
    //     0x235d48: stur            x3, [fp, #-0x10]
    //     0x235d4c: ldur            w2, [x0, #0x1f]
    //     0x235d50: add             x2, x2, HEAP, lsl #32
    //     0x235d54: ldr             x16, [PP, #0x5780]  ; [pp+0x5780] "resetCharTicks"
    //     0x235d58: cmp             w2, w16
    //     0x235d5c: b.ne            #0x235d7c
    //     0x235d60: ldur            w2, [x0, #0x23]
    //     0x235d64: add             x2, x2, HEAP, lsl #32
    //     0x235d68: sub             w0, w1, w2
    //     0x235d6c: add             x1, fp, w0, sxtw #2
    //     0x235d70: ldr             x1, [x1, #8]
    //     0x235d74: mov             x0, x1
    //     0x235d78: b               #0x235d80
    //     0x235d7c: add             x0, NULL, #0x20  ; true
    //     0x235d80: stur            x0, [fp, #-8]
    // 0x235d84: CheckStackOverflow
    //     0x235d84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x235d88: cmp             SP, x16
    //     0x235d8c: b.ls            #0x235dec
    // 0x235d90: str             x3, [SP]
    // 0x235d94: r0 = _cursorBlinkOpacityController()
    //     0x235d94: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x235d98: stp             xzr, x0, [SP]
    // 0x235d9c: r0 = value=()
    //     0x235d9c: bl              #0x209ef4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x235da0: ldur            x0, [fp, #-0x10]
    // 0x235da4: LoadField: r1 = r0->field_1f
    //     0x235da4: ldur            w1, [x0, #0x1f]
    // 0x235da8: DecompressPointer r1
    //     0x235da8: add             x1, x1, HEAP, lsl #32
    // 0x235dac: cmp             w1, NULL
    // 0x235db0: b.ne            #0x235dbc
    // 0x235db4: mov             x1, x0
    // 0x235db8: b               #0x235dc8
    // 0x235dbc: str             x1, [SP]
    // 0x235dc0: r0 = cancel()
    //     0x235dc0: bl              #0x1a238c  ; [dart:isolate] _Timer::cancel
    // 0x235dc4: ldur            x1, [fp, #-0x10]
    // 0x235dc8: ldur            x2, [fp, #-8]
    // 0x235dcc: StoreField: r1->field_1f = rNULL
    //     0x235dcc: stur            NULL, [x1, #0x1f]
    // 0x235dd0: tbnz            w2, #4, #0x235ddc
    // 0x235dd4: r2 = 0
    //     0x235dd4: movz            x2, #0
    // 0x235dd8: StoreField: r1->field_9b = r2
    //     0x235dd8: stur            x2, [x1, #0x9b]
    // 0x235ddc: r0 = Null
    //     0x235ddc: mov             x0, NULL
    // 0x235de0: LeaveFrame
    //     0x235de0: mov             SP, fp
    //     0x235de4: ldp             fp, lr, [SP], #0x10
    // 0x235de8: ret
    //     0x235de8: ret             
    // 0x235dec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x235dec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x235df0: b               #0x235d90
  }
  _ _onFloatingCursorResetTick(/* No info */) {
    // ** addr: 0x235df4, size: 0x3dc
    // 0x235df4: EnterFrame
    //     0x235df4: stp             fp, lr, [SP, #-0x10]!
    //     0x235df8: mov             fp, SP
    // 0x235dfc: AllocStack(0x58)
    //     0x235dfc: sub             SP, SP, #0x58
    // 0x235e00: CheckStackOverflow
    //     0x235e00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x235e04: cmp             SP, x16
    //     0x235e08: b.ls            #0x236118
    // 0x235e0c: ldr             x1, [fp, #0x10]
    // 0x235e10: LoadField: r0 = r1->field_ab
    //     0x235e10: ldur            w0, [x1, #0xab]
    // 0x235e14: DecompressPointer r0
    //     0x235e14: add             x0, x0, HEAP, lsl #32
    // 0x235e18: r16 = Sentinel
    //     0x235e18: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x235e1c: cmp             w0, w16
    // 0x235e20: b.ne            #0x235e2c
    // 0x235e24: r2 = renderEditable
    //     0x235e24: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x235e28: r0 = InitLateFinalInstanceField()
    //     0x235e28: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x235e2c: mov             x1, x0
    // 0x235e30: ldr             x0, [fp, #0x10]
    // 0x235e34: LoadField: r2 = r0->field_7b
    //     0x235e34: ldur            w2, [x0, #0x7b]
    // 0x235e38: DecompressPointer r2
    //     0x235e38: add             x2, x2, HEAP, lsl #32
    // 0x235e3c: cmp             w2, NULL
    // 0x235e40: b.eq            #0x236120
    // 0x235e44: stp             x2, x1, [SP]
    // 0x235e48: r0 = getLocalRectForCaret()
    //     0x235e48: bl              #0x235354  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x235e4c: str             x0, [SP]
    // 0x235e50: r0 = centerLeft()
    //     0x235e50: bl              #0x236234  ; [dart:ui] Rect::centerLeft
    // 0x235e54: stur            x0, [fp, #-8]
    // 0x235e58: ldr             x16, [fp, #0x10]
    // 0x235e5c: str             x16, [SP]
    // 0x235e60: r0 = _floatingCursorOffset()
    //     0x235e60: bl              #0x235264  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x235e64: ldur            x16, [fp, #-8]
    // 0x235e68: stp             x0, x16, [SP]
    // 0x235e6c: r0 = -()
    //     0x235e6c: bl              #0x193d48  ; [dart:ui] Offset::-
    // 0x235e70: mov             x1, x0
    // 0x235e74: ldr             x0, [fp, #0x10]
    // 0x235e78: stur            x1, [fp, #-8]
    // 0x235e7c: LoadField: r2 = r0->field_67
    //     0x235e7c: ldur            w2, [x0, #0x67]
    // 0x235e80: DecompressPointer r2
    //     0x235e80: add             x2, x2, HEAP, lsl #32
    // 0x235e84: cmp             w2, NULL
    // 0x235e88: b.eq            #0x236124
    // 0x235e8c: str             x2, [SP]
    // 0x235e90: r0 = isCompleted()
    //     0x235e90: bl              #0x2361d0  ; [package:flutter/src/animation/animation.dart] Animation::isCompleted
    // 0x235e94: tbnz            w0, #4, #0x235f6c
    // 0x235e98: ldr             x0, [fp, #0x10]
    // 0x235e9c: LoadField: r1 = r0->field_ab
    //     0x235e9c: ldur            w1, [x0, #0xab]
    // 0x235ea0: DecompressPointer r1
    //     0x235ea0: add             x1, x1, HEAP, lsl #32
    // 0x235ea4: LoadField: r2 = r0->field_7b
    //     0x235ea4: ldur            w2, [x0, #0x7b]
    // 0x235ea8: DecompressPointer r2
    //     0x235ea8: add             x2, x2, HEAP, lsl #32
    // 0x235eac: cmp             w2, NULL
    // 0x235eb0: b.eq            #0x236128
    // 0x235eb4: r16 = Instance_FloatingCursorDragState
    //     0x235eb4: ldr             x16, [PP, #0x5750]  ; [pp+0x5750] Obj!FloatingCursorDragState@4807a1
    // 0x235eb8: stp             x16, x1, [SP, #0x10]
    // 0x235ebc: ldur            x16, [fp, #-8]
    // 0x235ec0: stp             x2, x16, [SP]
    // 0x235ec4: r4 = const [0, 0x4, 0x4, 0x4, null]
    //     0x235ec4: ldr             x4, [PP, #0xb0]  ; [pp+0xb0] List(5) [0, 0x4, 0x4, 0x4, Null]
    // 0x235ec8: r0 = setFloatingCursor()
    //     0x235ec8: bl              #0x234af8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x235ecc: ldr             x0, [fp, #0x10]
    // 0x235ed0: LoadField: r1 = r0->field_ab
    //     0x235ed0: ldur            w1, [x0, #0xab]
    // 0x235ed4: DecompressPointer r1
    //     0x235ed4: add             x1, x1, HEAP, lsl #32
    // 0x235ed8: LoadField: r2 = r1->field_e3
    //     0x235ed8: ldur            w2, [x1, #0xe3]
    // 0x235edc: DecompressPointer r2
    //     0x235edc: add             x2, x2, HEAP, lsl #32
    // 0x235ee0: LoadField: r1 = r2->field_7
    //     0x235ee0: ldur            x1, [x2, #7]
    // 0x235ee4: LoadField: r3 = r2->field_f
    //     0x235ee4: ldur            x3, [x2, #0xf]
    // 0x235ee8: cmp             x1, x3
    // 0x235eec: b.ne            #0x235f54
    // 0x235ef0: LoadField: r1 = r0->field_7b
    //     0x235ef0: ldur            w1, [x0, #0x7b]
    // 0x235ef4: DecompressPointer r1
    //     0x235ef4: add             x1, x1, HEAP, lsl #32
    // 0x235ef8: stur            x1, [fp, #-0x18]
    // 0x235efc: cmp             w1, NULL
    // 0x235f00: b.eq            #0x23612c
    // 0x235f04: LoadField: r2 = r1->field_7
    //     0x235f04: ldur            x2, [x1, #7]
    // 0x235f08: stur            x2, [fp, #-0x10]
    // 0x235f0c: r0 = TextSelection()
    //     0x235f0c: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x235f10: mov             x1, x0
    // 0x235f14: ldur            x0, [fp, #-0x10]
    // 0x235f18: StoreField: r1->field_17 = r0
    //     0x235f18: stur            x0, [x1, #0x17]
    // 0x235f1c: StoreField: r1->field_1f = r0
    //     0x235f1c: stur            x0, [x1, #0x1f]
    // 0x235f20: ldur            x2, [fp, #-0x18]
    // 0x235f24: LoadField: r3 = r2->field_f
    //     0x235f24: ldur            w3, [x2, #0xf]
    // 0x235f28: DecompressPointer r3
    //     0x235f28: add             x3, x3, HEAP, lsl #32
    // 0x235f2c: StoreField: r1->field_27 = r3
    //     0x235f2c: stur            w3, [x1, #0x27]
    // 0x235f30: r2 = false
    //     0x235f30: add             x2, NULL, #0x30  ; false
    // 0x235f34: StoreField: r1->field_2b = r2
    //     0x235f34: stur            w2, [x1, #0x2b]
    // 0x235f38: StoreField: r1->field_7 = r0
    //     0x235f38: stur            x0, [x1, #7]
    // 0x235f3c: StoreField: r1->field_f = r0
    //     0x235f3c: stur            x0, [x1, #0xf]
    // 0x235f40: ldr             x16, [fp, #0x10]
    // 0x235f44: stp             x1, x16, [SP, #8]
    // 0x235f48: r16 = Instance_SelectionChangedCause
    //     0x235f48: ldr             x16, [PP, #0x5788]  ; [pp+0x5788] Obj!SelectionChangedCause@4806a1
    // 0x235f4c: str             x16, [SP]
    // 0x235f50: r0 = _handleSelectionChanged()
    //     0x235f50: bl              #0x241e80  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x235f54: ldr             x0, [fp, #0x10]
    // 0x235f58: StoreField: r0->field_77 = rNULL
    //     0x235f58: stur            NULL, [x0, #0x77]
    // 0x235f5c: StoreField: r0->field_7b = rNULL
    //     0x235f5c: stur            NULL, [x0, #0x7b]
    // 0x235f60: StoreField: r0->field_7f = rNULL
    //     0x235f60: stur            NULL, [x0, #0x7f]
    // 0x235f64: StoreField: r0->field_83 = rNULL
    //     0x235f64: stur            NULL, [x0, #0x83]
    // 0x235f68: b               #0x236108
    // 0x235f6c: ldr             x0, [fp, #0x10]
    // 0x235f70: ldur            x1, [fp, #-8]
    // 0x235f74: LoadField: r2 = r0->field_67
    //     0x235f74: ldur            w2, [x0, #0x67]
    // 0x235f78: DecompressPointer r2
    //     0x235f78: add             x2, x2, HEAP, lsl #32
    // 0x235f7c: cmp             w2, NULL
    // 0x235f80: b.eq            #0x236130
    // 0x235f84: LoadField: r3 = r2->field_37
    //     0x235f84: ldur            w3, [x2, #0x37]
    // 0x235f88: DecompressPointer r3
    //     0x235f88: add             x3, x3, HEAP, lsl #32
    // 0x235f8c: r16 = Sentinel
    //     0x235f8c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x235f90: cmp             w3, w16
    // 0x235f94: b.eq            #0x236134
    // 0x235f98: stur            x3, [fp, #-0x18]
    // 0x235f9c: LoadField: r2 = r0->field_83
    //     0x235f9c: ldur            w2, [x0, #0x83]
    // 0x235fa0: DecompressPointer r2
    //     0x235fa0: add             x2, x2, HEAP, lsl #32
    // 0x235fa4: cmp             w2, NULL
    // 0x235fa8: b.eq            #0x23613c
    // 0x235fac: LoadField: d0 = r2->field_7
    //     0x235fac: ldur            d0, [x2, #7]
    // 0x235fb0: LoadField: d1 = r1->field_7
    //     0x235fb0: ldur            d1, [x1, #7]
    // 0x235fb4: r2 = inline_Allocate_Double()
    //     0x235fb4: ldp             x2, x4, [THR, #0x50]  ; THR::top
    //     0x235fb8: add             x2, x2, #0x10
    //     0x235fbc: cmp             x4, x2
    //     0x235fc0: b.ls            #0x236140
    //     0x235fc4: str             x2, [THR, #0x50]  ; THR::top
    //     0x235fc8: sub             x2, x2, #0xf
    //     0x235fcc: movz            x4, #0xd148
    //     0x235fd0: movk            x4, #0x3, lsl #16
    //     0x235fd4: stur            x4, [x2, #-1]
    // 0x235fd8: StoreField: r2->field_7 = d0
    //     0x235fd8: stur            d0, [x2, #7]
    // 0x235fdc: r4 = inline_Allocate_Double()
    //     0x235fdc: ldp             x4, x5, [THR, #0x50]  ; THR::top
    //     0x235fe0: add             x4, x4, #0x10
    //     0x235fe4: cmp             x5, x4
    //     0x235fe8: b.ls            #0x236164
    //     0x235fec: str             x4, [THR, #0x50]  ; THR::top
    //     0x235ff0: sub             x4, x4, #0xf
    //     0x235ff4: movz            x5, #0xd148
    //     0x235ff8: movk            x5, #0x3, lsl #16
    //     0x235ffc: stur            x5, [x4, #-1]
    // 0x236000: StoreField: r4->field_7 = d1
    //     0x236000: stur            d1, [x4, #7]
    // 0x236004: stp             x4, x2, [SP, #8]
    // 0x236008: str             x3, [SP]
    // 0x23600c: r0 = lerpDouble()
    //     0x23600c: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x236010: mov             x1, x0
    // 0x236014: ldr             x0, [fp, #0x10]
    // 0x236018: stur            x1, [fp, #-0x20]
    // 0x23601c: LoadField: r2 = r0->field_83
    //     0x23601c: ldur            w2, [x0, #0x83]
    // 0x236020: DecompressPointer r2
    //     0x236020: add             x2, x2, HEAP, lsl #32
    // 0x236024: cmp             w2, NULL
    // 0x236028: b.eq            #0x236188
    // 0x23602c: LoadField: d0 = r2->field_f
    //     0x23602c: ldur            d0, [x2, #0xf]
    // 0x236030: ldur            x2, [fp, #-8]
    // 0x236034: LoadField: d1 = r2->field_f
    //     0x236034: ldur            d1, [x2, #0xf]
    // 0x236038: r2 = inline_Allocate_Double()
    //     0x236038: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x23603c: add             x2, x2, #0x10
    //     0x236040: cmp             x3, x2
    //     0x236044: b.ls            #0x23618c
    //     0x236048: str             x2, [THR, #0x50]  ; THR::top
    //     0x23604c: sub             x2, x2, #0xf
    //     0x236050: movz            x3, #0xd148
    //     0x236054: movk            x3, #0x3, lsl #16
    //     0x236058: stur            x3, [x2, #-1]
    // 0x23605c: StoreField: r2->field_7 = d0
    //     0x23605c: stur            d0, [x2, #7]
    // 0x236060: r3 = inline_Allocate_Double()
    //     0x236060: ldp             x3, x4, [THR, #0x50]  ; THR::top
    //     0x236064: add             x3, x3, #0x10
    //     0x236068: cmp             x4, x3
    //     0x23606c: b.ls            #0x2361a8
    //     0x236070: str             x3, [THR, #0x50]  ; THR::top
    //     0x236074: sub             x3, x3, #0xf
    //     0x236078: movz            x4, #0xd148
    //     0x23607c: movk            x4, #0x3, lsl #16
    //     0x236080: stur            x4, [x3, #-1]
    // 0x236084: StoreField: r3->field_7 = d1
    //     0x236084: stur            d1, [x3, #7]
    // 0x236088: stp             x3, x2, [SP, #8]
    // 0x23608c: ldur            x16, [fp, #-0x18]
    // 0x236090: str             x16, [SP]
    // 0x236094: r0 = lerpDouble()
    //     0x236094: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x236098: mov             x1, x0
    // 0x23609c: ldr             x0, [fp, #0x10]
    // 0x2360a0: stur            x1, [fp, #-0x28]
    // 0x2360a4: LoadField: r2 = r0->field_ab
    //     0x2360a4: ldur            w2, [x0, #0xab]
    // 0x2360a8: DecompressPointer r2
    //     0x2360a8: add             x2, x2, HEAP, lsl #32
    // 0x2360ac: ldur            x3, [fp, #-0x20]
    // 0x2360b0: stur            x2, [fp, #-8]
    // 0x2360b4: LoadField: d0 = r3->field_7
    //     0x2360b4: ldur            d0, [x3, #7]
    // 0x2360b8: stur            d0, [fp, #-0x30]
    // 0x2360bc: r0 = Offset()
    //     0x2360bc: bl              #0x193cb0  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x2360c0: ldur            d0, [fp, #-0x30]
    // 0x2360c4: StoreField: r0->field_7 = d0
    //     0x2360c4: stur            d0, [x0, #7]
    // 0x2360c8: ldur            x1, [fp, #-0x28]
    // 0x2360cc: LoadField: d0 = r1->field_7
    //     0x2360cc: ldur            d0, [x1, #7]
    // 0x2360d0: StoreField: r0->field_f = d0
    //     0x2360d0: stur            d0, [x0, #0xf]
    // 0x2360d4: ldr             x1, [fp, #0x10]
    // 0x2360d8: LoadField: r2 = r1->field_7b
    //     0x2360d8: ldur            w2, [x1, #0x7b]
    // 0x2360dc: DecompressPointer r2
    //     0x2360dc: add             x2, x2, HEAP, lsl #32
    // 0x2360e0: cmp             w2, NULL
    // 0x2360e4: b.eq            #0x2361cc
    // 0x2360e8: ldur            x16, [fp, #-8]
    // 0x2360ec: r30 = Instance_FloatingCursorDragState
    //     0x2360ec: ldr             lr, [PP, #0x5790]  ; [pp+0x5790] Obj!FloatingCursorDragState@4807e1
    // 0x2360f0: stp             lr, x16, [SP, #0x18]
    // 0x2360f4: stp             x2, x0, [SP, #8]
    // 0x2360f8: ldur            x16, [fp, #-0x18]
    // 0x2360fc: str             x16, [SP]
    // 0x236100: r4 = const [0, 0x5, 0x5, 0x4, resetLerpValue, 0x4, null]
    //     0x236100: ldr             x4, [PP, #0x5798]  ; [pp+0x5798] List(7) [0, 0x5, 0x5, 0x4, "resetLerpValue", 0x4, Null]
    // 0x236104: r0 = setFloatingCursor()
    //     0x236104: bl              #0x234af8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x236108: r0 = Null
    //     0x236108: mov             x0, NULL
    // 0x23610c: LeaveFrame
    //     0x23610c: mov             SP, fp
    //     0x236110: ldp             fp, lr, [SP], #0x10
    // 0x236114: ret
    //     0x236114: ret             
    // 0x236118: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x236118: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23611c: b               #0x235e0c
    // 0x236120: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236120: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236124: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236124: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236128: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236128: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23612c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23612c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236130: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236130: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236134: r9 = _value
    //     0x236134: ldr             x9, [PP, #0x5638]  ; [pp+0x5638] Field <AnimationController._value@337066280>: late (offset: 0x38)
    // 0x236138: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x236138: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x23613c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23613c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236140: stp             q0, q1, [SP, #-0x20]!
    // 0x236144: stp             x1, x3, [SP, #-0x10]!
    // 0x236148: SaveReg r0
    //     0x236148: str             x0, [SP, #-8]!
    // 0x23614c: r0 = AllocateDouble()
    //     0x23614c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x236150: mov             x2, x0
    // 0x236154: RestoreReg r0
    //     0x236154: ldr             x0, [SP], #8
    // 0x236158: ldp             x1, x3, [SP], #0x10
    // 0x23615c: ldp             q0, q1, [SP], #0x20
    // 0x236160: b               #0x235fd8
    // 0x236164: SaveReg d1
    //     0x236164: str             q1, [SP, #-0x10]!
    // 0x236168: stp             x2, x3, [SP, #-0x10]!
    // 0x23616c: stp             x0, x1, [SP, #-0x10]!
    // 0x236170: r0 = AllocateDouble()
    //     0x236170: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x236174: mov             x4, x0
    // 0x236178: ldp             x0, x1, [SP], #0x10
    // 0x23617c: ldp             x2, x3, [SP], #0x10
    // 0x236180: RestoreReg d1
    //     0x236180: ldr             q1, [SP], #0x10
    // 0x236184: b               #0x236000
    // 0x236188: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236188: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23618c: stp             q0, q1, [SP, #-0x20]!
    // 0x236190: stp             x0, x1, [SP, #-0x10]!
    // 0x236194: r0 = AllocateDouble()
    //     0x236194: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x236198: mov             x2, x0
    // 0x23619c: ldp             x0, x1, [SP], #0x10
    // 0x2361a0: ldp             q0, q1, [SP], #0x20
    // 0x2361a4: b               #0x23605c
    // 0x2361a8: SaveReg d1
    //     0x2361a8: str             q1, [SP, #-0x10]!
    // 0x2361ac: stp             x1, x2, [SP, #-0x10]!
    // 0x2361b0: SaveReg r0
    //     0x2361b0: str             x0, [SP, #-8]!
    // 0x2361b4: r0 = AllocateDouble()
    //     0x2361b4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x2361b8: mov             x3, x0
    // 0x2361bc: RestoreReg r0
    //     0x2361bc: ldr             x0, [SP], #8
    // 0x2361c0: ldp             x1, x2, [SP], #0x10
    // 0x2361c4: RestoreReg d1
    //     0x2361c4: ldr             q1, [SP], #0x10
    // 0x2361c8: b               #0x236084
    // 0x2361cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2361cc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  RenderEditable renderEditable(EditableTextState) {
    // ** addr: 0x23651c, size: 0x94
    // 0x23651c: EnterFrame
    //     0x23651c: stp             fp, lr, [SP, #-0x10]!
    //     0x236520: mov             fp, SP
    // 0x236524: AllocStack(0x10)
    //     0x236524: sub             SP, SP, #0x10
    // 0x236528: CheckStackOverflow
    //     0x236528: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23652c: cmp             SP, x16
    //     0x236530: b.ls            #0x2365a0
    // 0x236534: ldr             x0, [fp, #0x10]
    // 0x236538: LoadField: r1 = r0->field_2f
    //     0x236538: ldur            w1, [x0, #0x2f]
    // 0x23653c: DecompressPointer r1
    //     0x23653c: add             x1, x1, HEAP, lsl #32
    // 0x236540: str             x1, [SP]
    // 0x236544: r0 = _currentElement()
    //     0x236544: bl              #0x214908  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0x236548: cmp             w0, NULL
    // 0x23654c: b.eq            #0x2365a8
    // 0x236550: str             x0, [SP]
    // 0x236554: r0 = findRenderObject()
    //     0x236554: bl              #0x21322c  ; [package:flutter/src/widgets/framework.dart] Element::findRenderObject
    // 0x236558: mov             x3, x0
    // 0x23655c: stur            x3, [fp, #-8]
    // 0x236560: cmp             w3, NULL
    // 0x236564: b.eq            #0x2365ac
    // 0x236568: mov             x0, x3
    // 0x23656c: r2 = Null
    //     0x23656c: mov             x2, NULL
    // 0x236570: r1 = Null
    //     0x236570: mov             x1, NULL
    // 0x236574: r4 = LoadClassIdInstr(r0)
    //     0x236574: ldur            x4, [x0, #-1]
    //     0x236578: ubfx            x4, x4, #0xc, #0x14
    // 0x23657c: cmp             x4, #0x208
    // 0x236580: b.eq            #0x236590
    // 0x236584: r8 = RenderEditable
    //     0x236584: ldr             x8, [PP, #0x55d8]  ; [pp+0x55d8] Type: RenderEditable
    // 0x236588: r3 = Null
    //     0x236588: ldr             x3, [PP, #0x55e0]  ; [pp+0x55e0] Null
    // 0x23658c: r0 = DefaultTypeTest()
    //     0x23658c: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x236590: ldur            x0, [fp, #-8]
    // 0x236594: LeaveFrame
    //     0x236594: mov             SP, fp
    //     0x236598: ldp             fp, lr, [SP], #0x10
    // 0x23659c: ret
    //     0x23659c: ret             
    // 0x2365a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2365a0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2365a4: b               #0x236534
    // 0x2365a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2365a8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2365ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2365ac: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _onFloatingCursorResetTick(dynamic) {
    // ** addr: 0x2365b0, size: 0x48
    // 0x2365b0: EnterFrame
    //     0x2365b0: stp             fp, lr, [SP, #-0x10]!
    //     0x2365b4: mov             fp, SP
    // 0x2365b8: AllocStack(0x8)
    //     0x2365b8: sub             SP, SP, #8
    // 0x2365bc: SetupParameters()
    //     0x2365bc: ldr             x0, [fp, #0x10]
    //     0x2365c0: ldur            w1, [x0, #0x17]
    //     0x2365c4: add             x1, x1, HEAP, lsl #32
    // 0x2365c8: CheckStackOverflow
    //     0x2365c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2365cc: cmp             SP, x16
    //     0x2365d0: b.ls            #0x2365f0
    // 0x2365d4: LoadField: r0 = r1->field_f
    //     0x2365d4: ldur            w0, [x1, #0xf]
    // 0x2365d8: DecompressPointer r0
    //     0x2365d8: add             x0, x0, HEAP, lsl #32
    // 0x2365dc: str             x0, [SP]
    // 0x2365e0: r0 = _onFloatingCursorResetTick()
    //     0x2365e0: bl              #0x235df4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onFloatingCursorResetTick
    // 0x2365e4: LeaveFrame
    //     0x2365e4: mov             SP, fp
    //     0x2365e8: ldp             fp, lr, [SP], #0x10
    // 0x2365ec: ret
    //     0x2365ec: ret             
    // 0x2365f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2365f0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2365f4: b               #0x2365d4
  }
  _ performAction(/* No info */) {
    // ** addr: 0x236904, size: 0xcc
    // 0x236904: EnterFrame
    //     0x236904: stp             fp, lr, [SP, #-0x10]!
    //     0x236908: mov             fp, SP
    // 0x23690c: AllocStack(0x18)
    //     0x23690c: sub             SP, SP, #0x18
    // 0x236910: CheckStackOverflow
    //     0x236910: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x236914: cmp             SP, x16
    //     0x236918: b.ls            #0x2369c4
    // 0x23691c: ldr             x0, [fp, #0x10]
    // 0x236920: LoadField: r1 = r0->field_7
    //     0x236920: ldur            x1, [x0, #7]
    // 0x236924: cmp             x1, #6
    // 0x236928: b.gt            #0x236940
    // 0x23692c: cmp             x1, #3
    // 0x236930: b.gt            #0x236958
    // 0x236934: cmp             x1, #1
    // 0x236938: b.gt            #0x236958
    // 0x23693c: b               #0x236978
    // 0x236940: cmp             x1, #9
    // 0x236944: b.gt            #0x236970
    // 0x236948: cmp             x1, #8
    // 0x23694c: b.gt            #0x236978
    // 0x236950: cmp             x1, #7
    // 0x236954: b.gt            #0x236978
    // 0x236958: ldr             x16, [fp, #0x18]
    // 0x23695c: stp             x0, x16, [SP, #8]
    // 0x236960: r16 = true
    //     0x236960: add             x16, NULL, #0x20  ; true
    // 0x236964: str             x16, [SP]
    // 0x236968: r0 = _finalizeEditing()
    //     0x236968: bl              #0x2369d0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_finalizeEditing
    // 0x23696c: b               #0x2369b4
    // 0x236970: cmp             x1, #0xb
    // 0x236974: b.gt            #0x236990
    // 0x236978: ldr             x16, [fp, #0x18]
    // 0x23697c: stp             x0, x16, [SP, #8]
    // 0x236980: r16 = false
    //     0x236980: add             x16, NULL, #0x30  ; false
    // 0x236984: str             x16, [SP]
    // 0x236988: r0 = _finalizeEditing()
    //     0x236988: bl              #0x2369d0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_finalizeEditing
    // 0x23698c: b               #0x2369b4
    // 0x236990: ldr             x1, [fp, #0x18]
    // 0x236994: LoadField: r2 = r1->field_b
    //     0x236994: ldur            w2, [x1, #0xb]
    // 0x236998: DecompressPointer r2
    //     0x236998: add             x2, x2, HEAP, lsl #32
    // 0x23699c: cmp             w2, NULL
    // 0x2369a0: b.eq            #0x2369cc
    // 0x2369a4: stp             x0, x1, [SP, #8]
    // 0x2369a8: r16 = true
    //     0x2369a8: add             x16, NULL, #0x20  ; true
    // 0x2369ac: str             x16, [SP]
    // 0x2369b0: r0 = _finalizeEditing()
    //     0x2369b0: bl              #0x2369d0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_finalizeEditing
    // 0x2369b4: r0 = Null
    //     0x2369b4: mov             x0, NULL
    // 0x2369b8: LeaveFrame
    //     0x2369b8: mov             SP, fp
    //     0x2369bc: ldp             fp, lr, [SP], #0x10
    // 0x2369c0: ret
    //     0x2369c0: ret             
    // 0x2369c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2369c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2369c8: b               #0x23691c
    // 0x2369cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2369cc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _finalizeEditing(/* No info */) {
    // ** addr: 0x2369d0, size: 0x134
    // 0x2369d0: EnterFrame
    //     0x2369d0: stp             fp, lr, [SP, #-0x10]!
    //     0x2369d4: mov             fp, SP
    // 0x2369d8: AllocStack(0x8)
    //     0x2369d8: sub             SP, SP, #8
    // 0x2369dc: CheckStackOverflow
    //     0x2369dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2369e0: cmp             SP, x16
    //     0x2369e4: b.ls            #0x236ae8
    // 0x2369e8: ldr             x0, [fp, #0x20]
    // 0x2369ec: LoadField: r1 = r0->field_b
    //     0x2369ec: ldur            w1, [x0, #0xb]
    // 0x2369f0: DecompressPointer r1
    //     0x2369f0: add             x1, x1, HEAP, lsl #32
    // 0x2369f4: cmp             w1, NULL
    // 0x2369f8: b.eq            #0x236af0
    // 0x2369fc: LoadField: r2 = r1->field_b
    //     0x2369fc: ldur            w2, [x1, #0xb]
    // 0x236a00: DecompressPointer r2
    //     0x236a00: add             x2, x2, HEAP, lsl #32
    // 0x236a04: str             x2, [SP]
    // 0x236a08: r0 = clearComposing()
    //     0x236a08: bl              #0x23c590  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::clearComposing
    // 0x236a0c: ldr             x0, [fp, #0x10]
    // 0x236a10: tbnz            w0, #4, #0x236ac4
    // 0x236a14: ldr             x0, [fp, #0x18]
    // 0x236a18: LoadField: r1 = r0->field_7
    //     0x236a18: ldur            x1, [x0, #7]
    // 0x236a1c: cmp             x1, #6
    // 0x236a20: b.gt            #0x236a5c
    // 0x236a24: cmp             x1, #3
    // 0x236a28: b.le            #0x236a9c
    // 0x236a2c: cmp             x1, #5
    // 0x236a30: b.le            #0x236a9c
    // 0x236a34: ldr             x0, [fp, #0x20]
    // 0x236a38: LoadField: r1 = r0->field_b
    //     0x236a38: ldur            w1, [x0, #0xb]
    // 0x236a3c: DecompressPointer r1
    //     0x236a3c: add             x1, x1, HEAP, lsl #32
    // 0x236a40: cmp             w1, NULL
    // 0x236a44: b.eq            #0x236af4
    // 0x236a48: LoadField: r2 = r1->field_f
    //     0x236a48: ldur            w2, [x1, #0xf]
    // 0x236a4c: DecompressPointer r2
    //     0x236a4c: add             x2, x2, HEAP, lsl #32
    // 0x236a50: str             x2, [SP]
    // 0x236a54: r0 = nextFocus()
    //     0x236a54: bl              #0x23c4f4  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::nextFocus
    // 0x236a58: b               #0x236ac4
    // 0x236a5c: cmp             x1, #9
    // 0x236a60: b.gt            #0x236a9c
    // 0x236a64: cmp             x1, #8
    // 0x236a68: b.gt            #0x236a9c
    // 0x236a6c: cmp             x1, #7
    // 0x236a70: b.gt            #0x236a9c
    // 0x236a74: ldr             x0, [fp, #0x20]
    // 0x236a78: LoadField: r1 = r0->field_b
    //     0x236a78: ldur            w1, [x0, #0xb]
    // 0x236a7c: DecompressPointer r1
    //     0x236a7c: add             x1, x1, HEAP, lsl #32
    // 0x236a80: cmp             w1, NULL
    // 0x236a84: b.eq            #0x236af8
    // 0x236a88: LoadField: r2 = r1->field_f
    //     0x236a88: ldur            w2, [x1, #0xf]
    // 0x236a8c: DecompressPointer r2
    //     0x236a8c: add             x2, x2, HEAP, lsl #32
    // 0x236a90: str             x2, [SP]
    // 0x236a94: r0 = previousFocus()
    //     0x236a94: bl              #0x236b04  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::previousFocus
    // 0x236a98: b               #0x236ac4
    // 0x236a9c: ldr             x0, [fp, #0x20]
    // 0x236aa0: LoadField: r1 = r0->field_b
    //     0x236aa0: ldur            w1, [x0, #0xb]
    // 0x236aa4: DecompressPointer r1
    //     0x236aa4: add             x1, x1, HEAP, lsl #32
    // 0x236aa8: cmp             w1, NULL
    // 0x236aac: b.eq            #0x236afc
    // 0x236ab0: LoadField: r2 = r1->field_f
    //     0x236ab0: ldur            w2, [x1, #0xf]
    // 0x236ab4: DecompressPointer r2
    //     0x236ab4: add             x2, x2, HEAP, lsl #32
    // 0x236ab8: str             x2, [SP]
    // 0x236abc: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x236abc: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x236ac0: r0 = unfocus()
    //     0x236ac0: bl              #0x232d10  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::unfocus
    // 0x236ac4: ldr             x1, [fp, #0x20]
    // 0x236ac8: LoadField: r2 = r1->field_b
    //     0x236ac8: ldur            w2, [x1, #0xb]
    // 0x236acc: DecompressPointer r2
    //     0x236acc: add             x2, x2, HEAP, lsl #32
    // 0x236ad0: cmp             w2, NULL
    // 0x236ad4: b.eq            #0x236b00
    // 0x236ad8: r0 = Null
    //     0x236ad8: mov             x0, NULL
    // 0x236adc: LeaveFrame
    //     0x236adc: mov             SP, fp
    //     0x236ae0: ldp             fp, lr, [SP], #0x10
    // 0x236ae4: ret
    //     0x236ae4: ret             
    // 0x236ae8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x236ae8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x236aec: b               #0x2369e8
    // 0x236af0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236af0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236af4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236af4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236af8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236af8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236afc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236afc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x236b00: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x236b00: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ updateEditingValue(/* No info */) {
    // ** addr: 0x23d710, size: 0x49c
    // 0x23d710: EnterFrame
    //     0x23d710: stp             fp, lr, [SP, #-0x10]!
    //     0x23d714: mov             fp, SP
    // 0x23d718: AllocStack(0x28)
    //     0x23d718: sub             SP, SP, #0x28
    // 0x23d71c: CheckStackOverflow
    //     0x23d71c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23d720: cmp             SP, x16
    //     0x23d724: b.ls            #0x23db7c
    // 0x23d728: ldr             x0, [fp, #0x18]
    // 0x23d72c: LoadField: r1 = r0->field_b
    //     0x23d72c: ldur            w1, [x0, #0xb]
    // 0x23d730: DecompressPointer r1
    //     0x23d730: add             x1, x1, HEAP, lsl #32
    // 0x23d734: cmp             w1, NULL
    // 0x23d738: b.eq            #0x23db84
    // 0x23d73c: ldr             x16, [fp, #0x10]
    // 0x23d740: stp             x16, x0, [SP]
    // 0x23d744: r0 = _checkNeedsAdjustAffinity()
    //     0x23d744: bl              #0x23e4f8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_checkNeedsAdjustAffinity
    // 0x23d748: tbnz            w0, #4, #0x23d7b0
    // 0x23d74c: ldr             x0, [fp, #0x18]
    // 0x23d750: ldr             x1, [fp, #0x10]
    // 0x23d754: LoadField: r2 = r1->field_b
    //     0x23d754: ldur            w2, [x1, #0xb]
    // 0x23d758: DecompressPointer r2
    //     0x23d758: add             x2, x2, HEAP, lsl #32
    // 0x23d75c: LoadField: r3 = r0->field_b
    //     0x23d75c: ldur            w3, [x0, #0xb]
    // 0x23d760: DecompressPointer r3
    //     0x23d760: add             x3, x3, HEAP, lsl #32
    // 0x23d764: cmp             w3, NULL
    // 0x23d768: b.eq            #0x23db88
    // 0x23d76c: LoadField: r4 = r3->field_b
    //     0x23d76c: ldur            w4, [x3, #0xb]
    // 0x23d770: DecompressPointer r4
    //     0x23d770: add             x4, x4, HEAP, lsl #32
    // 0x23d774: LoadField: r3 = r4->field_27
    //     0x23d774: ldur            w3, [x4, #0x27]
    // 0x23d778: DecompressPointer r3
    //     0x23d778: add             x3, x3, HEAP, lsl #32
    // 0x23d77c: LoadField: r4 = r3->field_b
    //     0x23d77c: ldur            w4, [x3, #0xb]
    // 0x23d780: DecompressPointer r4
    //     0x23d780: add             x4, x4, HEAP, lsl #32
    // 0x23d784: LoadField: r3 = r4->field_27
    //     0x23d784: ldur            w3, [x4, #0x27]
    // 0x23d788: DecompressPointer r3
    //     0x23d788: add             x3, x3, HEAP, lsl #32
    // 0x23d78c: stp             x3, x2, [SP]
    // 0x23d790: r4 = const [0, 0x2, 0x2, 0x1, affinity, 0x1, null]
    //     0x23d790: ldr             x4, [PP, #0x63b0]  ; [pp+0x63b0] List(7) [0, 0x2, 0x2, 0x1, "affinity", 0x1, Null]
    // 0x23d794: r0 = copyWith()
    //     0x23d794: bl              #0x249a58  ; [package:flutter/src/services/text_editing.dart] TextSelection::copyWith
    // 0x23d798: ldr             x16, [fp, #0x10]
    // 0x23d79c: stp             x0, x16, [SP]
    // 0x23d7a0: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x23d7a0: ldr             x4, [PP, #0x5930]  ; [pp+0x5930] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x23d7a4: r0 = copyWith()
    //     0x23d7a4: bl              #0x2498e0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x23d7a8: mov             x2, x0
    // 0x23d7ac: b               #0x23d7b4
    // 0x23d7b0: ldr             x2, [fp, #0x10]
    // 0x23d7b4: ldr             x1, [fp, #0x18]
    // 0x23d7b8: stur            x2, [fp, #-8]
    // 0x23d7bc: LoadField: r3 = r1->field_b
    //     0x23d7bc: ldur            w3, [x1, #0xb]
    // 0x23d7c0: DecompressPointer r3
    //     0x23d7c0: add             x3, x3, HEAP, lsl #32
    // 0x23d7c4: cmp             w3, NULL
    // 0x23d7c8: b.eq            #0x23db8c
    // 0x23d7cc: mov             x0, x2
    // 0x23d7d0: StoreField: r1->field_73 = r0
    //     0x23d7d0: stur            w0, [x1, #0x73]
    //     0x23d7d4: ldurb           w16, [x1, #-1]
    //     0x23d7d8: ldurb           w17, [x0, #-1]
    //     0x23d7dc: and             x16, x17, x16, lsr #2
    //     0x23d7e0: tst             x16, HEAP, lsr #32
    //     0x23d7e4: b.eq            #0x23d7ec
    //     0x23d7e8: bl              #0x3e4608
    // 0x23d7ec: LoadField: r0 = r3->field_b
    //     0x23d7ec: ldur            w0, [x3, #0xb]
    // 0x23d7f0: DecompressPointer r0
    //     0x23d7f0: add             x0, x0, HEAP, lsl #32
    // 0x23d7f4: LoadField: r3 = r0->field_27
    //     0x23d7f4: ldur            w3, [x0, #0x27]
    // 0x23d7f8: DecompressPointer r3
    //     0x23d7f8: add             x3, x3, HEAP, lsl #32
    // 0x23d7fc: stp             x3, x2, [SP]
    // 0x23d800: r0 = ==()
    //     0x23d800: bl              #0x3688c0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x23d804: tbnz            w0, #4, #0x23d818
    // 0x23d808: r0 = Null
    //     0x23d808: mov             x0, NULL
    // 0x23d80c: LeaveFrame
    //     0x23d80c: mov             SP, fp
    //     0x23d810: ldp             fp, lr, [SP], #0x10
    // 0x23d814: ret
    //     0x23d814: ret             
    // 0x23d818: ldr             x1, [fp, #0x18]
    // 0x23d81c: ldur            x2, [fp, #-8]
    // 0x23d820: LoadField: r3 = r2->field_7
    //     0x23d820: ldur            w3, [x2, #7]
    // 0x23d824: DecompressPointer r3
    //     0x23d824: add             x3, x3, HEAP, lsl #32
    // 0x23d828: stur            x3, [fp, #-0x10]
    // 0x23d82c: LoadField: r0 = r1->field_b
    //     0x23d82c: ldur            w0, [x1, #0xb]
    // 0x23d830: DecompressPointer r0
    //     0x23d830: add             x0, x0, HEAP, lsl #32
    // 0x23d834: cmp             w0, NULL
    // 0x23d838: b.eq            #0x23db90
    // 0x23d83c: LoadField: r4 = r0->field_b
    //     0x23d83c: ldur            w4, [x0, #0xb]
    // 0x23d840: DecompressPointer r4
    //     0x23d840: add             x4, x4, HEAP, lsl #32
    // 0x23d844: LoadField: r0 = r4->field_27
    //     0x23d844: ldur            w0, [x4, #0x27]
    // 0x23d848: DecompressPointer r0
    //     0x23d848: add             x0, x0, HEAP, lsl #32
    // 0x23d84c: LoadField: r4 = r0->field_7
    //     0x23d84c: ldur            w4, [x0, #7]
    // 0x23d850: DecompressPointer r4
    //     0x23d850: add             x4, x4, HEAP, lsl #32
    // 0x23d854: r0 = LoadClassIdInstr(r3)
    //     0x23d854: ldur            x0, [x3, #-1]
    //     0x23d858: ubfx            x0, x0, #0xc, #0x14
    // 0x23d85c: stp             x4, x3, [SP]
    // 0x23d860: mov             lr, x0
    // 0x23d864: ldr             lr, [x21, lr, lsl #3]
    // 0x23d868: blr             lr
    // 0x23d86c: tbnz            w0, #4, #0x23d948
    // 0x23d870: ldr             x0, [fp, #0x18]
    // 0x23d874: ldur            x1, [fp, #-8]
    // 0x23d878: LoadField: r2 = r1->field_f
    //     0x23d878: ldur            w2, [x1, #0xf]
    // 0x23d87c: DecompressPointer r2
    //     0x23d87c: add             x2, x2, HEAP, lsl #32
    // 0x23d880: LoadField: r3 = r0->field_b
    //     0x23d880: ldur            w3, [x0, #0xb]
    // 0x23d884: DecompressPointer r3
    //     0x23d884: add             x3, x3, HEAP, lsl #32
    // 0x23d888: cmp             w3, NULL
    // 0x23d88c: b.eq            #0x23db94
    // 0x23d890: LoadField: r4 = r3->field_b
    //     0x23d890: ldur            w4, [x3, #0xb]
    // 0x23d894: DecompressPointer r4
    //     0x23d894: add             x4, x4, HEAP, lsl #32
    // 0x23d898: LoadField: r3 = r4->field_27
    //     0x23d898: ldur            w3, [x4, #0x27]
    // 0x23d89c: DecompressPointer r3
    //     0x23d89c: add             x3, x3, HEAP, lsl #32
    // 0x23d8a0: LoadField: r4 = r3->field_f
    //     0x23d8a0: ldur            w4, [x3, #0xf]
    // 0x23d8a4: DecompressPointer r4
    //     0x23d8a4: add             x4, x4, HEAP, lsl #32
    // 0x23d8a8: cmp             w2, w4
    // 0x23d8ac: b.eq            #0x23d8d0
    // 0x23d8b0: LoadField: r3 = r4->field_7
    //     0x23d8b0: ldur            x3, [x4, #7]
    // 0x23d8b4: LoadField: r5 = r2->field_7
    //     0x23d8b4: ldur            x5, [x2, #7]
    // 0x23d8b8: cmp             x3, x5
    // 0x23d8bc: b.ne            #0x23d94c
    // 0x23d8c0: LoadField: r3 = r4->field_f
    //     0x23d8c0: ldur            x3, [x4, #0xf]
    // 0x23d8c4: LoadField: r4 = r2->field_f
    //     0x23d8c4: ldur            x4, [x2, #0xf]
    // 0x23d8c8: cmp             x3, x4
    // 0x23d8cc: b.ne            #0x23d94c
    // 0x23d8d0: LoadField: r2 = r0->field_3b
    //     0x23d8d0: ldur            w2, [x0, #0x3b]
    // 0x23d8d4: DecompressPointer r2
    //     0x23d8d4: add             x2, x2, HEAP, lsl #32
    // 0x23d8d8: cmp             w2, NULL
    // 0x23d8dc: b.ne            #0x23d8e8
    // 0x23d8e0: r0 = Null
    //     0x23d8e0: mov             x0, NULL
    // 0x23d8e4: b               #0x23d8f0
    // 0x23d8e8: str             x2, [SP]
    // 0x23d8ec: r0 = scribbleInProgress()
    //     0x23d8ec: bl              #0x23e4a8  ; [package:flutter/src/services/text_input.dart] TextInputConnection::scribbleInProgress
    // 0x23d8f0: cmp             w0, NULL
    // 0x23d8f4: b.eq            #0x23d908
    // 0x23d8f8: tbnz            w0, #4, #0x23d908
    // 0x23d8fc: ldr             x0, [fp, #0x18]
    // 0x23d900: r2 = Instance_SelectionChangedCause
    //     0x23d900: ldr             x2, [PP, #0x57b8]  ; [pp+0x57b8] Obj!SelectionChangedCause@4806c1
    // 0x23d904: b               #0x23d92c
    // 0x23d908: ldr             x0, [fp, #0x18]
    // 0x23d90c: LoadField: r1 = r0->field_7f
    //     0x23d90c: ldur            w1, [x0, #0x7f]
    // 0x23d910: DecompressPointer r1
    //     0x23d910: add             x1, x1, HEAP, lsl #32
    // 0x23d914: cmp             w1, NULL
    // 0x23d918: b.eq            #0x23d924
    // 0x23d91c: r1 = Instance_SelectionChangedCause
    //     0x23d91c: ldr             x1, [PP, #0x5788]  ; [pp+0x5788] Obj!SelectionChangedCause@4806a1
    // 0x23d920: b               #0x23d928
    // 0x23d924: r1 = Instance_SelectionChangedCause
    //     0x23d924: ldr             x1, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x23d928: mov             x2, x1
    // 0x23d92c: ldur            x1, [fp, #-8]
    // 0x23d930: LoadField: r3 = r1->field_b
    //     0x23d930: ldur            w3, [x1, #0xb]
    // 0x23d934: DecompressPointer r3
    //     0x23d934: add             x3, x3, HEAP, lsl #32
    // 0x23d938: stp             x3, x0, [SP, #8]
    // 0x23d93c: str             x2, [SP]
    // 0x23d940: r0 = _handleSelectionChanged()
    //     0x23d940: bl              #0x241e80  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x23d944: b               #0x23db1c
    // 0x23d948: ldur            x1, [fp, #-8]
    // 0x23d94c: ldr             x2, [fp, #0x18]
    // 0x23d950: ldur            x3, [fp, #-0x10]
    // 0x23d954: LoadField: r0 = r2->field_b
    //     0x23d954: ldur            w0, [x2, #0xb]
    // 0x23d958: DecompressPointer r0
    //     0x23d958: add             x0, x0, HEAP, lsl #32
    // 0x23d95c: cmp             w0, NULL
    // 0x23d960: b.eq            #0x23db98
    // 0x23d964: LoadField: r4 = r0->field_b
    //     0x23d964: ldur            w4, [x0, #0xb]
    // 0x23d968: DecompressPointer r4
    //     0x23d968: add             x4, x4, HEAP, lsl #32
    // 0x23d96c: LoadField: r0 = r4->field_27
    //     0x23d96c: ldur            w0, [x4, #0x27]
    // 0x23d970: DecompressPointer r0
    //     0x23d970: add             x0, x0, HEAP, lsl #32
    // 0x23d974: LoadField: r4 = r0->field_7
    //     0x23d974: ldur            w4, [x0, #7]
    // 0x23d978: DecompressPointer r4
    //     0x23d978: add             x4, x4, HEAP, lsl #32
    // 0x23d97c: r0 = LoadClassIdInstr(r3)
    //     0x23d97c: ldur            x0, [x3, #-1]
    //     0x23d980: ubfx            x0, x0, #0xc, #0x14
    // 0x23d984: stp             x4, x3, [SP]
    // 0x23d988: mov             lr, x0
    // 0x23d98c: ldr             lr, [x21, lr, lsl #3]
    // 0x23d990: blr             lr
    // 0x23d994: tbz             w0, #4, #0x23d9ac
    // 0x23d998: ldr             x16, [fp, #0x18]
    // 0x23d99c: r30 = false
    //     0x23d99c: add             lr, NULL, #0x30  ; false
    // 0x23d9a0: stp             lr, x16, [SP]
    // 0x23d9a4: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x23d9a4: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x23d9a8: r0 = hideToolbar()
    //     0x23d9a8: bl              #0x23dcb8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x23d9ac: ldr             x0, [fp, #0x18]
    // 0x23d9b0: StoreField: r0->field_b7 = rNULL
    //     0x23d9b0: stur            NULL, [x0, #0xb7]
    // 0x23d9b4: str             x0, [SP]
    // 0x23d9b8: r0 = _hasInputConnection()
    //     0x23d9b8: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x23d9bc: tbnz            w0, #4, #0x23da78
    // 0x23d9c0: ldr             x0, [fp, #0x18]
    // 0x23d9c4: LoadField: r1 = r0->field_b
    //     0x23d9c4: ldur            w1, [x0, #0xb]
    // 0x23d9c8: DecompressPointer r1
    //     0x23d9c8: add             x1, x1, HEAP, lsl #32
    // 0x23d9cc: cmp             w1, NULL
    // 0x23d9d0: b.eq            #0x23db9c
    // 0x23d9d4: r1 = LoadStaticField(0x970)
    //     0x23d9d4: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x23d9d8: ldr             x1, [x1, #0x12e0]
    // 0x23d9dc: cmp             w1, NULL
    // 0x23d9e0: b.eq            #0x23dba0
    // 0x23d9e4: r0 = InitLateStaticField(0x834) // [dart:ui] PlatformDispatcher::_instance
    //     0x23d9e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x23d9e8: ldr             x0, [x0, #0x1068]
    //     0x23d9ec: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x23d9f0: cmp             w0, w16
    //     0x23d9f4: b.ne            #0x23da00
    //     0x23d9f8: ldr             x2, [PP, #0x270]  ; [pp+0x270] Field <PlatformDispatcher._instance@15065589>: static late final (offset: 0x834)
    //     0x23d9fc: bl              #0x3e406c
    // 0x23da00: LoadField: r1 = r0->field_77
    //     0x23da00: ldur            w1, [x0, #0x77]
    // 0x23da04: DecompressPointer r1
    //     0x23da04: add             x1, x1, HEAP, lsl #32
    // 0x23da08: tbnz            w1, #4, #0x23da70
    // 0x23da0c: ldr             x2, [fp, #0x18]
    // 0x23da10: ldur            x0, [fp, #-0x10]
    // 0x23da14: LoadField: r1 = r0->field_7
    //     0x23da14: ldur            w1, [x0, #7]
    // 0x23da18: DecompressPointer r1
    //     0x23da18: add             x1, x1, HEAP, lsl #32
    // 0x23da1c: LoadField: r0 = r2->field_b
    //     0x23da1c: ldur            w0, [x2, #0xb]
    // 0x23da20: DecompressPointer r0
    //     0x23da20: add             x0, x0, HEAP, lsl #32
    // 0x23da24: cmp             w0, NULL
    // 0x23da28: b.eq            #0x23dba4
    // 0x23da2c: LoadField: r3 = r0->field_b
    //     0x23da2c: ldur            w3, [x0, #0xb]
    // 0x23da30: DecompressPointer r3
    //     0x23da30: add             x3, x3, HEAP, lsl #32
    // 0x23da34: LoadField: r0 = r3->field_27
    //     0x23da34: ldur            w0, [x3, #0x27]
    // 0x23da38: DecompressPointer r0
    //     0x23da38: add             x0, x0, HEAP, lsl #32
    // 0x23da3c: LoadField: r3 = r0->field_7
    //     0x23da3c: ldur            w3, [x0, #7]
    // 0x23da40: DecompressPointer r3
    //     0x23da40: add             x3, x3, HEAP, lsl #32
    // 0x23da44: LoadField: r0 = r3->field_7
    //     0x23da44: ldur            w0, [x3, #7]
    // 0x23da48: DecompressPointer r0
    //     0x23da48: add             x0, x0, HEAP, lsl #32
    // 0x23da4c: r3 = LoadInt32Instr(r0)
    //     0x23da4c: sbfx            x3, x0, #1, #0x1f
    // 0x23da50: add             x0, x3, #1
    // 0x23da54: r3 = LoadInt32Instr(r1)
    //     0x23da54: sbfx            x3, x1, #1, #0x1f
    // 0x23da58: cmp             x3, x0
    // 0x23da5c: r16 = true
    //     0x23da5c: add             x16, NULL, #0x20  ; true
    // 0x23da60: r17 = false
    //     0x23da60: add             x17, NULL, #0x30  ; false
    // 0x23da64: csel            x1, x16, x17, eq
    // 0x23da68: mov             x0, x1
    // 0x23da6c: b               #0x23da80
    // 0x23da70: ldr             x2, [fp, #0x18]
    // 0x23da74: b               #0x23da7c
    // 0x23da78: ldr             x2, [fp, #0x18]
    // 0x23da7c: r0 = false
    //     0x23da7c: add             x0, NULL, #0x30  ; false
    // 0x23da80: tst             x0, #0x10
    // 0x23da84: cset            x1, ne
    // 0x23da88: sub             x1, x1, #1
    // 0x23da8c: and             x1, x1, #6
    // 0x23da90: r3 = LoadInt32Instr(r1)
    //     0x23da90: sbfx            x3, x1, #1, #0x1f
    // 0x23da94: StoreField: r2->field_9b = r3
    //     0x23da94: stur            x3, [x2, #0x9b]
    // 0x23da98: tbnz            w0, #4, #0x23dae0
    // 0x23da9c: LoadField: r0 = r2->field_b
    //     0x23da9c: ldur            w0, [x2, #0xb]
    // 0x23daa0: DecompressPointer r0
    //     0x23daa0: add             x0, x0, HEAP, lsl #32
    // 0x23daa4: cmp             w0, NULL
    // 0x23daa8: b.eq            #0x23dba8
    // 0x23daac: LoadField: r1 = r0->field_b
    //     0x23daac: ldur            w1, [x0, #0xb]
    // 0x23dab0: DecompressPointer r1
    //     0x23dab0: add             x1, x1, HEAP, lsl #32
    // 0x23dab4: LoadField: r0 = r1->field_27
    //     0x23dab4: ldur            w0, [x1, #0x27]
    // 0x23dab8: DecompressPointer r0
    //     0x23dab8: add             x0, x0, HEAP, lsl #32
    // 0x23dabc: LoadField: r1 = r0->field_b
    //     0x23dabc: ldur            w1, [x0, #0xb]
    // 0x23dac0: DecompressPointer r1
    //     0x23dac0: add             x1, x1, HEAP, lsl #32
    // 0x23dac4: LoadField: r3 = r1->field_17
    //     0x23dac4: ldur            x3, [x1, #0x17]
    // 0x23dac8: r0 = BoxInt64Instr(r3)
    //     0x23dac8: sbfiz           x0, x3, #1, #0x1f
    //     0x23dacc: cmp             x3, x0, asr #1
    //     0x23dad0: b.eq            #0x23dadc
    //     0x23dad4: bl              #0x3e5e54
    //     0x23dad8: stur            x3, [x0, #7]
    // 0x23dadc: b               #0x23dae4
    // 0x23dae0: r0 = Null
    //     0x23dae0: mov             x0, NULL
    // 0x23dae4: StoreField: r2->field_a3 = r0
    //     0x23dae4: stur            w0, [x2, #0xa3]
    //     0x23dae8: tbz             w0, #0, #0x23db04
    //     0x23daec: ldurb           w16, [x2, #-1]
    //     0x23daf0: ldurb           w17, [x0, #-1]
    //     0x23daf4: and             x16, x17, x16, lsr #2
    //     0x23daf8: tst             x16, HEAP, lsr #32
    //     0x23dafc: b.eq            #0x23db04
    //     0x23db00: bl              #0x3e4628
    // 0x23db04: ldur            x16, [fp, #-8]
    // 0x23db08: stp             x16, x2, [SP, #8]
    // 0x23db0c: r16 = Instance_SelectionChangedCause
    //     0x23db0c: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x23db10: str             x16, [SP]
    // 0x23db14: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x23db14: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x23db18: r0 = _formatAndSetValue()
    //     0x23db18: bl              #0x22c2ac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_formatAndSetValue
    // 0x23db1c: ldr             x16, [fp, #0x18]
    // 0x23db20: str             x16, [SP]
    // 0x23db24: r0 = _showBlinkingCursor()
    //     0x23db24: bl              #0x23dbac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x23db28: tbnz            w0, #4, #0x23db5c
    // 0x23db2c: ldr             x0, [fp, #0x18]
    // 0x23db30: LoadField: r1 = r0->field_1f
    //     0x23db30: ldur            w1, [x0, #0x1f]
    // 0x23db34: DecompressPointer r1
    //     0x23db34: add             x1, x1, HEAP, lsl #32
    // 0x23db38: cmp             w1, NULL
    // 0x23db3c: b.eq            #0x23db5c
    // 0x23db40: r16 = false
    //     0x23db40: add             x16, NULL, #0x30  ; false
    // 0x23db44: stp             x16, x0, [SP]
    // 0x23db48: r4 = const [0, 0x2, 0x2, 0x1, resetCharTicks, 0x1, null]
    //     0x23db48: ldr             x4, [PP, #0x55b0]  ; [pp+0x55b0] List(7) [0, 0x2, 0x2, 0x1, "resetCharTicks", 0x1, Null]
    // 0x23db4c: r0 = _stopCursorBlink()
    //     0x23db4c: bl              #0x235d24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x23db50: ldr             x16, [fp, #0x18]
    // 0x23db54: str             x16, [SP]
    // 0x23db58: r0 = _startCursorBlink()
    //     0x23db58: bl              #0x233c28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x23db5c: ldr             x16, [fp, #0x18]
    // 0x23db60: r30 = true
    //     0x23db60: add             lr, NULL, #0x20  ; true
    // 0x23db64: stp             lr, x16, [SP]
    // 0x23db68: r0 = _scheduleShowCaretOnScreen()
    //     0x23db68: bl              #0x24868c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x23db6c: r0 = Null
    //     0x23db6c: mov             x0, NULL
    // 0x23db70: LeaveFrame
    //     0x23db70: mov             SP, fp
    //     0x23db74: ldp             fp, lr, [SP], #0x10
    // 0x23db78: ret
    //     0x23db78: ret             
    // 0x23db7c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23db7c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23db80: b               #0x23d728
    // 0x23db84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23db84: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23db88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23db88: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23db8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23db8c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23db90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23db90: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23db94: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23db94: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23db98: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23db98: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23db9c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23db9c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23dba0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23dba0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23dba4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23dba4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23dba8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23dba8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _showBlinkingCursor(/* No info */) {
    // ** addr: 0x23dbac, size: 0xb8
    // 0x23dbac: EnterFrame
    //     0x23dbac: stp             fp, lr, [SP, #-0x10]!
    //     0x23dbb0: mov             fp, SP
    // 0x23dbb4: AllocStack(0x8)
    //     0x23dbb4: sub             SP, SP, #8
    // 0x23dbb8: CheckStackOverflow
    //     0x23dbb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23dbbc: cmp             SP, x16
    //     0x23dbc0: b.ls            #0x23dc54
    // 0x23dbc4: ldr             x0, [fp, #0x10]
    // 0x23dbc8: LoadField: r1 = r0->field_b
    //     0x23dbc8: ldur            w1, [x0, #0xb]
    // 0x23dbcc: DecompressPointer r1
    //     0x23dbcc: add             x1, x1, HEAP, lsl #32
    // 0x23dbd0: cmp             w1, NULL
    // 0x23dbd4: b.eq            #0x23dc5c
    // 0x23dbd8: LoadField: r2 = r1->field_f
    //     0x23dbd8: ldur            w2, [x1, #0xf]
    // 0x23dbdc: DecompressPointer r2
    //     0x23dbdc: add             x2, x2, HEAP, lsl #32
    // 0x23dbe0: str             x2, [SP]
    // 0x23dbe4: r0 = hasFocus()
    //     0x23dbe4: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x23dbe8: tbnz            w0, #4, #0x23dc44
    // 0x23dbec: ldr             x1, [fp, #0x10]
    // 0x23dbf0: LoadField: r2 = r1->field_b
    //     0x23dbf0: ldur            w2, [x1, #0xb]
    // 0x23dbf4: DecompressPointer r2
    //     0x23dbf4: add             x2, x2, HEAP, lsl #32
    // 0x23dbf8: cmp             w2, NULL
    // 0x23dbfc: b.eq            #0x23dc60
    // 0x23dc00: LoadField: r3 = r2->field_b
    //     0x23dc00: ldur            w3, [x2, #0xb]
    // 0x23dc04: DecompressPointer r3
    //     0x23dc04: add             x3, x3, HEAP, lsl #32
    // 0x23dc08: LoadField: r4 = r3->field_27
    //     0x23dc08: ldur            w4, [x3, #0x27]
    // 0x23dc0c: DecompressPointer r4
    //     0x23dc0c: add             x4, x4, HEAP, lsl #32
    // 0x23dc10: LoadField: r3 = r4->field_b
    //     0x23dc10: ldur            w3, [x4, #0xb]
    // 0x23dc14: DecompressPointer r3
    //     0x23dc14: add             x3, x3, HEAP, lsl #32
    // 0x23dc18: LoadField: r4 = r3->field_7
    //     0x23dc18: ldur            x4, [x3, #7]
    // 0x23dc1c: LoadField: r5 = r3->field_f
    //     0x23dc1c: ldur            x5, [x3, #0xf]
    // 0x23dc20: cmp             x4, x5
    // 0x23dc24: b.ne            #0x23dc44
    // 0x23dc28: LoadField: r3 = r2->field_33
    //     0x23dc28: ldur            w3, [x2, #0x33]
    // 0x23dc2c: DecompressPointer r3
    //     0x23dc2c: add             x3, x3, HEAP, lsl #32
    // 0x23dc30: tbnz            w3, #4, #0x23dc44
    // 0x23dc34: LoadField: r2 = r1->field_6f
    //     0x23dc34: ldur            w2, [x1, #0x6f]
    // 0x23dc38: DecompressPointer r2
    //     0x23dc38: add             x2, x2, HEAP, lsl #32
    // 0x23dc3c: mov             x0, x2
    // 0x23dc40: b               #0x23dc48
    // 0x23dc44: r0 = false
    //     0x23dc44: add             x0, NULL, #0x30  ; false
    // 0x23dc48: LeaveFrame
    //     0x23dc48: mov             SP, fp
    //     0x23dc4c: ldp             fp, lr, [SP], #0x10
    // 0x23dc50: ret
    //     0x23dc50: ret             
    // 0x23dc54: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23dc54: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23dc58: b               #0x23dbc4
    // 0x23dc5c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23dc5c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23dc60: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23dc60: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ wantKeepAlive(/* No info */) {
    // ** addr: 0x23dc64, size: 0x54
    // 0x23dc64: EnterFrame
    //     0x23dc64: stp             fp, lr, [SP, #-0x10]!
    //     0x23dc68: mov             fp, SP
    // 0x23dc6c: AllocStack(0x8)
    //     0x23dc6c: sub             SP, SP, #8
    // 0x23dc70: CheckStackOverflow
    //     0x23dc70: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23dc74: cmp             SP, x16
    //     0x23dc78: b.ls            #0x23dcac
    // 0x23dc7c: ldr             x0, [fp, #0x10]
    // 0x23dc80: LoadField: r1 = r0->field_b
    //     0x23dc80: ldur            w1, [x0, #0xb]
    // 0x23dc84: DecompressPointer r1
    //     0x23dc84: add             x1, x1, HEAP, lsl #32
    // 0x23dc88: cmp             w1, NULL
    // 0x23dc8c: b.eq            #0x23dcb4
    // 0x23dc90: LoadField: r0 = r1->field_f
    //     0x23dc90: ldur            w0, [x1, #0xf]
    // 0x23dc94: DecompressPointer r0
    //     0x23dc94: add             x0, x0, HEAP, lsl #32
    // 0x23dc98: str             x0, [SP]
    // 0x23dc9c: r0 = hasFocus()
    //     0x23dc9c: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x23dca0: LeaveFrame
    //     0x23dca0: mov             SP, fp
    //     0x23dca4: ldp             fp, lr, [SP], #0x10
    // 0x23dca8: ret
    //     0x23dca8: ret             
    // 0x23dcac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23dcac: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23dcb0: b               #0x23dc7c
    // 0x23dcb4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23dcb4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ hideToolbar(/* No info */) {
    // ** addr: 0x23dcb8, size: 0xd0
    // 0x23dcb8: EnterFrame
    //     0x23dcb8: stp             fp, lr, [SP, #-0x10]!
    //     0x23dcbc: mov             fp, SP
    // 0x23dcc0: AllocStack(0x10)
    //     0x23dcc0: sub             SP, SP, #0x10
    // 0x23dcc4: SetupParameters(EditableTextState this /* r1, fp-0x8 */, [dynamic _ = true /* r0 */])
    //     0x23dcc4: mov             x0, x4
    //     0x23dcc8: ldur            w1, [x0, #0x13]
    //     0x23dccc: add             x1, x1, HEAP, lsl #32
    //     0x23dcd0: sub             x0, x1, #2
    //     0x23dcd4: add             x1, fp, w0, sxtw #2
    //     0x23dcd8: ldr             x1, [x1, #0x10]
    //     0x23dcdc: stur            x1, [fp, #-8]
    //     0x23dce0: cmp             w0, #2
    //     0x23dce4: b.lt            #0x23dcf8
    //     0x23dce8: add             x2, fp, w0, sxtw #2
    //     0x23dcec: ldr             x2, [x2, #8]
    //     0x23dcf0: mov             x0, x2
    //     0x23dcf4: b               #0x23dcfc
    //     0x23dcf8: add             x0, NULL, #0x20  ; true
    // 0x23dcfc: CheckStackOverflow
    //     0x23dcfc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23dd00: cmp             SP, x16
    //     0x23dd04: b.ls            #0x23dd80
    // 0x23dd08: tbnz            w0, #4, #0x23dd28
    // 0x23dd0c: LoadField: r0 = r1->field_3f
    //     0x23dd0c: ldur            w0, [x1, #0x3f]
    // 0x23dd10: DecompressPointer r0
    //     0x23dd10: add             x0, x0, HEAP, lsl #32
    // 0x23dd14: cmp             w0, NULL
    // 0x23dd18: b.eq            #0x23dd70
    // 0x23dd1c: str             x0, [SP]
    // 0x23dd20: r0 = hide()
    //     0x23dd20: bl              #0x23dfe0  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::hide
    // 0x23dd24: b               #0x23dd70
    // 0x23dd28: LoadField: r0 = r1->field_3f
    //     0x23dd28: ldur            w0, [x1, #0x3f]
    // 0x23dd2c: DecompressPointer r0
    //     0x23dd2c: add             x0, x0, HEAP, lsl #32
    // 0x23dd30: cmp             w0, NULL
    // 0x23dd34: b.ne            #0x23dd40
    // 0x23dd38: r0 = Null
    //     0x23dd38: mov             x0, NULL
    // 0x23dd3c: b               #0x23dd48
    // 0x23dd40: str             x0, [SP]
    // 0x23dd44: r0 = toolbarIsVisible()
    //     0x23dd44: bl              #0x23dee4  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::toolbarIsVisible
    // 0x23dd48: cmp             w0, NULL
    // 0x23dd4c: b.eq            #0x23dd70
    // 0x23dd50: tbnz            w0, #4, #0x23dd70
    // 0x23dd54: ldur            x0, [fp, #-8]
    // 0x23dd58: LoadField: r1 = r0->field_3f
    //     0x23dd58: ldur            w1, [x0, #0x3f]
    // 0x23dd5c: DecompressPointer r1
    //     0x23dd5c: add             x1, x1, HEAP, lsl #32
    // 0x23dd60: cmp             w1, NULL
    // 0x23dd64: b.eq            #0x23dd70
    // 0x23dd68: str             x1, [SP]
    // 0x23dd6c: r0 = hideToolbar()
    //     0x23dd6c: bl              #0x23dd88  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::hideToolbar
    // 0x23dd70: r0 = Null
    //     0x23dd70: mov             x0, NULL
    // 0x23dd74: LeaveFrame
    //     0x23dd74: mov             SP, fp
    //     0x23dd78: ldp             fp, lr, [SP], #0x10
    // 0x23dd7c: ret
    //     0x23dd7c: ret             
    // 0x23dd80: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23dd80: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23dd84: b               #0x23dd08
  }
  _ _checkNeedsAdjustAffinity(/* No info */) {
    // ** addr: 0x23e4f8, size: 0x130
    // 0x23e4f8: EnterFrame
    //     0x23e4f8: stp             fp, lr, [SP, #-0x10]!
    //     0x23e4fc: mov             fp, SP
    // 0x23e500: AllocStack(0x10)
    //     0x23e500: sub             SP, SP, #0x10
    // 0x23e504: CheckStackOverflow
    //     0x23e504: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23e508: cmp             SP, x16
    //     0x23e50c: b.ls            #0x23e618
    // 0x23e510: ldr             x1, [fp, #0x10]
    // 0x23e514: LoadField: r0 = r1->field_7
    //     0x23e514: ldur            w0, [x1, #7]
    // 0x23e518: DecompressPointer r0
    //     0x23e518: add             x0, x0, HEAP, lsl #32
    // 0x23e51c: ldr             x2, [fp, #0x18]
    // 0x23e520: LoadField: r3 = r2->field_b
    //     0x23e520: ldur            w3, [x2, #0xb]
    // 0x23e524: DecompressPointer r3
    //     0x23e524: add             x3, x3, HEAP, lsl #32
    // 0x23e528: cmp             w3, NULL
    // 0x23e52c: b.eq            #0x23e620
    // 0x23e530: LoadField: r4 = r3->field_b
    //     0x23e530: ldur            w4, [x3, #0xb]
    // 0x23e534: DecompressPointer r4
    //     0x23e534: add             x4, x4, HEAP, lsl #32
    // 0x23e538: LoadField: r3 = r4->field_27
    //     0x23e538: ldur            w3, [x4, #0x27]
    // 0x23e53c: DecompressPointer r3
    //     0x23e53c: add             x3, x3, HEAP, lsl #32
    // 0x23e540: LoadField: r4 = r3->field_7
    //     0x23e540: ldur            w4, [x3, #7]
    // 0x23e544: DecompressPointer r4
    //     0x23e544: add             x4, x4, HEAP, lsl #32
    // 0x23e548: r3 = LoadClassIdInstr(r0)
    //     0x23e548: ldur            x3, [x0, #-1]
    //     0x23e54c: ubfx            x3, x3, #0xc, #0x14
    // 0x23e550: stp             x4, x0, [SP]
    // 0x23e554: mov             x0, x3
    // 0x23e558: mov             lr, x0
    // 0x23e55c: ldr             lr, [x21, lr, lsl #3]
    // 0x23e560: blr             lr
    // 0x23e564: tbnz            w0, #4, #0x23e608
    // 0x23e568: ldr             x2, [fp, #0x18]
    // 0x23e56c: ldr             x1, [fp, #0x10]
    // 0x23e570: LoadField: r3 = r1->field_b
    //     0x23e570: ldur            w3, [x1, #0xb]
    // 0x23e574: DecompressPointer r3
    //     0x23e574: add             x3, x3, HEAP, lsl #32
    // 0x23e578: LoadField: r1 = r3->field_7
    //     0x23e578: ldur            x1, [x3, #7]
    // 0x23e57c: LoadField: r4 = r3->field_f
    //     0x23e57c: ldur            x4, [x3, #0xf]
    // 0x23e580: cmp             x1, x4
    // 0x23e584: r16 = true
    //     0x23e584: add             x16, NULL, #0x20  ; true
    // 0x23e588: r17 = false
    //     0x23e588: add             x17, NULL, #0x30  ; false
    // 0x23e58c: csel            x5, x16, x17, eq
    // 0x23e590: LoadField: r4 = r2->field_b
    //     0x23e590: ldur            w4, [x2, #0xb]
    // 0x23e594: DecompressPointer r4
    //     0x23e594: add             x4, x4, HEAP, lsl #32
    // 0x23e598: cmp             w4, NULL
    // 0x23e59c: b.eq            #0x23e624
    // 0x23e5a0: LoadField: r2 = r4->field_b
    //     0x23e5a0: ldur            w2, [x4, #0xb]
    // 0x23e5a4: DecompressPointer r2
    //     0x23e5a4: add             x2, x2, HEAP, lsl #32
    // 0x23e5a8: LoadField: r4 = r2->field_27
    //     0x23e5a8: ldur            w4, [x2, #0x27]
    // 0x23e5ac: DecompressPointer r4
    //     0x23e5ac: add             x4, x4, HEAP, lsl #32
    // 0x23e5b0: LoadField: r2 = r4->field_b
    //     0x23e5b0: ldur            w2, [x4, #0xb]
    // 0x23e5b4: DecompressPointer r2
    //     0x23e5b4: add             x2, x2, HEAP, lsl #32
    // 0x23e5b8: LoadField: r4 = r2->field_7
    //     0x23e5b8: ldur            x4, [x2, #7]
    // 0x23e5bc: LoadField: r6 = r2->field_f
    //     0x23e5bc: ldur            x6, [x2, #0xf]
    // 0x23e5c0: cmp             x4, x6
    // 0x23e5c4: r16 = true
    //     0x23e5c4: add             x16, NULL, #0x20  ; true
    // 0x23e5c8: r17 = false
    //     0x23e5c8: add             x17, NULL, #0x30  ; false
    // 0x23e5cc: csel            x7, x16, x17, eq
    // 0x23e5d0: cmp             w5, w7
    // 0x23e5d4: b.ne            #0x23e608
    // 0x23e5d8: cmp             x1, x4
    // 0x23e5dc: b.ne            #0x23e608
    // 0x23e5e0: LoadField: r1 = r3->field_27
    //     0x23e5e0: ldur            w1, [x3, #0x27]
    // 0x23e5e4: DecompressPointer r1
    //     0x23e5e4: add             x1, x1, HEAP, lsl #32
    // 0x23e5e8: LoadField: r3 = r2->field_27
    //     0x23e5e8: ldur            w3, [x2, #0x27]
    // 0x23e5ec: DecompressPointer r3
    //     0x23e5ec: add             x3, x3, HEAP, lsl #32
    // 0x23e5f0: cmp             w1, w3
    // 0x23e5f4: r16 = true
    //     0x23e5f4: add             x16, NULL, #0x20  ; true
    // 0x23e5f8: r17 = false
    //     0x23e5f8: add             x17, NULL, #0x30  ; false
    // 0x23e5fc: csel            x2, x16, x17, ne
    // 0x23e600: mov             x0, x2
    // 0x23e604: b               #0x23e60c
    // 0x23e608: r0 = false
    //     0x23e608: add             x0, NULL, #0x30  ; false
    // 0x23e60c: LeaveFrame
    //     0x23e60c: mov             SP, fp
    //     0x23e610: ldp             fp, lr, [SP], #0x10
    // 0x23e614: ret
    //     0x23e614: ret             
    // 0x23e618: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23e618: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23e61c: b               #0x23e510
    // 0x23e620: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23e620: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x23e624: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x23e624: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void performSelector(dynamic, String) {
    // ** addr: 0x23f638, size: 0x4c
    // 0x23f638: EnterFrame
    //     0x23f638: stp             fp, lr, [SP, #-0x10]!
    //     0x23f63c: mov             fp, SP
    // 0x23f640: AllocStack(0x10)
    //     0x23f640: sub             SP, SP, #0x10
    // 0x23f644: SetupParameters()
    //     0x23f644: ldr             x0, [fp, #0x18]
    //     0x23f648: ldur            w1, [x0, #0x17]
    //     0x23f64c: add             x1, x1, HEAP, lsl #32
    // 0x23f650: CheckStackOverflow
    //     0x23f650: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23f654: cmp             SP, x16
    //     0x23f658: b.ls            #0x23f67c
    // 0x23f65c: LoadField: r0 = r1->field_f
    //     0x23f65c: ldur            w0, [x1, #0xf]
    // 0x23f660: DecompressPointer r0
    //     0x23f660: add             x0, x0, HEAP, lsl #32
    // 0x23f664: ldr             x16, [fp, #0x10]
    // 0x23f668: stp             x16, x0, [SP]
    // 0x23f66c: r0 = performSelector()
    //     0x23f66c: bl              #0x23f684  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::performSelector
    // 0x23f670: LeaveFrame
    //     0x23f670: mov             SP, fp
    //     0x23f674: ldp             fp, lr, [SP], #0x10
    // 0x23f678: ret
    //     0x23f678: ret             
    // 0x23f67c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23f67c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23f680: b               #0x23f65c
  }
  _ performSelector(/* No info */) {
    // ** addr: 0x23f684, size: 0x88
    // 0x23f684: EnterFrame
    //     0x23f684: stp             fp, lr, [SP, #-0x10]!
    //     0x23f688: mov             fp, SP
    // 0x23f68c: AllocStack(0x20)
    //     0x23f68c: sub             SP, SP, #0x20
    // 0x23f690: CheckStackOverflow
    //     0x23f690: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x23f694: cmp             SP, x16
    //     0x23f698: b.ls            #0x23f704
    // 0x23f69c: ldr             x16, [fp, #0x10]
    // 0x23f6a0: str             x16, [SP]
    // 0x23f6a4: r0 = intentForMacOSSelector()
    //     0x23f6a4: bl              #0x2400a4  ; [package:flutter/src/widgets/default_text_editing_shortcuts.dart] ::intentForMacOSSelector
    // 0x23f6a8: stur            x0, [fp, #-8]
    // 0x23f6ac: cmp             w0, NULL
    // 0x23f6b0: b.eq            #0x23f6f4
    // 0x23f6b4: r0 = primaryFocus()
    //     0x23f6b4: bl              #0x240058  ; [package:flutter/src/widgets/focus_manager.dart] ::primaryFocus
    // 0x23f6b8: cmp             w0, NULL
    // 0x23f6bc: b.ne            #0x23f6c8
    // 0x23f6c0: r0 = Null
    //     0x23f6c0: mov             x0, NULL
    // 0x23f6c4: b               #0x23f6d4
    // 0x23f6c8: LoadField: r1 = r0->field_33
    //     0x23f6c8: ldur            w1, [x0, #0x33]
    // 0x23f6cc: DecompressPointer r1
    //     0x23f6cc: add             x1, x1, HEAP, lsl #32
    // 0x23f6d0: mov             x0, x1
    // 0x23f6d4: cmp             w0, NULL
    // 0x23f6d8: b.eq            #0x23f6f4
    // 0x23f6dc: r16 = <Intent>
    //     0x23f6dc: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x23f6e0: stp             x0, x16, [SP, #8]
    // 0x23f6e4: ldur            x16, [fp, #-8]
    // 0x23f6e8: str             x16, [SP]
    // 0x23f6ec: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x23f6ec: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x23f6f0: r0 = invoke()
    //     0x23f6f0: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x23f6f4: r0 = Null
    //     0x23f6f4: mov             x0, NULL
    // 0x23f6f8: LeaveFrame
    //     0x23f6f8: mov             SP, fp
    //     0x23f6fc: ldp             fp, lr, [SP], #0x10
    // 0x23f700: ret
    //     0x23f700: ret             
    // 0x23f704: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x23f704: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x23f708: b               #0x23f69c
  }
  get _ _hasInputConnection(/* No info */) {
    // ** addr: 0x2413a8, size: 0x68
    // 0x2413a8: EnterFrame
    //     0x2413a8: stp             fp, lr, [SP, #-0x10]!
    //     0x2413ac: mov             fp, SP
    // 0x2413b0: AllocStack(0x8)
    //     0x2413b0: sub             SP, SP, #8
    // 0x2413b4: CheckStackOverflow
    //     0x2413b4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2413b8: cmp             SP, x16
    //     0x2413bc: b.ls            #0x241408
    // 0x2413c0: ldr             x0, [fp, #0x10]
    // 0x2413c4: LoadField: r1 = r0->field_3b
    //     0x2413c4: ldur            w1, [x0, #0x3b]
    // 0x2413c8: DecompressPointer r1
    //     0x2413c8: add             x1, x1, HEAP, lsl #32
    // 0x2413cc: cmp             w1, NULL
    // 0x2413d0: b.ne            #0x2413dc
    // 0x2413d4: r1 = Null
    //     0x2413d4: mov             x1, NULL
    // 0x2413d8: b               #0x2413e8
    // 0x2413dc: str             x1, [SP]
    // 0x2413e0: r0 = attached()
    //     0x2413e0: bl              #0x241410  ; [package:flutter/src/services/text_input.dart] TextInputConnection::attached
    // 0x2413e4: mov             x1, x0
    // 0x2413e8: cmp             w1, NULL
    // 0x2413ec: b.ne            #0x2413f8
    // 0x2413f0: r0 = false
    //     0x2413f0: add             x0, NULL, #0x30  ; false
    // 0x2413f4: b               #0x2413fc
    // 0x2413f8: mov             x0, x1
    // 0x2413fc: LeaveFrame
    //     0x2413fc: mov             SP, fp
    //     0x241400: ldp             fp, lr, [SP], #0x10
    // 0x241404: ret
    //     0x241404: ret             
    // 0x241408: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x241408: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x24140c: b               #0x2413c0
  }
  _ _bringIntoViewBySelectionState(/* No info */) {
    // ** addr: 0x241470, size: 0x94
    // 0x241470: EnterFrame
    //     0x241470: stp             fp, lr, [SP, #-0x10]!
    //     0x241474: mov             fp, SP
    // 0x241478: AllocStack(0x10)
    //     0x241478: sub             SP, SP, #0x10
    // 0x24147c: CheckStackOverflow
    //     0x24147c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x241480: cmp             SP, x16
    //     0x241484: b.ls            #0x2414fc
    // 0x241488: ldr             x0, [fp, #0x10]
    // 0x24148c: r16 = Instance_SelectionChangedCause
    //     0x24148c: ldr             x16, [PP, #0x57a8]  ; [pp+0x57a8] Obj!SelectionChangedCause@4806e1
    // 0x241490: cmp             w0, w16
    // 0x241494: b.ne            #0x2414ec
    // 0x241498: ldr             x1, [fp, #0x20]
    // 0x24149c: ldr             x0, [fp, #0x18]
    // 0x2414a0: LoadField: r2 = r1->field_17
    //     0x2414a0: ldur            x2, [x1, #0x17]
    // 0x2414a4: LoadField: r3 = r0->field_17
    //     0x2414a4: ldur            x3, [x0, #0x17]
    // 0x2414a8: cmp             x2, x3
    // 0x2414ac: b.eq            #0x2414c8
    // 0x2414b0: str             x0, [SP]
    // 0x2414b4: r0 = base()
    //     0x2414b4: bl              #0x241e04  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0x2414b8: ldr             x16, [fp, #0x28]
    // 0x2414bc: stp             x0, x16, [SP]
    // 0x2414c0: r0 = bringIntoView()
    //     0x2414c0: bl              #0x241504  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x2414c4: b               #0x2414ec
    // 0x2414c8: LoadField: r2 = r1->field_1f
    //     0x2414c8: ldur            x2, [x1, #0x1f]
    // 0x2414cc: LoadField: r1 = r0->field_1f
    //     0x2414cc: ldur            x1, [x0, #0x1f]
    // 0x2414d0: cmp             x2, x1
    // 0x2414d4: b.eq            #0x2414ec
    // 0x2414d8: str             x0, [SP]
    // 0x2414dc: r0 = extent()
    //     0x2414dc: bl              #0x1fc3bc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x2414e0: ldr             x16, [fp, #0x28]
    // 0x2414e4: stp             x0, x16, [SP]
    // 0x2414e8: r0 = bringIntoView()
    //     0x2414e8: bl              #0x241504  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x2414ec: r0 = Null
    //     0x2414ec: mov             x0, NULL
    // 0x2414f0: LeaveFrame
    //     0x2414f0: mov             SP, fp
    //     0x2414f4: ldp             fp, lr, [SP], #0x10
    // 0x2414f8: ret
    //     0x2414f8: ret             
    // 0x2414fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2414fc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x241500: b               #0x241488
  }
  _ bringIntoView(/* No info */) {
    // ** addr: 0x241504, size: 0xb4
    // 0x241504: EnterFrame
    //     0x241504: stp             fp, lr, [SP, #-0x10]!
    //     0x241508: mov             fp, SP
    // 0x24150c: AllocStack(0x18)
    //     0x24150c: sub             SP, SP, #0x18
    // 0x241510: CheckStackOverflow
    //     0x241510: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x241514: cmp             SP, x16
    //     0x241518: b.ls            #0x2415b0
    // 0x24151c: ldr             x1, [fp, #0x18]
    // 0x241520: LoadField: r0 = r1->field_ab
    //     0x241520: ldur            w0, [x1, #0xab]
    // 0x241524: DecompressPointer r0
    //     0x241524: add             x0, x0, HEAP, lsl #32
    // 0x241528: r16 = Sentinel
    //     0x241528: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x24152c: cmp             w0, w16
    // 0x241530: b.ne            #0x24153c
    // 0x241534: r2 = renderEditable
    //     0x241534: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x241538: r0 = InitLateFinalInstanceField()
    //     0x241538: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x24153c: ldr             x16, [fp, #0x10]
    // 0x241540: stp             x16, x0, [SP]
    // 0x241544: r0 = getLocalRectForCaret()
    //     0x241544: bl              #0x235354  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x241548: ldr             x16, [fp, #0x18]
    // 0x24154c: stp             x0, x16, [SP]
    // 0x241550: r0 = _getOffsetToRevealCaret()
    //     0x241550: bl              #0x241b14  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_getOffsetToRevealCaret
    // 0x241554: stur            x0, [fp, #-8]
    // 0x241558: ldr             x16, [fp, #0x18]
    // 0x24155c: str             x16, [SP]
    // 0x241560: r0 = _scrollController()
    //     0x241560: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x241564: mov             x1, x0
    // 0x241568: ldur            x0, [fp, #-8]
    // 0x24156c: LoadField: d0 = r0->field_7
    //     0x24156c: ldur            d0, [x0, #7]
    // 0x241570: str             x1, [SP, #8]
    // 0x241574: str             d0, [SP]
    // 0x241578: r0 = jumpTo()
    //     0x241578: bl              #0x2415b8  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::jumpTo
    // 0x24157c: ldr             x0, [fp, #0x18]
    // 0x241580: LoadField: r1 = r0->field_ab
    //     0x241580: ldur            w1, [x0, #0xab]
    // 0x241584: DecompressPointer r1
    //     0x241584: add             x1, x1, HEAP, lsl #32
    // 0x241588: ldur            x0, [fp, #-8]
    // 0x24158c: LoadField: r2 = r0->field_f
    //     0x24158c: ldur            w2, [x0, #0xf]
    // 0x241590: DecompressPointer r2
    //     0x241590: add             x2, x2, HEAP, lsl #32
    // 0x241594: stp             x2, x1, [SP]
    // 0x241598: r4 = const [0, 0x2, 0x2, 0x1, rect, 0x1, null]
    //     0x241598: ldr             x4, [PP, #0x5968]  ; [pp+0x5968] List(7) [0, 0x2, 0x2, 0x1, "rect", 0x1, Null]
    // 0x24159c: r0 = showOnScreen()
    //     0x24159c: bl              #0x205150  ; [package:flutter/src/rendering/object.dart] RenderObject::showOnScreen
    // 0x2415a0: r0 = Null
    //     0x2415a0: mov             x0, NULL
    // 0x2415a4: LeaveFrame
    //     0x2415a4: mov             SP, fp
    //     0x2415a8: ldp             fp, lr, [SP], #0x10
    // 0x2415ac: ret
    //     0x2415ac: ret             
    // 0x2415b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2415b0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2415b4: b               #0x24151c
  }
  get _ _scrollController(/* No info */) {
    // ** addr: 0x2419b8, size: 0x94
    // 0x2419b8: EnterFrame
    //     0x2419b8: stp             fp, lr, [SP, #-0x10]!
    //     0x2419bc: mov             fp, SP
    // 0x2419c0: AllocStack(0x10)
    //     0x2419c0: sub             SP, SP, #0x10
    // 0x2419c4: CheckStackOverflow
    //     0x2419c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2419c8: cmp             SP, x16
    //     0x2419cc: b.ls            #0x241a40
    // 0x2419d0: ldr             x0, [fp, #0x10]
    // 0x2419d4: LoadField: r1 = r0->field_b
    //     0x2419d4: ldur            w1, [x0, #0xb]
    // 0x2419d8: DecompressPointer r1
    //     0x2419d8: add             x1, x1, HEAP, lsl #32
    // 0x2419dc: cmp             w1, NULL
    // 0x2419e0: b.eq            #0x241a48
    // 0x2419e4: LoadField: r1 = r0->field_47
    //     0x2419e4: ldur            w1, [x0, #0x47]
    // 0x2419e8: DecompressPointer r1
    //     0x2419e8: add             x1, x1, HEAP, lsl #32
    // 0x2419ec: cmp             w1, NULL
    // 0x2419f0: b.ne            #0x241a30
    // 0x2419f4: r0 = ScrollController()
    //     0x2419f4: bl              #0x241b08  ; AllocateScrollControllerStub -> ScrollController (size=0x40)
    // 0x2419f8: stur            x0, [fp, #-8]
    // 0x2419fc: str             x0, [SP]
    // 0x241a00: r0 = ScrollController()
    //     0x241a00: bl              #0x241a4c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::ScrollController
    // 0x241a04: ldur            x0, [fp, #-8]
    // 0x241a08: ldr             x2, [fp, #0x10]
    // 0x241a0c: StoreField: r2->field_47 = r0
    //     0x241a0c: stur            w0, [x2, #0x47]
    //     0x241a10: ldurb           w16, [x2, #-1]
    //     0x241a14: ldurb           w17, [x0, #-1]
    //     0x241a18: and             x16, x17, x16, lsr #2
    //     0x241a1c: tst             x16, HEAP, lsr #32
    //     0x241a20: b.eq            #0x241a28
    //     0x241a24: bl              #0x3e4628
    // 0x241a28: ldur            x0, [fp, #-8]
    // 0x241a2c: b               #0x241a34
    // 0x241a30: mov             x0, x1
    // 0x241a34: LeaveFrame
    //     0x241a34: mov             SP, fp
    //     0x241a38: ldp             fp, lr, [SP], #0x10
    // 0x241a3c: ret
    //     0x241a3c: ret             
    // 0x241a40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x241a40: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x241a44: b               #0x2419d0
    // 0x241a48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x241a48: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getOffsetToRevealCaret(/* No info */) {
    // ** addr: 0x241b14, size: 0x24c
    // 0x241b14: EnterFrame
    //     0x241b14: stp             fp, lr, [SP, #-0x10]!
    //     0x241b18: mov             fp, SP
    // 0x241b1c: AllocStack(0x28)
    //     0x241b1c: sub             SP, SP, #0x28
    // 0x241b20: CheckStackOverflow
    //     0x241b20: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x241b24: cmp             SP, x16
    //     0x241b28: b.ls            #0x241d48
    // 0x241b2c: ldr             x16, [fp, #0x18]
    // 0x241b30: str             x16, [SP]
    // 0x241b34: r0 = _scrollController()
    //     0x241b34: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x241b38: LoadField: r1 = r0->field_3b
    //     0x241b38: ldur            w1, [x0, #0x3b]
    // 0x241b3c: DecompressPointer r1
    //     0x241b3c: add             x1, x1, HEAP, lsl #32
    // 0x241b40: str             x1, [SP]
    // 0x241b44: r0 = single()
    //     0x241b44: bl              #0x1b91cc  ; [dart:core] _GrowableList::single
    // 0x241b48: str             x0, [SP]
    // 0x241b4c: r0 = _simpleInstanceOfTrue()
    //     0x241b4c: bl              #0x3ddf68  ; [dart:core] Object::_simpleInstanceOfTrue
    // 0x241b50: ldr             x1, [fp, #0x18]
    // 0x241b54: LoadField: r0 = r1->field_ab
    //     0x241b54: ldur            w0, [x1, #0xab]
    // 0x241b58: DecompressPointer r0
    //     0x241b58: add             x0, x0, HEAP, lsl #32
    // 0x241b5c: r16 = Sentinel
    //     0x241b5c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x241b60: cmp             w0, w16
    // 0x241b64: b.ne            #0x241b70
    // 0x241b68: r2 = renderEditable
    //     0x241b68: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x241b6c: r0 = InitLateFinalInstanceField()
    //     0x241b6c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x241b70: str             x0, [SP]
    // 0x241b74: r0 = size()
    //     0x241b74: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x241b78: mov             x1, x0
    // 0x241b7c: ldr             x0, [fp, #0x18]
    // 0x241b80: LoadField: r2 = r0->field_b
    //     0x241b80: ldur            w2, [x0, #0xb]
    // 0x241b84: DecompressPointer r2
    //     0x241b84: add             x2, x2, HEAP, lsl #32
    // 0x241b88: cmp             w2, NULL
    // 0x241b8c: b.eq            #0x241d50
    // 0x241b90: ldr             x2, [fp, #0x10]
    // 0x241b94: LoadField: d0 = r2->field_17
    //     0x241b94: ldur            d0, [x2, #0x17]
    // 0x241b98: LoadField: d1 = r2->field_7
    //     0x241b98: ldur            d1, [x2, #7]
    // 0x241b9c: fsub            d2, d0, d1
    // 0x241ba0: LoadField: d3 = r1->field_7
    //     0x241ba0: ldur            d3, [x1, #7]
    // 0x241ba4: fcmp            d2, d3
    // 0x241ba8: b.lt            #0x241be0
    // 0x241bac: d0 = 2.000000
    //     0x241bac: fmov            d0, #2.00000000
    // 0x241bb0: d0 = 2.000000
    //     0x241bb0: fmov            d0, #2.00000000
    // 0x241bb4: fdiv            d1, d3, d0
    // 0x241bb8: stur            d1, [fp, #-0x10]
    // 0x241bbc: str             x2, [SP]
    // 0x241bc0: r0 = center()
    //     0x241bc0: bl              #0x2352ec  ; [dart:ui] Rect::center
    // 0x241bc4: LoadField: d0 = r0->field_7
    //     0x241bc4: ldur            d0, [x0, #7]
    // 0x241bc8: ldur            d1, [fp, #-0x10]
    // 0x241bcc: fsub            d2, d1, d0
    // 0x241bd0: mov             v0.16b, v2.16b
    // 0x241bd4: d2 = 0.000000
    //     0x241bd4: eor             v2.16b, v2.16b, v2.16b
    // 0x241bd8: d2 = 0.000000
    //     0x241bd8: eor             v2.16b, v2.16b, v2.16b
    // 0x241bdc: b               #0x241c14
    // 0x241be0: d2 = 0.000000
    //     0x241be0: eor             v2.16b, v2.16b, v2.16b
    // 0x241be4: d2 = 0.000000
    //     0x241be4: eor             v2.16b, v2.16b, v2.16b
    // 0x241be8: fsub            d4, d0, d3
    // 0x241bec: fcmp            d4, d2
    // 0x241bf0: b.le            #0x241bfc
    // 0x241bf4: mov             v0.16b, v4.16b
    // 0x241bf8: b               #0x241c14
    // 0x241bfc: fcmp            d2, d1
    // 0x241c00: b.le            #0x241c0c
    // 0x241c04: mov             v0.16b, v1.16b
    // 0x241c08: b               #0x241c14
    // 0x241c0c: d0 = 0.000000
    //     0x241c0c: eor             v0.16b, v0.16b, v0.16b
    // 0x241c10: d0 = 0.000000
    //     0x241c10: eor             v0.16b, v0.16b, v0.16b
    // 0x241c14: stur            d0, [fp, #-0x10]
    // 0x241c18: ldr             x16, [fp, #0x18]
    // 0x241c1c: str             x16, [SP]
    // 0x241c20: r0 = _scrollController()
    //     0x241c20: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x241c24: str             x0, [SP]
    // 0x241c28: r0 = offset()
    //     0x241c28: bl              #0x241dac  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::offset
    // 0x241c2c: mov             v1.16b, v0.16b
    // 0x241c30: ldur            d0, [fp, #-0x10]
    // 0x241c34: fadd            d2, d0, d1
    // 0x241c38: stur            d2, [fp, #-0x18]
    // 0x241c3c: ldr             x16, [fp, #0x18]
    // 0x241c40: str             x16, [SP]
    // 0x241c44: r0 = _scrollController()
    //     0x241c44: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x241c48: str             x0, [SP]
    // 0x241c4c: r0 = position()
    //     0x241c4c: bl              #0x241d6c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::position
    // 0x241c50: LoadField: r1 = r0->field_33
    //     0x241c50: ldur            w1, [x0, #0x33]
    // 0x241c54: DecompressPointer r1
    //     0x241c54: add             x1, x1, HEAP, lsl #32
    // 0x241c58: cmp             w1, NULL
    // 0x241c5c: b.eq            #0x241d54
    // 0x241c60: ldr             x16, [fp, #0x18]
    // 0x241c64: str             x16, [SP]
    // 0x241c68: r0 = _scrollController()
    //     0x241c68: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x241c6c: LoadField: r1 = r0->field_3b
    //     0x241c6c: ldur            w1, [x0, #0x3b]
    // 0x241c70: DecompressPointer r1
    //     0x241c70: add             x1, x1, HEAP, lsl #32
    // 0x241c74: str             x1, [SP]
    // 0x241c78: r0 = single()
    //     0x241c78: bl              #0x1b91cc  ; [dart:core] _GrowableList::single
    // 0x241c7c: LoadField: r1 = r0->field_37
    //     0x241c7c: ldur            w1, [x0, #0x37]
    // 0x241c80: DecompressPointer r1
    //     0x241c80: add             x1, x1, HEAP, lsl #32
    // 0x241c84: cmp             w1, NULL
    // 0x241c88: b.eq            #0x241d58
    // 0x241c8c: ldur            d0, [fp, #-0x18]
    // 0x241c90: d1 = 0.000000
    //     0x241c90: eor             v1.16b, v1.16b, v1.16b
    // 0x241c94: d1 = 0.000000
    //     0x241c94: eor             v1.16b, v1.16b, v1.16b
    // 0x241c98: fcmp            d1, d0
    // 0x241c9c: b.le            #0x241cac
    // 0x241ca0: d0 = 0.000000
    //     0x241ca0: eor             v0.16b, v0.16b, v0.16b
    // 0x241ca4: d0 = 0.000000
    //     0x241ca4: eor             v0.16b, v0.16b, v0.16b
    // 0x241ca8: b               #0x241ccc
    // 0x241cac: LoadField: d1 = r1->field_7
    //     0x241cac: ldur            d1, [x1, #7]
    // 0x241cb0: fcmp            d0, d1
    // 0x241cb4: b.le            #0x241cc0
    // 0x241cb8: mov             v0.16b, v1.16b
    // 0x241cbc: b               #0x241ccc
    // 0x241cc0: fcmp            d0, d0
    // 0x241cc4: b.vc            #0x241ccc
    // 0x241cc8: mov             v0.16b, v1.16b
    // 0x241ccc: stur            d0, [fp, #-0x10]
    // 0x241cd0: ldr             x16, [fp, #0x18]
    // 0x241cd4: str             x16, [SP]
    // 0x241cd8: r0 = _scrollController()
    //     0x241cd8: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x241cdc: LoadField: r1 = r0->field_3b
    //     0x241cdc: ldur            w1, [x0, #0x3b]
    // 0x241ce0: DecompressPointer r1
    //     0x241ce0: add             x1, x1, HEAP, lsl #32
    // 0x241ce4: str             x1, [SP]
    // 0x241ce8: r0 = single()
    //     0x241ce8: bl              #0x1b91cc  ; [dart:core] _GrowableList::single
    // 0x241cec: LoadField: r1 = r0->field_43
    //     0x241cec: ldur            w1, [x0, #0x43]
    // 0x241cf0: DecompressPointer r1
    //     0x241cf0: add             x1, x1, HEAP, lsl #32
    // 0x241cf4: cmp             w1, NULL
    // 0x241cf8: b.eq            #0x241d5c
    // 0x241cfc: LoadField: d0 = r1->field_7
    //     0x241cfc: ldur            d0, [x1, #7]
    // 0x241d00: ldur            d1, [fp, #-0x10]
    // 0x241d04: fsub            d2, d0, d1
    // 0x241d08: r16 = Instance_Offset
    //     0x241d08: ldr             x16, [PP, #0x5bb8]  ; [pp+0x5bb8] Obj!Offset@47d651
    // 0x241d0c: str             x16, [SP, #8]
    // 0x241d10: str             d2, [SP]
    // 0x241d14: r0 = *()
    //     0x241d14: bl              #0x193df8  ; [dart:ui] Offset::*
    // 0x241d18: ldr             x16, [fp, #0x10]
    // 0x241d1c: stp             x0, x16, [SP]
    // 0x241d20: r0 = shift()
    //     0x241d20: bl              #0x1eb39c  ; [dart:ui] Rect::shift
    // 0x241d24: stur            x0, [fp, #-8]
    // 0x241d28: r0 = RevealedOffset()
    //     0x241d28: bl              #0x241d60  ; AllocateRevealedOffsetStub -> RevealedOffset (size=0x14)
    // 0x241d2c: ldur            d0, [fp, #-0x10]
    // 0x241d30: StoreField: r0->field_7 = d0
    //     0x241d30: stur            d0, [x0, #7]
    // 0x241d34: ldur            x1, [fp, #-8]
    // 0x241d38: StoreField: r0->field_f = r1
    //     0x241d38: stur            w1, [x0, #0xf]
    // 0x241d3c: LeaveFrame
    //     0x241d3c: mov             SP, fp
    //     0x241d40: ldp             fp, lr, [SP], #0x10
    // 0x241d44: ret
    //     0x241d44: ret             
    // 0x241d48: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x241d48: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x241d4c: b               #0x241b2c
    // 0x241d50: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x241d50: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x241d54: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x241d54: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x241d58: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x241d58: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x241d5c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x241d5c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _handleSelectionChanged(/* No info */) {
    // ** addr: 0x241e80, size: 0x364
    // 0x241e80: EnterFrame
    //     0x241e80: stp             fp, lr, [SP, #-0x10]!
    //     0x241e84: mov             fp, SP
    // 0x241e88: AllocStack(0x88)
    //     0x241e88: sub             SP, SP, #0x88
    // 0x241e8c: CheckStackOverflow
    //     0x241e8c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x241e90: cmp             SP, x16
    //     0x241e94: b.ls            #0x2421c0
    // 0x241e98: ldr             x0, [fp, #0x20]
    // 0x241e9c: LoadField: r1 = r0->field_b
    //     0x241e9c: ldur            w1, [x0, #0xb]
    // 0x241ea0: DecompressPointer r1
    //     0x241ea0: add             x1, x1, HEAP, lsl #32
    // 0x241ea4: cmp             w1, NULL
    // 0x241ea8: b.eq            #0x2421c8
    // 0x241eac: LoadField: r2 = r1->field_b
    //     0x241eac: ldur            w2, [x1, #0xb]
    // 0x241eb0: DecompressPointer r2
    //     0x241eb0: add             x2, x2, HEAP, lsl #32
    // 0x241eb4: ldr             x16, [fp, #0x18]
    // 0x241eb8: stp             x16, x2, [SP]
    // 0x241ebc: r0 = isSelectionWithinTextBounds()
    //     0x241ebc: bl              #0x245800  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::isSelectionWithinTextBounds
    // 0x241ec0: tbz             w0, #4, #0x241ed4
    // 0x241ec4: r0 = Null
    //     0x241ec4: mov             x0, NULL
    // 0x241ec8: LeaveFrame
    //     0x241ec8: mov             SP, fp
    //     0x241ecc: ldp             fp, lr, [SP], #0x10
    // 0x241ed0: ret
    //     0x241ed0: ret             
    // 0x241ed4: ldr             x0, [fp, #0x20]
    // 0x241ed8: ldr             x1, [fp, #0x10]
    // 0x241edc: LoadField: r2 = r0->field_b
    //     0x241edc: ldur            w2, [x0, #0xb]
    // 0x241ee0: DecompressPointer r2
    //     0x241ee0: add             x2, x2, HEAP, lsl #32
    // 0x241ee4: cmp             w2, NULL
    // 0x241ee8: b.eq            #0x2421cc
    // 0x241eec: LoadField: r3 = r2->field_b
    //     0x241eec: ldur            w3, [x2, #0xb]
    // 0x241ef0: DecompressPointer r3
    //     0x241ef0: add             x3, x3, HEAP, lsl #32
    // 0x241ef4: ldr             x16, [fp, #0x18]
    // 0x241ef8: stp             x16, x3, [SP]
    // 0x241efc: r0 = selection=()
    //     0x241efc: bl              #0x2456bc  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::selection=
    // 0x241f00: ldr             x0, [fp, #0x10]
    // 0x241f04: cmp             w0, NULL
    // 0x241f08: b.eq            #0x241f60
    // 0x241f0c: r16 = Instance_SelectionChangedCause
    //     0x241f0c: ldr             x16, [PP, #0x57a0]  ; [pp+0x57a0] Obj!SelectionChangedCause@480741
    // 0x241f10: cmp             w0, w16
    // 0x241f14: b.eq            #0x241f60
    // 0x241f18: r16 = Instance_SelectionChangedCause
    //     0x241f18: ldr             x16, [PP, #0x57a8]  ; [pp+0x57a8] Obj!SelectionChangedCause@4806e1
    // 0x241f1c: cmp             w0, w16
    // 0x241f20: b.eq            #0x241f60
    // 0x241f24: r16 = Instance_SelectionChangedCause
    //     0x241f24: ldr             x16, [PP, #0x5788]  ; [pp+0x5788] Obj!SelectionChangedCause@4806a1
    // 0x241f28: cmp             w0, w16
    // 0x241f2c: b.eq            #0x241f60
    // 0x241f30: r16 = Instance_SelectionChangedCause
    //     0x241f30: ldr             x16, [PP, #0x57b0]  ; [pp+0x57b0] Obj!SelectionChangedCause@480761
    // 0x241f34: cmp             w0, w16
    // 0x241f38: b.eq            #0x241f60
    // 0x241f3c: r16 = Instance_SelectionChangedCause
    //     0x241f3c: ldr             x16, [PP, #0x57b8]  ; [pp+0x57b8] Obj!SelectionChangedCause@4806c1
    // 0x241f40: cmp             w0, w16
    // 0x241f44: b.eq            #0x241f60
    // 0x241f48: r16 = Instance_SelectionChangedCause
    //     0x241f48: ldr             x16, [PP, #0x57c0]  ; [pp+0x57c0] Obj!SelectionChangedCause@480721
    // 0x241f4c: cmp             w0, w16
    // 0x241f50: b.eq            #0x241f60
    // 0x241f54: r16 = Instance_SelectionChangedCause
    //     0x241f54: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x241f58: cmp             w0, w16
    // 0x241f5c: b.ne            #0x241f70
    // 0x241f60: ldr             x16, [fp, #0x20]
    // 0x241f64: str             x16, [SP]
    // 0x241f68: r0 = requestKeyboard()
    //     0x241f68: bl              #0x24360c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::requestKeyboard
    // 0x241f6c: b               #0x241f98
    // 0x241f70: r16 = Instance_SelectionChangedCause
    //     0x241f70: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x241f74: cmp             w0, w16
    // 0x241f78: b.ne            #0x241f98
    // 0x241f7c: ldr             x16, [fp, #0x20]
    // 0x241f80: str             x16, [SP]
    // 0x241f84: r0 = wantKeepAlive()
    //     0x241f84: bl              #0x23dc64  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::wantKeepAlive
    // 0x241f88: tbnz            w0, #4, #0x241f98
    // 0x241f8c: ldr             x16, [fp, #0x20]
    // 0x241f90: str             x16, [SP]
    // 0x241f94: r0 = requestKeyboard()
    //     0x241f94: bl              #0x24360c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::requestKeyboard
    // 0x241f98: ldr             x0, [fp, #0x20]
    // 0x241f9c: LoadField: r1 = r0->field_b
    //     0x241f9c: ldur            w1, [x0, #0xb]
    // 0x241fa0: DecompressPointer r1
    //     0x241fa0: add             x1, x1, HEAP, lsl #32
    // 0x241fa4: cmp             w1, NULL
    // 0x241fa8: b.eq            #0x2421d0
    // 0x241fac: LoadField: r2 = r0->field_3f
    //     0x241fac: ldur            w2, [x0, #0x3f]
    // 0x241fb0: DecompressPointer r2
    //     0x241fb0: add             x2, x2, HEAP, lsl #32
    // 0x241fb4: cmp             w2, NULL
    // 0x241fb8: b.ne            #0x241fec
    // 0x241fbc: str             x0, [SP]
    // 0x241fc0: r0 = _createSelectionOverlay()
    //     0x241fc0: bl              #0x245c6c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay
    // 0x241fc4: ldr             x3, [fp, #0x20]
    // 0x241fc8: StoreField: r3->field_3f = r0
    //     0x241fc8: stur            w0, [x3, #0x3f]
    //     0x241fcc: ldurb           w16, [x3, #-1]
    //     0x241fd0: ldurb           w17, [x0, #-1]
    //     0x241fd4: and             x16, x17, x16, lsr #2
    //     0x241fd8: tst             x16, HEAP, lsr #32
    //     0x241fdc: b.eq            #0x241fe4
    //     0x241fe0: bl              #0x3e4648
    // 0x241fe4: mov             x0, x3
    // 0x241fe8: b               #0x24200c
    // 0x241fec: mov             x3, x0
    // 0x241ff0: LoadField: r0 = r1->field_b
    //     0x241ff0: ldur            w0, [x1, #0xb]
    // 0x241ff4: DecompressPointer r0
    //     0x241ff4: add             x0, x0, HEAP, lsl #32
    // 0x241ff8: LoadField: r1 = r0->field_27
    //     0x241ff8: ldur            w1, [x0, #0x27]
    // 0x241ffc: DecompressPointer r1
    //     0x241ffc: add             x1, x1, HEAP, lsl #32
    // 0x242000: stp             x1, x2, [SP]
    // 0x242004: r0 = update()
    //     0x242004: bl              #0x24355c  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::update
    // 0x242008: ldr             x0, [fp, #0x20]
    // 0x24200c: LoadField: r1 = r0->field_3f
    //     0x24200c: ldur            w1, [x0, #0x3f]
    // 0x242010: DecompressPointer r1
    //     0x242010: add             x1, x1, HEAP, lsl #32
    // 0x242014: cmp             w1, NULL
    // 0x242018: b.eq            #0x2421d4
    // 0x24201c: LoadField: r2 = r0->field_b
    //     0x24201c: ldur            w2, [x0, #0xb]
    // 0x242020: DecompressPointer r2
    //     0x242020: add             x2, x2, HEAP, lsl #32
    // 0x242024: cmp             w2, NULL
    // 0x242028: b.eq            #0x2421d8
    // 0x24202c: LoadField: r3 = r2->field_2f
    //     0x24202c: ldur            w3, [x2, #0x2f]
    // 0x242030: DecompressPointer r3
    //     0x242030: add             x3, x3, HEAP, lsl #32
    // 0x242034: stp             x3, x1, [SP]
    // 0x242038: r0 = handlesVisible=()
    //     0x242038: bl              #0x2433b4  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::handlesVisible=
    // 0x24203c: ldr             x0, [fp, #0x20]
    // 0x242040: LoadField: r1 = r0->field_3f
    //     0x242040: ldur            w1, [x0, #0x3f]
    // 0x242044: DecompressPointer r1
    //     0x242044: add             x1, x1, HEAP, lsl #32
    // 0x242048: cmp             w1, NULL
    // 0x24204c: b.eq            #0x2421dc
    // 0x242050: str             x1, [SP]
    // 0x242054: r0 = showHandles()
    //     0x242054: bl              #0x2421e4  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::showHandles
    // 0x242058: ldr             x1, [fp, #0x20]
    // 0x24205c: LoadField: r0 = r1->field_b
    //     0x24205c: ldur            w0, [x1, #0xb]
    // 0x242060: DecompressPointer r0
    //     0x242060: add             x0, x0, HEAP, lsl #32
    // 0x242064: cmp             w0, NULL
    // 0x242068: b.eq            #0x2421e0
    // 0x24206c: LoadField: r2 = r0->field_ab
    //     0x24206c: ldur            w2, [x0, #0xab]
    // 0x242070: DecompressPointer r2
    //     0x242070: add             x2, x2, HEAP, lsl #32
    // 0x242074: stur            x2, [fp, #-0x58]
    // 0x242078: cmp             w2, NULL
    // 0x24207c: b.eq            #0x2420a0
    // 0x242080: ldr             x16, [fp, #0x18]
    // 0x242084: stp             x16, x2, [SP, #8]
    // 0x242088: ldr             x16, [fp, #0x10]
    // 0x24208c: str             x16, [SP]
    // 0x242090: mov             x0, x2
    // 0x242094: ClosureCall
    //     0x242094: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x242098: ldur            x2, [x0, #0x1f]
    //     0x24209c: blr             x2
    // 0x2420a0: ldr             x0, [fp, #0x20]
    // 0x2420a4: b               #0x242170
    // 0x2420a8: sub             SP, fp, #0x88
    // 0x2420ac: mov             x3, x0
    // 0x2420b0: stur            x0, [fp, #-0x58]
    // 0x2420b4: mov             x0, x1
    // 0x2420b8: stur            x1, [fp, #-0x60]
    // 0x2420bc: r1 = Null
    //     0x2420bc: mov             x1, NULL
    // 0x2420c0: r2 = 4
    //     0x2420c0: movz            x2, #0x4
    // 0x2420c4: r0 = AllocateArray()
    //     0x2420c4: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2420c8: r17 = "while calling onSelectionChanged for "
    //     0x2420c8: ldr             x17, [PP, #0x57d8]  ; [pp+0x57d8] "while calling onSelectionChanged for "
    // 0x2420cc: StoreField: r0->field_f = r17
    //     0x2420cc: stur            w17, [x0, #0xf]
    // 0x2420d0: ldr             x1, [fp, #0x10]
    // 0x2420d4: StoreField: r0->field_13 = r1
    //     0x2420d4: stur            w1, [x0, #0x13]
    // 0x2420d8: str             x0, [SP]
    // 0x2420dc: r0 = _interpolate()
    //     0x2420dc: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2420e0: r1 = Null
    //     0x2420e0: mov             x1, NULL
    // 0x2420e4: r2 = 2
    //     0x2420e4: movz            x2, #0x2
    // 0x2420e8: stur            x0, [fp, #-0x68]
    // 0x2420ec: r0 = AllocateArray()
    //     0x2420ec: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2420f0: mov             x2, x0
    // 0x2420f4: ldur            x0, [fp, #-0x68]
    // 0x2420f8: stur            x2, [fp, #-0x70]
    // 0x2420fc: StoreField: r2->field_f = r0
    //     0x2420fc: stur            w0, [x2, #0xf]
    // 0x242100: r1 = <Object>
    //     0x242100: ldr             x1, [PP, #0x2910]  ; [pp+0x2910] TypeArguments: <Object>
    // 0x242104: r0 = AllocateGrowableArray()
    //     0x242104: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x242108: mov             x2, x0
    // 0x24210c: ldur            x0, [fp, #-0x70]
    // 0x242110: stur            x2, [fp, #-0x68]
    // 0x242114: StoreField: r2->field_f = r0
    //     0x242114: stur            w0, [x2, #0xf]
    // 0x242118: r0 = 2
    //     0x242118: movz            x0, #0x2
    // 0x24211c: StoreField: r2->field_b = r0
    //     0x24211c: stur            w0, [x2, #0xb]
    // 0x242120: r1 = <List<Object>>
    //     0x242120: ldr             x1, [PP, #0x2230]  ; [pp+0x2230] TypeArguments: <List<Object>>
    // 0x242124: r0 = ErrorDescription()
    //     0x242124: bl              #0x1be81c  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x242128: mov             x1, x0
    // 0x24212c: r0 = true
    //     0x24212c: add             x0, NULL, #0x20  ; true
    // 0x242130: StoreField: r1->field_f = r0
    //     0x242130: stur            w0, [x1, #0xf]
    // 0x242134: ldur            x0, [fp, #-0x68]
    // 0x242138: StoreField: r1->field_b = r0
    //     0x242138: stur            w0, [x1, #0xb]
    // 0x24213c: r0 = FlutterErrorDetails()
    //     0x24213c: bl              #0x1be794  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x242140: mov             x1, x0
    // 0x242144: ldur            x0, [fp, #-0x58]
    // 0x242148: StoreField: r1->field_7 = r0
    //     0x242148: stur            w0, [x1, #7]
    // 0x24214c: ldur            x0, [fp, #-0x60]
    // 0x242150: StoreField: r1->field_b = r0
    //     0x242150: stur            w0, [x1, #0xb]
    // 0x242154: r0 = "widgets"
    //     0x242154: ldr             x0, [PP, #0x57e0]  ; [pp+0x57e0] "widgets"
    // 0x242158: StoreField: r1->field_f = r0
    //     0x242158: stur            w0, [x1, #0xf]
    // 0x24215c: r0 = false
    //     0x24215c: add             x0, NULL, #0x30  ; false
    // 0x242160: StoreField: r1->field_13 = r0
    //     0x242160: stur            w0, [x1, #0x13]
    // 0x242164: str             x1, [SP]
    // 0x242168: r0 = reportError()
    //     0x242168: bl              #0x1b6ba0  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x24216c: ldr             x0, [fp, #0x20]
    // 0x242170: stur            x0, [fp, #-0x58]
    // 0x242174: str             x0, [SP]
    // 0x242178: r0 = _showBlinkingCursor()
    //     0x242178: bl              #0x23dbac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x24217c: tbnz            w0, #4, #0x2421b0
    // 0x242180: ldur            x0, [fp, #-0x58]
    // 0x242184: LoadField: r1 = r0->field_1f
    //     0x242184: ldur            w1, [x0, #0x1f]
    // 0x242188: DecompressPointer r1
    //     0x242188: add             x1, x1, HEAP, lsl #32
    // 0x24218c: cmp             w1, NULL
    // 0x242190: b.eq            #0x2421b0
    // 0x242194: r16 = false
    //     0x242194: add             x16, NULL, #0x30  ; false
    // 0x242198: stp             x16, x0, [SP]
    // 0x24219c: r4 = const [0, 0x2, 0x2, 0x1, resetCharTicks, 0x1, null]
    //     0x24219c: ldr             x4, [PP, #0x55b0]  ; [pp+0x55b0] List(7) [0, 0x2, 0x2, 0x1, "resetCharTicks", 0x1, Null]
    // 0x2421a0: r0 = _stopCursorBlink()
    //     0x2421a0: bl              #0x235d24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x2421a4: ldur            x16, [fp, #-0x58]
    // 0x2421a8: str             x16, [SP]
    // 0x2421ac: r0 = _startCursorBlink()
    //     0x2421ac: bl              #0x233c28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x2421b0: r0 = Null
    //     0x2421b0: mov             x0, NULL
    // 0x2421b4: LeaveFrame
    //     0x2421b4: mov             SP, fp
    //     0x2421b8: ldp             fp, lr, [SP], #0x10
    // 0x2421bc: ret
    //     0x2421bc: ret             
    // 0x2421c0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2421c0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2421c4: b               #0x241e98
    // 0x2421c8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2421c8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2421cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2421cc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2421d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2421d0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2421d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2421d4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2421d8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2421d8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2421dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2421dc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2421e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2421e0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ requestKeyboard(/* No info */) {
    // ** addr: 0x24360c, size: 0xa0
    // 0x24360c: EnterFrame
    //     0x24360c: stp             fp, lr, [SP, #-0x10]!
    //     0x243610: mov             fp, SP
    // 0x243614: AllocStack(0x8)
    //     0x243614: sub             SP, SP, #8
    // 0x243618: CheckStackOverflow
    //     0x243618: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x24361c: cmp             SP, x16
    //     0x243620: b.ls            #0x24369c
    // 0x243624: ldr             x0, [fp, #0x10]
    // 0x243628: LoadField: r1 = r0->field_b
    //     0x243628: ldur            w1, [x0, #0xb]
    // 0x24362c: DecompressPointer r1
    //     0x24362c: add             x1, x1, HEAP, lsl #32
    // 0x243630: cmp             w1, NULL
    // 0x243634: b.eq            #0x2436a4
    // 0x243638: LoadField: r2 = r1->field_f
    //     0x243638: ldur            w2, [x1, #0xf]
    // 0x24363c: DecompressPointer r2
    //     0x24363c: add             x2, x2, HEAP, lsl #32
    // 0x243640: str             x2, [SP]
    // 0x243644: r0 = hasFocus()
    //     0x243644: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x243648: tbnz            w0, #4, #0x24365c
    // 0x24364c: ldr             x16, [fp, #0x10]
    // 0x243650: str             x16, [SP]
    // 0x243654: r0 = _openInputConnection()
    //     0x243654: bl              #0x2436ac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openInputConnection
    // 0x243658: b               #0x24368c
    // 0x24365c: ldr             x0, [fp, #0x10]
    // 0x243660: str             x0, [SP]
    // 0x243664: r0 = _flagInternalFocus()
    //     0x243664: bl              #0x2483d0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_flagInternalFocus
    // 0x243668: ldr             x0, [fp, #0x10]
    // 0x24366c: LoadField: r1 = r0->field_b
    //     0x24366c: ldur            w1, [x0, #0xb]
    // 0x243670: DecompressPointer r1
    //     0x243670: add             x1, x1, HEAP, lsl #32
    // 0x243674: cmp             w1, NULL
    // 0x243678: b.eq            #0x2436a8
    // 0x24367c: LoadField: r0 = r1->field_f
    //     0x24367c: ldur            w0, [x1, #0xf]
    // 0x243680: DecompressPointer r0
    //     0x243680: add             x0, x0, HEAP, lsl #32
    // 0x243684: str             x0, [SP]
    // 0x243688: r0 = requestFocus()
    //     0x243688: bl              #0x24837c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::requestFocus
    // 0x24368c: r0 = Null
    //     0x24368c: mov             x0, NULL
    // 0x243690: LeaveFrame
    //     0x243690: mov             SP, fp
    //     0x243694: ldp             fp, lr, [SP], #0x10
    // 0x243698: ret
    //     0x243698: ret             
    // 0x24369c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x24369c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2436a0: b               #0x243624
    // 0x2436a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2436a4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2436a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2436a8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _openInputConnection(/* No info */) {
    // ** addr: 0x2436ac, size: 0x218
    // 0x2436ac: EnterFrame
    //     0x2436ac: stp             fp, lr, [SP, #-0x10]!
    //     0x2436b0: mov             fp, SP
    // 0x2436b4: AllocStack(0x48)
    //     0x2436b4: sub             SP, SP, #0x48
    // 0x2436b8: CheckStackOverflow
    //     0x2436b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2436bc: cmp             SP, x16
    //     0x2436c0: b.ls            #0x24389c
    // 0x2436c4: ldr             x0, [fp, #0x10]
    // 0x2436c8: LoadField: r1 = r0->field_b
    //     0x2436c8: ldur            w1, [x0, #0xb]
    // 0x2436cc: DecompressPointer r1
    //     0x2436cc: add             x1, x1, HEAP, lsl #32
    // 0x2436d0: cmp             w1, NULL
    // 0x2436d4: b.eq            #0x2438a4
    // 0x2436d8: str             x0, [SP]
    // 0x2436dc: r0 = _hasInputConnection()
    //     0x2436dc: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x2436e0: tbz             w0, #4, #0x243870
    // 0x2436e4: ldr             x0, [fp, #0x10]
    // 0x2436e8: LoadField: r1 = r0->field_b
    //     0x2436e8: ldur            w1, [x0, #0xb]
    // 0x2436ec: DecompressPointer r1
    //     0x2436ec: add             x1, x1, HEAP, lsl #32
    // 0x2436f0: cmp             w1, NULL
    // 0x2436f4: b.eq            #0x2438a8
    // 0x2436f8: LoadField: r2 = r1->field_b
    //     0x2436f8: ldur            w2, [x1, #0xb]
    // 0x2436fc: DecompressPointer r2
    //     0x2436fc: add             x2, x2, HEAP, lsl #32
    // 0x243700: LoadField: r3 = r2->field_27
    //     0x243700: ldur            w3, [x2, #0x27]
    // 0x243704: DecompressPointer r3
    //     0x243704: add             x3, x3, HEAP, lsl #32
    // 0x243708: stur            x3, [fp, #-8]
    // 0x24370c: r17 = 263
    //     0x24370c: movz            x17, #0x107
    // 0x243710: ldr             w2, [x1, x17]
    // 0x243714: DecompressPointer r2
    //     0x243714: add             x2, x2, HEAP, lsl #32
    // 0x243718: str             x2, [SP]
    // 0x24371c: r0 = textInputConfiguration()
    //     0x24371c: bl              #0x2451fc  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x243720: ldr             x16, [fp, #0x10]
    // 0x243724: str             x16, [SP]
    // 0x243728: r0 = _effectiveAutofillClient()
    //     0x243728: bl              #0x2451c4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_effectiveAutofillClient
    // 0x24372c: str             x0, [SP]
    // 0x243730: r0 = textInputConfiguration()
    //     0x243730: bl              #0x2451fc  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x243734: ldr             x16, [fp, #0x10]
    // 0x243738: stp             x0, x16, [SP]
    // 0x24373c: r0 = attach()
    //     0x24373c: bl              #0x245070  ; [package:flutter/src/services/text_input.dart] TextInput::attach
    // 0x243740: ldr             x1, [fp, #0x10]
    // 0x243744: StoreField: r1->field_3b = r0
    //     0x243744: stur            w0, [x1, #0x3b]
    //     0x243748: ldurb           w16, [x1, #-1]
    //     0x24374c: ldurb           w17, [x0, #-1]
    //     0x243750: and             x16, x17, x16, lsr #2
    //     0x243754: tst             x16, HEAP, lsr #32
    //     0x243758: b.eq            #0x243760
    //     0x24375c: bl              #0x3e4608
    // 0x243760: str             x1, [SP]
    // 0x243764: r0 = _updateSizeAndTransform()
    //     0x243764: bl              #0x244cac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSizeAndTransform
    // 0x243768: ldr             x16, [fp, #0x10]
    // 0x24376c: str             x16, [SP]
    // 0x243770: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x243770: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x243774: r0 = _schedulePeriodicPostFrameCallbacks()
    //     0x243774: bl              #0x243f74  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_schedulePeriodicPostFrameCallbacks
    // 0x243778: ldr             x0, [fp, #0x10]
    // 0x24377c: LoadField: r1 = r0->field_3b
    //     0x24377c: ldur            w1, [x0, #0x3b]
    // 0x243780: DecompressPointer r1
    //     0x243780: add             x1, x1, HEAP, lsl #32
    // 0x243784: stur            x1, [fp, #-0x28]
    // 0x243788: cmp             w1, NULL
    // 0x24378c: b.eq            #0x2438ac
    // 0x243790: LoadField: r2 = r0->field_63
    //     0x243790: ldur            w2, [x0, #0x63]
    // 0x243794: DecompressPointer r2
    //     0x243794: add             x2, x2, HEAP, lsl #32
    // 0x243798: r16 = Sentinel
    //     0x243798: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x24379c: cmp             w2, w16
    // 0x2437a0: b.eq            #0x2438b0
    // 0x2437a4: LoadField: r3 = r2->field_13
    //     0x2437a4: ldur            w3, [x2, #0x13]
    // 0x2437a8: DecompressPointer r3
    //     0x2437a8: add             x3, x3, HEAP, lsl #32
    // 0x2437ac: stur            x3, [fp, #-0x20]
    // 0x2437b0: LoadField: r4 = r2->field_1f
    //     0x2437b0: ldur            w4, [x2, #0x1f]
    // 0x2437b4: DecompressPointer r4
    //     0x2437b4: add             x4, x4, HEAP, lsl #32
    // 0x2437b8: stur            x4, [fp, #-0x18]
    // 0x2437bc: LoadField: r5 = r2->field_23
    //     0x2437bc: ldur            w5, [x2, #0x23]
    // 0x2437c0: DecompressPointer r5
    //     0x2437c0: add             x5, x5, HEAP, lsl #32
    // 0x2437c4: stur            x5, [fp, #-0x10]
    // 0x2437c8: str             x0, [SP]
    // 0x2437cc: r0 = _textDirection()
    //     0x2437cc: bl              #0x243ec0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_textDirection
    // 0x2437d0: ldr             x0, [fp, #0x10]
    // 0x2437d4: LoadField: r1 = r0->field_b
    //     0x2437d4: ldur            w1, [x0, #0xb]
    // 0x2437d8: DecompressPointer r1
    //     0x2437d8: add             x1, x1, HEAP, lsl #32
    // 0x2437dc: cmp             w1, NULL
    // 0x2437e0: b.eq            #0x2438b8
    // 0x2437e4: ldur            x16, [fp, #-0x28]
    // 0x2437e8: ldur            lr, [fp, #-0x20]
    // 0x2437ec: stp             lr, x16, [SP, #0x10]
    // 0x2437f0: ldur            x16, [fp, #-0x18]
    // 0x2437f4: ldur            lr, [fp, #-0x10]
    // 0x2437f8: stp             lr, x16, [SP]
    // 0x2437fc: r0 = setStyle()
    //     0x2437fc: bl              #0x243c34  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setStyle
    // 0x243800: ldur            x16, [fp, #-0x28]
    // 0x243804: ldur            lr, [fp, #-8]
    // 0x243808: stp             lr, x16, [SP]
    // 0x24380c: r0 = setEditingState()
    //     0x24380c: bl              #0x22c93c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setEditingState
    // 0x243810: ldur            x16, [fp, #-0x28]
    // 0x243814: str             x16, [SP]
    // 0x243818: r0 = show()
    //     0x243818: bl              #0x243ad0  ; [package:flutter/src/services/text_input.dart] TextInputConnection::show
    // 0x24381c: ldr             x16, [fp, #0x10]
    // 0x243820: str             x16, [SP]
    // 0x243824: r0 = _needsAutofill()
    //     0x243824: bl              #0x243a68  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_needsAutofill
    // 0x243828: tbnz            w0, #4, #0x243848
    // 0x24382c: ldr             x0, [fp, #0x10]
    // 0x243830: LoadField: r1 = r0->field_3b
    //     0x243830: ldur            w1, [x0, #0x3b]
    // 0x243834: DecompressPointer r1
    //     0x243834: add             x1, x1, HEAP, lsl #32
    // 0x243838: cmp             w1, NULL
    // 0x24383c: b.eq            #0x2438bc
    // 0x243840: str             x1, [SP]
    // 0x243844: r0 = requestAutofill()
    //     0x243844: bl              #0x2438c4  ; [package:flutter/src/services/text_input.dart] TextInputConnection::requestAutofill
    // 0x243848: ldr             x1, [fp, #0x10]
    // 0x24384c: ldur            x0, [fp, #-8]
    // 0x243850: StoreField: r1->field_73 = r0
    //     0x243850: stur            w0, [x1, #0x73]
    //     0x243854: ldurb           w16, [x1, #-1]
    //     0x243858: ldurb           w17, [x0, #-1]
    //     0x24385c: and             x16, x17, x16, lsr #2
    //     0x243860: tst             x16, HEAP, lsr #32
    //     0x243864: b.eq            #0x24386c
    //     0x243868: bl              #0x3e4608
    // 0x24386c: b               #0x24388c
    // 0x243870: ldr             x1, [fp, #0x10]
    // 0x243874: LoadField: r0 = r1->field_3b
    //     0x243874: ldur            w0, [x1, #0x3b]
    // 0x243878: DecompressPointer r0
    //     0x243878: add             x0, x0, HEAP, lsl #32
    // 0x24387c: cmp             w0, NULL
    // 0x243880: b.eq            #0x2438c0
    // 0x243884: str             x0, [SP]
    // 0x243888: r0 = show()
    //     0x243888: bl              #0x243ad0  ; [package:flutter/src/services/text_input.dart] TextInputConnection::show
    // 0x24388c: r0 = Null
    //     0x24388c: mov             x0, NULL
    // 0x243890: LeaveFrame
    //     0x243890: mov             SP, fp
    //     0x243894: ldp             fp, lr, [SP], #0x10
    // 0x243898: ret
    //     0x243898: ret             
    // 0x24389c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x24389c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2438a0: b               #0x2436c4
    // 0x2438a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2438a4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2438a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2438a8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2438ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2438ac: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2438b0: r9 = _style
    //     0x2438b0: ldr             x9, [PP, #0x5d90]  ; [pp+0x5d90] Field <EditableTextState._style@148183791>: late (offset: 0x64)
    // 0x2438b4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2438b4: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x2438b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2438b8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2438bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2438bc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2438c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2438c0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _needsAutofill(/* No info */) {
    // ** addr: 0x243a68, size: 0x68
    // 0x243a68: EnterFrame
    //     0x243a68: stp             fp, lr, [SP, #-0x10]!
    //     0x243a6c: mov             fp, SP
    // 0x243a70: AllocStack(0x8)
    //     0x243a70: sub             SP, SP, #8
    // 0x243a74: CheckStackOverflow
    //     0x243a74: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x243a78: cmp             SP, x16
    //     0x243a7c: b.ls            #0x243ac4
    // 0x243a80: ldr             x0, [fp, #0x10]
    // 0x243a84: LoadField: r1 = r0->field_b
    //     0x243a84: ldur            w1, [x0, #0xb]
    // 0x243a88: DecompressPointer r1
    //     0x243a88: add             x1, x1, HEAP, lsl #32
    // 0x243a8c: cmp             w1, NULL
    // 0x243a90: b.eq            #0x243acc
    // 0x243a94: r17 = 263
    //     0x243a94: movz            x17, #0x107
    // 0x243a98: ldr             w0, [x1, x17]
    // 0x243a9c: DecompressPointer r0
    //     0x243a9c: add             x0, x0, HEAP, lsl #32
    // 0x243aa0: str             x0, [SP]
    // 0x243aa4: r0 = textInputConfiguration()
    //     0x243aa4: bl              #0x2451fc  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x243aa8: LoadField: r1 = r0->field_17
    //     0x243aa8: ldur            w1, [x0, #0x17]
    // 0x243aac: DecompressPointer r1
    //     0x243aac: add             x1, x1, HEAP, lsl #32
    // 0x243ab0: LoadField: r0 = r1->field_7
    //     0x243ab0: ldur            w0, [x1, #7]
    // 0x243ab4: DecompressPointer r0
    //     0x243ab4: add             x0, x0, HEAP, lsl #32
    // 0x243ab8: LeaveFrame
    //     0x243ab8: mov             SP, fp
    //     0x243abc: ldp             fp, lr, [SP], #0x10
    // 0x243ac0: ret
    //     0x243ac0: ret             
    // 0x243ac4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x243ac4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x243ac8: b               #0x243a80
    // 0x243acc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x243acc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _textDirection(/* No info */) {
    // ** addr: 0x243ec0, size: 0x64
    // 0x243ec0: EnterFrame
    //     0x243ec0: stp             fp, lr, [SP, #-0x10]!
    //     0x243ec4: mov             fp, SP
    // 0x243ec8: AllocStack(0x8)
    //     0x243ec8: sub             SP, SP, #8
    // 0x243ecc: CheckStackOverflow
    //     0x243ecc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x243ed0: cmp             SP, x16
    //     0x243ed4: b.ls            #0x243f14
    // 0x243ed8: ldr             x0, [fp, #0x10]
    // 0x243edc: LoadField: r1 = r0->field_b
    //     0x243edc: ldur            w1, [x0, #0xb]
    // 0x243ee0: DecompressPointer r1
    //     0x243ee0: add             x1, x1, HEAP, lsl #32
    // 0x243ee4: cmp             w1, NULL
    // 0x243ee8: b.eq            #0x243f1c
    // 0x243eec: LoadField: r1 = r0->field_f
    //     0x243eec: ldur            w1, [x0, #0xf]
    // 0x243ef0: DecompressPointer r1
    //     0x243ef0: add             x1, x1, HEAP, lsl #32
    // 0x243ef4: cmp             w1, NULL
    // 0x243ef8: b.eq            #0x243f20
    // 0x243efc: str             x1, [SP]
    // 0x243f00: r0 = of()
    //     0x243f00: bl              #0x243f24  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x243f04: r0 = Instance_TextDirection
    //     0x243f04: ldr             x0, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x243f08: LeaveFrame
    //     0x243f08: mov             SP, fp
    //     0x243f0c: ldp             fp, lr, [SP], #0x10
    // 0x243f10: ret
    //     0x243f10: ret             
    // 0x243f14: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x243f14: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x243f18: b               #0x243ed8
    // 0x243f1c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x243f1c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x243f20: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x243f20: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _schedulePeriodicPostFrameCallbacks(/* No info */) {
    // ** addr: 0x243f74, size: 0x1a8
    // 0x243f74: EnterFrame
    //     0x243f74: stp             fp, lr, [SP, #-0x10]!
    //     0x243f78: mov             fp, SP
    // 0x243f7c: AllocStack(0x28)
    //     0x243f7c: sub             SP, SP, #0x28
    // 0x243f80: SetupParameters(EditableTextState this /* r1, fp-0x8 */)
    //     0x243f80: mov             x0, x4
    //     0x243f84: ldur            w1, [x0, #0x13]
    //     0x243f88: add             x1, x1, HEAP, lsl #32
    //     0x243f8c: sub             x0, x1, #2
    //     0x243f90: add             x1, fp, w0, sxtw #2
    //     0x243f94: ldr             x1, [x1, #0x10]
    //     0x243f98: stur            x1, [fp, #-8]
    // 0x243f9c: CheckStackOverflow
    //     0x243f9c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x243fa0: cmp             SP, x16
    //     0x243fa4: b.ls            #0x24410c
    // 0x243fa8: str             x1, [SP]
    // 0x243fac: r0 = _hasInputConnection()
    //     0x243fac: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x243fb0: tbz             w0, #4, #0x243fc4
    // 0x243fb4: r0 = Null
    //     0x243fb4: mov             x0, NULL
    // 0x243fb8: LeaveFrame
    //     0x243fb8: mov             SP, fp
    //     0x243fbc: ldp             fp, lr, [SP], #0x10
    // 0x243fc0: ret
    //     0x243fc0: ret             
    // 0x243fc4: ldur            x0, [fp, #-8]
    // 0x243fc8: str             x0, [SP]
    // 0x243fcc: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x243fcc: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x243fd0: r0 = _updateSelectionRects()
    //     0x243fd0: bl              #0x244c68  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelectionRects
    // 0x243fd4: ldur            x16, [fp, #-8]
    // 0x243fd8: str             x16, [SP]
    // 0x243fdc: r0 = _updateComposingRectIfNeeded()
    //     0x243fdc: bl              #0x244734  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateComposingRectIfNeeded
    // 0x243fe0: ldur            x16, [fp, #-8]
    // 0x243fe4: str             x16, [SP]
    // 0x243fe8: r0 = _updateCaretRectIfNeeded()
    //     0x243fe8: bl              #0x244198  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateCaretRectIfNeeded
    // 0x243fec: r1 = LoadStaticField(0xbe0)
    //     0x243fec: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x243ff0: ldr             x1, [x1, #0x17c0]
    // 0x243ff4: stur            x1, [fp, #-0x10]
    // 0x243ff8: cmp             w1, NULL
    // 0x243ffc: b.eq            #0x244114
    // 0x244000: ldur            x0, [fp, #-8]
    // 0x244004: r2 = 59
    //     0x244004: movz            x2, #0x3b
    // 0x244008: branchIfSmi(r0, 0x244014)
    //     0x244008: tbz             w0, #0, #0x244014
    // 0x24400c: r2 = LoadClassIdInstr(r0)
    //     0x24400c: ldur            x2, [x0, #-1]
    //     0x244010: ubfx            x2, x2, #0xc, #0x14
    // 0x244014: str             x0, [SP]
    // 0x244018: mov             x0, x2
    // 0x24401c: r0 = GDT[cid_x0 + -0xf9e]()
    //     0x24401c: sub             lr, x0, #0xf9e
    //     0x244020: ldr             lr, [x21, lr, lsl #3]
    //     0x244024: blr             lr
    // 0x244028: mov             x3, x0
    // 0x24402c: ldur            x0, [fp, #-0x10]
    // 0x244030: stur            x3, [fp, #-0x18]
    // 0x244034: LoadField: r4 = r0->field_53
    //     0x244034: ldur            w4, [x0, #0x53]
    // 0x244038: DecompressPointer r4
    //     0x244038: add             x4, x4, HEAP, lsl #32
    // 0x24403c: stur            x4, [fp, #-8]
    // 0x244040: LoadField: r2 = r4->field_7
    //     0x244040: ldur            w2, [x4, #7]
    // 0x244044: DecompressPointer r2
    //     0x244044: add             x2, x2, HEAP, lsl #32
    // 0x244048: mov             x0, x3
    // 0x24404c: r1 = Null
    //     0x24404c: mov             x1, NULL
    // 0x244050: cmp             w2, NULL
    // 0x244054: b.eq            #0x244070
    // 0x244058: LoadField: r4 = r2->field_17
    //     0x244058: ldur            w4, [x2, #0x17]
    // 0x24405c: DecompressPointer r4
    //     0x24405c: add             x4, x4, HEAP, lsl #32
    // 0x244060: r8 = X0
    //     0x244060: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x244064: LoadField: r9 = r4->field_7
    //     0x244064: ldur            x9, [x4, #7]
    // 0x244068: r3 = Null
    //     0x244068: ldr             x3, [PP, #0x5e08]  ; [pp+0x5e08] Null
    // 0x24406c: blr             x9
    // 0x244070: ldur            x0, [fp, #-8]
    // 0x244074: LoadField: r1 = r0->field_b
    //     0x244074: ldur            w1, [x0, #0xb]
    // 0x244078: DecompressPointer r1
    //     0x244078: add             x1, x1, HEAP, lsl #32
    // 0x24407c: LoadField: r2 = r0->field_f
    //     0x24407c: ldur            w2, [x0, #0xf]
    // 0x244080: DecompressPointer r2
    //     0x244080: add             x2, x2, HEAP, lsl #32
    // 0x244084: LoadField: r3 = r2->field_b
    //     0x244084: ldur            w3, [x2, #0xb]
    // 0x244088: DecompressPointer r3
    //     0x244088: add             x3, x3, HEAP, lsl #32
    // 0x24408c: r2 = LoadInt32Instr(r1)
    //     0x24408c: sbfx            x2, x1, #1, #0x1f
    // 0x244090: stur            x2, [fp, #-0x20]
    // 0x244094: r1 = LoadInt32Instr(r3)
    //     0x244094: sbfx            x1, x3, #1, #0x1f
    // 0x244098: cmp             x2, x1
    // 0x24409c: b.ne            #0x2440a8
    // 0x2440a0: str             x0, [SP]
    // 0x2440a4: r0 = _growToNextCapacity()
    //     0x2440a4: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2440a8: ldur            x2, [fp, #-8]
    // 0x2440ac: ldur            x3, [fp, #-0x20]
    // 0x2440b0: add             x0, x3, #1
    // 0x2440b4: lsl             x4, x0, #1
    // 0x2440b8: StoreField: r2->field_b = r4
    //     0x2440b8: stur            w4, [x2, #0xb]
    // 0x2440bc: mov             x1, x3
    // 0x2440c0: cmp             x1, x0
    // 0x2440c4: b.hs            #0x244118
    // 0x2440c8: LoadField: r1 = r2->field_f
    //     0x2440c8: ldur            w1, [x2, #0xf]
    // 0x2440cc: DecompressPointer r1
    //     0x2440cc: add             x1, x1, HEAP, lsl #32
    // 0x2440d0: ldur            x0, [fp, #-0x18]
    // 0x2440d4: ArrayStore: r1[r3] = r0  ; List_4
    //     0x2440d4: add             x25, x1, x3, lsl #2
    //     0x2440d8: add             x25, x25, #0xf
    //     0x2440dc: str             w0, [x25]
    //     0x2440e0: tbz             w0, #0, #0x2440fc
    //     0x2440e4: ldurb           w16, [x1, #-1]
    //     0x2440e8: ldurb           w17, [x0, #-1]
    //     0x2440ec: and             x16, x17, x16, lsr #2
    //     0x2440f0: tst             x16, HEAP, lsr #32
    //     0x2440f4: b.eq            #0x2440fc
    //     0x2440f8: bl              #0x3e41ec
    // 0x2440fc: r0 = Null
    //     0x2440fc: mov             x0, NULL
    // 0x244100: LeaveFrame
    //     0x244100: mov             SP, fp
    //     0x244104: ldp             fp, lr, [SP], #0x10
    // 0x244108: ret
    //     0x244108: ret             
    // 0x24410c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x24410c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x244110: b               #0x243fa8
    // 0x244114: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x244114: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x244118: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x244118: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void _schedulePeriodicPostFrameCallbacks(dynamic, [Duration?]) {
    // ** addr: 0x24411c, size: 0x7c
    // 0x24411c: EnterFrame
    //     0x24411c: stp             fp, lr, [SP, #-0x10]!
    //     0x244120: mov             fp, SP
    // 0x244124: AllocStack(0x10)
    //     0x244124: sub             SP, SP, #0x10
    // 0x244128: SetupParameters(EditableTextState this /* r1 */, [dynamic _ = Null /* r0 */])
    //     0x244128: mov             x0, x4
    //     0x24412c: ldur            w1, [x0, #0x13]
    //     0x244130: add             x1, x1, HEAP, lsl #32
    //     0x244134: sub             x0, x1, #2
    //     0x244138: add             x1, fp, w0, sxtw #2
    //     0x24413c: ldr             x1, [x1, #0x10]
    //     0x244140: cmp             w0, #2
    //     0x244144: b.lt            #0x244158
    //     0x244148: add             x2, fp, w0, sxtw #2
    //     0x24414c: ldr             x2, [x2, #8]
    //     0x244150: mov             x0, x2
    //     0x244154: b               #0x24415c
    //     0x244158: mov             x0, NULL
    //     0x24415c: ldur            w2, [x1, #0x17]
    //     0x244160: add             x2, x2, HEAP, lsl #32
    // 0x244164: CheckStackOverflow
    //     0x244164: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x244168: cmp             SP, x16
    //     0x24416c: b.ls            #0x244190
    // 0x244170: LoadField: r1 = r2->field_f
    //     0x244170: ldur            w1, [x2, #0xf]
    // 0x244174: DecompressPointer r1
    //     0x244174: add             x1, x1, HEAP, lsl #32
    // 0x244178: stp             x0, x1, [SP]
    // 0x24417c: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x24417c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x244180: r0 = _schedulePeriodicPostFrameCallbacks()
    //     0x244180: bl              #0x243f74  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_schedulePeriodicPostFrameCallbacks
    // 0x244184: LeaveFrame
    //     0x244184: mov             SP, fp
    //     0x244188: ldp             fp, lr, [SP], #0x10
    // 0x24418c: ret
    //     0x24418c: ret             
    // 0x244190: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x244190: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x244194: b               #0x244170
  }
  _ _updateCaretRectIfNeeded(/* No info */) {
    // ** addr: 0x244198, size: 0xd8
    // 0x244198: EnterFrame
    //     0x244198: stp             fp, lr, [SP, #-0x10]!
    //     0x24419c: mov             fp, SP
    // 0x2441a0: AllocStack(0x20)
    //     0x2441a0: sub             SP, SP, #0x20
    // 0x2441a4: CheckStackOverflow
    //     0x2441a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2441a8: cmp             SP, x16
    //     0x2441ac: b.ls            #0x244264
    // 0x2441b0: ldr             x1, [fp, #0x10]
    // 0x2441b4: LoadField: r0 = r1->field_ab
    //     0x2441b4: ldur            w0, [x1, #0xab]
    // 0x2441b8: DecompressPointer r0
    //     0x2441b8: add             x0, x0, HEAP, lsl #32
    // 0x2441bc: r16 = Sentinel
    //     0x2441bc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2441c0: cmp             w0, w16
    // 0x2441c4: b.ne            #0x2441d0
    // 0x2441c8: r2 = renderEditable
    //     0x2441c8: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x2441cc: r0 = InitLateFinalInstanceField()
    //     0x2441cc: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2441d0: stur            x0, [fp, #-0x10]
    // 0x2441d4: LoadField: r1 = r0->field_e3
    //     0x2441d4: ldur            w1, [x0, #0xe3]
    // 0x2441d8: DecompressPointer r1
    //     0x2441d8: add             x1, x1, HEAP, lsl #32
    // 0x2441dc: LoadField: r2 = r1->field_7
    //     0x2441dc: ldur            x2, [x1, #7]
    // 0x2441e0: tbnz            x2, #0x3f, #0x244254
    // 0x2441e4: LoadField: r3 = r1->field_f
    //     0x2441e4: ldur            x3, [x1, #0xf]
    // 0x2441e8: tbnz            x3, #0x3f, #0x244254
    // 0x2441ec: cmp             x2, x3
    // 0x2441f0: b.ne            #0x244254
    // 0x2441f4: ldr             x2, [fp, #0x10]
    // 0x2441f8: LoadField: r3 = r1->field_17
    //     0x2441f8: ldur            x3, [x1, #0x17]
    // 0x2441fc: stur            x3, [fp, #-8]
    // 0x244200: r0 = TextPosition()
    //     0x244200: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x244204: mov             x1, x0
    // 0x244208: ldur            x0, [fp, #-8]
    // 0x24420c: StoreField: r1->field_7 = r0
    //     0x24420c: stur            x0, [x1, #7]
    // 0x244210: r0 = Instance_TextAffinity
    //     0x244210: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x244214: StoreField: r1->field_f = r0
    //     0x244214: stur            w0, [x1, #0xf]
    // 0x244218: ldur            x16, [fp, #-0x10]
    // 0x24421c: stp             x1, x16, [SP]
    // 0x244220: r0 = getLocalRectForCaret()
    //     0x244220: bl              #0x235354  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x244224: mov             x1, x0
    // 0x244228: ldr             x0, [fp, #0x10]
    // 0x24422c: LoadField: r2 = r0->field_3b
    //     0x24422c: ldur            w2, [x0, #0x3b]
    // 0x244230: DecompressPointer r2
    //     0x244230: add             x2, x2, HEAP, lsl #32
    // 0x244234: cmp             w2, NULL
    // 0x244238: b.eq            #0x24426c
    // 0x24423c: stp             x1, x2, [SP]
    // 0x244240: r0 = setCaretRect()
    //     0x244240: bl              #0x244270  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setCaretRect
    // 0x244244: r0 = Null
    //     0x244244: mov             x0, NULL
    // 0x244248: LeaveFrame
    //     0x244248: mov             SP, fp
    //     0x24424c: ldp             fp, lr, [SP], #0x10
    // 0x244250: ret
    //     0x244250: ret             
    // 0x244254: r0 = Null
    //     0x244254: mov             x0, NULL
    // 0x244258: LeaveFrame
    //     0x244258: mov             SP, fp
    //     0x24425c: ldp             fp, lr, [SP], #0x10
    // 0x244260: ret
    //     0x244260: ret             
    // 0x244264: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x244264: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x244268: b               #0x2441b0
    // 0x24426c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x24426c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateComposingRectIfNeeded(/* No info */) {
    // ** addr: 0x244734, size: 0x114
    // 0x244734: EnterFrame
    //     0x244734: stp             fp, lr, [SP, #-0x10]!
    //     0x244738: mov             fp, SP
    // 0x24473c: AllocStack(0x20)
    //     0x24473c: sub             SP, SP, #0x20
    // 0x244740: CheckStackOverflow
    //     0x244740: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x244744: cmp             SP, x16
    //     0x244748: b.ls            #0x244838
    // 0x24474c: ldr             x0, [fp, #0x10]
    // 0x244750: LoadField: r1 = r0->field_b
    //     0x244750: ldur            w1, [x0, #0xb]
    // 0x244754: DecompressPointer r1
    //     0x244754: add             x1, x1, HEAP, lsl #32
    // 0x244758: cmp             w1, NULL
    // 0x24475c: b.eq            #0x244840
    // 0x244760: LoadField: r2 = r1->field_b
    //     0x244760: ldur            w2, [x1, #0xb]
    // 0x244764: DecompressPointer r2
    //     0x244764: add             x2, x2, HEAP, lsl #32
    // 0x244768: LoadField: r1 = r2->field_27
    //     0x244768: ldur            w1, [x2, #0x27]
    // 0x24476c: DecompressPointer r1
    //     0x24476c: add             x1, x1, HEAP, lsl #32
    // 0x244770: LoadField: r2 = r1->field_f
    //     0x244770: ldur            w2, [x1, #0xf]
    // 0x244774: DecompressPointer r2
    //     0x244774: add             x2, x2, HEAP, lsl #32
    // 0x244778: mov             x1, x0
    // 0x24477c: stur            x2, [fp, #-8]
    // 0x244780: LoadField: r0 = r1->field_ab
    //     0x244780: ldur            w0, [x1, #0xab]
    // 0x244784: DecompressPointer r0
    //     0x244784: add             x0, x0, HEAP, lsl #32
    // 0x244788: r16 = Sentinel
    //     0x244788: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x24478c: cmp             w0, w16
    // 0x244790: b.ne            #0x24479c
    // 0x244794: r2 = renderEditable
    //     0x244794: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x244798: r0 = InitLateFinalInstanceField()
    //     0x244798: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x24479c: ldur            x16, [fp, #-8]
    // 0x2447a0: stp             x16, x0, [SP]
    // 0x2447a4: r0 = getRectForComposingRange()
    //     0x2447a4: bl              #0x23209c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getRectForComposingRange
    // 0x2447a8: cmp             w0, NULL
    // 0x2447ac: b.ne            #0x244808
    // 0x2447b0: ldur            x0, [fp, #-8]
    // 0x2447b4: LoadField: r1 = r0->field_7
    //     0x2447b4: ldur            x1, [x0, #7]
    // 0x2447b8: tbnz            x1, #0x3f, #0x2447c4
    // 0x2447bc: LoadField: r2 = r0->field_f
    //     0x2447bc: ldur            x2, [x0, #0xf]
    // 0x2447c0: tbz             x2, #0x3f, #0x2447c8
    // 0x2447c4: r1 = 0
    //     0x2447c4: movz            x1, #0
    // 0x2447c8: ldr             x0, [fp, #0x10]
    // 0x2447cc: stur            x1, [fp, #-0x10]
    // 0x2447d0: LoadField: r2 = r0->field_ab
    //     0x2447d0: ldur            w2, [x0, #0xab]
    // 0x2447d4: DecompressPointer r2
    //     0x2447d4: add             x2, x2, HEAP, lsl #32
    // 0x2447d8: stur            x2, [fp, #-8]
    // 0x2447dc: r0 = TextPosition()
    //     0x2447dc: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x2447e0: mov             x1, x0
    // 0x2447e4: ldur            x0, [fp, #-0x10]
    // 0x2447e8: StoreField: r1->field_7 = r0
    //     0x2447e8: stur            x0, [x1, #7]
    // 0x2447ec: r0 = Instance_TextAffinity
    //     0x2447ec: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x2447f0: StoreField: r1->field_f = r0
    //     0x2447f0: stur            w0, [x1, #0xf]
    // 0x2447f4: ldur            x16, [fp, #-8]
    // 0x2447f8: stp             x1, x16, [SP]
    // 0x2447fc: r0 = getLocalRectForCaret()
    //     0x2447fc: bl              #0x235354  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x244800: mov             x1, x0
    // 0x244804: b               #0x24480c
    // 0x244808: mov             x1, x0
    // 0x24480c: ldr             x0, [fp, #0x10]
    // 0x244810: LoadField: r2 = r0->field_3b
    //     0x244810: ldur            w2, [x0, #0x3b]
    // 0x244814: DecompressPointer r2
    //     0x244814: add             x2, x2, HEAP, lsl #32
    // 0x244818: cmp             w2, NULL
    // 0x24481c: b.eq            #0x244844
    // 0x244820: stp             x1, x2, [SP]
    // 0x244824: r0 = setComposingRect()
    //     0x244824: bl              #0x244848  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setComposingRect
    // 0x244828: r0 = Null
    //     0x244828: mov             x0, NULL
    // 0x24482c: LeaveFrame
    //     0x24482c: mov             SP, fp
    //     0x244830: ldp             fp, lr, [SP], #0x10
    // 0x244834: ret
    //     0x244834: ret             
    // 0x244838: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x244838: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x24483c: b               #0x24474c
    // 0x244840: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x244840: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x244844: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x244844: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateSelectionRects(/* No info */) {
    // ** addr: 0x244c68, size: 0x44
    // 0x244c68: EnterFrame
    //     0x244c68: stp             fp, lr, [SP, #-0x10]!
    //     0x244c6c: mov             fp, SP
    // 0x244c70: mov             x1, x4
    // 0x244c74: LoadField: r2 = r1->field_13
    //     0x244c74: ldur            w2, [x1, #0x13]
    // 0x244c78: DecompressPointer r2
    //     0x244c78: add             x2, x2, HEAP, lsl #32
    // 0x244c7c: sub             x1, x2, #2
    // 0x244c80: add             x2, fp, w1, sxtw #2
    // 0x244c84: ldr             x2, [x2, #0x10]
    // 0x244c88: LoadField: r1 = r2->field_b
    //     0x244c88: ldur            w1, [x2, #0xb]
    // 0x244c8c: DecompressPointer r1
    //     0x244c8c: add             x1, x1, HEAP, lsl #32
    // 0x244c90: cmp             w1, NULL
    // 0x244c94: b.eq            #0x244ca8
    // 0x244c98: r0 = Null
    //     0x244c98: mov             x0, NULL
    // 0x244c9c: LeaveFrame
    //     0x244c9c: mov             SP, fp
    //     0x244ca0: ldp             fp, lr, [SP], #0x10
    // 0x244ca4: ret
    //     0x244ca4: ret             
    // 0x244ca8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x244ca8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateSizeAndTransform(/* No info */) {
    // ** addr: 0x244cac, size: 0xa0
    // 0x244cac: EnterFrame
    //     0x244cac: stp             fp, lr, [SP, #-0x10]!
    //     0x244cb0: mov             fp, SP
    // 0x244cb4: AllocStack(0x20)
    //     0x244cb4: sub             SP, SP, #0x20
    // 0x244cb8: CheckStackOverflow
    //     0x244cb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x244cbc: cmp             SP, x16
    //     0x244cc0: b.ls            #0x244d40
    // 0x244cc4: ldr             x1, [fp, #0x10]
    // 0x244cc8: LoadField: r0 = r1->field_ab
    //     0x244cc8: ldur            w0, [x1, #0xab]
    // 0x244ccc: DecompressPointer r0
    //     0x244ccc: add             x0, x0, HEAP, lsl #32
    // 0x244cd0: r16 = Sentinel
    //     0x244cd0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x244cd4: cmp             w0, w16
    // 0x244cd8: b.ne            #0x244ce4
    // 0x244cdc: r2 = renderEditable
    //     0x244cdc: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x244ce0: r0 = InitLateFinalInstanceField()
    //     0x244ce0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x244ce4: str             x0, [SP]
    // 0x244ce8: r0 = size()
    //     0x244ce8: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x244cec: mov             x1, x0
    // 0x244cf0: ldr             x0, [fp, #0x10]
    // 0x244cf4: stur            x1, [fp, #-8]
    // 0x244cf8: LoadField: r2 = r0->field_ab
    //     0x244cf8: ldur            w2, [x0, #0xab]
    // 0x244cfc: DecompressPointer r2
    //     0x244cfc: add             x2, x2, HEAP, lsl #32
    // 0x244d00: stp             NULL, x2, [SP]
    // 0x244d04: r0 = getTransformTo()
    //     0x244d04: bl              #0x1ee828  ; [package:flutter/src/rendering/object.dart] RenderObject::getTransformTo
    // 0x244d08: mov             x1, x0
    // 0x244d0c: ldr             x0, [fp, #0x10]
    // 0x244d10: LoadField: r2 = r0->field_3b
    //     0x244d10: ldur            w2, [x0, #0x3b]
    // 0x244d14: DecompressPointer r2
    //     0x244d14: add             x2, x2, HEAP, lsl #32
    // 0x244d18: cmp             w2, NULL
    // 0x244d1c: b.eq            #0x244d48
    // 0x244d20: ldur            x16, [fp, #-8]
    // 0x244d24: stp             x16, x2, [SP, #8]
    // 0x244d28: str             x1, [SP]
    // 0x244d2c: r0 = setEditableSizeAndTransform()
    //     0x244d2c: bl              #0x244d4c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setEditableSizeAndTransform
    // 0x244d30: r0 = Null
    //     0x244d30: mov             x0, NULL
    // 0x244d34: LeaveFrame
    //     0x244d34: mov             SP, fp
    //     0x244d38: ldp             fp, lr, [SP], #0x10
    // 0x244d3c: ret
    //     0x244d3c: ret             
    // 0x244d40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x244d40: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x244d44: b               #0x244cc4
    // 0x244d48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x244d48: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _effectiveAutofillClient(/* No info */) {
    // ** addr: 0x2451c4, size: 0x38
    // 0x2451c4: EnterFrame
    //     0x2451c4: stp             fp, lr, [SP, #-0x10]!
    //     0x2451c8: mov             fp, SP
    // 0x2451cc: ldr             x1, [fp, #0x10]
    // 0x2451d0: LoadField: r2 = r1->field_b
    //     0x2451d0: ldur            w2, [x1, #0xb]
    // 0x2451d4: DecompressPointer r2
    //     0x2451d4: add             x2, x2, HEAP, lsl #32
    // 0x2451d8: cmp             w2, NULL
    // 0x2451dc: b.eq            #0x2451f8
    // 0x2451e0: r17 = 263
    //     0x2451e0: movz            x17, #0x107
    // 0x2451e4: ldr             w0, [x2, x17]
    // 0x2451e8: DecompressPointer r0
    //     0x2451e8: add             x0, x0, HEAP, lsl #32
    // 0x2451ec: LeaveFrame
    //     0x2451ec: mov             SP, fp
    //     0x2451f0: ldp             fp, lr, [SP], #0x10
    // 0x2451f4: ret
    //     0x2451f4: ret             
    // 0x2451f8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2451f8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ textInputConfiguration(/* No info */) {
    // ** addr: 0x2453d4, size: 0x17c
    // 0x2453d4: EnterFrame
    //     0x2453d4: stp             fp, lr, [SP, #-0x10]!
    //     0x2453d8: mov             fp, SP
    // 0x2453dc: AllocStack(0x38)
    //     0x2453dc: sub             SP, SP, #0x38
    // 0x2453e0: r0 = const []
    //     0x2453e0: ldr             x0, [PP, #0x5e90]  ; [pp+0x5e90] List<String>(0)
    // 0x2453e4: CheckStackOverflow
    //     0x2453e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2453e8: cmp             SP, x16
    //     0x2453ec: b.ls            #0x245540
    // 0x2453f0: ldr             x1, [fp, #0x10]
    // 0x2453f4: LoadField: r2 = r1->field_b
    //     0x2453f4: ldur            w2, [x1, #0xb]
    // 0x2453f8: DecompressPointer r2
    //     0x2453f8: add             x2, x2, HEAP, lsl #32
    // 0x2453fc: cmp             w2, NULL
    // 0x245400: b.eq            #0x245548
    // 0x245404: LoadField: r2 = r0->field_7
    //     0x245404: ldur            w2, [x0, #7]
    // 0x245408: DecompressPointer r2
    //     0x245408: add             x2, x2, HEAP, lsl #32
    // 0x24540c: stur            x2, [fp, #-8]
    // 0x245410: str             x1, [SP]
    // 0x245414: r0 = autofillId()
    //     0x245414: bl              #0x245550  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::autofillId
    // 0x245418: mov             x1, x0
    // 0x24541c: ldr             x0, [fp, #0x10]
    // 0x245420: stur            x1, [fp, #-0x20]
    // 0x245424: LoadField: r2 = r0->field_b
    //     0x245424: ldur            w2, [x0, #0xb]
    // 0x245428: DecompressPointer r2
    //     0x245428: add             x2, x2, HEAP, lsl #32
    // 0x24542c: stur            x2, [fp, #-0x18]
    // 0x245430: cmp             w2, NULL
    // 0x245434: b.eq            #0x24554c
    // 0x245438: LoadField: r0 = r2->field_b
    //     0x245438: ldur            w0, [x2, #0xb]
    // 0x24543c: DecompressPointer r0
    //     0x24543c: add             x0, x0, HEAP, lsl #32
    // 0x245440: LoadField: r3 = r0->field_27
    //     0x245440: ldur            w3, [x0, #0x27]
    // 0x245444: DecompressPointer r3
    //     0x245444: add             x3, x3, HEAP, lsl #32
    // 0x245448: stur            x3, [fp, #-0x10]
    // 0x24544c: r0 = AutofillConfiguration()
    //     0x24544c: bl              #0x2455f4  ; AllocateAutofillConfigurationStub -> AutofillConfiguration (size=0x1c)
    // 0x245450: mov             x3, x0
    // 0x245454: r0 = true
    //     0x245454: add             x0, NULL, #0x20  ; true
    // 0x245458: stur            x3, [fp, #-0x28]
    // 0x24545c: StoreField: r3->field_7 = r0
    //     0x24545c: stur            w0, [x3, #7]
    // 0x245460: ldur            x1, [fp, #-0x20]
    // 0x245464: StoreField: r3->field_b = r1
    //     0x245464: stur            w1, [x3, #0xb]
    // 0x245468: ldur            x1, [fp, #-8]
    // 0x24546c: r2 = 0
    //     0x24546c: movz            x2, #0
    // 0x245470: r0 = AllocateArray()
    //     0x245470: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x245474: mov             x1, x0
    // 0x245478: ldur            x0, [fp, #-0x28]
    // 0x24547c: StoreField: r0->field_f = r1
    //     0x24547c: stur            w1, [x0, #0xf]
    // 0x245480: ldur            x1, [fp, #-0x10]
    // 0x245484: StoreField: r0->field_13 = r1
    //     0x245484: stur            w1, [x0, #0x13]
    // 0x245488: ldur            x1, [fp, #-0x18]
    // 0x24548c: LoadField: r2 = r1->field_93
    //     0x24548c: ldur            w2, [x1, #0x93]
    // 0x245490: DecompressPointer r2
    //     0x245490: add             x2, x2, HEAP, lsl #32
    // 0x245494: stur            x2, [fp, #-0x30]
    // 0x245498: LoadField: r3 = r1->field_3f
    //     0x245498: ldur            w3, [x1, #0x3f]
    // 0x24549c: DecompressPointer r3
    //     0x24549c: add             x3, x3, HEAP, lsl #32
    // 0x2454a0: stur            x3, [fp, #-0x20]
    // 0x2454a4: LoadField: r4 = r2->field_7
    //     0x2454a4: ldur            x4, [x2, #7]
    // 0x2454a8: cmp             x4, #1
    // 0x2454ac: b.ne            #0x2454b8
    // 0x2454b0: r4 = Instance_TextInputAction
    //     0x2454b0: ldr             x4, [PP, #0x5ea8]  ; [pp+0x5ea8] Obj!TextInputAction@480981
    // 0x2454b4: b               #0x2454bc
    // 0x2454b8: r4 = Instance_TextInputAction
    //     0x2454b8: ldr             x4, [PP, #0x5eb0]  ; [pp+0x5eb0] Obj!TextInputAction@4809a1
    // 0x2454bc: stur            x4, [fp, #-0x10]
    // 0x2454c0: LoadField: r5 = r1->field_e7
    //     0x2454c0: ldur            w5, [x1, #0xe7]
    // 0x2454c4: DecompressPointer r5
    //     0x2454c4: add             x5, x5, HEAP, lsl #32
    // 0x2454c8: stur            x5, [fp, #-8]
    // 0x2454cc: r0 = TextInputConfiguration()
    //     0x2454cc: bl              #0x2453c8  ; AllocateTextInputConfigurationStub -> TextInputConfiguration (size=0x48)
    // 0x2454d0: ldur            x1, [fp, #-0x30]
    // 0x2454d4: StoreField: r0->field_7 = r1
    //     0x2454d4: stur            w1, [x0, #7]
    // 0x2454d8: r1 = false
    //     0x2454d8: add             x1, NULL, #0x30  ; false
    // 0x2454dc: StoreField: r0->field_b = r1
    //     0x2454dc: stur            w1, [x0, #0xb]
    // 0x2454e0: r2 = true
    //     0x2454e0: add             x2, NULL, #0x20  ; true
    // 0x2454e4: StoreField: r0->field_f = r2
    //     0x2454e4: stur            w2, [x0, #0xf]
    // 0x2454e8: StoreField: r0->field_13 = r2
    //     0x2454e8: stur            w2, [x0, #0x13]
    // 0x2454ec: StoreField: r0->field_23 = r2
    //     0x2454ec: stur            w2, [x0, #0x23]
    // 0x2454f0: StoreField: r0->field_27 = r2
    //     0x2454f0: stur            w2, [x0, #0x27]
    // 0x2454f4: ldur            x3, [fp, #-0x10]
    // 0x2454f8: StoreField: r0->field_2f = r3
    //     0x2454f8: stur            w3, [x0, #0x2f]
    // 0x2454fc: ldur            x3, [fp, #-8]
    // 0x245500: StoreField: r0->field_37 = r3
    //     0x245500: stur            w3, [x0, #0x37]
    // 0x245504: r3 = Instance_TextCapitalization
    //     0x245504: ldr             x3, [PP, #0x5e98]  ; [pp+0x5e98] Obj!TextCapitalization@480801
    // 0x245508: StoreField: r0->field_33 = r3
    //     0x245508: stur            w3, [x0, #0x33]
    // 0x24550c: ldur            x3, [fp, #-0x28]
    // 0x245510: StoreField: r0->field_17 = r3
    //     0x245510: stur            w3, [x0, #0x17]
    // 0x245514: StoreField: r0->field_3b = r2
    //     0x245514: stur            w2, [x0, #0x3b]
    // 0x245518: r2 = const []
    //     0x245518: ldr             x2, [PP, #0x5e90]  ; [pp+0x5e90] List<String>(0)
    // 0x24551c: StoreField: r0->field_3f = r2
    //     0x24551c: stur            w2, [x0, #0x3f]
    // 0x245520: StoreField: r0->field_43 = r1
    //     0x245520: stur            w1, [x0, #0x43]
    // 0x245524: r1 = Instance_SmartDashesType
    //     0x245524: ldr             x1, [PP, #0x5ea0]  ; [pp+0x5ea0] Obj!SmartDashesType@4809e1
    // 0x245528: StoreField: r0->field_1b = r1
    //     0x245528: stur            w1, [x0, #0x1b]
    // 0x24552c: ldur            x1, [fp, #-0x20]
    // 0x245530: StoreField: r0->field_1f = r1
    //     0x245530: stur            w1, [x0, #0x1f]
    // 0x245534: LeaveFrame
    //     0x245534: mov             SP, fp
    //     0x245538: ldp             fp, lr, [SP], #0x10
    // 0x24553c: ret
    //     0x24553c: ret             
    // 0x245540: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x245540: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x245544: b               #0x2453f0
    // 0x245548: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x245548: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x24554c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x24554c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ autofillId(/* No info */) {
    // ** addr: 0x245550, size: 0x64
    // 0x245550: EnterFrame
    //     0x245550: stp             fp, lr, [SP, #-0x10]!
    //     0x245554: mov             fp, SP
    // 0x245558: AllocStack(0x10)
    //     0x245558: sub             SP, SP, #0x10
    // 0x24555c: CheckStackOverflow
    //     0x24555c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x245560: cmp             SP, x16
    //     0x245564: b.ls            #0x2455ac
    // 0x245568: r1 = Null
    //     0x245568: mov             x1, NULL
    // 0x24556c: r2 = 4
    //     0x24556c: movz            x2, #0x4
    // 0x245570: r0 = AllocateArray()
    //     0x245570: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x245574: stur            x0, [fp, #-8]
    // 0x245578: r17 = "EditableText-"
    //     0x245578: ldr             x17, [PP, #0x5eb8]  ; [pp+0x5eb8] "EditableText-"
    // 0x24557c: StoreField: r0->field_f = r17
    //     0x24557c: stur            w17, [x0, #0xf]
    // 0x245580: ldr             x16, [fp, #0x10]
    // 0x245584: str             x16, [SP]
    // 0x245588: r0 = _getHash()
    //     0x245588: bl              #0x202e88  ; [dart:core] ::_getHash
    // 0x24558c: mov             x1, x0
    // 0x245590: ldur            x0, [fp, #-8]
    // 0x245594: StoreField: r0->field_13 = r1
    //     0x245594: stur            w1, [x0, #0x13]
    // 0x245598: str             x0, [SP]
    // 0x24559c: r0 = _interpolate()
    //     0x24559c: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2455a0: LeaveFrame
    //     0x2455a0: mov             SP, fp
    //     0x2455a4: ldp             fp, lr, [SP], #0x10
    // 0x2455a8: ret
    //     0x2455a8: ret             
    // 0x2455ac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2455ac: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2455b0: b               #0x245568
  }
  set _ _value=(/* No info */) {
    // ** addr: 0x2458b0, size: 0x5c
    // 0x2458b0: EnterFrame
    //     0x2458b0: stp             fp, lr, [SP, #-0x10]!
    //     0x2458b4: mov             fp, SP
    // 0x2458b8: AllocStack(0x10)
    //     0x2458b8: sub             SP, SP, #0x10
    // 0x2458bc: CheckStackOverflow
    //     0x2458bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2458c0: cmp             SP, x16
    //     0x2458c4: b.ls            #0x245900
    // 0x2458c8: ldr             x0, [fp, #0x18]
    // 0x2458cc: LoadField: r1 = r0->field_b
    //     0x2458cc: ldur            w1, [x0, #0xb]
    // 0x2458d0: DecompressPointer r1
    //     0x2458d0: add             x1, x1, HEAP, lsl #32
    // 0x2458d4: cmp             w1, NULL
    // 0x2458d8: b.eq            #0x245908
    // 0x2458dc: LoadField: r0 = r1->field_b
    //     0x2458dc: ldur            w0, [x1, #0xb]
    // 0x2458e0: DecompressPointer r0
    //     0x2458e0: add             x0, x0, HEAP, lsl #32
    // 0x2458e4: ldr             x16, [fp, #0x10]
    // 0x2458e8: stp             x16, x0, [SP]
    // 0x2458ec: r0 = value=()
    //     0x2458ec: bl              #0x1fd07c  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x2458f0: r0 = Null
    //     0x2458f0: mov             x0, NULL
    // 0x2458f4: LeaveFrame
    //     0x2458f4: mov             SP, fp
    //     0x2458f8: ldp             fp, lr, [SP], #0x10
    // 0x2458fc: ret
    //     0x2458fc: ret             
    // 0x245900: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x245900: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x245904: b               #0x2458c8
    // 0x245908: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x245908: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ beginBatchEdit(/* No info */) {
    // ** addr: 0x24590c, size: 0x18
    // 0x24590c: ldr             x1, [SP]
    // 0x245910: LoadField: r2 = r1->field_87
    //     0x245910: ldur            x2, [x1, #0x87]
    // 0x245914: add             x3, x2, #1
    // 0x245918: StoreField: r1->field_87 = r3
    //     0x245918: stur            x3, [x1, #0x87]
    // 0x24591c: r0 = Null
    //     0x24591c: mov             x0, NULL
    // 0x245920: ret
    //     0x245920: ret             
  }
  get _ spellCheckEnabled(/* No info */) {
    // ** addr: 0x245924, size: 0x38
    // 0x245924: EnterFrame
    //     0x245924: stp             fp, lr, [SP, #-0x10]!
    //     0x245928: mov             fp, SP
    // 0x24592c: ldr             x1, [fp, #0x10]
    // 0x245930: LoadField: r2 = r1->field_5f
    //     0x245930: ldur            w2, [x1, #0x5f]
    // 0x245934: DecompressPointer r2
    //     0x245934: add             x2, x2, HEAP, lsl #32
    // 0x245938: r16 = Sentinel
    //     0x245938: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x24593c: cmp             w2, w16
    // 0x245940: b.eq            #0x245954
    // 0x245944: r0 = false
    //     0x245944: add             x0, NULL, #0x30  ; false
    // 0x245948: LeaveFrame
    //     0x245948: mov             SP, fp
    //     0x24594c: ldp             fp, lr, [SP], #0x10
    // 0x245950: ret
    //     0x245950: ret             
    // 0x245954: r9 = _spellCheckConfiguration
    //     0x245954: ldr             x9, [PP, #0x5bc0]  ; [pp+0x5bc0] Field <EditableTextState._spellCheckConfiguration@148183791>: late (offset: 0x60)
    // 0x245958: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x245958: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] TextEditingValue <anonymous closure>(dynamic, TextEditingValue, TextInputFormatter) {
    // ** addr: 0x245ba0, size: 0xa8
    // 0x245ba0: EnterFrame
    //     0x245ba0: stp             fp, lr, [SP, #-0x10]!
    //     0x245ba4: mov             fp, SP
    // 0x245ba8: AllocStack(0x18)
    //     0x245ba8: sub             SP, SP, #0x18
    // 0x245bac: SetupParameters()
    //     0x245bac: ldr             x0, [fp, #0x20]
    //     0x245bb0: ldur            w1, [x0, #0x17]
    //     0x245bb4: add             x1, x1, HEAP, lsl #32
    // 0x245bb8: CheckStackOverflow
    //     0x245bb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x245bbc: cmp             SP, x16
    //     0x245bc0: b.ls            #0x245c3c
    // 0x245bc4: LoadField: r0 = r1->field_f
    //     0x245bc4: ldur            w0, [x1, #0xf]
    // 0x245bc8: DecompressPointer r0
    //     0x245bc8: add             x0, x0, HEAP, lsl #32
    // 0x245bcc: LoadField: r1 = r0->field_b
    //     0x245bcc: ldur            w1, [x0, #0xb]
    // 0x245bd0: DecompressPointer r1
    //     0x245bd0: add             x1, x1, HEAP, lsl #32
    // 0x245bd4: cmp             w1, NULL
    // 0x245bd8: b.eq            #0x245c44
    // 0x245bdc: LoadField: r0 = r1->field_b
    //     0x245bdc: ldur            w0, [x1, #0xb]
    // 0x245be0: DecompressPointer r0
    //     0x245be0: add             x0, x0, HEAP, lsl #32
    // 0x245be4: LoadField: r1 = r0->field_27
    //     0x245be4: ldur            w1, [x0, #0x27]
    // 0x245be8: DecompressPointer r1
    //     0x245be8: add             x1, x1, HEAP, lsl #32
    // 0x245bec: ldr             x0, [fp, #0x10]
    // 0x245bf0: r2 = LoadClassIdInstr(r0)
    //     0x245bf0: ldur            x2, [x0, #-1]
    //     0x245bf4: ubfx            x2, x2, #0xc, #0x14
    // 0x245bf8: cmp             x2, #0x159
    // 0x245bfc: b.eq            #0x245c30
    // 0x245c00: r2 = LoadClassIdInstr(r0)
    //     0x245c00: ldur            x2, [x0, #-1]
    //     0x245c04: ubfx            x2, x2, #0xc, #0x14
    // 0x245c08: stp             x1, x0, [SP, #8]
    // 0x245c0c: ldr             x16, [fp, #0x18]
    // 0x245c10: str             x16, [SP]
    // 0x245c14: mov             x0, x2
    // 0x245c18: r0 = GDT[cid_x0 + -0xf85]()
    //     0x245c18: sub             lr, x0, #0xf85
    //     0x245c1c: ldr             lr, [x21, lr, lsl #3]
    //     0x245c20: blr             lr
    // 0x245c24: LeaveFrame
    //     0x245c24: mov             SP, fp
    //     0x245c28: ldp             fp, lr, [SP], #0x10
    // 0x245c2c: ret
    //     0x245c2c: ret             
    // 0x245c30: r0 = "Attempt to execute code removed by Dart AOT compiler (TFA)"
    //     0x245c30: ldr             x0, [PP, #0x670]  ; [pp+0x670] "Attempt to execute code removed by Dart AOT compiler (TFA)"
    // 0x245c34: r0 = Throw()
    //     0x245c34: bl              #0x3e41c8  ; ThrowStub
    // 0x245c38: brk             #0
    // 0x245c3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x245c3c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x245c40: b               #0x245bc4
    // 0x245c44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x245c44: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _createSelectionOverlay(/* No info */) {
    // ** addr: 0x245c6c, size: 0x1a0
    // 0x245c6c: EnterFrame
    //     0x245c6c: stp             fp, lr, [SP, #-0x10]!
    //     0x245c70: mov             fp, SP
    // 0x245c74: AllocStack(0xd8)
    //     0x245c74: sub             SP, SP, #0xd8
    // 0x245c78: CheckStackOverflow
    //     0x245c78: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x245c7c: cmp             SP, x16
    //     0x245c80: b.ls            #0x245df8
    // 0x245c84: r1 = 2
    //     0x245c84: movz            x1, #0x2
    // 0x245c88: r0 = AllocateContext()
    //     0x245c88: bl              #0x3e4e00  ; AllocateContextStub
    // 0x245c8c: mov             x2, x0
    // 0x245c90: ldr             x0, [fp, #0x10]
    // 0x245c94: stur            x2, [fp, #-0x40]
    // 0x245c98: StoreField: r2->field_f = r0
    //     0x245c98: stur            w0, [x2, #0xf]
    // 0x245c9c: LoadField: r3 = r0->field_b
    //     0x245c9c: ldur            w3, [x0, #0xb]
    // 0x245ca0: DecompressPointer r3
    //     0x245ca0: add             x3, x3, HEAP, lsl #32
    // 0x245ca4: stur            x3, [fp, #-0x38]
    // 0x245ca8: cmp             w3, NULL
    // 0x245cac: b.eq            #0x245e00
    // 0x245cb0: r17 = 287
    //     0x245cb0: movz            x17, #0x11f
    // 0x245cb4: ldr             w1, [x3, x17]
    // 0x245cb8: DecompressPointer r1
    //     0x245cb8: add             x1, x1, HEAP, lsl #32
    // 0x245cbc: StoreField: r2->field_13 = r1
    //     0x245cbc: stur            w1, [x2, #0x13]
    // 0x245cc0: LoadField: r4 = r0->field_33
    //     0x245cc0: ldur            w4, [x0, #0x33]
    // 0x245cc4: DecompressPointer r4
    //     0x245cc4: add             x4, x4, HEAP, lsl #32
    // 0x245cc8: stur            x4, [fp, #-0x30]
    // 0x245ccc: LoadField: r5 = r0->field_f
    //     0x245ccc: ldur            w5, [x0, #0xf]
    // 0x245cd0: DecompressPointer r5
    //     0x245cd0: add             x5, x5, HEAP, lsl #32
    // 0x245cd4: stur            x5, [fp, #-0x28]
    // 0x245cd8: cmp             w5, NULL
    // 0x245cdc: b.eq            #0x245e04
    // 0x245ce0: LoadField: r1 = r3->field_b
    //     0x245ce0: ldur            w1, [x3, #0xb]
    // 0x245ce4: DecompressPointer r1
    //     0x245ce4: add             x1, x1, HEAP, lsl #32
    // 0x245ce8: LoadField: r6 = r1->field_27
    //     0x245ce8: ldur            w6, [x1, #0x27]
    // 0x245cec: DecompressPointer r6
    //     0x245cec: add             x6, x6, HEAP, lsl #32
    // 0x245cf0: stur            x6, [fp, #-0x20]
    // 0x245cf4: LoadField: r7 = r0->field_4b
    //     0x245cf4: ldur            w7, [x0, #0x4b]
    // 0x245cf8: DecompressPointer r7
    //     0x245cf8: add             x7, x7, HEAP, lsl #32
    // 0x245cfc: stur            x7, [fp, #-0x18]
    // 0x245d00: LoadField: r8 = r0->field_4f
    //     0x245d00: ldur            w8, [x0, #0x4f]
    // 0x245d04: DecompressPointer r8
    //     0x245d04: add             x8, x8, HEAP, lsl #32
    // 0x245d08: stur            x8, [fp, #-0x10]
    // 0x245d0c: LoadField: r9 = r0->field_53
    //     0x245d0c: ldur            w9, [x0, #0x53]
    // 0x245d10: DecompressPointer r9
    //     0x245d10: add             x9, x9, HEAP, lsl #32
    // 0x245d14: mov             x1, x0
    // 0x245d18: stur            x9, [fp, #-8]
    // 0x245d1c: LoadField: r0 = r1->field_ab
    //     0x245d1c: ldur            w0, [x1, #0xab]
    // 0x245d20: DecompressPointer r0
    //     0x245d20: add             x0, x0, HEAP, lsl #32
    // 0x245d24: r16 = Sentinel
    //     0x245d24: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x245d28: cmp             w0, w16
    // 0x245d2c: b.ne            #0x245d38
    // 0x245d30: r2 = renderEditable
    //     0x245d30: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x245d34: r0 = InitLateFinalInstanceField()
    //     0x245d34: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x245d38: mov             x3, x0
    // 0x245d3c: ldr             x0, [fp, #0x10]
    // 0x245d40: stur            x3, [fp, #-0x60]
    // 0x245d44: LoadField: r1 = r0->field_b
    //     0x245d44: ldur            w1, [x0, #0xb]
    // 0x245d48: DecompressPointer r1
    //     0x245d48: add             x1, x1, HEAP, lsl #32
    // 0x245d4c: cmp             w1, NULL
    // 0x245d50: b.eq            #0x245e08
    // 0x245d54: LoadField: r4 = r1->field_8f
    //     0x245d54: ldur            w4, [x1, #0x8f]
    // 0x245d58: DecompressPointer r4
    //     0x245d58: add             x4, x4, HEAP, lsl #32
    // 0x245d5c: stur            x4, [fp, #-0x58]
    // 0x245d60: LoadField: r5 = r1->field_af
    //     0x245d60: ldur            w5, [x1, #0xaf]
    // 0x245d64: DecompressPointer r5
    //     0x245d64: add             x5, x5, HEAP, lsl #32
    // 0x245d68: stur            x5, [fp, #-0x50]
    // 0x245d6c: r17 = 295
    //     0x245d6c: movz            x17, #0x127
    // 0x245d70: ldr             w6, [x1, x17]
    // 0x245d74: DecompressPointer r6
    //     0x245d74: add             x6, x6, HEAP, lsl #32
    // 0x245d78: ldur            x2, [fp, #-0x40]
    // 0x245d7c: stur            x6, [fp, #-0x48]
    // 0x245d80: r1 = Function '<anonymous closure>':.
    //     0x245d80: ldr             x1, [PP, #0x58e0]  ; [pp+0x58e0] AnonymousClosure: (0x24831c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay (0x245c6c)
    // 0x245d84: r0 = AllocateClosure()
    //     0x245d84: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x245d88: stur            x0, [fp, #-0x40]
    // 0x245d8c: r0 = TextSelectionOverlay()
    //     0x245d8c: bl              #0x248310  ; AllocateTextSelectionOverlayStub -> TextSelectionOverlay (size=0x44)
    // 0x245d90: stur            x0, [fp, #-0x68]
    // 0x245d94: ldur            x16, [fp, #-0x30]
    // 0x245d98: stp             x16, x0, [SP, #0x60]
    // 0x245d9c: ldur            x16, [fp, #-0x28]
    // 0x245da0: ldur            lr, [fp, #-0x40]
    // 0x245da4: stp             lr, x16, [SP, #0x50]
    // 0x245da8: ldur            x16, [fp, #-0x38]
    // 0x245dac: ldur            lr, [fp, #-8]
    // 0x245db0: stp             lr, x16, [SP, #0x40]
    // 0x245db4: ldur            x16, [fp, #-0x48]
    // 0x245db8: ldur            lr, [fp, #-0x50]
    // 0x245dbc: stp             lr, x16, [SP, #0x30]
    // 0x245dc0: ldur            x16, [fp, #-0x60]
    // 0x245dc4: ldur            lr, [fp, #-0x58]
    // 0x245dc8: stp             lr, x16, [SP, #0x20]
    // 0x245dcc: ldr             x16, [fp, #0x10]
    // 0x245dd0: ldur            lr, [fp, #-0x10]
    // 0x245dd4: stp             lr, x16, [SP, #0x10]
    // 0x245dd8: ldur            x16, [fp, #-0x18]
    // 0x245ddc: ldur            lr, [fp, #-0x20]
    // 0x245de0: stp             lr, x16, [SP]
    // 0x245de4: r0 = TextSelectionOverlay()
    //     0x245de4: bl              #0x245e0c  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::TextSelectionOverlay
    // 0x245de8: ldur            x0, [fp, #-0x68]
    // 0x245dec: LeaveFrame
    //     0x245dec: mov             SP, fp
    //     0x245df0: ldp             fp, lr, [SP], #0x10
    // 0x245df4: ret
    //     0x245df4: ret             
    // 0x245df8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x245df8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x245dfc: b               #0x245c84
    // 0x245e00: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x245e00: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x245e04: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x245e04: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x245e08: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x245e08: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] Widget <anonymous closure>(dynamic, BuildContext) {
    // ** addr: 0x24831c, size: 0x60
    // 0x24831c: EnterFrame
    //     0x24831c: stp             fp, lr, [SP, #-0x10]!
    //     0x248320: mov             fp, SP
    // 0x248324: AllocStack(0x18)
    //     0x248324: sub             SP, SP, #0x18
    // 0x248328: SetupParameters()
    //     0x248328: ldr             x0, [fp, #0x18]
    //     0x24832c: ldur            w1, [x0, #0x17]
    //     0x248330: add             x1, x1, HEAP, lsl #32
    // 0x248334: CheckStackOverflow
    //     0x248334: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x248338: cmp             SP, x16
    //     0x24833c: b.ls            #0x248374
    // 0x248340: LoadField: r0 = r1->field_13
    //     0x248340: ldur            w0, [x1, #0x13]
    // 0x248344: DecompressPointer r0
    //     0x248344: add             x0, x0, HEAP, lsl #32
    // 0x248348: LoadField: r2 = r1->field_f
    //     0x248348: ldur            w2, [x1, #0xf]
    // 0x24834c: DecompressPointer r2
    //     0x24834c: add             x2, x2, HEAP, lsl #32
    // 0x248350: ldr             x16, [fp, #0x10]
    // 0x248354: stp             x16, x0, [SP, #8]
    // 0x248358: str             x2, [SP]
    // 0x24835c: ClosureCall
    //     0x24835c: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x248360: ldur            x2, [x0, #0x1f]
    //     0x248364: blr             x2
    // 0x248368: LeaveFrame
    //     0x248368: mov             SP, fp
    //     0x24836c: ldp             fp, lr, [SP], #0x10
    // 0x248370: ret
    //     0x248370: ret             
    // 0x248374: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x248374: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x248378: b               #0x248340
  }
  _ _flagInternalFocus(/* No info */) {
    // ** addr: 0x2483d0, size: 0x90
    // 0x2483d0: EnterFrame
    //     0x2483d0: stp             fp, lr, [SP, #-0x10]!
    //     0x2483d4: mov             fp, SP
    // 0x2483d8: AllocStack(0x18)
    //     0x2483d8: sub             SP, SP, #0x18
    // 0x2483dc: CheckStackOverflow
    //     0x2483dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2483e0: cmp             SP, x16
    //     0x2483e4: b.ls            #0x248450
    // 0x2483e8: r0 = LoadStaticField(0x970)
    //     0x2483e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2483ec: ldr             x0, [x0, #0x12e0]
    // 0x2483f0: cmp             w0, NULL
    // 0x2483f4: b.eq            #0x248458
    // 0x2483f8: LoadField: r1 = r0->field_e3
    //     0x2483f8: ldur            w1, [x0, #0xe3]
    // 0x2483fc: DecompressPointer r1
    //     0x2483fc: add             x1, x1, HEAP, lsl #32
    // 0x248400: cmp             w1, NULL
    // 0x248404: b.eq            #0x24845c
    // 0x248408: LoadField: r0 = r1->field_1b
    //     0x248408: ldur            w0, [x1, #0x1b]
    // 0x24840c: DecompressPointer r0
    //     0x24840c: add             x0, x0, HEAP, lsl #32
    // 0x248410: stur            x0, [fp, #-8]
    // 0x248414: r1 = 1
    //     0x248414: movz            x1, #0x1
    // 0x248418: r0 = AllocateContext()
    //     0x248418: bl              #0x3e4e00  ; AllocateContextStub
    // 0x24841c: mov             x1, x0
    // 0x248420: ldr             x0, [fp, #0x10]
    // 0x248424: StoreField: r1->field_f = r0
    //     0x248424: stur            w0, [x1, #0xf]
    // 0x248428: mov             x2, x1
    // 0x24842c: r1 = Function '_unflagInternalFocus@148183791':.
    //     0x24842c: ldr             x1, [PP, #0x5bc8]  ; [pp+0x5bc8] AnonymousClosure: (0x2484a4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus (0x2484ec)
    // 0x248430: r0 = AllocateClosure()
    //     0x248430: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x248434: ldur            x16, [fp, #-8]
    // 0x248438: stp             x0, x16, [SP]
    // 0x24843c: r0 = addListener()
    //     0x24843c: bl              #0x393c20  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::addListener
    // 0x248440: r0 = Null
    //     0x248440: mov             x0, NULL
    // 0x248444: LeaveFrame
    //     0x248444: mov             SP, fp
    //     0x248448: ldp             fp, lr, [SP], #0x10
    // 0x24844c: ret
    //     0x24844c: ret             
    // 0x248450: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x248450: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x248454: b               #0x2483e8
    // 0x248458: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x248458: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x24845c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x24845c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _unflagInternalFocus(dynamic) {
    // ** addr: 0x2484a4, size: 0x48
    // 0x2484a4: EnterFrame
    //     0x2484a4: stp             fp, lr, [SP, #-0x10]!
    //     0x2484a8: mov             fp, SP
    // 0x2484ac: AllocStack(0x8)
    //     0x2484ac: sub             SP, SP, #8
    // 0x2484b0: SetupParameters()
    //     0x2484b0: ldr             x0, [fp, #0x10]
    //     0x2484b4: ldur            w1, [x0, #0x17]
    //     0x2484b8: add             x1, x1, HEAP, lsl #32
    // 0x2484bc: CheckStackOverflow
    //     0x2484bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2484c0: cmp             SP, x16
    //     0x2484c4: b.ls            #0x2484e4
    // 0x2484c8: LoadField: r0 = r1->field_f
    //     0x2484c8: ldur            w0, [x1, #0xf]
    // 0x2484cc: DecompressPointer r0
    //     0x2484cc: add             x0, x0, HEAP, lsl #32
    // 0x2484d0: str             x0, [SP]
    // 0x2484d4: r0 = _unflagInternalFocus()
    //     0x2484d4: bl              #0x2484ec  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus
    // 0x2484d8: LeaveFrame
    //     0x2484d8: mov             SP, fp
    //     0x2484dc: ldp             fp, lr, [SP], #0x10
    // 0x2484e0: ret
    //     0x2484e0: ret             
    // 0x2484e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2484e4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2484e8: b               #0x2484c8
  }
  _ _unflagInternalFocus(/* No info */) {
    // ** addr: 0x2484ec, size: 0x90
    // 0x2484ec: EnterFrame
    //     0x2484ec: stp             fp, lr, [SP, #-0x10]!
    //     0x2484f0: mov             fp, SP
    // 0x2484f4: AllocStack(0x18)
    //     0x2484f4: sub             SP, SP, #0x18
    // 0x2484f8: CheckStackOverflow
    //     0x2484f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2484fc: cmp             SP, x16
    //     0x248500: b.ls            #0x24856c
    // 0x248504: r0 = LoadStaticField(0x970)
    //     0x248504: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x248508: ldr             x0, [x0, #0x12e0]
    // 0x24850c: cmp             w0, NULL
    // 0x248510: b.eq            #0x248574
    // 0x248514: LoadField: r1 = r0->field_e3
    //     0x248514: ldur            w1, [x0, #0xe3]
    // 0x248518: DecompressPointer r1
    //     0x248518: add             x1, x1, HEAP, lsl #32
    // 0x24851c: cmp             w1, NULL
    // 0x248520: b.eq            #0x248578
    // 0x248524: LoadField: r0 = r1->field_1b
    //     0x248524: ldur            w0, [x1, #0x1b]
    // 0x248528: DecompressPointer r0
    //     0x248528: add             x0, x0, HEAP, lsl #32
    // 0x24852c: stur            x0, [fp, #-8]
    // 0x248530: r1 = 1
    //     0x248530: movz            x1, #0x1
    // 0x248534: r0 = AllocateContext()
    //     0x248534: bl              #0x3e4e00  ; AllocateContextStub
    // 0x248538: mov             x1, x0
    // 0x24853c: ldr             x0, [fp, #0x10]
    // 0x248540: StoreField: r1->field_f = r0
    //     0x248540: stur            w0, [x1, #0xf]
    // 0x248544: mov             x2, x1
    // 0x248548: r1 = Function '_unflagInternalFocus@148183791':.
    //     0x248548: ldr             x1, [PP, #0x5bc8]  ; [pp+0x5bc8] AnonymousClosure: (0x2484a4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus (0x2484ec)
    // 0x24854c: r0 = AllocateClosure()
    //     0x24854c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x248550: ldur            x16, [fp, #-8]
    // 0x248554: stp             x0, x16, [SP]
    // 0x248558: r0 = removeListener()
    //     0x248558: bl              #0x3ba704  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0x24855c: r0 = Null
    //     0x24855c: mov             x0, NULL
    // 0x248560: LeaveFrame
    //     0x248560: mov             SP, fp
    //     0x248564: ldp             fp, lr, [SP], #0x10
    // 0x248568: ret
    //     0x248568: ret             
    // 0x24856c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x24856c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x248570: b               #0x248504
    // 0x248574: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x248574: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x248578: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x248578: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _scheduleShowCaretOnScreen(/* No info */) {
    // ** addr: 0x24868c, size: 0x168
    // 0x24868c: EnterFrame
    //     0x24868c: stp             fp, lr, [SP, #-0x10]!
    //     0x248690: mov             fp, SP
    // 0x248694: AllocStack(0x20)
    //     0x248694: sub             SP, SP, #0x20
    // 0x248698: CheckStackOverflow
    //     0x248698: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x24869c: cmp             SP, x16
    //     0x2486a0: b.ls            #0x2487e4
    // 0x2486a4: r1 = 2
    //     0x2486a4: movz            x1, #0x2
    // 0x2486a8: r0 = AllocateContext()
    //     0x2486a8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2486ac: mov             x1, x0
    // 0x2486b0: ldr             x0, [fp, #0x18]
    // 0x2486b4: StoreField: r1->field_f = r0
    //     0x2486b4: stur            w0, [x1, #0xf]
    // 0x2486b8: ldr             x2, [fp, #0x10]
    // 0x2486bc: StoreField: r1->field_13 = r2
    //     0x2486bc: stur            w2, [x1, #0x13]
    // 0x2486c0: LoadField: r2 = r0->field_93
    //     0x2486c0: ldur            w2, [x0, #0x93]
    // 0x2486c4: DecompressPointer r2
    //     0x2486c4: add             x2, x2, HEAP, lsl #32
    // 0x2486c8: tbnz            w2, #4, #0x2486dc
    // 0x2486cc: r0 = Null
    //     0x2486cc: mov             x0, NULL
    // 0x2486d0: LeaveFrame
    //     0x2486d0: mov             SP, fp
    //     0x2486d4: ldp             fp, lr, [SP], #0x10
    // 0x2486d8: ret
    //     0x2486d8: ret             
    // 0x2486dc: r2 = true
    //     0x2486dc: add             x2, NULL, #0x20  ; true
    // 0x2486e0: StoreField: r0->field_93 = r2
    //     0x2486e0: stur            w2, [x0, #0x93]
    // 0x2486e4: r0 = LoadStaticField(0xbe0)
    //     0x2486e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2486e8: ldr             x0, [x0, #0x17c0]
    // 0x2486ec: cmp             w0, NULL
    // 0x2486f0: b.eq            #0x2487ec
    // 0x2486f4: LoadField: r3 = r0->field_53
    //     0x2486f4: ldur            w3, [x0, #0x53]
    // 0x2486f8: DecompressPointer r3
    //     0x2486f8: add             x3, x3, HEAP, lsl #32
    // 0x2486fc: stur            x3, [fp, #-0x10]
    // 0x248700: LoadField: r0 = r3->field_7
    //     0x248700: ldur            w0, [x3, #7]
    // 0x248704: DecompressPointer r0
    //     0x248704: add             x0, x0, HEAP, lsl #32
    // 0x248708: mov             x2, x1
    // 0x24870c: stur            x0, [fp, #-8]
    // 0x248710: r1 = Function '<anonymous closure>':.
    //     0x248710: ldr             x1, [PP, #0x5c10]  ; [pp+0x5c10] AnonymousClosure: (0x2487f4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen (0x24868c)
    // 0x248714: r0 = AllocateClosure()
    //     0x248714: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x248718: ldur            x2, [fp, #-8]
    // 0x24871c: mov             x3, x0
    // 0x248720: r1 = Null
    //     0x248720: mov             x1, NULL
    // 0x248724: stur            x3, [fp, #-8]
    // 0x248728: cmp             w2, NULL
    // 0x24872c: b.eq            #0x248748
    // 0x248730: LoadField: r4 = r2->field_17
    //     0x248730: ldur            w4, [x2, #0x17]
    // 0x248734: DecompressPointer r4
    //     0x248734: add             x4, x4, HEAP, lsl #32
    // 0x248738: r8 = X0
    //     0x248738: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x24873c: LoadField: r9 = r4->field_7
    //     0x24873c: ldur            x9, [x4, #7]
    // 0x248740: r3 = Null
    //     0x248740: ldr             x3, [PP, #0x5c18]  ; [pp+0x5c18] Null
    // 0x248744: blr             x9
    // 0x248748: ldur            x0, [fp, #-0x10]
    // 0x24874c: LoadField: r1 = r0->field_b
    //     0x24874c: ldur            w1, [x0, #0xb]
    // 0x248750: DecompressPointer r1
    //     0x248750: add             x1, x1, HEAP, lsl #32
    // 0x248754: LoadField: r2 = r0->field_f
    //     0x248754: ldur            w2, [x0, #0xf]
    // 0x248758: DecompressPointer r2
    //     0x248758: add             x2, x2, HEAP, lsl #32
    // 0x24875c: LoadField: r3 = r2->field_b
    //     0x24875c: ldur            w3, [x2, #0xb]
    // 0x248760: DecompressPointer r3
    //     0x248760: add             x3, x3, HEAP, lsl #32
    // 0x248764: r2 = LoadInt32Instr(r1)
    //     0x248764: sbfx            x2, x1, #1, #0x1f
    // 0x248768: stur            x2, [fp, #-0x18]
    // 0x24876c: r1 = LoadInt32Instr(r3)
    //     0x24876c: sbfx            x1, x3, #1, #0x1f
    // 0x248770: cmp             x2, x1
    // 0x248774: b.ne            #0x248780
    // 0x248778: str             x0, [SP]
    // 0x24877c: r0 = _growToNextCapacity()
    //     0x24877c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x248780: ldur            x2, [fp, #-0x10]
    // 0x248784: ldur            x3, [fp, #-0x18]
    // 0x248788: add             x0, x3, #1
    // 0x24878c: lsl             x4, x0, #1
    // 0x248790: StoreField: r2->field_b = r4
    //     0x248790: stur            w4, [x2, #0xb]
    // 0x248794: mov             x1, x3
    // 0x248798: cmp             x1, x0
    // 0x24879c: b.hs            #0x2487f0
    // 0x2487a0: LoadField: r1 = r2->field_f
    //     0x2487a0: ldur            w1, [x2, #0xf]
    // 0x2487a4: DecompressPointer r1
    //     0x2487a4: add             x1, x1, HEAP, lsl #32
    // 0x2487a8: ldur            x0, [fp, #-8]
    // 0x2487ac: ArrayStore: r1[r3] = r0  ; List_4
    //     0x2487ac: add             x25, x1, x3, lsl #2
    //     0x2487b0: add             x25, x25, #0xf
    //     0x2487b4: str             w0, [x25]
    //     0x2487b8: tbz             w0, #0, #0x2487d4
    //     0x2487bc: ldurb           w16, [x1, #-1]
    //     0x2487c0: ldurb           w17, [x0, #-1]
    //     0x2487c4: and             x16, x17, x16, lsr #2
    //     0x2487c8: tst             x16, HEAP, lsr #32
    //     0x2487cc: b.eq            #0x2487d4
    //     0x2487d0: bl              #0x3e41ec
    // 0x2487d4: r0 = Null
    //     0x2487d4: mov             x0, NULL
    // 0x2487d8: LeaveFrame
    //     0x2487d8: mov             SP, fp
    //     0x2487dc: ldp             fp, lr, [SP], #0x10
    // 0x2487e0: ret
    //     0x2487e0: ret             
    // 0x2487e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2487e4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2487e8: b               #0x2486a4
    // 0x2487ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2487ec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2487f0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2487f0: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x2487f4, size: 0x4f4
    // 0x2487f4: EnterFrame
    //     0x2487f4: stp             fp, lr, [SP, #-0x10]!
    //     0x2487f8: mov             fp, SP
    // 0x2487fc: AllocStack(0x68)
    //     0x2487fc: sub             SP, SP, #0x68
    // 0x248800: SetupParameters()
    //     0x248800: add             x0, NULL, #0x30  ; false
    //     0x248804: ldr             x1, [fp, #0x18]
    //     0x248808: ldur            w2, [x1, #0x17]
    //     0x24880c: add             x2, x2, HEAP, lsl #32
    //     0x248810: stur            x2, [fp, #-8]
    // 0x248800: r0 = false
    // 0x248814: CheckStackOverflow
    //     0x248814: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x248818: cmp             SP, x16
    //     0x24881c: b.ls            #0x248cb0
    // 0x248820: LoadField: r1 = r2->field_f
    //     0x248820: ldur            w1, [x2, #0xf]
    // 0x248824: DecompressPointer r1
    //     0x248824: add             x1, x1, HEAP, lsl #32
    // 0x248828: StoreField: r1->field_93 = r0
    //     0x248828: stur            w0, [x1, #0x93]
    // 0x24882c: LoadField: r0 = r1->field_2f
    //     0x24882c: ldur            w0, [x1, #0x2f]
    // 0x248830: DecompressPointer r0
    //     0x248830: add             x0, x0, HEAP, lsl #32
    // 0x248834: str             x0, [SP]
    // 0x248838: r0 = _currentElement()
    //     0x248838: bl              #0x214908  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0x24883c: cmp             w0, NULL
    // 0x248840: b.ne            #0x24884c
    // 0x248844: r3 = Null
    //     0x248844: mov             x3, NULL
    // 0x248848: b               #0x248858
    // 0x24884c: str             x0, [SP]
    // 0x248850: r0 = findRenderObject()
    //     0x248850: bl              #0x21322c  ; [package:flutter/src/widgets/framework.dart] Element::findRenderObject
    // 0x248854: mov             x3, x0
    // 0x248858: mov             x0, x3
    // 0x24885c: stur            x3, [fp, #-0x10]
    // 0x248860: r2 = Null
    //     0x248860: mov             x2, NULL
    // 0x248864: r1 = Null
    //     0x248864: mov             x1, NULL
    // 0x248868: r4 = LoadClassIdInstr(r0)
    //     0x248868: ldur            x4, [x0, #-1]
    //     0x24886c: ubfx            x4, x4, #0xc, #0x14
    // 0x248870: cmp             x4, #0x208
    // 0x248874: b.eq            #0x248884
    // 0x248878: r8 = RenderEditable?
    //     0x248878: ldr             x8, [PP, #0x4e78]  ; [pp+0x4e78] Type: RenderEditable?
    // 0x24887c: r3 = Null
    //     0x24887c: ldr             x3, [PP, #0x5c28]  ; [pp+0x5c28] Null
    // 0x248880: r0 = DefaultNullableTypeTest()
    //     0x248880: bl              #0x3e3e40  ; DefaultNullableTypeTestStub
    // 0x248884: ldur            x0, [fp, #-0x10]
    // 0x248888: cmp             w0, NULL
    // 0x24888c: b.eq            #0x248ca0
    // 0x248890: LoadField: r1 = r0->field_e3
    //     0x248890: ldur            w1, [x0, #0xe3]
    // 0x248894: DecompressPointer r1
    //     0x248894: add             x1, x1, HEAP, lsl #32
    // 0x248898: LoadField: r2 = r1->field_7
    //     0x248898: ldur            x2, [x1, #7]
    // 0x24889c: tbnz            x2, #0x3f, #0x248ca0
    // 0x2488a0: LoadField: r2 = r1->field_f
    //     0x2488a0: ldur            x2, [x1, #0xf]
    // 0x2488a4: tbnz            x2, #0x3f, #0x248ca0
    // 0x2488a8: ldur            x1, [fp, #-8]
    // 0x2488ac: LoadField: r2 = r1->field_f
    //     0x2488ac: ldur            w2, [x1, #0xf]
    // 0x2488b0: DecompressPointer r2
    //     0x2488b0: add             x2, x2, HEAP, lsl #32
    // 0x2488b4: str             x2, [SP]
    // 0x2488b8: r0 = _scrollController()
    //     0x2488b8: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x2488bc: str             x0, [SP]
    // 0x2488c0: r0 = hasClients()
    //     0x2488c0: bl              #0x2498b8  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::hasClients
    // 0x2488c4: tbnz            w0, #4, #0x248ca0
    // 0x2488c8: ldur            x1, [fp, #-8]
    // 0x2488cc: ldur            x0, [fp, #-0x10]
    // 0x2488d0: LoadField: r2 = r0->field_b7
    //     0x2488d0: ldur            w2, [x0, #0xb7]
    // 0x2488d4: DecompressPointer r2
    //     0x2488d4: add             x2, x2, HEAP, lsl #32
    // 0x2488d8: str             x2, [SP]
    // 0x2488dc: r0 = preferredLineHeight()
    //     0x2488dc: bl              #0x1d5004  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x2488e0: ldur            x1, [fp, #-8]
    // 0x2488e4: stur            d0, [fp, #-0x38]
    // 0x2488e8: LoadField: r0 = r1->field_f
    //     0x2488e8: ldur            w0, [x1, #0xf]
    // 0x2488ec: DecompressPointer r0
    //     0x2488ec: add             x0, x0, HEAP, lsl #32
    // 0x2488f0: LoadField: r2 = r0->field_b
    //     0x2488f0: ldur            w2, [x0, #0xb]
    // 0x2488f4: DecompressPointer r2
    //     0x2488f4: add             x2, x2, HEAP, lsl #32
    // 0x2488f8: cmp             w2, NULL
    // 0x2488fc: b.eq            #0x248cb8
    // 0x248900: r2 = Instance_EdgeInsets
    //     0x248900: ldr             x2, [PP, #0x5c38]  ; [pp+0x5c38] Obj!EdgeInsets@473001
    // 0x248904: LoadField: d1 = r2->field_1f
    //     0x248904: ldur            d1, [x2, #0x1f]
    // 0x248908: stur            d1, [fp, #-0x30]
    // 0x24890c: LoadField: r2 = r0->field_3f
    //     0x24890c: ldur            w2, [x0, #0x3f]
    // 0x248910: DecompressPointer r2
    //     0x248910: add             x2, x2, HEAP, lsl #32
    // 0x248914: cmp             w2, NULL
    // 0x248918: b.eq            #0x248a68
    // 0x24891c: LoadField: r0 = r2->field_f
    //     0x24891c: ldur            w0, [x2, #0xf]
    // 0x248920: DecompressPointer r0
    //     0x248920: add             x0, x0, HEAP, lsl #32
    // 0x248924: cmp             w0, NULL
    // 0x248928: b.eq            #0x248a68
    // 0x24892c: r2 = LoadClassIdInstr(r0)
    //     0x24892c: ldur            x2, [x0, #-1]
    //     0x248930: ubfx            x2, x2, #0xc, #0x14
    // 0x248934: str             x0, [SP, #8]
    // 0x248938: str             d0, [SP]
    // 0x24893c: mov             x0, x2
    // 0x248940: r0 = GDT[cid_x0 + -0xf4a]()
    //     0x248940: sub             lr, x0, #0xf4a
    //     0x248944: ldr             lr, [x21, lr, lsl #3]
    //     0x248948: blr             lr
    // 0x24894c: LoadField: d0 = r0->field_f
    //     0x24894c: ldur            d0, [x0, #0xf]
    // 0x248950: stur            d0, [fp, #-0x48]
    // 0x248954: d1 = 48.000000
    //     0x248954: ldr             d1, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x248958: d1 = 48.000000
    //     0x248958: ldr             d1, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x24895c: fcmp            d0, d1
    // 0x248960: b.le            #0x248974
    // 0x248964: mov             v4.16b, v0.16b
    // 0x248968: d2 = 0.000000
    //     0x248968: eor             v2.16b, v2.16b, v2.16b
    // 0x24896c: d2 = 0.000000
    //     0x24896c: eor             v2.16b, v2.16b, v2.16b
    // 0x248970: b               #0x2489b0
    // 0x248974: fcmp            d1, d0
    // 0x248978: b.le            #0x248990
    // 0x24897c: d4 = 48.000000
    //     0x24897c: ldr             d4, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x248980: d4 = 48.000000
    //     0x248980: ldr             d4, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x248984: d2 = 0.000000
    //     0x248984: eor             v2.16b, v2.16b, v2.16b
    // 0x248988: d2 = 0.000000
    //     0x248988: eor             v2.16b, v2.16b, v2.16b
    // 0x24898c: b               #0x2489b0
    // 0x248990: d2 = 0.000000
    //     0x248990: eor             v2.16b, v2.16b, v2.16b
    // 0x248994: d2 = 0.000000
    //     0x248994: eor             v2.16b, v2.16b, v2.16b
    // 0x248998: fcmp            d0, d2
    // 0x24899c: b.ne            #0x2489ac
    // 0x2489a0: fadd            d3, d0, d1
    // 0x2489a4: mov             v4.16b, v3.16b
    // 0x2489a8: b               #0x2489b0
    // 0x2489ac: mov             v4.16b, v0.16b
    // 0x2489b0: ldur            x1, [fp, #-8]
    // 0x2489b4: ldur            d3, [fp, #-0x30]
    // 0x2489b8: ldur            d1, [fp, #-0x38]
    // 0x2489bc: stur            d4, [fp, #-0x40]
    // 0x2489c0: LoadField: r0 = r1->field_f
    //     0x2489c0: ldur            w0, [x1, #0xf]
    // 0x2489c4: DecompressPointer r0
    //     0x2489c4: add             x0, x0, HEAP, lsl #32
    // 0x2489c8: LoadField: r2 = r0->field_3f
    //     0x2489c8: ldur            w2, [x0, #0x3f]
    // 0x2489cc: DecompressPointer r2
    //     0x2489cc: add             x2, x2, HEAP, lsl #32
    // 0x2489d0: cmp             w2, NULL
    // 0x2489d4: b.eq            #0x248cbc
    // 0x2489d8: LoadField: r0 = r2->field_f
    //     0x2489d8: ldur            w0, [x2, #0xf]
    // 0x2489dc: DecompressPointer r0
    //     0x2489dc: add             x0, x0, HEAP, lsl #32
    // 0x2489e0: cmp             w0, NULL
    // 0x2489e4: b.eq            #0x248cc0
    // 0x2489e8: r2 = LoadClassIdInstr(r0)
    //     0x2489e8: ldur            x2, [x0, #-1]
    //     0x2489ec: ubfx            x2, x2, #0xc, #0x14
    // 0x2489f0: r16 = Instance_TextSelectionHandleType
    //     0x2489f0: ldr             x16, [PP, #0x5430]  ; [pp+0x5430] Obj!TextSelectionHandleType@480e41
    // 0x2489f4: stp             x16, x0, [SP, #8]
    // 0x2489f8: str             d1, [SP]
    // 0x2489fc: mov             x0, x2
    // 0x248a00: r0 = GDT[cid_x0 + -0xf6e]()
    //     0x248a00: sub             lr, x0, #0xf6e
    //     0x248a04: ldr             lr, [x21, lr, lsl #3]
    //     0x248a08: blr             lr
    // 0x248a0c: ldur            d0, [fp, #-0x48]
    // 0x248a10: d1 = 2.000000
    //     0x248a10: fmov            d1, #2.00000000
    // 0x248a14: d1 = 2.000000
    //     0x248a14: fmov            d1, #2.00000000
    // 0x248a18: fdiv            d2, d0, d1
    // 0x248a1c: LoadField: d0 = r0->field_f
    //     0x248a1c: ldur            d0, [x0, #0xf]
    // 0x248a20: fsub            d3, d2, d0
    // 0x248a24: ldur            d0, [fp, #-0x40]
    // 0x248a28: fdiv            d2, d0, d1
    // 0x248a2c: fadd            d0, d3, d2
    // 0x248a30: ldur            d1, [fp, #-0x30]
    // 0x248a34: fcmp            d0, d1
    // 0x248a38: b.gt            #0x248a6c
    // 0x248a3c: fcmp            d1, d0
    // 0x248a40: b.le            #0x248a4c
    // 0x248a44: mov             v0.16b, v1.16b
    // 0x248a48: b               #0x248a6c
    // 0x248a4c: d2 = 0.000000
    //     0x248a4c: eor             v2.16b, v2.16b, v2.16b
    // 0x248a50: d2 = 0.000000
    //     0x248a50: eor             v2.16b, v2.16b, v2.16b
    // 0x248a54: fcmp            d0, d2
    // 0x248a58: b.ne            #0x248a6c
    // 0x248a5c: fadd            d2, d0, d1
    // 0x248a60: mov             v0.16b, v2.16b
    // 0x248a64: b               #0x248a6c
    // 0x248a68: mov             v0.16b, v1.16b
    // 0x248a6c: ldur            x0, [fp, #-8]
    // 0x248a70: ldur            x1, [fp, #-0x10]
    // 0x248a74: LoadField: r2 = r0->field_f
    //     0x248a74: ldur            w2, [x0, #0xf]
    // 0x248a78: DecompressPointer r2
    //     0x248a78: add             x2, x2, HEAP, lsl #32
    // 0x248a7c: LoadField: r3 = r2->field_b
    //     0x248a7c: ldur            w3, [x2, #0xb]
    // 0x248a80: DecompressPointer r3
    //     0x248a80: add             x3, x3, HEAP, lsl #32
    // 0x248a84: cmp             w3, NULL
    // 0x248a88: b.eq            #0x248cc4
    // 0x248a8c: r2 = inline_Allocate_Double()
    //     0x248a8c: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x248a90: add             x2, x2, #0x10
    //     0x248a94: cmp             x3, x2
    //     0x248a98: b.ls            #0x248cc8
    //     0x248a9c: str             x2, [THR, #0x50]  ; THR::top
    //     0x248aa0: sub             x2, x2, #0xf
    //     0x248aa4: movz            x3, #0xd148
    //     0x248aa8: movk            x3, #0x3, lsl #16
    //     0x248aac: stur            x3, [x2, #-1]
    // 0x248ab0: StoreField: r2->field_7 = d0
    //     0x248ab0: stur            d0, [x2, #7]
    // 0x248ab4: r16 = Instance_EdgeInsets
    //     0x248ab4: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] Obj!EdgeInsets@473001
    // 0x248ab8: stp             x2, x16, [SP]
    // 0x248abc: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x248abc: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x248ac0: r0 = copyWith()
    //     0x248ac0: bl              #0x24971c  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsets::copyWith
    // 0x248ac4: mov             x1, x0
    // 0x248ac8: ldur            x0, [fp, #-0x10]
    // 0x248acc: stur            x1, [fp, #-0x18]
    // 0x248ad0: LoadField: r2 = r0->field_e3
    //     0x248ad0: ldur            w2, [x0, #0xe3]
    // 0x248ad4: DecompressPointer r2
    //     0x248ad4: add             x2, x2, HEAP, lsl #32
    // 0x248ad8: str             x2, [SP]
    // 0x248adc: r0 = extent()
    //     0x248adc: bl              #0x1fc3bc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x248ae0: ldur            x16, [fp, #-0x10]
    // 0x248ae4: stp             x0, x16, [SP]
    // 0x248ae8: r0 = getLocalRectForCaret()
    //     0x248ae8: bl              #0x235354  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x248aec: mov             x1, x0
    // 0x248af0: ldur            x0, [fp, #-8]
    // 0x248af4: LoadField: r2 = r0->field_f
    //     0x248af4: ldur            w2, [x0, #0xf]
    // 0x248af8: DecompressPointer r2
    //     0x248af8: add             x2, x2, HEAP, lsl #32
    // 0x248afc: stp             x1, x2, [SP]
    // 0x248b00: r0 = _getOffsetToRevealCaret()
    //     0x248b00: bl              #0x241b14  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_getOffsetToRevealCaret
    // 0x248b04: mov             x1, x0
    // 0x248b08: ldur            x0, [fp, #-8]
    // 0x248b0c: stur            x1, [fp, #-0x28]
    // 0x248b10: LoadField: r2 = r0->field_f
    //     0x248b10: ldur            w2, [x0, #0xf]
    // 0x248b14: DecompressPointer r2
    //     0x248b14: add             x2, x2, HEAP, lsl #32
    // 0x248b18: LoadField: r3 = r2->field_b
    //     0x248b18: ldur            w3, [x2, #0xb]
    // 0x248b1c: DecompressPointer r3
    //     0x248b1c: add             x3, x3, HEAP, lsl #32
    // 0x248b20: cmp             w3, NULL
    // 0x248b24: b.eq            #0x248ce4
    // 0x248b28: LoadField: r2 = r3->field_b
    //     0x248b28: ldur            w2, [x3, #0xb]
    // 0x248b2c: DecompressPointer r2
    //     0x248b2c: add             x2, x2, HEAP, lsl #32
    // 0x248b30: LoadField: r3 = r2->field_27
    //     0x248b30: ldur            w3, [x2, #0x27]
    // 0x248b34: DecompressPointer r3
    //     0x248b34: add             x3, x3, HEAP, lsl #32
    // 0x248b38: LoadField: r2 = r3->field_b
    //     0x248b38: ldur            w2, [x3, #0xb]
    // 0x248b3c: DecompressPointer r2
    //     0x248b3c: add             x2, x2, HEAP, lsl #32
    // 0x248b40: stur            x2, [fp, #-0x20]
    // 0x248b44: LoadField: r3 = r2->field_7
    //     0x248b44: ldur            x3, [x2, #7]
    // 0x248b48: LoadField: r4 = r2->field_f
    //     0x248b48: ldur            x4, [x2, #0xf]
    // 0x248b4c: cmp             x3, x4
    // 0x248b50: b.ne            #0x248b64
    // 0x248b54: LoadField: r2 = r1->field_f
    //     0x248b54: ldur            w2, [x1, #0xf]
    // 0x248b58: DecompressPointer r2
    //     0x248b58: add             x2, x2, HEAP, lsl #32
    // 0x248b5c: mov             x1, x2
    // 0x248b60: b               #0x248bd0
    // 0x248b64: ldur            x16, [fp, #-0x10]
    // 0x248b68: stp             x2, x16, [SP]
    // 0x248b6c: r0 = getBoxesForSelection()
    //     0x248b6c: bl              #0x24954c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getBoxesForSelection
    // 0x248b70: LoadField: r1 = r0->field_b
    //     0x248b70: ldur            w1, [x0, #0xb]
    // 0x248b74: DecompressPointer r1
    //     0x248b74: add             x1, x1, HEAP, lsl #32
    // 0x248b78: cbnz            w1, #0x248b8c
    // 0x248b7c: ldur            x1, [fp, #-0x28]
    // 0x248b80: LoadField: r0 = r1->field_f
    //     0x248b80: ldur            w0, [x1, #0xf]
    // 0x248b84: DecompressPointer r0
    //     0x248b84: add             x0, x0, HEAP, lsl #32
    // 0x248b88: b               #0x248bc8
    // 0x248b8c: ldur            x1, [fp, #-0x28]
    // 0x248b90: ldur            x2, [fp, #-0x20]
    // 0x248b94: LoadField: r3 = r2->field_17
    //     0x248b94: ldur            x3, [x2, #0x17]
    // 0x248b98: LoadField: r4 = r2->field_1f
    //     0x248b98: ldur            x4, [x2, #0x1f]
    // 0x248b9c: cmp             x3, x4
    // 0x248ba0: b.ge            #0x248bb8
    // 0x248ba4: str             x0, [SP]
    // 0x248ba8: r0 = last()
    //     0x248ba8: bl              #0x3308d0  ; [dart:core] _GrowableList::last
    // 0x248bac: str             x0, [SP]
    // 0x248bb0: r0 = toRect()
    //     0x248bb0: bl              #0x1ed818  ; [dart:ui] TextBox::toRect
    // 0x248bb4: b               #0x248bc8
    // 0x248bb8: str             x0, [SP]
    // 0x248bbc: r0 = first()
    //     0x248bbc: bl              #0x3377ec  ; [dart:core] _GrowableList::first
    // 0x248bc0: str             x0, [SP]
    // 0x248bc4: r0 = toRect()
    //     0x248bc4: bl              #0x1ed818  ; [dart:ui] TextBox::toRect
    // 0x248bc8: mov             x1, x0
    // 0x248bcc: ldur            x0, [fp, #-8]
    // 0x248bd0: stur            x1, [fp, #-0x20]
    // 0x248bd4: LoadField: r2 = r0->field_13
    //     0x248bd4: ldur            w2, [x0, #0x13]
    // 0x248bd8: DecompressPointer r2
    //     0x248bd8: add             x2, x2, HEAP, lsl #32
    // 0x248bdc: tbnz            w2, #4, #0x248c44
    // 0x248be0: ldur            x2, [fp, #-0x28]
    // 0x248be4: LoadField: r3 = r0->field_f
    //     0x248be4: ldur            w3, [x0, #0xf]
    // 0x248be8: DecompressPointer r3
    //     0x248be8: add             x3, x3, HEAP, lsl #32
    // 0x248bec: str             x3, [SP]
    // 0x248bf0: r0 = _scrollController()
    //     0x248bf0: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x248bf4: ldur            x1, [fp, #-0x28]
    // 0x248bf8: LoadField: d0 = r1->field_7
    //     0x248bf8: ldur            d0, [x1, #7]
    // 0x248bfc: str             x0, [SP, #0x18]
    // 0x248c00: str             d0, [SP, #0x10]
    // 0x248c04: r16 = Instance_Cubic
    //     0x248c04: ldr             x16, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x248c08: r30 = Instance_Duration
    //     0x248c08: ldr             lr, [PP, #0x5c50]  ; [pp+0x5c50] Obj!Duration@482bd1
    // 0x248c0c: stp             lr, x16, [SP]
    // 0x248c10: r0 = animateTo()
    //     0x248c10: bl              #0x248ce8  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::animateTo
    // 0x248c14: ldur            x16, [fp, #-0x18]
    // 0x248c18: ldur            lr, [fp, #-0x20]
    // 0x248c1c: stp             lr, x16, [SP]
    // 0x248c20: r0 = inflateRect()
    //     0x248c20: bl              #0x234dc8  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsets::inflateRect
    // 0x248c24: ldur            x16, [fp, #-0x10]
    // 0x248c28: stp             x0, x16, [SP, #0x10]
    // 0x248c2c: r16 = Instance_Duration
    //     0x248c2c: ldr             x16, [PP, #0x5c50]  ; [pp+0x5c50] Obj!Duration@482bd1
    // 0x248c30: r30 = Instance_Cubic
    //     0x248c30: ldr             lr, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x248c34: stp             lr, x16, [SP]
    // 0x248c38: r4 = const [0, 0x4, 0x4, 0x1, curve, 0x3, duration, 0x2, rect, 0x1, null]
    //     0x248c38: ldr             x4, [PP, #0x5c58]  ; [pp+0x5c58] List(11) [0, 0x4, 0x4, 0x1, "curve", 0x3, "duration", 0x2, "rect", 0x1, Null]
    // 0x248c3c: r0 = showOnScreen()
    //     0x248c3c: bl              #0x205150  ; [package:flutter/src/rendering/object.dart] RenderObject::showOnScreen
    // 0x248c40: b               #0x248c90
    // 0x248c44: ldur            x1, [fp, #-0x28]
    // 0x248c48: LoadField: r2 = r0->field_f
    //     0x248c48: ldur            w2, [x0, #0xf]
    // 0x248c4c: DecompressPointer r2
    //     0x248c4c: add             x2, x2, HEAP, lsl #32
    // 0x248c50: str             x2, [SP]
    // 0x248c54: r0 = _scrollController()
    //     0x248c54: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x248c58: mov             x1, x0
    // 0x248c5c: ldur            x0, [fp, #-0x28]
    // 0x248c60: LoadField: d0 = r0->field_7
    //     0x248c60: ldur            d0, [x0, #7]
    // 0x248c64: str             x1, [SP, #8]
    // 0x248c68: str             d0, [SP]
    // 0x248c6c: r0 = jumpTo()
    //     0x248c6c: bl              #0x2415b8  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::jumpTo
    // 0x248c70: ldur            x16, [fp, #-0x18]
    // 0x248c74: ldur            lr, [fp, #-0x20]
    // 0x248c78: stp             lr, x16, [SP]
    // 0x248c7c: r0 = inflateRect()
    //     0x248c7c: bl              #0x234dc8  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsets::inflateRect
    // 0x248c80: ldur            x16, [fp, #-0x10]
    // 0x248c84: stp             x0, x16, [SP]
    // 0x248c88: r4 = const [0, 0x2, 0x2, 0x1, rect, 0x1, null]
    //     0x248c88: ldr             x4, [PP, #0x5968]  ; [pp+0x5968] List(7) [0, 0x2, 0x2, 0x1, "rect", 0x1, Null]
    // 0x248c8c: r0 = showOnScreen()
    //     0x248c8c: bl              #0x205150  ; [package:flutter/src/rendering/object.dart] RenderObject::showOnScreen
    // 0x248c90: r0 = Null
    //     0x248c90: mov             x0, NULL
    // 0x248c94: LeaveFrame
    //     0x248c94: mov             SP, fp
    //     0x248c98: ldp             fp, lr, [SP], #0x10
    // 0x248c9c: ret
    //     0x248c9c: ret             
    // 0x248ca0: r0 = Null
    //     0x248ca0: mov             x0, NULL
    // 0x248ca4: LeaveFrame
    //     0x248ca4: mov             SP, fp
    //     0x248ca8: ldp             fp, lr, [SP], #0x10
    // 0x248cac: ret
    //     0x248cac: ret             
    // 0x248cb0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x248cb0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x248cb4: b               #0x248820
    // 0x248cb8: r0 = NullCastErrorSharedWithFPURegs()
    //     0x248cb8: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x248cbc: r0 = NullCastErrorSharedWithFPURegs()
    //     0x248cbc: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x248cc0: r0 = NullCastErrorSharedWithFPURegs()
    //     0x248cc0: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x248cc4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x248cc4: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x248cc8: SaveReg d0
    //     0x248cc8: str             q0, [SP, #-0x10]!
    // 0x248ccc: stp             x0, x1, [SP, #-0x10]!
    // 0x248cd0: r0 = AllocateDouble()
    //     0x248cd0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x248cd4: mov             x2, x0
    // 0x248cd8: ldp             x0, x1, [SP], #0x10
    // 0x248cdc: RestoreReg d0
    //     0x248cdc: ldr             q0, [SP], #0x10
    // 0x248ce0: b               #0x248ab0
    // 0x248ce4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x248ce4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ didChangeDependencies(/* No info */) {
    // ** addr: 0x2532b4, size: 0x210
    // 0x2532b4: EnterFrame
    //     0x2532b4: stp             fp, lr, [SP, #-0x10]!
    //     0x2532b8: mov             fp, SP
    // 0x2532bc: AllocStack(0x10)
    //     0x2532bc: sub             SP, SP, #0x10
    // 0x2532c0: CheckStackOverflow
    //     0x2532c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2532c4: cmp             SP, x16
    //     0x2532c8: b.ls            #0x2534a0
    // 0x2532cc: ldr             x0, [fp, #0x10]
    // 0x2532d0: LoadField: r1 = r0->field_f
    //     0x2532d0: ldur            w1, [x0, #0xf]
    // 0x2532d4: DecompressPointer r1
    //     0x2532d4: add             x1, x1, HEAP, lsl #32
    // 0x2532d8: cmp             w1, NULL
    // 0x2532dc: b.eq            #0x2534a8
    // 0x2532e0: str             x1, [SP]
    // 0x2532e4: r0 = boldTextOf()
    //     0x2532e4: bl              #0x2535f8  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::boldTextOf
    // 0x2532e8: tbnz            w0, #4, #0x253320
    // 0x2532ec: ldr             x0, [fp, #0x10]
    // 0x2532f0: LoadField: r1 = r0->field_b
    //     0x2532f0: ldur            w1, [x0, #0xb]
    // 0x2532f4: DecompressPointer r1
    //     0x2532f4: add             x1, x1, HEAP, lsl #32
    // 0x2532f8: cmp             w1, NULL
    // 0x2532fc: b.eq            #0x2534ac
    // 0x253300: LoadField: r2 = r1->field_47
    //     0x253300: ldur            w2, [x1, #0x47]
    // 0x253304: DecompressPointer r2
    //     0x253304: add             x2, x2, HEAP, lsl #32
    // 0x253308: r16 = Instance_TextStyle
    //     0x253308: add             x16, PP, #0xc, lsl #12  ; [pp+0xc008] Obj!TextStyle@47aed1
    //     0x25330c: ldr             x16, [x16, #8]
    // 0x253310: stp             x16, x2, [SP]
    // 0x253314: r0 = merge()
    //     0x253314: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x253318: ldr             x1, [fp, #0x10]
    // 0x25331c: b               #0x253340
    // 0x253320: ldr             x1, [fp, #0x10]
    // 0x253324: LoadField: r0 = r1->field_b
    //     0x253324: ldur            w0, [x1, #0xb]
    // 0x253328: DecompressPointer r0
    //     0x253328: add             x0, x0, HEAP, lsl #32
    // 0x25332c: cmp             w0, NULL
    // 0x253330: b.eq            #0x2534b0
    // 0x253334: LoadField: r2 = r0->field_47
    //     0x253334: ldur            w2, [x0, #0x47]
    // 0x253338: DecompressPointer r2
    //     0x253338: add             x2, x2, HEAP, lsl #32
    // 0x25333c: mov             x0, x2
    // 0x253340: StoreField: r1->field_63 = r0
    //     0x253340: stur            w0, [x1, #0x63]
    //     0x253344: ldurb           w16, [x1, #-1]
    //     0x253348: ldurb           w17, [x0, #-1]
    //     0x25334c: and             x16, x17, x16, lsr #2
    //     0x253350: tst             x16, HEAP, lsr #32
    //     0x253354: b.eq            #0x25335c
    //     0x253358: bl              #0x3e4608
    // 0x25335c: LoadField: r0 = r1->field_f
    //     0x25335c: ldur            w0, [x1, #0xf]
    // 0x253360: DecompressPointer r0
    //     0x253360: add             x0, x0, HEAP, lsl #32
    // 0x253364: cmp             w0, NULL
    // 0x253368: b.eq            #0x2534b4
    // 0x25336c: str             x0, [SP]
    // 0x253370: r0 = maybeOf()
    //     0x253370: bl              #0x2535b0  ; [package:flutter/src/widgets/autofill.dart] AutofillGroup::maybeOf
    // 0x253374: ldr             x0, [fp, #0x10]
    // 0x253378: LoadField: r1 = r0->field_b
    //     0x253378: ldur            w1, [x0, #0xb]
    // 0x25337c: DecompressPointer r1
    //     0x25337c: add             x1, x1, HEAP, lsl #32
    // 0x253380: cmp             w1, NULL
    // 0x253384: b.eq            #0x2534b8
    // 0x253388: LoadField: r1 = r0->field_f
    //     0x253388: ldur            w1, [x0, #0xf]
    // 0x25338c: DecompressPointer r1
    //     0x25338c: add             x1, x1, HEAP, lsl #32
    // 0x253390: cmp             w1, NULL
    // 0x253394: b.eq            #0x2534bc
    // 0x253398: str             x1, [SP]
    // 0x25339c: r0 = of()
    //     0x25339c: bl              #0x253544  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::of
    // 0x2533a0: mov             x1, x0
    // 0x2533a4: ldr             x0, [fp, #0x10]
    // 0x2533a8: LoadField: r2 = r0->field_6f
    //     0x2533a8: ldur            w2, [x0, #0x6f]
    // 0x2533ac: DecompressPointer r2
    //     0x2533ac: add             x2, x2, HEAP, lsl #32
    // 0x2533b0: cmp             w2, w1
    // 0x2533b4: b.eq            #0x253404
    // 0x2533b8: StoreField: r0->field_6f = r1
    //     0x2533b8: stur            w1, [x0, #0x6f]
    // 0x2533bc: str             x0, [SP]
    // 0x2533c0: r0 = _showBlinkingCursor()
    //     0x2533c0: bl              #0x23dbac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x2533c4: tbnz            w0, #4, #0x2533d8
    // 0x2533c8: ldr             x16, [fp, #0x10]
    // 0x2533cc: str             x16, [SP]
    // 0x2533d0: r0 = _startCursorBlink()
    //     0x2533d0: bl              #0x233c28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x2533d4: b               #0x253404
    // 0x2533d8: ldr             x0, [fp, #0x10]
    // 0x2533dc: LoadField: r1 = r0->field_6f
    //     0x2533dc: ldur            w1, [x0, #0x6f]
    // 0x2533e0: DecompressPointer r1
    //     0x2533e0: add             x1, x1, HEAP, lsl #32
    // 0x2533e4: tbz             w1, #4, #0x253404
    // 0x2533e8: LoadField: r1 = r0->field_1f
    //     0x2533e8: ldur            w1, [x0, #0x1f]
    // 0x2533ec: DecompressPointer r1
    //     0x2533ec: add             x1, x1, HEAP, lsl #32
    // 0x2533f0: cmp             w1, NULL
    // 0x2533f4: b.eq            #0x253404
    // 0x2533f8: str             x0, [SP]
    // 0x2533fc: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x2533fc: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x253400: r0 = _stopCursorBlink()
    //     0x253400: bl              #0x235d24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x253404: ldr             x0, [fp, #0x10]
    // 0x253408: LoadField: r1 = r0->field_f
    //     0x253408: ldur            w1, [x0, #0xf]
    // 0x25340c: DecompressPointer r1
    //     0x25340c: add             x1, x1, HEAP, lsl #32
    // 0x253410: cmp             w1, NULL
    // 0x253414: b.eq            #0x2534c0
    // 0x253418: str             x1, [SP]
    // 0x25341c: r0 = orientationOf()
    //     0x25341c: bl              #0x2534c4  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::orientationOf
    // 0x253420: ldr             x1, [fp, #0x10]
    // 0x253424: LoadField: r2 = r1->field_6b
    //     0x253424: ldur            w2, [x1, #0x6b]
    // 0x253428: DecompressPointer r2
    //     0x253428: add             x2, x2, HEAP, lsl #32
    // 0x25342c: cmp             w2, NULL
    // 0x253430: b.ne            #0x253460
    // 0x253434: StoreField: r1->field_6b = r0
    //     0x253434: stur            w0, [x1, #0x6b]
    //     0x253438: ldurb           w16, [x1, #-1]
    //     0x25343c: ldurb           w17, [x0, #-1]
    //     0x253440: and             x16, x17, x16, lsr #2
    //     0x253444: tst             x16, HEAP, lsr #32
    //     0x253448: b.eq            #0x253450
    //     0x25344c: bl              #0x3e4608
    // 0x253450: r0 = Null
    //     0x253450: mov             x0, NULL
    // 0x253454: LeaveFrame
    //     0x253454: mov             SP, fp
    //     0x253458: ldp             fp, lr, [SP], #0x10
    // 0x25345c: ret
    //     0x25345c: ret             
    // 0x253460: cmp             w0, w2
    // 0x253464: b.eq            #0x253490
    // 0x253468: StoreField: r1->field_6b = r0
    //     0x253468: stur            w0, [x1, #0x6b]
    //     0x25346c: ldurb           w16, [x1, #-1]
    //     0x253470: ldurb           w17, [x0, #-1]
    //     0x253474: and             x16, x17, x16, lsr #2
    //     0x253478: tst             x16, HEAP, lsr #32
    //     0x25347c: b.eq            #0x253484
    //     0x253480: bl              #0x3e4608
    // 0x253484: str             x1, [SP]
    // 0x253488: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x253488: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x25348c: r0 = hideToolbar()
    //     0x25348c: bl              #0x23dcb8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x253490: r0 = Null
    //     0x253490: mov             x0, NULL
    // 0x253494: LeaveFrame
    //     0x253494: mov             SP, fp
    //     0x253498: ldp             fp, lr, [SP], #0x10
    // 0x25349c: ret
    //     0x25349c: ret             
    // 0x2534a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2534a0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2534a4: b               #0x2532cc
    // 0x2534a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2534a8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2534ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2534ac: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2534b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2534b0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2534b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2534b4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2534b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2534b8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2534bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2534bc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2534c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2534c0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x26da50, size: 0x5d8
    // 0x26da50: EnterFrame
    //     0x26da50: stp             fp, lr, [SP, #-0x10]!
    //     0x26da54: mov             fp, SP
    // 0x26da58: AllocStack(0x40)
    //     0x26da58: sub             SP, SP, #0x40
    // 0x26da5c: CheckStackOverflow
    //     0x26da5c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26da60: cmp             SP, x16
    //     0x26da64: b.ls            #0x26dfd0
    // 0x26da68: ldr             x0, [fp, #0x10]
    // 0x26da6c: r2 = Null
    //     0x26da6c: mov             x2, NULL
    // 0x26da70: r1 = Null
    //     0x26da70: mov             x1, NULL
    // 0x26da74: r4 = 59
    //     0x26da74: movz            x4, #0x3b
    // 0x26da78: branchIfSmi(r0, 0x26da84)
    //     0x26da78: tbz             w0, #0, #0x26da84
    // 0x26da7c: r4 = LoadClassIdInstr(r0)
    //     0x26da7c: ldur            x4, [x0, #-1]
    //     0x26da80: ubfx            x4, x4, #0xc, #0x14
    // 0x26da84: cmp             x4, #0x6a5
    // 0x26da88: b.eq            #0x26da9c
    // 0x26da8c: r8 = EditableText
    //     0x26da8c: ldr             x8, [PP, #0x5830]  ; [pp+0x5830] Type: EditableText
    // 0x26da90: r3 = Null
    //     0x26da90: add             x3, PP, #0x11, lsl #12  ; [pp+0x11468] Null
    //     0x26da94: ldr             x3, [x3, #0x468]
    // 0x26da98: r0 = EditableText()
    //     0x26da98: bl              #0x1c2d3c  ; IsType_EditableText_Stub
    // 0x26da9c: ldr             x3, [fp, #0x18]
    // 0x26daa0: LoadField: r2 = r3->field_7
    //     0x26daa0: ldur            w2, [x3, #7]
    // 0x26daa4: DecompressPointer r2
    //     0x26daa4: add             x2, x2, HEAP, lsl #32
    // 0x26daa8: ldr             x0, [fp, #0x10]
    // 0x26daac: r1 = Null
    //     0x26daac: mov             x1, NULL
    // 0x26dab0: cmp             w2, NULL
    // 0x26dab4: b.eq            #0x26dad8
    // 0x26dab8: LoadField: r4 = r2->field_17
    //     0x26dab8: ldur            w4, [x2, #0x17]
    // 0x26dabc: DecompressPointer r4
    //     0x26dabc: add             x4, x4, HEAP, lsl #32
    // 0x26dac0: r8 = X0 bound StatefulWidget
    //     0x26dac0: add             x8, PP, #9, lsl #12  ; [pp+0x9ce0] TypeParameter: X0 bound StatefulWidget
    //     0x26dac4: ldr             x8, [x8, #0xce0]
    // 0x26dac8: LoadField: r9 = r4->field_7
    //     0x26dac8: ldur            x9, [x4, #7]
    // 0x26dacc: r3 = Null
    //     0x26dacc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11478] Null
    //     0x26dad0: ldr             x3, [x3, #0x478]
    // 0x26dad4: blr             x9
    // 0x26dad8: ldr             x0, [fp, #0x18]
    // 0x26dadc: LoadField: r1 = r0->field_b
    //     0x26dadc: ldur            w1, [x0, #0xb]
    // 0x26dae0: DecompressPointer r1
    //     0x26dae0: add             x1, x1, HEAP, lsl #32
    // 0x26dae4: cmp             w1, NULL
    // 0x26dae8: b.eq            #0x26dfd8
    // 0x26daec: LoadField: r2 = r1->field_b
    //     0x26daec: ldur            w2, [x1, #0xb]
    // 0x26daf0: DecompressPointer r2
    //     0x26daf0: add             x2, x2, HEAP, lsl #32
    // 0x26daf4: ldr             x1, [fp, #0x10]
    // 0x26daf8: LoadField: r3 = r1->field_b
    //     0x26daf8: ldur            w3, [x1, #0xb]
    // 0x26dafc: DecompressPointer r3
    //     0x26dafc: add             x3, x3, HEAP, lsl #32
    // 0x26db00: stur            x3, [fp, #-8]
    // 0x26db04: cmp             w2, w3
    // 0x26db08: b.eq            #0x26db98
    // 0x26db0c: r1 = 1
    //     0x26db0c: movz            x1, #0x1
    // 0x26db10: r0 = AllocateContext()
    //     0x26db10: bl              #0x3e4e00  ; AllocateContextStub
    // 0x26db14: mov             x1, x0
    // 0x26db18: ldr             x0, [fp, #0x18]
    // 0x26db1c: StoreField: r1->field_f = r0
    //     0x26db1c: stur            w0, [x1, #0xf]
    // 0x26db20: mov             x2, x1
    // 0x26db24: r1 = Function '_didChangeTextEditingValue@148183791':.
    //     0x26db24: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f0] AnonymousClosure: (0x26ecdc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x26ed24)
    //     0x26db28: ldr             x1, [x1, #0x3f0]
    // 0x26db2c: r0 = AllocateClosure()
    //     0x26db2c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26db30: ldur            x16, [fp, #-8]
    // 0x26db34: stp             x0, x16, [SP]
    // 0x26db38: r0 = removeListener()
    //     0x26db38: bl              #0x3b28b0  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0x26db3c: ldr             x0, [fp, #0x18]
    // 0x26db40: LoadField: r1 = r0->field_b
    //     0x26db40: ldur            w1, [x0, #0xb]
    // 0x26db44: DecompressPointer r1
    //     0x26db44: add             x1, x1, HEAP, lsl #32
    // 0x26db48: cmp             w1, NULL
    // 0x26db4c: b.eq            #0x26dfdc
    // 0x26db50: LoadField: r2 = r1->field_b
    //     0x26db50: ldur            w2, [x1, #0xb]
    // 0x26db54: DecompressPointer r2
    //     0x26db54: add             x2, x2, HEAP, lsl #32
    // 0x26db58: stur            x2, [fp, #-0x10]
    // 0x26db5c: r1 = 1
    //     0x26db5c: movz            x1, #0x1
    // 0x26db60: r0 = AllocateContext()
    //     0x26db60: bl              #0x3e4e00  ; AllocateContextStub
    // 0x26db64: mov             x1, x0
    // 0x26db68: ldr             x0, [fp, #0x18]
    // 0x26db6c: StoreField: r1->field_f = r0
    //     0x26db6c: stur            w0, [x1, #0xf]
    // 0x26db70: mov             x2, x1
    // 0x26db74: r1 = Function '_didChangeTextEditingValue@148183791':.
    //     0x26db74: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f0] AnonymousClosure: (0x26ecdc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x26ed24)
    //     0x26db78: ldr             x1, [x1, #0x3f0]
    // 0x26db7c: r0 = AllocateClosure()
    //     0x26db7c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26db80: ldur            x16, [fp, #-0x10]
    // 0x26db84: stp             x0, x16, [SP]
    // 0x26db88: r0 = addListener()
    //     0x26db88: bl              #0x380078  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x26db8c: ldr             x16, [fp, #0x18]
    // 0x26db90: str             x16, [SP]
    // 0x26db94: r0 = _updateRemoteEditingValueIfNeeded()
    //     0x26db94: bl              #0x22c848  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateRemoteEditingValueIfNeeded
    // 0x26db98: ldr             x0, [fp, #0x18]
    // 0x26db9c: ldur            x1, [fp, #-8]
    // 0x26dba0: LoadField: r2 = r0->field_b
    //     0x26dba0: ldur            w2, [x0, #0xb]
    // 0x26dba4: DecompressPointer r2
    //     0x26dba4: add             x2, x2, HEAP, lsl #32
    // 0x26dba8: cmp             w2, NULL
    // 0x26dbac: b.eq            #0x26dfe0
    // 0x26dbb0: LoadField: r3 = r2->field_b
    //     0x26dbb0: ldur            w3, [x2, #0xb]
    // 0x26dbb4: DecompressPointer r3
    //     0x26dbb4: add             x3, x3, HEAP, lsl #32
    // 0x26dbb8: LoadField: r2 = r3->field_27
    //     0x26dbb8: ldur            w2, [x3, #0x27]
    // 0x26dbbc: DecompressPointer r2
    //     0x26dbbc: add             x2, x2, HEAP, lsl #32
    // 0x26dbc0: LoadField: r3 = r2->field_b
    //     0x26dbc0: ldur            w3, [x2, #0xb]
    // 0x26dbc4: DecompressPointer r3
    //     0x26dbc4: add             x3, x3, HEAP, lsl #32
    // 0x26dbc8: LoadField: r2 = r1->field_27
    //     0x26dbc8: ldur            w2, [x1, #0x27]
    // 0x26dbcc: DecompressPointer r2
    //     0x26dbcc: add             x2, x2, HEAP, lsl #32
    // 0x26dbd0: LoadField: r1 = r2->field_b
    //     0x26dbd0: ldur            w1, [x2, #0xb]
    // 0x26dbd4: DecompressPointer r1
    //     0x26dbd4: add             x1, x1, HEAP, lsl #32
    // 0x26dbd8: stp             x1, x3, [SP]
    // 0x26dbdc: r0 = ==()
    //     0x26dbdc: bl              #0x35311c  ; [package:flutter/src/services/text_editing.dart] TextSelection::==
    // 0x26dbe0: tbz             w0, #4, #0x26dc20
    // 0x26dbe4: ldr             x0, [fp, #0x18]
    // 0x26dbe8: LoadField: r1 = r0->field_3f
    //     0x26dbe8: ldur            w1, [x0, #0x3f]
    // 0x26dbec: DecompressPointer r1
    //     0x26dbec: add             x1, x1, HEAP, lsl #32
    // 0x26dbf0: cmp             w1, NULL
    // 0x26dbf4: b.eq            #0x26dc20
    // 0x26dbf8: LoadField: r2 = r0->field_b
    //     0x26dbf8: ldur            w2, [x0, #0xb]
    // 0x26dbfc: DecompressPointer r2
    //     0x26dbfc: add             x2, x2, HEAP, lsl #32
    // 0x26dc00: cmp             w2, NULL
    // 0x26dc04: b.eq            #0x26dfe4
    // 0x26dc08: LoadField: r3 = r2->field_b
    //     0x26dc08: ldur            w3, [x2, #0xb]
    // 0x26dc0c: DecompressPointer r3
    //     0x26dc0c: add             x3, x3, HEAP, lsl #32
    // 0x26dc10: LoadField: r2 = r3->field_27
    //     0x26dc10: ldur            w2, [x3, #0x27]
    // 0x26dc14: DecompressPointer r2
    //     0x26dc14: add             x2, x2, HEAP, lsl #32
    // 0x26dc18: stp             x2, x1, [SP]
    // 0x26dc1c: r0 = update()
    //     0x26dc1c: bl              #0x24355c  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::update
    // 0x26dc20: ldr             x0, [fp, #0x18]
    // 0x26dc24: LoadField: r1 = r0->field_3f
    //     0x26dc24: ldur            w1, [x0, #0x3f]
    // 0x26dc28: DecompressPointer r1
    //     0x26dc28: add             x1, x1, HEAP, lsl #32
    // 0x26dc2c: cmp             w1, NULL
    // 0x26dc30: b.eq            #0x26dc6c
    // 0x26dc34: LoadField: r2 = r0->field_b
    //     0x26dc34: ldur            w2, [x0, #0xb]
    // 0x26dc38: DecompressPointer r2
    //     0x26dc38: add             x2, x2, HEAP, lsl #32
    // 0x26dc3c: cmp             w2, NULL
    // 0x26dc40: b.eq            #0x26dfe8
    // 0x26dc44: LoadField: r3 = r2->field_2f
    //     0x26dc44: ldur            w3, [x2, #0x2f]
    // 0x26dc48: DecompressPointer r3
    //     0x26dc48: add             x3, x3, HEAP, lsl #32
    // 0x26dc4c: LoadField: r2 = r1->field_2f
    //     0x26dc4c: ldur            w2, [x1, #0x2f]
    // 0x26dc50: DecompressPointer r2
    //     0x26dc50: add             x2, x2, HEAP, lsl #32
    // 0x26dc54: cmp             w2, w3
    // 0x26dc58: b.eq            #0x26dc68
    // 0x26dc5c: StoreField: r1->field_2f = r3
    //     0x26dc5c: stur            w3, [x1, #0x2f]
    // 0x26dc60: str             x1, [SP]
    // 0x26dc64: r0 = _updateTextSelectionOverlayVisibilities()
    //     0x26dc64: bl              #0x243418  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::_updateTextSelectionOverlayVisibilities
    // 0x26dc68: ldr             x0, [fp, #0x18]
    // 0x26dc6c: ldr             x1, [fp, #0x10]
    // 0x26dc70: LoadField: r2 = r0->field_b
    //     0x26dc70: ldur            w2, [x0, #0xb]
    // 0x26dc74: DecompressPointer r2
    //     0x26dc74: add             x2, x2, HEAP, lsl #32
    // 0x26dc78: cmp             w2, NULL
    // 0x26dc7c: b.eq            #0x26dfec
    // 0x26dc80: LoadField: r3 = r2->field_f
    //     0x26dc80: ldur            w3, [x2, #0xf]
    // 0x26dc84: DecompressPointer r3
    //     0x26dc84: add             x3, x3, HEAP, lsl #32
    // 0x26dc88: LoadField: r2 = r1->field_f
    //     0x26dc88: ldur            w2, [x1, #0xf]
    // 0x26dc8c: DecompressPointer r2
    //     0x26dc8c: add             x2, x2, HEAP, lsl #32
    // 0x26dc90: stur            x2, [fp, #-8]
    // 0x26dc94: cmp             w3, w2
    // 0x26dc98: b.eq            #0x26dd28
    // 0x26dc9c: r1 = 1
    //     0x26dc9c: movz            x1, #0x1
    // 0x26dca0: r0 = AllocateContext()
    //     0x26dca0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x26dca4: mov             x1, x0
    // 0x26dca8: ldr             x0, [fp, #0x18]
    // 0x26dcac: StoreField: r1->field_f = r0
    //     0x26dcac: stur            w0, [x1, #0xf]
    // 0x26dcb0: mov             x2, x1
    // 0x26dcb4: r1 = Function '_handleFocusChanged@148183791':.
    //     0x26dcb4: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f8] AnonymousClosure: (0x26e1ac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x26e1f4)
    //     0x26dcb8: ldr             x1, [x1, #0x3f8]
    // 0x26dcbc: r0 = AllocateClosure()
    //     0x26dcbc: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26dcc0: ldur            x16, [fp, #-8]
    // 0x26dcc4: stp             x0, x16, [SP]
    // 0x26dcc8: r0 = removeListener()
    //     0x26dcc8: bl              #0x3ba704  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0x26dccc: ldr             x0, [fp, #0x18]
    // 0x26dcd0: LoadField: r1 = r0->field_b
    //     0x26dcd0: ldur            w1, [x0, #0xb]
    // 0x26dcd4: DecompressPointer r1
    //     0x26dcd4: add             x1, x1, HEAP, lsl #32
    // 0x26dcd8: cmp             w1, NULL
    // 0x26dcdc: b.eq            #0x26dff0
    // 0x26dce0: LoadField: r2 = r1->field_f
    //     0x26dce0: ldur            w2, [x1, #0xf]
    // 0x26dce4: DecompressPointer r2
    //     0x26dce4: add             x2, x2, HEAP, lsl #32
    // 0x26dce8: stur            x2, [fp, #-8]
    // 0x26dcec: r1 = 1
    //     0x26dcec: movz            x1, #0x1
    // 0x26dcf0: r0 = AllocateContext()
    //     0x26dcf0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x26dcf4: mov             x1, x0
    // 0x26dcf8: ldr             x0, [fp, #0x18]
    // 0x26dcfc: StoreField: r1->field_f = r0
    //     0x26dcfc: stur            w0, [x1, #0xf]
    // 0x26dd00: mov             x2, x1
    // 0x26dd04: r1 = Function '_handleFocusChanged@148183791':.
    //     0x26dd04: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f8] AnonymousClosure: (0x26e1ac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x26e1f4)
    //     0x26dd08: ldr             x1, [x1, #0x3f8]
    // 0x26dd0c: r0 = AllocateClosure()
    //     0x26dd0c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26dd10: ldur            x16, [fp, #-8]
    // 0x26dd14: stp             x0, x16, [SP]
    // 0x26dd18: r0 = addListener()
    //     0x26dd18: bl              #0x393c20  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::addListener
    // 0x26dd1c: ldr             x16, [fp, #0x18]
    // 0x26dd20: str             x16, [SP]
    // 0x26dd24: r0 = updateKeepAlive()
    //     0x26dd24: bl              #0x26e130  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::updateKeepAlive
    // 0x26dd28: ldr             x0, [fp, #0x18]
    // 0x26dd2c: LoadField: r1 = r0->field_b
    //     0x26dd2c: ldur            w1, [x0, #0xb]
    // 0x26dd30: DecompressPointer r1
    //     0x26dd30: add             x1, x1, HEAP, lsl #32
    // 0x26dd34: cmp             w1, NULL
    // 0x26dd38: b.eq            #0x26dff4
    // 0x26dd3c: str             x0, [SP]
    // 0x26dd40: r0 = _hasInputConnection()
    //     0x26dd40: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x26dd44: tbnz            w0, #4, #0x26dd60
    // 0x26dd48: ldr             x0, [fp, #0x18]
    // 0x26dd4c: LoadField: r1 = r0->field_b
    //     0x26dd4c: ldur            w1, [x0, #0xb]
    // 0x26dd50: DecompressPointer r1
    //     0x26dd50: add             x1, x1, HEAP, lsl #32
    // 0x26dd54: cmp             w1, NULL
    // 0x26dd58: b.eq            #0x26dff8
    // 0x26dd5c: b               #0x26dd64
    // 0x26dd60: ldr             x0, [fp, #0x18]
    // 0x26dd64: ldr             x1, [fp, #0x10]
    // 0x26dd68: LoadField: r2 = r0->field_b
    //     0x26dd68: ldur            w2, [x0, #0xb]
    // 0x26dd6c: DecompressPointer r2
    //     0x26dd6c: add             x2, x2, HEAP, lsl #32
    // 0x26dd70: cmp             w2, NULL
    // 0x26dd74: b.eq            #0x26dffc
    // 0x26dd78: LoadField: r3 = r2->field_47
    //     0x26dd78: ldur            w3, [x2, #0x47]
    // 0x26dd7c: DecompressPointer r3
    //     0x26dd7c: add             x3, x3, HEAP, lsl #32
    // 0x26dd80: LoadField: r2 = r1->field_47
    //     0x26dd80: ldur            w2, [x1, #0x47]
    // 0x26dd84: DecompressPointer r2
    //     0x26dd84: add             x2, x2, HEAP, lsl #32
    // 0x26dd88: stp             x2, x3, [SP]
    // 0x26dd8c: r0 = ==()
    //     0x26dd8c: bl              #0x35c18c  ; [package:flutter/src/painting/text_style.dart] TextStyle::==
    // 0x26dd90: tbz             w0, #4, #0x26decc
    // 0x26dd94: ldr             x0, [fp, #0x18]
    // 0x26dd98: LoadField: r1 = r0->field_f
    //     0x26dd98: ldur            w1, [x0, #0xf]
    // 0x26dd9c: DecompressPointer r1
    //     0x26dd9c: add             x1, x1, HEAP, lsl #32
    // 0x26dda0: cmp             w1, NULL
    // 0x26dda4: b.eq            #0x26e000
    // 0x26dda8: str             x1, [SP]
    // 0x26ddac: r0 = boldTextOf()
    //     0x26ddac: bl              #0x2535f8  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::boldTextOf
    // 0x26ddb0: tbnz            w0, #4, #0x26dde8
    // 0x26ddb4: ldr             x0, [fp, #0x18]
    // 0x26ddb8: LoadField: r1 = r0->field_b
    //     0x26ddb8: ldur            w1, [x0, #0xb]
    // 0x26ddbc: DecompressPointer r1
    //     0x26ddbc: add             x1, x1, HEAP, lsl #32
    // 0x26ddc0: cmp             w1, NULL
    // 0x26ddc4: b.eq            #0x26e004
    // 0x26ddc8: LoadField: r2 = r1->field_47
    //     0x26ddc8: ldur            w2, [x1, #0x47]
    // 0x26ddcc: DecompressPointer r2
    //     0x26ddcc: add             x2, x2, HEAP, lsl #32
    // 0x26ddd0: r16 = Instance_TextStyle
    //     0x26ddd0: add             x16, PP, #0xc, lsl #12  ; [pp+0xc008] Obj!TextStyle@47aed1
    //     0x26ddd4: ldr             x16, [x16, #8]
    // 0x26ddd8: stp             x16, x2, [SP]
    // 0x26dddc: r0 = merge()
    //     0x26dddc: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x26dde0: ldr             x1, [fp, #0x18]
    // 0x26dde4: b               #0x26de08
    // 0x26dde8: ldr             x1, [fp, #0x18]
    // 0x26ddec: LoadField: r0 = r1->field_b
    //     0x26ddec: ldur            w0, [x1, #0xb]
    // 0x26ddf0: DecompressPointer r0
    //     0x26ddf0: add             x0, x0, HEAP, lsl #32
    // 0x26ddf4: cmp             w0, NULL
    // 0x26ddf8: b.eq            #0x26e008
    // 0x26ddfc: LoadField: r2 = r0->field_47
    //     0x26ddfc: ldur            w2, [x0, #0x47]
    // 0x26de00: DecompressPointer r2
    //     0x26de00: add             x2, x2, HEAP, lsl #32
    // 0x26de04: mov             x0, x2
    // 0x26de08: StoreField: r1->field_63 = r0
    //     0x26de08: stur            w0, [x1, #0x63]
    //     0x26de0c: ldurb           w16, [x1, #-1]
    //     0x26de10: ldurb           w17, [x0, #-1]
    //     0x26de14: and             x16, x17, x16, lsr #2
    //     0x26de18: tst             x16, HEAP, lsr #32
    //     0x26de1c: b.eq            #0x26de24
    //     0x26de20: bl              #0x3e4608
    // 0x26de24: str             x1, [SP]
    // 0x26de28: r0 = _hasInputConnection()
    //     0x26de28: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x26de2c: tbnz            w0, #4, #0x26decc
    // 0x26de30: ldr             x0, [fp, #0x18]
    // 0x26de34: LoadField: r1 = r0->field_3b
    //     0x26de34: ldur            w1, [x0, #0x3b]
    // 0x26de38: DecompressPointer r1
    //     0x26de38: add             x1, x1, HEAP, lsl #32
    // 0x26de3c: stur            x1, [fp, #-0x20]
    // 0x26de40: cmp             w1, NULL
    // 0x26de44: b.eq            #0x26e00c
    // 0x26de48: LoadField: r2 = r0->field_63
    //     0x26de48: ldur            w2, [x0, #0x63]
    // 0x26de4c: DecompressPointer r2
    //     0x26de4c: add             x2, x2, HEAP, lsl #32
    // 0x26de50: LoadField: r3 = r2->field_13
    //     0x26de50: ldur            w3, [x2, #0x13]
    // 0x26de54: DecompressPointer r3
    //     0x26de54: add             x3, x3, HEAP, lsl #32
    // 0x26de58: stur            x3, [fp, #-0x18]
    // 0x26de5c: LoadField: r4 = r2->field_1f
    //     0x26de5c: ldur            w4, [x2, #0x1f]
    // 0x26de60: DecompressPointer r4
    //     0x26de60: add             x4, x4, HEAP, lsl #32
    // 0x26de64: stur            x4, [fp, #-0x10]
    // 0x26de68: LoadField: r5 = r2->field_23
    //     0x26de68: ldur            w5, [x2, #0x23]
    // 0x26de6c: DecompressPointer r5
    //     0x26de6c: add             x5, x5, HEAP, lsl #32
    // 0x26de70: stur            x5, [fp, #-8]
    // 0x26de74: LoadField: r2 = r0->field_b
    //     0x26de74: ldur            w2, [x0, #0xb]
    // 0x26de78: DecompressPointer r2
    //     0x26de78: add             x2, x2, HEAP, lsl #32
    // 0x26de7c: cmp             w2, NULL
    // 0x26de80: b.eq            #0x26e010
    // 0x26de84: LoadField: r2 = r0->field_f
    //     0x26de84: ldur            w2, [x0, #0xf]
    // 0x26de88: DecompressPointer r2
    //     0x26de88: add             x2, x2, HEAP, lsl #32
    // 0x26de8c: cmp             w2, NULL
    // 0x26de90: b.eq            #0x26e014
    // 0x26de94: str             x2, [SP]
    // 0x26de98: r0 = of()
    //     0x26de98: bl              #0x243f24  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x26de9c: ldr             x0, [fp, #0x18]
    // 0x26dea0: LoadField: r1 = r0->field_b
    //     0x26dea0: ldur            w1, [x0, #0xb]
    // 0x26dea4: DecompressPointer r1
    //     0x26dea4: add             x1, x1, HEAP, lsl #32
    // 0x26dea8: cmp             w1, NULL
    // 0x26deac: b.eq            #0x26e018
    // 0x26deb0: ldur            x16, [fp, #-0x20]
    // 0x26deb4: ldur            lr, [fp, #-0x18]
    // 0x26deb8: stp             lr, x16, [SP, #0x10]
    // 0x26debc: ldur            x16, [fp, #-0x10]
    // 0x26dec0: ldur            lr, [fp, #-8]
    // 0x26dec4: stp             lr, x16, [SP]
    // 0x26dec8: r0 = setStyle()
    //     0x26dec8: bl              #0x243c34  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setStyle
    // 0x26decc: ldr             x0, [fp, #0x18]
    // 0x26ded0: ldr             x1, [fp, #0x10]
    // 0x26ded4: LoadField: r2 = r0->field_b
    //     0x26ded4: ldur            w2, [x0, #0xb]
    // 0x26ded8: DecompressPointer r2
    //     0x26ded8: add             x2, x2, HEAP, lsl #32
    // 0x26dedc: cmp             w2, NULL
    // 0x26dee0: b.eq            #0x26e01c
    // 0x26dee4: LoadField: r3 = r2->field_33
    //     0x26dee4: ldur            w3, [x2, #0x33]
    // 0x26dee8: DecompressPointer r3
    //     0x26dee8: add             x3, x3, HEAP, lsl #32
    // 0x26deec: LoadField: r2 = r1->field_33
    //     0x26deec: ldur            w2, [x1, #0x33]
    // 0x26def0: DecompressPointer r2
    //     0x26def0: add             x2, x2, HEAP, lsl #32
    // 0x26def4: cmp             w3, w2
    // 0x26def8: b.eq            #0x26df04
    // 0x26defc: str             x0, [SP]
    // 0x26df00: r0 = _startOrStopCursorTimerIfNeeded()
    //     0x26df00: bl              #0x26e0c0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startOrStopCursorTimerIfNeeded
    // 0x26df04: ldr             x0, [fp, #0x18]
    // 0x26df08: LoadField: r1 = r0->field_b
    //     0x26df08: ldur            w1, [x0, #0xb]
    // 0x26df0c: DecompressPointer r1
    //     0x26df0c: add             x1, x1, HEAP, lsl #32
    // 0x26df10: cmp             w1, NULL
    // 0x26df14: b.eq            #0x26e020
    // 0x26df18: LoadField: r2 = r1->field_8f
    //     0x26df18: ldur            w2, [x1, #0x8f]
    // 0x26df1c: DecompressPointer r2
    //     0x26df1c: add             x2, x2, HEAP, lsl #32
    // 0x26df20: r1 = LoadClassIdInstr(r2)
    //     0x26df20: ldur            x1, [x2, #-1]
    //     0x26df24: ubfx            x1, x1, #0xc, #0x14
    // 0x26df28: sub             x16, x1, #0x737
    // 0x26df2c: cmp             x16, #0xa
    // 0x26df30: b.hi            #0x26df44
    // 0x26df34: str             x0, [SP]
    // 0x26df38: r0 = pasteEnabled()
    //     0x26df38: bl              #0x26e028  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x26df3c: mov             x1, x0
    // 0x26df40: b               #0x26df80
    // 0x26df44: cmp             w2, NULL
    // 0x26df48: b.ne            #0x26df54
    // 0x26df4c: r0 = Null
    //     0x26df4c: mov             x0, NULL
    // 0x26df50: b               #0x26df70
    // 0x26df54: r0 = LoadClassIdInstr(r2)
    //     0x26df54: ldur            x0, [x2, #-1]
    //     0x26df58: ubfx            x0, x0, #0xc, #0x14
    // 0x26df5c: str             x2, [SP]
    // 0x26df60: r0 = GDT[cid_x0 + -0xf45]()
    //     0x26df60: sub             lr, x0, #0xf45
    //     0x26df64: ldr             lr, [x21, lr, lsl #3]
    //     0x26df68: blr             lr
    // 0x26df6c: r0 = false
    //     0x26df6c: add             x0, NULL, #0x30  ; false
    // 0x26df70: cmp             w0, NULL
    // 0x26df74: b.ne            #0x26df7c
    // 0x26df78: r0 = false
    //     0x26df78: add             x0, NULL, #0x30  ; false
    // 0x26df7c: mov             x1, x0
    // 0x26df80: ldr             x0, [fp, #0x18]
    // 0x26df84: stur            x1, [fp, #-8]
    // 0x26df88: LoadField: r2 = r0->field_b
    //     0x26df88: ldur            w2, [x0, #0xb]
    // 0x26df8c: DecompressPointer r2
    //     0x26df8c: add             x2, x2, HEAP, lsl #32
    // 0x26df90: cmp             w2, NULL
    // 0x26df94: b.eq            #0x26e024
    // 0x26df98: str             x0, [SP]
    // 0x26df9c: r0 = pasteEnabled()
    //     0x26df9c: bl              #0x26e028  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x26dfa0: tbnz            w0, #4, #0x26dfc0
    // 0x26dfa4: ldur            x0, [fp, #-8]
    // 0x26dfa8: tbnz            w0, #4, #0x26dfc0
    // 0x26dfac: ldr             x0, [fp, #0x18]
    // 0x26dfb0: LoadField: r1 = r0->field_33
    //     0x26dfb0: ldur            w1, [x0, #0x33]
    // 0x26dfb4: DecompressPointer r1
    //     0x26dfb4: add             x1, x1, HEAP, lsl #32
    // 0x26dfb8: str             x1, [SP]
    // 0x26dfbc: r0 = update()
    //     0x26dfbc: bl              #0x2326d0  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::update
    // 0x26dfc0: r0 = Null
    //     0x26dfc0: mov             x0, NULL
    // 0x26dfc4: LeaveFrame
    //     0x26dfc4: mov             SP, fp
    //     0x26dfc8: ldp             fp, lr, [SP], #0x10
    // 0x26dfcc: ret
    //     0x26dfcc: ret             
    // 0x26dfd0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26dfd0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26dfd4: b               #0x26da68
    // 0x26dfd8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dfd8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dfdc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dfdc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dfe0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dfe0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dfe4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dfe4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dfe8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dfe8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dfec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dfec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dff0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dff0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dff4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dff4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dff8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dff8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26dffc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26dffc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e000: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e000: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e004: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e004: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e008: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e008: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e00c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e00c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e010: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e010: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e014: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e014: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e018: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e018: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e01c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e01c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e020: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e020: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e024: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e024: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ pasteEnabled(/* No info */) {
    // ** addr: 0x26e028, size: 0x98
    // 0x26e028: EnterFrame
    //     0x26e028: stp             fp, lr, [SP, #-0x10]!
    //     0x26e02c: mov             fp, SP
    // 0x26e030: ldr             x1, [fp, #0x10]
    // 0x26e034: LoadField: r2 = r1->field_b
    //     0x26e034: ldur            w2, [x1, #0xb]
    // 0x26e038: DecompressPointer r2
    //     0x26e038: add             x2, x2, HEAP, lsl #32
    // 0x26e03c: cmp             w2, NULL
    // 0x26e040: b.eq            #0x26e0bc
    // 0x26e044: LoadField: r3 = r2->field_8f
    //     0x26e044: ldur            w3, [x2, #0x8f]
    // 0x26e048: DecompressPointer r3
    //     0x26e048: add             x3, x3, HEAP, lsl #32
    // 0x26e04c: r4 = LoadClassIdInstr(r3)
    //     0x26e04c: ldur            x4, [x3, #-1]
    //     0x26e050: ubfx            x4, x4, #0xc, #0x14
    // 0x26e054: sub             x16, x4, #0x737
    // 0x26e058: cmp             x16, #0xa
    // 0x26e05c: b.ls            #0x26e08c
    // 0x26e060: LoadField: r3 = r2->field_2b
    //     0x26e060: ldur            w3, [x2, #0x2b]
    // 0x26e064: DecompressPointer r3
    //     0x26e064: add             x3, x3, HEAP, lsl #32
    // 0x26e068: LoadField: r2 = r3->field_f
    //     0x26e068: ldur            w2, [x3, #0xf]
    // 0x26e06c: DecompressPointer r2
    //     0x26e06c: add             x2, x2, HEAP, lsl #32
    // 0x26e070: tbnz            w2, #4, #0x26e07c
    // 0x26e074: r0 = true
    //     0x26e074: add             x0, NULL, #0x20  ; true
    // 0x26e078: b               #0x26e080
    // 0x26e07c: r0 = false
    //     0x26e07c: add             x0, NULL, #0x30  ; false
    // 0x26e080: LeaveFrame
    //     0x26e080: mov             SP, fp
    //     0x26e084: ldp             fp, lr, [SP], #0x10
    // 0x26e088: ret
    //     0x26e088: ret             
    // 0x26e08c: LoadField: r2 = r1->field_33
    //     0x26e08c: ldur            w2, [x1, #0x33]
    // 0x26e090: DecompressPointer r2
    //     0x26e090: add             x2, x2, HEAP, lsl #32
    // 0x26e094: LoadField: r1 = r2->field_27
    //     0x26e094: ldur            w1, [x2, #0x27]
    // 0x26e098: DecompressPointer r1
    //     0x26e098: add             x1, x1, HEAP, lsl #32
    // 0x26e09c: r16 = Instance_ClipboardStatus
    //     0x26e09c: ldr             x16, [PP, #0x5438]  ; [pp+0x5438] Obj!ClipboardStatus@47dc31
    // 0x26e0a0: cmp             w1, w16
    // 0x26e0a4: r16 = true
    //     0x26e0a4: add             x16, NULL, #0x20  ; true
    // 0x26e0a8: r17 = false
    //     0x26e0a8: add             x17, NULL, #0x30  ; false
    // 0x26e0ac: csel            x0, x16, x17, eq
    // 0x26e0b0: LeaveFrame
    //     0x26e0b0: mov             SP, fp
    //     0x26e0b4: ldp             fp, lr, [SP], #0x10
    // 0x26e0b8: ret
    //     0x26e0b8: ret             
    // 0x26e0bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e0bc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _startOrStopCursorTimerIfNeeded(/* No info */) {
    // ** addr: 0x26e0c0, size: 0x70
    // 0x26e0c0: EnterFrame
    //     0x26e0c0: stp             fp, lr, [SP, #-0x10]!
    //     0x26e0c4: mov             fp, SP
    // 0x26e0c8: AllocStack(0x8)
    //     0x26e0c8: sub             SP, SP, #8
    // 0x26e0cc: CheckStackOverflow
    //     0x26e0cc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26e0d0: cmp             SP, x16
    //     0x26e0d4: b.ls            #0x26e128
    // 0x26e0d8: ldr             x16, [fp, #0x10]
    // 0x26e0dc: str             x16, [SP]
    // 0x26e0e0: r0 = _showBlinkingCursor()
    //     0x26e0e0: bl              #0x23dbac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x26e0e4: tbz             w0, #4, #0x26e0fc
    // 0x26e0e8: ldr             x16, [fp, #0x10]
    // 0x26e0ec: str             x16, [SP]
    // 0x26e0f0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x26e0f0: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x26e0f4: r0 = _stopCursorBlink()
    //     0x26e0f4: bl              #0x235d24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x26e0f8: b               #0x26e118
    // 0x26e0fc: ldr             x0, [fp, #0x10]
    // 0x26e100: LoadField: r1 = r0->field_1f
    //     0x26e100: ldur            w1, [x0, #0x1f]
    // 0x26e104: DecompressPointer r1
    //     0x26e104: add             x1, x1, HEAP, lsl #32
    // 0x26e108: cmp             w1, NULL
    // 0x26e10c: b.ne            #0x26e118
    // 0x26e110: str             x0, [SP]
    // 0x26e114: r0 = _startCursorBlink()
    //     0x26e114: bl              #0x233c28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x26e118: r0 = Null
    //     0x26e118: mov             x0, NULL
    // 0x26e11c: LeaveFrame
    //     0x26e11c: mov             SP, fp
    //     0x26e120: ldp             fp, lr, [SP], #0x10
    // 0x26e124: ret
    //     0x26e124: ret             
    // 0x26e128: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26e128: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26e12c: b               #0x26e0d8
  }
  [closure] void _handleFocusChanged(dynamic) {
    // ** addr: 0x26e1ac, size: 0x48
    // 0x26e1ac: EnterFrame
    //     0x26e1ac: stp             fp, lr, [SP, #-0x10]!
    //     0x26e1b0: mov             fp, SP
    // 0x26e1b4: AllocStack(0x8)
    //     0x26e1b4: sub             SP, SP, #8
    // 0x26e1b8: SetupParameters()
    //     0x26e1b8: ldr             x0, [fp, #0x10]
    //     0x26e1bc: ldur            w1, [x0, #0x17]
    //     0x26e1c0: add             x1, x1, HEAP, lsl #32
    // 0x26e1c4: CheckStackOverflow
    //     0x26e1c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26e1c8: cmp             SP, x16
    //     0x26e1cc: b.ls            #0x26e1ec
    // 0x26e1d0: LoadField: r0 = r1->field_f
    //     0x26e1d0: ldur            w0, [x1, #0xf]
    // 0x26e1d4: DecompressPointer r0
    //     0x26e1d4: add             x0, x0, HEAP, lsl #32
    // 0x26e1d8: str             x0, [SP]
    // 0x26e1dc: r0 = _handleFocusChanged()
    //     0x26e1dc: bl              #0x26e1f4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged
    // 0x26e1e0: LeaveFrame
    //     0x26e1e0: mov             SP, fp
    //     0x26e1e4: ldp             fp, lr, [SP], #0x10
    // 0x26e1e8: ret
    //     0x26e1e8: ret             
    // 0x26e1ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26e1ec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26e1f0: b               #0x26e1d0
  }
  _ _handleFocusChanged(/* No info */) {
    // ** addr: 0x26e1f4, size: 0x25c
    // 0x26e1f4: EnterFrame
    //     0x26e1f4: stp             fp, lr, [SP, #-0x10]!
    //     0x26e1f8: mov             fp, SP
    // 0x26e1fc: AllocStack(0x30)
    //     0x26e1fc: sub             SP, SP, #0x30
    // 0x26e200: CheckStackOverflow
    //     0x26e200: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26e204: cmp             SP, x16
    //     0x26e208: b.ls            #0x26e420
    // 0x26e20c: r1 = 1
    //     0x26e20c: movz            x1, #0x1
    // 0x26e210: r0 = AllocateContext()
    //     0x26e210: bl              #0x3e4e00  ; AllocateContextStub
    // 0x26e214: mov             x1, x0
    // 0x26e218: ldr             x0, [fp, #0x10]
    // 0x26e21c: stur            x1, [fp, #-8]
    // 0x26e220: StoreField: r1->field_f = r0
    //     0x26e220: stur            w0, [x1, #0xf]
    // 0x26e224: str             x0, [SP]
    // 0x26e228: r0 = _openOrCloseInputConnectionIfNeeded()
    //     0x26e228: bl              #0x26e784  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openOrCloseInputConnectionIfNeeded
    // 0x26e22c: ldr             x16, [fp, #0x10]
    // 0x26e230: str             x16, [SP]
    // 0x26e234: r0 = _startOrStopCursorTimerIfNeeded()
    //     0x26e234: bl              #0x26e0c0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startOrStopCursorTimerIfNeeded
    // 0x26e238: ldr             x16, [fp, #0x10]
    // 0x26e23c: str             x16, [SP]
    // 0x26e240: r0 = _updateOrDisposeSelectionOverlayIfNeeded()
    //     0x26e240: bl              #0x26e534  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateOrDisposeSelectionOverlayIfNeeded
    // 0x26e244: ldr             x0, [fp, #0x10]
    // 0x26e248: LoadField: r1 = r0->field_b
    //     0x26e248: ldur            w1, [x0, #0xb]
    // 0x26e24c: DecompressPointer r1
    //     0x26e24c: add             x1, x1, HEAP, lsl #32
    // 0x26e250: cmp             w1, NULL
    // 0x26e254: b.eq            #0x26e428
    // 0x26e258: LoadField: r2 = r1->field_f
    //     0x26e258: ldur            w2, [x1, #0xf]
    // 0x26e25c: DecompressPointer r2
    //     0x26e25c: add             x2, x2, HEAP, lsl #32
    // 0x26e260: str             x2, [SP]
    // 0x26e264: r0 = hasFocus()
    //     0x26e264: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x26e268: tbnz            w0, #4, #0x26e3cc
    // 0x26e26c: r0 = LoadStaticField(0x970)
    //     0x26e26c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x26e270: ldr             x0, [x0, #0x12e0]
    // 0x26e274: cmp             w0, NULL
    // 0x26e278: b.eq            #0x26e42c
    // 0x26e27c: LoadField: r1 = r0->field_e7
    //     0x26e27c: ldur            w1, [x0, #0xe7]
    // 0x26e280: DecompressPointer r1
    //     0x26e280: add             x1, x1, HEAP, lsl #32
    // 0x26e284: stur            x1, [fp, #-0x18]
    // 0x26e288: LoadField: r0 = r1->field_b
    //     0x26e288: ldur            w0, [x1, #0xb]
    // 0x26e28c: DecompressPointer r0
    //     0x26e28c: add             x0, x0, HEAP, lsl #32
    // 0x26e290: LoadField: r2 = r1->field_f
    //     0x26e290: ldur            w2, [x1, #0xf]
    // 0x26e294: DecompressPointer r2
    //     0x26e294: add             x2, x2, HEAP, lsl #32
    // 0x26e298: LoadField: r3 = r2->field_b
    //     0x26e298: ldur            w3, [x2, #0xb]
    // 0x26e29c: DecompressPointer r3
    //     0x26e29c: add             x3, x3, HEAP, lsl #32
    // 0x26e2a0: r2 = LoadInt32Instr(r0)
    //     0x26e2a0: sbfx            x2, x0, #1, #0x1f
    // 0x26e2a4: stur            x2, [fp, #-0x10]
    // 0x26e2a8: r0 = LoadInt32Instr(r3)
    //     0x26e2a8: sbfx            x0, x3, #1, #0x1f
    // 0x26e2ac: cmp             x2, x0
    // 0x26e2b0: b.ne            #0x26e2bc
    // 0x26e2b4: str             x1, [SP]
    // 0x26e2b8: r0 = _growToNextCapacity()
    //     0x26e2b8: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x26e2bc: ldr             x4, [fp, #0x10]
    // 0x26e2c0: ldur            x2, [fp, #-0x18]
    // 0x26e2c4: ldur            x3, [fp, #-0x10]
    // 0x26e2c8: add             x0, x3, #1
    // 0x26e2cc: lsl             x1, x0, #1
    // 0x26e2d0: StoreField: r2->field_b = r1
    //     0x26e2d0: stur            w1, [x2, #0xb]
    // 0x26e2d4: mov             x1, x3
    // 0x26e2d8: cmp             x1, x0
    // 0x26e2dc: b.hs            #0x26e430
    // 0x26e2e0: LoadField: r1 = r2->field_f
    //     0x26e2e0: ldur            w1, [x2, #0xf]
    // 0x26e2e4: DecompressPointer r1
    //     0x26e2e4: add             x1, x1, HEAP, lsl #32
    // 0x26e2e8: mov             x0, x4
    // 0x26e2ec: ArrayStore: r1[r3] = r0  ; List_4
    //     0x26e2ec: add             x25, x1, x3, lsl #2
    //     0x26e2f0: add             x25, x25, #0xf
    //     0x26e2f4: str             w0, [x25]
    //     0x26e2f8: tbz             w0, #0, #0x26e314
    //     0x26e2fc: ldurb           w16, [x1, #-1]
    //     0x26e300: ldurb           w17, [x0, #-1]
    //     0x26e304: and             x16, x17, x16, lsr #2
    //     0x26e308: tst             x16, HEAP, lsr #32
    //     0x26e30c: b.eq            #0x26e314
    //     0x26e310: bl              #0x3e41ec
    // 0x26e314: LoadField: r0 = r4->field_f
    //     0x26e314: ldur            w0, [x4, #0xf]
    // 0x26e318: DecompressPointer r0
    //     0x26e318: add             x0, x0, HEAP, lsl #32
    // 0x26e31c: cmp             w0, NULL
    // 0x26e320: b.eq            #0x26e434
    // 0x26e324: str             x0, [SP]
    // 0x26e328: r0 = of()
    //     0x26e328: bl              #0x240da4  ; [package:flutter/src/widgets/view.dart] View::of
    // 0x26e32c: LoadField: r1 = r0->field_13
    //     0x26e32c: ldur            w1, [x0, #0x13]
    // 0x26e330: DecompressPointer r1
    //     0x26e330: add             x1, x1, HEAP, lsl #32
    // 0x26e334: LoadField: r0 = r1->field_13
    //     0x26e334: ldur            w0, [x1, #0x13]
    // 0x26e338: DecompressPointer r0
    //     0x26e338: add             x0, x0, HEAP, lsl #32
    // 0x26e33c: LoadField: d0 = r0->field_1f
    //     0x26e33c: ldur            d0, [x0, #0x1f]
    // 0x26e340: r0 = inline_Allocate_Double()
    //     0x26e340: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x26e344: add             x0, x0, #0x10
    //     0x26e348: cmp             x1, x0
    //     0x26e34c: b.ls            #0x26e438
    //     0x26e350: str             x0, [THR, #0x50]  ; THR::top
    //     0x26e354: sub             x0, x0, #0xf
    //     0x26e358: movz            x1, #0xd148
    //     0x26e35c: movk            x1, #0x3, lsl #16
    //     0x26e360: stur            x1, [x0, #-1]
    // 0x26e364: StoreField: r0->field_7 = d0
    //     0x26e364: stur            d0, [x0, #7]
    // 0x26e368: ldr             x1, [fp, #0x10]
    // 0x26e36c: StoreField: r1->field_97 = r0
    //     0x26e36c: stur            w0, [x1, #0x97]
    //     0x26e370: ldurb           w16, [x1, #-1]
    //     0x26e374: ldurb           w17, [x0, #-1]
    //     0x26e378: and             x16, x17, x16, lsr #2
    //     0x26e37c: tst             x16, HEAP, lsr #32
    //     0x26e380: b.eq            #0x26e388
    //     0x26e384: bl              #0x3e4608
    // 0x26e388: LoadField: r0 = r1->field_b
    //     0x26e388: ldur            w0, [x1, #0xb]
    // 0x26e38c: DecompressPointer r0
    //     0x26e38c: add             x0, x0, HEAP, lsl #32
    // 0x26e390: cmp             w0, NULL
    // 0x26e394: b.eq            #0x26e448
    // 0x26e398: r16 = true
    //     0x26e398: add             x16, NULL, #0x20  ; true
    // 0x26e39c: stp             x16, x1, [SP]
    // 0x26e3a0: r0 = _scheduleShowCaretOnScreen()
    //     0x26e3a0: bl              #0x24868c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x26e3a4: ldr             x16, [fp, #0x10]
    // 0x26e3a8: str             x16, [SP]
    // 0x26e3ac: r0 = _adjustedSelectionWhenFocused()
    //     0x26e3ac: bl              #0x26e494  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_adjustedSelectionWhenFocused
    // 0x26e3b0: cmp             w0, NULL
    // 0x26e3b4: b.eq            #0x26e404
    // 0x26e3b8: ldr             x16, [fp, #0x10]
    // 0x26e3bc: stp             x0, x16, [SP, #8]
    // 0x26e3c0: str             NULL, [SP]
    // 0x26e3c4: r0 = _handleSelectionChanged()
    //     0x26e3c4: bl              #0x241e80  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x26e3c8: b               #0x26e404
    // 0x26e3cc: r0 = LoadStaticField(0x970)
    //     0x26e3cc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x26e3d0: ldr             x0, [x0, #0x12e0]
    // 0x26e3d4: cmp             w0, NULL
    // 0x26e3d8: b.eq            #0x26e44c
    // 0x26e3dc: ldr             x16, [fp, #0x10]
    // 0x26e3e0: stp             x16, x0, [SP]
    // 0x26e3e4: r0 = removeObserver()
    //     0x26e3e4: bl              #0x26e450  ; [package:flutter/src/widgets/binding.dart] _WidgetsFlutterBinding&BindingBase&GestureBinding&SchedulerBinding&ServicesBinding&PaintingBinding&SemanticsBinding&RendererBinding&WidgetsBinding::removeObserver
    // 0x26e3e8: ldur            x2, [fp, #-8]
    // 0x26e3ec: r1 = Function '<anonymous closure>':.
    //     0x26e3ec: add             x1, PP, #0x11, lsl #12  ; [pp+0x11420] AnonymousClosure: (0x26ecbc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x26e1f4)
    //     0x26e3f0: ldr             x1, [x1, #0x420]
    // 0x26e3f4: r0 = AllocateClosure()
    //     0x26e3f4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26e3f8: ldr             x16, [fp, #0x10]
    // 0x26e3fc: stp             x0, x16, [SP]
    // 0x26e400: r0 = setState()
    //     0x26e400: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x26e404: ldr             x16, [fp, #0x10]
    // 0x26e408: str             x16, [SP]
    // 0x26e40c: r0 = updateKeepAlive()
    //     0x26e40c: bl              #0x26e130  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::updateKeepAlive
    // 0x26e410: r0 = Null
    //     0x26e410: mov             x0, NULL
    // 0x26e414: LeaveFrame
    //     0x26e414: mov             SP, fp
    //     0x26e418: ldp             fp, lr, [SP], #0x10
    // 0x26e41c: ret
    //     0x26e41c: ret             
    // 0x26e420: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26e420: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26e424: b               #0x26e20c
    // 0x26e428: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e428: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e42c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e42c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e430: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x26e430: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x26e434: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e434: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e438: SaveReg d0
    //     0x26e438: str             q0, [SP, #-0x10]!
    // 0x26e43c: r0 = AllocateDouble()
    //     0x26e43c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x26e440: RestoreReg d0
    //     0x26e440: ldr             q0, [SP], #0x10
    // 0x26e444: b               #0x26e364
    // 0x26e448: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e448: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e44c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e44c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _adjustedSelectionWhenFocused(/* No info */) {
    // ** addr: 0x26e494, size: 0xa0
    // 0x26e494: EnterFrame
    //     0x26e494: stp             fp, lr, [SP, #-0x10]!
    //     0x26e498: mov             fp, SP
    // 0x26e49c: AllocStack(0x8)
    //     0x26e49c: sub             SP, SP, #8
    // 0x26e4a0: ldr             x0, [fp, #0x10]
    // 0x26e4a4: LoadField: r1 = r0->field_b
    //     0x26e4a4: ldur            w1, [x0, #0xb]
    // 0x26e4a8: DecompressPointer r1
    //     0x26e4a8: add             x1, x1, HEAP, lsl #32
    // 0x26e4ac: cmp             w1, NULL
    // 0x26e4b0: b.eq            #0x26e530
    // 0x26e4b4: LoadField: r0 = r1->field_b
    //     0x26e4b4: ldur            w0, [x1, #0xb]
    // 0x26e4b8: DecompressPointer r0
    //     0x26e4b8: add             x0, x0, HEAP, lsl #32
    // 0x26e4bc: LoadField: r1 = r0->field_27
    //     0x26e4bc: ldur            w1, [x0, #0x27]
    // 0x26e4c0: DecompressPointer r1
    //     0x26e4c0: add             x1, x1, HEAP, lsl #32
    // 0x26e4c4: LoadField: r0 = r1->field_b
    //     0x26e4c4: ldur            w0, [x1, #0xb]
    // 0x26e4c8: DecompressPointer r0
    //     0x26e4c8: add             x0, x0, HEAP, lsl #32
    // 0x26e4cc: LoadField: r2 = r0->field_7
    //     0x26e4cc: ldur            x2, [x0, #7]
    // 0x26e4d0: tbnz            x2, #0x3f, #0x26e4e4
    // 0x26e4d4: LoadField: r2 = r0->field_f
    //     0x26e4d4: ldur            x2, [x0, #0xf]
    // 0x26e4d8: tbnz            x2, #0x3f, #0x26e4e4
    // 0x26e4dc: r0 = Null
    //     0x26e4dc: mov             x0, NULL
    // 0x26e4e0: b               #0x26e524
    // 0x26e4e4: LoadField: r0 = r1->field_7
    //     0x26e4e4: ldur            w0, [x1, #7]
    // 0x26e4e8: DecompressPointer r0
    //     0x26e4e8: add             x0, x0, HEAP, lsl #32
    // 0x26e4ec: LoadField: r1 = r0->field_7
    //     0x26e4ec: ldur            w1, [x0, #7]
    // 0x26e4f0: DecompressPointer r1
    //     0x26e4f0: add             x1, x1, HEAP, lsl #32
    // 0x26e4f4: stur            x1, [fp, #-8]
    // 0x26e4f8: r0 = TextSelection()
    //     0x26e4f8: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x26e4fc: r1 = Instance_TextAffinity
    //     0x26e4fc: ldr             x1, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x26e500: StoreField: r0->field_27 = r1
    //     0x26e500: stur            w1, [x0, #0x27]
    // 0x26e504: ldur            x1, [fp, #-8]
    // 0x26e508: r2 = LoadInt32Instr(r1)
    //     0x26e508: sbfx            x2, x1, #1, #0x1f
    // 0x26e50c: StoreField: r0->field_17 = r2
    //     0x26e50c: stur            x2, [x0, #0x17]
    // 0x26e510: StoreField: r0->field_1f = r2
    //     0x26e510: stur            x2, [x0, #0x1f]
    // 0x26e514: r1 = false
    //     0x26e514: add             x1, NULL, #0x30  ; false
    // 0x26e518: StoreField: r0->field_2b = r1
    //     0x26e518: stur            w1, [x0, #0x2b]
    // 0x26e51c: StoreField: r0->field_7 = r2
    //     0x26e51c: stur            x2, [x0, #7]
    // 0x26e520: StoreField: r0->field_f = r2
    //     0x26e520: stur            x2, [x0, #0xf]
    // 0x26e524: LeaveFrame
    //     0x26e524: mov             SP, fp
    //     0x26e528: ldp             fp, lr, [SP], #0x10
    // 0x26e52c: ret
    //     0x26e52c: ret             
    // 0x26e530: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e530: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateOrDisposeSelectionOverlayIfNeeded(/* No info */) {
    // ** addr: 0x26e534, size: 0xdc
    // 0x26e534: EnterFrame
    //     0x26e534: stp             fp, lr, [SP, #-0x10]!
    //     0x26e538: mov             fp, SP
    // 0x26e53c: AllocStack(0x10)
    //     0x26e53c: sub             SP, SP, #0x10
    // 0x26e540: CheckStackOverflow
    //     0x26e540: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26e544: cmp             SP, x16
    //     0x26e548: b.ls            #0x26e5f8
    // 0x26e54c: ldr             x0, [fp, #0x10]
    // 0x26e550: LoadField: r1 = r0->field_3f
    //     0x26e550: ldur            w1, [x0, #0x3f]
    // 0x26e554: DecompressPointer r1
    //     0x26e554: add             x1, x1, HEAP, lsl #32
    // 0x26e558: cmp             w1, NULL
    // 0x26e55c: b.eq            #0x26e5e8
    // 0x26e560: LoadField: r1 = r0->field_b
    //     0x26e560: ldur            w1, [x0, #0xb]
    // 0x26e564: DecompressPointer r1
    //     0x26e564: add             x1, x1, HEAP, lsl #32
    // 0x26e568: cmp             w1, NULL
    // 0x26e56c: b.eq            #0x26e600
    // 0x26e570: LoadField: r2 = r1->field_f
    //     0x26e570: ldur            w2, [x1, #0xf]
    // 0x26e574: DecompressPointer r2
    //     0x26e574: add             x2, x2, HEAP, lsl #32
    // 0x26e578: str             x2, [SP]
    // 0x26e57c: r0 = hasFocus()
    //     0x26e57c: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x26e580: tbnz            w0, #4, #0x26e5c4
    // 0x26e584: ldr             x0, [fp, #0x10]
    // 0x26e588: LoadField: r1 = r0->field_3f
    //     0x26e588: ldur            w1, [x0, #0x3f]
    // 0x26e58c: DecompressPointer r1
    //     0x26e58c: add             x1, x1, HEAP, lsl #32
    // 0x26e590: cmp             w1, NULL
    // 0x26e594: b.eq            #0x26e604
    // 0x26e598: LoadField: r2 = r0->field_b
    //     0x26e598: ldur            w2, [x0, #0xb]
    // 0x26e59c: DecompressPointer r2
    //     0x26e59c: add             x2, x2, HEAP, lsl #32
    // 0x26e5a0: cmp             w2, NULL
    // 0x26e5a4: b.eq            #0x26e608
    // 0x26e5a8: LoadField: r0 = r2->field_b
    //     0x26e5a8: ldur            w0, [x2, #0xb]
    // 0x26e5ac: DecompressPointer r0
    //     0x26e5ac: add             x0, x0, HEAP, lsl #32
    // 0x26e5b0: LoadField: r2 = r0->field_27
    //     0x26e5b0: ldur            w2, [x0, #0x27]
    // 0x26e5b4: DecompressPointer r2
    //     0x26e5b4: add             x2, x2, HEAP, lsl #32
    // 0x26e5b8: stp             x2, x1, [SP]
    // 0x26e5bc: r0 = update()
    //     0x26e5bc: bl              #0x24355c  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::update
    // 0x26e5c0: b               #0x26e5e8
    // 0x26e5c4: ldr             x0, [fp, #0x10]
    // 0x26e5c8: LoadField: r1 = r0->field_3f
    //     0x26e5c8: ldur            w1, [x0, #0x3f]
    // 0x26e5cc: DecompressPointer r1
    //     0x26e5cc: add             x1, x1, HEAP, lsl #32
    // 0x26e5d0: cmp             w1, NULL
    // 0x26e5d4: b.eq            #0x26e60c
    // 0x26e5d8: str             x1, [SP]
    // 0x26e5dc: r0 = dispose()
    //     0x26e5dc: bl              #0x26e610  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::dispose
    // 0x26e5e0: ldr             x1, [fp, #0x10]
    // 0x26e5e4: StoreField: r1->field_3f = rNULL
    //     0x26e5e4: stur            NULL, [x1, #0x3f]
    // 0x26e5e8: r0 = Null
    //     0x26e5e8: mov             x0, NULL
    // 0x26e5ec: LeaveFrame
    //     0x26e5ec: mov             SP, fp
    //     0x26e5f0: ldp             fp, lr, [SP], #0x10
    // 0x26e5f4: ret
    //     0x26e5f4: ret             
    // 0x26e5f8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26e5f8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26e5fc: b               #0x26e54c
    // 0x26e600: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e600: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e604: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e604: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e608: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e608: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e60c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e60c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _openOrCloseInputConnectionIfNeeded(/* No info */) {
    // ** addr: 0x26e784, size: 0xf8
    // 0x26e784: EnterFrame
    //     0x26e784: stp             fp, lr, [SP, #-0x10]!
    //     0x26e788: mov             fp, SP
    // 0x26e78c: AllocStack(0x8)
    //     0x26e78c: sub             SP, SP, #8
    // 0x26e790: CheckStackOverflow
    //     0x26e790: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26e794: cmp             SP, x16
    //     0x26e798: b.ls            #0x26e864
    // 0x26e79c: ldr             x0, [fp, #0x10]
    // 0x26e7a0: LoadField: r1 = r0->field_b
    //     0x26e7a0: ldur            w1, [x0, #0xb]
    // 0x26e7a4: DecompressPointer r1
    //     0x26e7a4: add             x1, x1, HEAP, lsl #32
    // 0x26e7a8: cmp             w1, NULL
    // 0x26e7ac: b.eq            #0x26e86c
    // 0x26e7b0: LoadField: r2 = r1->field_f
    //     0x26e7b0: ldur            w2, [x1, #0xf]
    // 0x26e7b4: DecompressPointer r2
    //     0x26e7b4: add             x2, x2, HEAP, lsl #32
    // 0x26e7b8: str             x2, [SP]
    // 0x26e7bc: r0 = hasFocus()
    //     0x26e7bc: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x26e7c0: tbnz            w0, #4, #0x26e7fc
    // 0x26e7c4: ldr             x0, [fp, #0x10]
    // 0x26e7c8: LoadField: r1 = r0->field_b
    //     0x26e7c8: ldur            w1, [x0, #0xb]
    // 0x26e7cc: DecompressPointer r1
    //     0x26e7cc: add             x1, x1, HEAP, lsl #32
    // 0x26e7d0: cmp             w1, NULL
    // 0x26e7d4: b.eq            #0x26e870
    // 0x26e7d8: LoadField: r2 = r1->field_f
    //     0x26e7d8: ldur            w2, [x1, #0xf]
    // 0x26e7dc: DecompressPointer r2
    //     0x26e7dc: add             x2, x2, HEAP, lsl #32
    // 0x26e7e0: str             x2, [SP]
    // 0x26e7e4: r0 = consumeKeyboardToken()
    //     0x26e7e4: bl              #0x26ec94  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::consumeKeyboardToken
    // 0x26e7e8: tbnz            w0, #4, #0x26e7fc
    // 0x26e7ec: ldr             x16, [fp, #0x10]
    // 0x26e7f0: str             x16, [SP]
    // 0x26e7f4: r0 = _openInputConnection()
    //     0x26e7f4: bl              #0x2436ac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openInputConnection
    // 0x26e7f8: b               #0x26e854
    // 0x26e7fc: ldr             x0, [fp, #0x10]
    // 0x26e800: LoadField: r1 = r0->field_b
    //     0x26e800: ldur            w1, [x0, #0xb]
    // 0x26e804: DecompressPointer r1
    //     0x26e804: add             x1, x1, HEAP, lsl #32
    // 0x26e808: cmp             w1, NULL
    // 0x26e80c: b.eq            #0x26e874
    // 0x26e810: LoadField: r2 = r1->field_f
    //     0x26e810: ldur            w2, [x1, #0xf]
    // 0x26e814: DecompressPointer r2
    //     0x26e814: add             x2, x2, HEAP, lsl #32
    // 0x26e818: str             x2, [SP]
    // 0x26e81c: r0 = hasFocus()
    //     0x26e81c: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x26e820: tbz             w0, #4, #0x26e854
    // 0x26e824: ldr             x0, [fp, #0x10]
    // 0x26e828: str             x0, [SP]
    // 0x26e82c: r0 = _closeInputConnectionIfNeeded()
    //     0x26e82c: bl              #0x26e87c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_closeInputConnectionIfNeeded
    // 0x26e830: ldr             x0, [fp, #0x10]
    // 0x26e834: LoadField: r1 = r0->field_b
    //     0x26e834: ldur            w1, [x0, #0xb]
    // 0x26e838: DecompressPointer r1
    //     0x26e838: add             x1, x1, HEAP, lsl #32
    // 0x26e83c: cmp             w1, NULL
    // 0x26e840: b.eq            #0x26e878
    // 0x26e844: LoadField: r0 = r1->field_b
    //     0x26e844: ldur            w0, [x1, #0xb]
    // 0x26e848: DecompressPointer r0
    //     0x26e848: add             x0, x0, HEAP, lsl #32
    // 0x26e84c: str             x0, [SP]
    // 0x26e850: r0 = clearComposing()
    //     0x26e850: bl              #0x23c590  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::clearComposing
    // 0x26e854: r0 = Null
    //     0x26e854: mov             x0, NULL
    // 0x26e858: LeaveFrame
    //     0x26e858: mov             SP, fp
    //     0x26e85c: ldp             fp, lr, [SP], #0x10
    // 0x26e860: ret
    //     0x26e860: ret             
    // 0x26e864: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26e864: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26e868: b               #0x26e79c
    // 0x26e86c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e86c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e870: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e870: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e874: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e874: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26e878: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e878: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _closeInputConnectionIfNeeded(/* No info */) {
    // ** addr: 0x26e87c, size: 0x78
    // 0x26e87c: EnterFrame
    //     0x26e87c: stp             fp, lr, [SP, #-0x10]!
    //     0x26e880: mov             fp, SP
    // 0x26e884: AllocStack(0x8)
    //     0x26e884: sub             SP, SP, #8
    // 0x26e888: CheckStackOverflow
    //     0x26e888: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26e88c: cmp             SP, x16
    //     0x26e890: b.ls            #0x26e8e8
    // 0x26e894: ldr             x16, [fp, #0x10]
    // 0x26e898: str             x16, [SP]
    // 0x26e89c: r0 = _hasInputConnection()
    //     0x26e89c: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x26e8a0: tbnz            w0, #4, #0x26e8d8
    // 0x26e8a4: ldr             x0, [fp, #0x10]
    // 0x26e8a8: LoadField: r1 = r0->field_3b
    //     0x26e8a8: ldur            w1, [x0, #0x3b]
    // 0x26e8ac: DecompressPointer r1
    //     0x26e8ac: add             x1, x1, HEAP, lsl #32
    // 0x26e8b0: cmp             w1, NULL
    // 0x26e8b4: b.eq            #0x26e8f0
    // 0x26e8b8: str             x1, [SP]
    // 0x26e8bc: r0 = close()
    //     0x26e8bc: bl              #0x26e8f4  ; [package:flutter/src/services/text_input.dart] TextInputConnection::close
    // 0x26e8c0: ldr             x0, [fp, #0x10]
    // 0x26e8c4: StoreField: r0->field_3b = rNULL
    //     0x26e8c4: stur            NULL, [x0, #0x3b]
    // 0x26e8c8: StoreField: r0->field_73 = rNULL
    //     0x26e8c8: stur            NULL, [x0, #0x73]
    // 0x26e8cc: StoreField: r0->field_a7 = rNULL
    //     0x26e8cc: stur            NULL, [x0, #0xa7]
    // 0x26e8d0: str             x0, [SP]
    // 0x26e8d4: r0 = removeTextPlaceholder()
    //     0x26e8d4: bl              #0x22efb0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::removeTextPlaceholder
    // 0x26e8d8: r0 = Null
    //     0x26e8d8: mov             x0, NULL
    // 0x26e8dc: LeaveFrame
    //     0x26e8dc: mov             SP, fp
    //     0x26e8e0: ldp             fp, lr, [SP], #0x10
    // 0x26e8e4: ret
    //     0x26e8e4: ret             
    // 0x26e8e8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26e8e8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26e8ec: b               #0x26e894
    // 0x26e8f0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26e8f0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x26ecbc, size: 0x20
    // 0x26ecbc: ldr             x1, [SP]
    // 0x26ecc0: LoadField: r2 = r1->field_17
    //     0x26ecc0: ldur            w2, [x1, #0x17]
    // 0x26ecc4: DecompressPointer r2
    //     0x26ecc4: add             x2, x2, HEAP, lsl #32
    // 0x26ecc8: LoadField: r1 = r2->field_f
    //     0x26ecc8: ldur            w1, [x2, #0xf]
    // 0x26eccc: DecompressPointer r1
    //     0x26eccc: add             x1, x1, HEAP, lsl #32
    // 0x26ecd0: StoreField: r1->field_b7 = rNULL
    //     0x26ecd0: stur            NULL, [x1, #0xb7]
    // 0x26ecd4: r0 = Null
    //     0x26ecd4: mov             x0, NULL
    // 0x26ecd8: ret
    //     0x26ecd8: ret             
  }
  [closure] void _didChangeTextEditingValue(dynamic) {
    // ** addr: 0x26ecdc, size: 0x48
    // 0x26ecdc: EnterFrame
    //     0x26ecdc: stp             fp, lr, [SP, #-0x10]!
    //     0x26ece0: mov             fp, SP
    // 0x26ece4: AllocStack(0x8)
    //     0x26ece4: sub             SP, SP, #8
    // 0x26ece8: SetupParameters()
    //     0x26ece8: ldr             x0, [fp, #0x10]
    //     0x26ecec: ldur            w1, [x0, #0x17]
    //     0x26ecf0: add             x1, x1, HEAP, lsl #32
    // 0x26ecf4: CheckStackOverflow
    //     0x26ecf4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26ecf8: cmp             SP, x16
    //     0x26ecfc: b.ls            #0x26ed1c
    // 0x26ed00: LoadField: r0 = r1->field_f
    //     0x26ed00: ldur            w0, [x1, #0xf]
    // 0x26ed04: DecompressPointer r0
    //     0x26ed04: add             x0, x0, HEAP, lsl #32
    // 0x26ed08: str             x0, [SP]
    // 0x26ed0c: r0 = _didChangeTextEditingValue()
    //     0x26ed0c: bl              #0x26ed24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue
    // 0x26ed10: LeaveFrame
    //     0x26ed10: mov             SP, fp
    //     0x26ed14: ldp             fp, lr, [SP], #0x10
    // 0x26ed18: ret
    //     0x26ed18: ret             
    // 0x26ed1c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26ed1c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26ed20: b               #0x26ed00
  }
  _ _didChangeTextEditingValue(/* No info */) {
    // ** addr: 0x26ed24, size: 0x1d4
    // 0x26ed24: EnterFrame
    //     0x26ed24: stp             fp, lr, [SP, #-0x10]!
    //     0x26ed28: mov             fp, SP
    // 0x26ed2c: AllocStack(0x18)
    //     0x26ed2c: sub             SP, SP, #0x18
    // 0x26ed30: CheckStackOverflow
    //     0x26ed30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26ed34: cmp             SP, x16
    //     0x26ed38: b.ls            #0x26eedc
    // 0x26ed3c: ldr             x1, [fp, #0x10]
    // 0x26ed40: LoadField: r0 = r1->field_b
    //     0x26ed40: ldur            w0, [x1, #0xb]
    // 0x26ed44: DecompressPointer r0
    //     0x26ed44: add             x0, x0, HEAP, lsl #32
    // 0x26ed48: cmp             w0, NULL
    // 0x26ed4c: b.eq            #0x26eee4
    // 0x26ed50: LoadField: r2 = r0->field_f
    //     0x26ed50: ldur            w2, [x0, #0xf]
    // 0x26ed54: DecompressPointer r2
    //     0x26ed54: add             x2, x2, HEAP, lsl #32
    // 0x26ed58: str             x2, [SP]
    // 0x26ed5c: r0 = hasFocus()
    //     0x26ed5c: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x26ed60: tbnz            w0, #4, #0x26ee60
    // 0x26ed64: ldr             x1, [fp, #0x10]
    // 0x26ed68: LoadField: r0 = r1->field_b
    //     0x26ed68: ldur            w0, [x1, #0xb]
    // 0x26ed6c: DecompressPointer r0
    //     0x26ed6c: add             x0, x0, HEAP, lsl #32
    // 0x26ed70: cmp             w0, NULL
    // 0x26ed74: b.eq            #0x26eee8
    // 0x26ed78: LoadField: r2 = r0->field_b
    //     0x26ed78: ldur            w2, [x0, #0xb]
    // 0x26ed7c: DecompressPointer r2
    //     0x26ed7c: add             x2, x2, HEAP, lsl #32
    // 0x26ed80: stur            x2, [fp, #-8]
    // 0x26ed84: LoadField: r0 = r2->field_27
    //     0x26ed84: ldur            w0, [x2, #0x27]
    // 0x26ed88: DecompressPointer r0
    //     0x26ed88: add             x0, x0, HEAP, lsl #32
    // 0x26ed8c: LoadField: r3 = r0->field_b
    //     0x26ed8c: ldur            w3, [x0, #0xb]
    // 0x26ed90: DecompressPointer r3
    //     0x26ed90: add             x3, x3, HEAP, lsl #32
    // 0x26ed94: LoadField: r0 = r3->field_7
    //     0x26ed94: ldur            x0, [x3, #7]
    // 0x26ed98: tbnz            x0, #0x3f, #0x26eda4
    // 0x26ed9c: LoadField: r0 = r3->field_f
    //     0x26ed9c: ldur            x0, [x3, #0xf]
    // 0x26eda0: tbz             x0, #0x3f, #0x26ee60
    // 0x26eda4: r1 = 1
    //     0x26eda4: movz            x1, #0x1
    // 0x26eda8: r0 = AllocateContext()
    //     0x26eda8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x26edac: mov             x1, x0
    // 0x26edb0: ldr             x0, [fp, #0x10]
    // 0x26edb4: StoreField: r1->field_f = r0
    //     0x26edb4: stur            w0, [x1, #0xf]
    // 0x26edb8: mov             x2, x1
    // 0x26edbc: r1 = Function '_didChangeTextEditingValue@148183791':.
    //     0x26edbc: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f0] AnonymousClosure: (0x26ecdc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x26ed24)
    //     0x26edc0: ldr             x1, [x1, #0x3f0]
    // 0x26edc4: r0 = AllocateClosure()
    //     0x26edc4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26edc8: ldur            x16, [fp, #-8]
    // 0x26edcc: stp             x0, x16, [SP]
    // 0x26edd0: r0 = removeListener()
    //     0x26edd0: bl              #0x3b28b0  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0x26edd4: ldr             x1, [fp, #0x10]
    // 0x26edd8: LoadField: r0 = r1->field_b
    //     0x26edd8: ldur            w0, [x1, #0xb]
    // 0x26eddc: DecompressPointer r0
    //     0x26eddc: add             x0, x0, HEAP, lsl #32
    // 0x26ede0: cmp             w0, NULL
    // 0x26ede4: b.eq            #0x26eeec
    // 0x26ede8: LoadField: r2 = r0->field_b
    //     0x26ede8: ldur            w2, [x0, #0xb]
    // 0x26edec: DecompressPointer r2
    //     0x26edec: add             x2, x2, HEAP, lsl #32
    // 0x26edf0: stur            x2, [fp, #-8]
    // 0x26edf4: str             x1, [SP]
    // 0x26edf8: r0 = _adjustedSelectionWhenFocused()
    //     0x26edf8: bl              #0x26e494  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_adjustedSelectionWhenFocused
    // 0x26edfc: cmp             w0, NULL
    // 0x26ee00: b.eq            #0x26eef0
    // 0x26ee04: ldur            x16, [fp, #-8]
    // 0x26ee08: stp             x0, x16, [SP]
    // 0x26ee0c: r0 = selection=()
    //     0x26ee0c: bl              #0x2456bc  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::selection=
    // 0x26ee10: ldr             x1, [fp, #0x10]
    // 0x26ee14: LoadField: r0 = r1->field_b
    //     0x26ee14: ldur            w0, [x1, #0xb]
    // 0x26ee18: DecompressPointer r0
    //     0x26ee18: add             x0, x0, HEAP, lsl #32
    // 0x26ee1c: cmp             w0, NULL
    // 0x26ee20: b.eq            #0x26eef4
    // 0x26ee24: LoadField: r2 = r0->field_b
    //     0x26ee24: ldur            w2, [x0, #0xb]
    // 0x26ee28: DecompressPointer r2
    //     0x26ee28: add             x2, x2, HEAP, lsl #32
    // 0x26ee2c: stur            x2, [fp, #-8]
    // 0x26ee30: r1 = 1
    //     0x26ee30: movz            x1, #0x1
    // 0x26ee34: r0 = AllocateContext()
    //     0x26ee34: bl              #0x3e4e00  ; AllocateContextStub
    // 0x26ee38: mov             x1, x0
    // 0x26ee3c: ldr             x0, [fp, #0x10]
    // 0x26ee40: StoreField: r1->field_f = r0
    //     0x26ee40: stur            w0, [x1, #0xf]
    // 0x26ee44: mov             x2, x1
    // 0x26ee48: r1 = Function '_didChangeTextEditingValue@148183791':.
    //     0x26ee48: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f0] AnonymousClosure: (0x26ecdc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x26ed24)
    //     0x26ee4c: ldr             x1, [x1, #0x3f0]
    // 0x26ee50: r0 = AllocateClosure()
    //     0x26ee50: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26ee54: ldur            x16, [fp, #-8]
    // 0x26ee58: stp             x0, x16, [SP]
    // 0x26ee5c: r0 = addListener()
    //     0x26ee5c: bl              #0x380078  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x26ee60: ldr             x16, [fp, #0x10]
    // 0x26ee64: str             x16, [SP]
    // 0x26ee68: r0 = _updateRemoteEditingValueIfNeeded()
    //     0x26ee68: bl              #0x22c848  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateRemoteEditingValueIfNeeded
    // 0x26ee6c: ldr             x16, [fp, #0x10]
    // 0x26ee70: str             x16, [SP]
    // 0x26ee74: r0 = _startOrStopCursorTimerIfNeeded()
    //     0x26ee74: bl              #0x26e0c0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startOrStopCursorTimerIfNeeded
    // 0x26ee78: ldr             x16, [fp, #0x10]
    // 0x26ee7c: str             x16, [SP]
    // 0x26ee80: r0 = _updateOrDisposeSelectionOverlayIfNeeded()
    //     0x26ee80: bl              #0x26e534  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateOrDisposeSelectionOverlayIfNeeded
    // 0x26ee84: r1 = Function '<anonymous closure>':.
    //     0x26ee84: add             x1, PP, #0x11, lsl #12  ; [pp+0x11428] Function: [dart:ui] _NativeScene::_NativeScene._ (0x3daaf0)
    //     0x26ee88: ldr             x1, [x1, #0x428]
    // 0x26ee8c: r2 = Null
    //     0x26ee8c: mov             x2, NULL
    // 0x26ee90: r0 = AllocateClosure()
    //     0x26ee90: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x26ee94: ldr             x16, [fp, #0x10]
    // 0x26ee98: stp             x0, x16, [SP]
    // 0x26ee9c: r0 = setState()
    //     0x26ee9c: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x26eea0: ldr             x1, [fp, #0x10]
    // 0x26eea4: LoadField: r0 = r1->field_c7
    //     0x26eea4: ldur            w0, [x1, #0xc7]
    // 0x26eea8: DecompressPointer r0
    //     0x26eea8: add             x0, x0, HEAP, lsl #32
    // 0x26eeac: r16 = Sentinel
    //     0x26eeac: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x26eeb0: cmp             w0, w16
    // 0x26eeb4: b.ne            #0x26eec4
    // 0x26eeb8: r2 = _verticalSelectionUpdateAction
    //     0x26eeb8: add             x2, PP, #0x11, lsl #12  ; [pp+0x112d0] Field <EditableTextState._verticalSelectionUpdateAction@148183791>: late final (offset: 0xc8)
    //     0x26eebc: ldr             x2, [x2, #0x2d0]
    // 0x26eec0: r0 = InitLateFinalInstanceField()
    //     0x26eec0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x26eec4: str             x0, [SP]
    // 0x26eec8: r0 = stopCurrentVerticalRunIfSelectionChanges()
    //     0x26eec8: bl              #0x26eef8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionVerticallyAction::stopCurrentVerticalRunIfSelectionChanges
    // 0x26eecc: r0 = Null
    //     0x26eecc: mov             x0, NULL
    // 0x26eed0: LeaveFrame
    //     0x26eed0: mov             SP, fp
    //     0x26eed4: ldp             fp, lr, [SP], #0x10
    // 0x26eed8: ret
    //     0x26eed8: ret             
    // 0x26eedc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26eedc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26eee0: b               #0x26ed3c
    // 0x26eee4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26eee4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26eee8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26eee8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26eeec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26eeec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26eef0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26eef0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26eef4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26eef4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _UpdateTextSelectionVerticallyAction<DirectionalCaretMovementIntent> _verticalSelectionUpdateAction(EditableTextState) {
    // ** addr: 0x26efc8, size: 0xc4
    // 0x26efc8: EnterFrame
    //     0x26efc8: stp             fp, lr, [SP, #-0x10]!
    //     0x26efcc: mov             fp, SP
    // 0x26efd0: AllocStack(0x20)
    //     0x26efd0: sub             SP, SP, #0x20
    // 0x26efd4: CheckStackOverflow
    //     0x26efd4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x26efd8: cmp             SP, x16
    //     0x26efdc: b.ls            #0x26f084
    // 0x26efe0: r1 = <DirectionalCaretMovementIntent>
    //     0x26efe0: add             x1, PP, #0x11, lsl #12  ; [pp+0x11398] TypeArguments: <DirectionalCaretMovementIntent>
    //     0x26efe4: ldr             x1, [x1, #0x398]
    // 0x26efe8: r0 = _UpdateTextSelectionVerticallyAction()
    //     0x26efe8: bl              #0x26f08c  ; Allocate_UpdateTextSelectionVerticallyActionStub -> _UpdateTextSelectionVerticallyAction<X0 bound DirectionalCaretMovementIntent> (size=0x20)
    // 0x26efec: mov             x2, x0
    // 0x26eff0: ldr             x0, [fp, #0x10]
    // 0x26eff4: stur            x2, [fp, #-8]
    // 0x26eff8: StoreField: r2->field_13 = r0
    //     0x26eff8: stur            w0, [x2, #0x13]
    // 0x26effc: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x26effc: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x26f000: ldr             x1, [x1, #0xb18]
    // 0x26f004: r0 = ObserverList()
    //     0x26f004: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x26f008: mov             x1, x0
    // 0x26f00c: r0 = false
    //     0x26f00c: add             x0, NULL, #0x30  ; false
    // 0x26f010: stur            x1, [fp, #-0x10]
    // 0x26f014: StoreField: r1->field_f = r0
    //     0x26f014: stur            w0, [x1, #0xf]
    // 0x26f018: r0 = Sentinel
    //     0x26f018: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x26f01c: StoreField: r1->field_13 = r0
    //     0x26f01c: stur            w0, [x1, #0x13]
    // 0x26f020: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x26f020: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x26f024: ldr             x16, [x16, #0xb18]
    // 0x26f028: stp             xzr, x16, [SP]
    // 0x26f02c: r0 = _GrowableList()
    //     0x26f02c: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x26f030: ldur            x1, [fp, #-0x10]
    // 0x26f034: StoreField: r1->field_b = r0
    //     0x26f034: stur            w0, [x1, #0xb]
    //     0x26f038: ldurb           w16, [x1, #-1]
    //     0x26f03c: ldurb           w17, [x0, #-1]
    //     0x26f040: and             x16, x17, x16, lsr #2
    //     0x26f044: tst             x16, HEAP, lsr #32
    //     0x26f048: b.eq            #0x26f050
    //     0x26f04c: bl              #0x3e4608
    // 0x26f050: mov             x0, x1
    // 0x26f054: ldur            x1, [fp, #-8]
    // 0x26f058: StoreField: r1->field_b = r0
    //     0x26f058: stur            w0, [x1, #0xb]
    //     0x26f05c: ldurb           w16, [x1, #-1]
    //     0x26f060: ldurb           w17, [x0, #-1]
    //     0x26f064: and             x16, x17, x16, lsr #2
    //     0x26f068: tst             x16, HEAP, lsr #32
    //     0x26f06c: b.eq            #0x26f074
    //     0x26f070: bl              #0x3e4608
    // 0x26f074: mov             x0, x1
    // 0x26f078: LeaveFrame
    //     0x26f078: mov             SP, fp
    //     0x26f07c: ldp             fp, lr, [SP], #0x10
    // 0x26f080: ret
    //     0x26f080: ret             
    // 0x26f084: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26f084: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x26f088: b               #0x26efe0
  }
  get _ contextMenuAnchors(/* No info */) {
    // ** addr: 0x27abf4, size: 0x108
    // 0x27abf4: EnterFrame
    //     0x27abf4: stp             fp, lr, [SP, #-0x10]!
    //     0x27abf8: mov             fp, SP
    // 0x27abfc: AllocStack(0x30)
    //     0x27abfc: sub             SP, SP, #0x30
    // 0x27ac00: CheckStackOverflow
    //     0x27ac00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27ac04: cmp             SP, x16
    //     0x27ac08: b.ls            #0x27acf0
    // 0x27ac0c: ldr             x1, [fp, #0x10]
    // 0x27ac10: LoadField: r0 = r1->field_ab
    //     0x27ac10: ldur            w0, [x1, #0xab]
    // 0x27ac14: DecompressPointer r0
    //     0x27ac14: add             x0, x0, HEAP, lsl #32
    // 0x27ac18: r16 = Sentinel
    //     0x27ac18: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x27ac1c: cmp             w0, w16
    // 0x27ac20: b.ne            #0x27ac2c
    // 0x27ac24: r2 = renderEditable
    //     0x27ac24: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x27ac28: r0 = InitLateFinalInstanceField()
    //     0x27ac28: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x27ac2c: r17 = 303
    //     0x27ac2c: movz            x17, #0x12f
    // 0x27ac30: ldr             w1, [x0, x17]
    // 0x27ac34: DecompressPointer r1
    //     0x27ac34: add             x1, x1, HEAP, lsl #32
    // 0x27ac38: stur            x1, [fp, #-8]
    // 0x27ac3c: cmp             w1, NULL
    // 0x27ac40: b.eq            #0x27ac64
    // 0x27ac44: r0 = TextSelectionToolbarAnchors()
    //     0x27ac44: bl              #0x27b3fc  ; AllocateTextSelectionToolbarAnchorsStub -> TextSelectionToolbarAnchors (size=0x10)
    // 0x27ac48: mov             x1, x0
    // 0x27ac4c: ldur            x0, [fp, #-8]
    // 0x27ac50: StoreField: r1->field_7 = r0
    //     0x27ac50: stur            w0, [x1, #7]
    // 0x27ac54: mov             x0, x1
    // 0x27ac58: LeaveFrame
    //     0x27ac58: mov             SP, fp
    //     0x27ac5c: ldp             fp, lr, [SP], #0x10
    // 0x27ac60: ret
    //     0x27ac60: ret             
    // 0x27ac64: ldr             x0, [fp, #0x10]
    // 0x27ac68: str             x0, [SP]
    // 0x27ac6c: r0 = _getGlyphHeights()
    //     0x27ac6c: bl              #0x27b048  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_getGlyphHeights
    // 0x27ac70: mov             x1, x0
    // 0x27ac74: ldr             x0, [fp, #0x10]
    // 0x27ac78: stur            x1, [fp, #-8]
    // 0x27ac7c: LoadField: r2 = r0->field_b
    //     0x27ac7c: ldur            w2, [x0, #0xb]
    // 0x27ac80: DecompressPointer r2
    //     0x27ac80: add             x2, x2, HEAP, lsl #32
    // 0x27ac84: cmp             w2, NULL
    // 0x27ac88: b.eq            #0x27acf8
    // 0x27ac8c: LoadField: r3 = r2->field_b
    //     0x27ac8c: ldur            w3, [x2, #0xb]
    // 0x27ac90: DecompressPointer r3
    //     0x27ac90: add             x3, x3, HEAP, lsl #32
    // 0x27ac94: LoadField: r2 = r3->field_27
    //     0x27ac94: ldur            w2, [x3, #0x27]
    // 0x27ac98: DecompressPointer r2
    //     0x27ac98: add             x2, x2, HEAP, lsl #32
    // 0x27ac9c: LoadField: r3 = r2->field_b
    //     0x27ac9c: ldur            w3, [x2, #0xb]
    // 0x27aca0: DecompressPointer r3
    //     0x27aca0: add             x3, x3, HEAP, lsl #32
    // 0x27aca4: LoadField: r2 = r0->field_ab
    //     0x27aca4: ldur            w2, [x0, #0xab]
    // 0x27aca8: DecompressPointer r2
    //     0x27aca8: add             x2, x2, HEAP, lsl #32
    // 0x27acac: stp             x3, x2, [SP]
    // 0x27acb0: r0 = getEndpointsForSelection()
    //     0x27acb0: bl              #0x1fa910  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getEndpointsForSelection
    // 0x27acb4: mov             x1, x0
    // 0x27acb8: ldr             x0, [fp, #0x10]
    // 0x27acbc: LoadField: r2 = r0->field_ab
    //     0x27acbc: ldur            w2, [x0, #0xab]
    // 0x27acc0: DecompressPointer r2
    //     0x27acc0: add             x2, x2, HEAP, lsl #32
    // 0x27acc4: ldur            x0, [fp, #-8]
    // 0x27acc8: LoadField: d0 = r0->field_7
    //     0x27acc8: ldur            d0, [x0, #7]
    // 0x27accc: LoadField: d1 = r0->field_f
    //     0x27accc: ldur            d1, [x0, #0xf]
    // 0x27acd0: str             NULL, [SP, #0x20]
    // 0x27acd4: str             d1, [SP, #0x18]
    // 0x27acd8: stp             x1, x2, [SP, #8]
    // 0x27acdc: str             d0, [SP]
    // 0x27ace0: r0 = TextSelectionToolbarAnchors.fromSelection()
    //     0x27ace0: bl              #0x27acfc  ; [package:flutter/src/widgets/text_selection_toolbar_anchors.dart] TextSelectionToolbarAnchors::TextSelectionToolbarAnchors.fromSelection
    // 0x27ace4: LeaveFrame
    //     0x27ace4: mov             SP, fp
    //     0x27ace8: ldp             fp, lr, [SP], #0x10
    // 0x27acec: ret
    //     0x27acec: ret             
    // 0x27acf0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27acf0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27acf4: b               #0x27ac0c
    // 0x27acf8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27acf8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getGlyphHeights(/* No info */) {
    // ** addr: 0x27b048, size: 0x3a8
    // 0x27b048: EnterFrame
    //     0x27b048: stp             fp, lr, [SP, #-0x10]!
    //     0x27b04c: mov             fp, SP
    // 0x27b050: AllocStack(0x48)
    //     0x27b050: sub             SP, SP, #0x48
    // 0x27b054: CheckStackOverflow
    //     0x27b054: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27b058: cmp             SP, x16
    //     0x27b05c: b.ls            #0x27b3b4
    // 0x27b060: ldr             x0, [fp, #0x10]
    // 0x27b064: LoadField: r1 = r0->field_b
    //     0x27b064: ldur            w1, [x0, #0xb]
    // 0x27b068: DecompressPointer r1
    //     0x27b068: add             x1, x1, HEAP, lsl #32
    // 0x27b06c: cmp             w1, NULL
    // 0x27b070: b.eq            #0x27b3bc
    // 0x27b074: LoadField: r2 = r1->field_b
    //     0x27b074: ldur            w2, [x1, #0xb]
    // 0x27b078: DecompressPointer r2
    //     0x27b078: add             x2, x2, HEAP, lsl #32
    // 0x27b07c: LoadField: r1 = r2->field_27
    //     0x27b07c: ldur            w1, [x2, #0x27]
    // 0x27b080: DecompressPointer r1
    //     0x27b080: add             x1, x1, HEAP, lsl #32
    // 0x27b084: LoadField: r2 = r1->field_b
    //     0x27b084: ldur            w2, [x1, #0xb]
    // 0x27b088: DecompressPointer r2
    //     0x27b088: add             x2, x2, HEAP, lsl #32
    // 0x27b08c: mov             x1, x0
    // 0x27b090: stur            x2, [fp, #-8]
    // 0x27b094: LoadField: r0 = r1->field_ab
    //     0x27b094: ldur            w0, [x1, #0xab]
    // 0x27b098: DecompressPointer r0
    //     0x27b098: add             x0, x0, HEAP, lsl #32
    // 0x27b09c: r16 = Sentinel
    //     0x27b09c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x27b0a0: cmp             w0, w16
    // 0x27b0a4: b.ne            #0x27b0b0
    // 0x27b0a8: r2 = renderEditable
    //     0x27b0a8: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x27b0ac: r0 = InitLateFinalInstanceField()
    //     0x27b0ac: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x27b0b0: LoadField: r1 = r0->field_b7
    //     0x27b0b0: ldur            w1, [x0, #0xb7]
    // 0x27b0b4: DecompressPointer r1
    //     0x27b0b4: add             x1, x1, HEAP, lsl #32
    // 0x27b0b8: LoadField: r0 = r1->field_17
    //     0x27b0b8: ldur            w0, [x1, #0x17]
    // 0x27b0bc: DecompressPointer r0
    //     0x27b0bc: add             x0, x0, HEAP, lsl #32
    // 0x27b0c0: cmp             w0, NULL
    // 0x27b0c4: b.eq            #0x27b3c0
    // 0x27b0c8: str             x0, [SP]
    // 0x27b0cc: r0 = toPlainText()
    //     0x27b0cc: bl              #0x1fbcc0  ; [package:flutter/src/painting/inline_span.dart] InlineSpan::toPlainText
    // 0x27b0d0: ldr             x1, [fp, #0x10]
    // 0x27b0d4: LoadField: r2 = r1->field_b
    //     0x27b0d4: ldur            w2, [x1, #0xb]
    // 0x27b0d8: DecompressPointer r2
    //     0x27b0d8: add             x2, x2, HEAP, lsl #32
    // 0x27b0dc: cmp             w2, NULL
    // 0x27b0e0: b.eq            #0x27b3c4
    // 0x27b0e4: LoadField: r3 = r2->field_b
    //     0x27b0e4: ldur            w3, [x2, #0xb]
    // 0x27b0e8: DecompressPointer r3
    //     0x27b0e8: add             x3, x3, HEAP, lsl #32
    // 0x27b0ec: LoadField: r2 = r3->field_27
    //     0x27b0ec: ldur            w2, [x3, #0x27]
    // 0x27b0f0: DecompressPointer r2
    //     0x27b0f0: add             x2, x2, HEAP, lsl #32
    // 0x27b0f4: LoadField: r3 = r2->field_7
    //     0x27b0f4: ldur            w3, [x2, #7]
    // 0x27b0f8: DecompressPointer r3
    //     0x27b0f8: add             x3, x3, HEAP, lsl #32
    // 0x27b0fc: stur            x3, [fp, #-0x10]
    // 0x27b100: r2 = LoadClassIdInstr(r0)
    //     0x27b100: ldur            x2, [x0, #-1]
    //     0x27b104: ubfx            x2, x2, #0xc, #0x14
    // 0x27b108: stp             x3, x0, [SP]
    // 0x27b10c: mov             x0, x2
    // 0x27b110: mov             lr, x0
    // 0x27b114: ldr             lr, [x21, lr, lsl #3]
    // 0x27b118: blr             lr
    // 0x27b11c: tbz             w0, #4, #0x27b128
    // 0x27b120: ldr             x0, [fp, #0x10]
    // 0x27b124: b               #0x27b358
    // 0x27b128: ldur            x0, [fp, #-8]
    // 0x27b12c: LoadField: r1 = r0->field_7
    //     0x27b12c: ldur            x1, [x0, #7]
    // 0x27b130: stur            x1, [fp, #-0x20]
    // 0x27b134: tbnz            x1, #0x3f, #0x27b354
    // 0x27b138: LoadField: r2 = r0->field_f
    //     0x27b138: ldur            x2, [x0, #0xf]
    // 0x27b13c: stur            x2, [fp, #-0x18]
    // 0x27b140: tbz             x2, #0x3f, #0x27b14c
    // 0x27b144: ldr             x0, [fp, #0x10]
    // 0x27b148: b               #0x27b358
    // 0x27b14c: cmp             x1, x2
    // 0x27b150: b.ne            #0x27b15c
    // 0x27b154: ldr             x0, [fp, #0x10]
    // 0x27b158: b               #0x27b358
    // 0x27b15c: ldr             x3, [fp, #0x10]
    // 0x27b160: ldur            x16, [fp, #-0x10]
    // 0x27b164: stp             x16, x0, [SP]
    // 0x27b168: r0 = textInside()
    //     0x27b168: bl              #0x232318  ; [dart:ui] TextRange::textInside
    // 0x27b16c: stur            x0, [fp, #-8]
    // 0x27b170: str             x0, [SP]
    // 0x27b174: r0 = StringCharacters.characters()
    //     0x27b174: bl              #0x232234  ; [package:characters/src/extensions.dart] ::StringCharacters.characters
    // 0x27b178: str             x0, [SP]
    // 0x27b17c: r0 = first()
    //     0x27b17c: bl              #0x313fd4  ; [package:characters/src/characters_impl.dart] StringCharacters::first
    // 0x27b180: LoadField: r1 = r0->field_7
    //     0x27b180: ldur            w1, [x0, #7]
    // 0x27b184: DecompressPointer r1
    //     0x27b184: add             x1, x1, HEAP, lsl #32
    // 0x27b188: ldr             x0, [fp, #0x10]
    // 0x27b18c: LoadField: r2 = r0->field_ab
    //     0x27b18c: ldur            w2, [x0, #0xab]
    // 0x27b190: DecompressPointer r2
    //     0x27b190: add             x2, x2, HEAP, lsl #32
    // 0x27b194: stur            x2, [fp, #-0x10]
    // 0x27b198: r3 = LoadInt32Instr(r1)
    //     0x27b198: sbfx            x3, x1, #1, #0x1f
    // 0x27b19c: ldur            x1, [fp, #-0x20]
    // 0x27b1a0: add             x4, x1, x3
    // 0x27b1a4: stur            x4, [fp, #-0x28]
    // 0x27b1a8: r0 = TextRange()
    //     0x27b1a8: bl              #0x202c64  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0x27b1ac: mov             x1, x0
    // 0x27b1b0: ldur            x0, [fp, #-0x20]
    // 0x27b1b4: StoreField: r1->field_7 = r0
    //     0x27b1b4: stur            x0, [x1, #7]
    // 0x27b1b8: ldur            x0, [fp, #-0x28]
    // 0x27b1bc: StoreField: r1->field_f = r0
    //     0x27b1bc: stur            x0, [x1, #0xf]
    // 0x27b1c0: ldur            x16, [fp, #-0x10]
    // 0x27b1c4: stp             x1, x16, [SP]
    // 0x27b1c8: r0 = getRectForComposingRange()
    //     0x27b1c8: bl              #0x23209c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getRectForComposingRange
    // 0x27b1cc: stur            x0, [fp, #-0x10]
    // 0x27b1d0: ldur            x16, [fp, #-8]
    // 0x27b1d4: str             x16, [SP]
    // 0x27b1d8: r0 = StringCharacters.characters()
    //     0x27b1d8: bl              #0x232234  ; [package:characters/src/extensions.dart] ::StringCharacters.characters
    // 0x27b1dc: str             x0, [SP]
    // 0x27b1e0: r0 = last()
    //     0x27b1e0: bl              #0x30fd38  ; [package:characters/src/characters_impl.dart] StringCharacters::last
    // 0x27b1e4: LoadField: r1 = r0->field_7
    //     0x27b1e4: ldur            w1, [x0, #7]
    // 0x27b1e8: DecompressPointer r1
    //     0x27b1e8: add             x1, x1, HEAP, lsl #32
    // 0x27b1ec: ldr             x0, [fp, #0x10]
    // 0x27b1f0: LoadField: r2 = r0->field_ab
    //     0x27b1f0: ldur            w2, [x0, #0xab]
    // 0x27b1f4: DecompressPointer r2
    //     0x27b1f4: add             x2, x2, HEAP, lsl #32
    // 0x27b1f8: stur            x2, [fp, #-8]
    // 0x27b1fc: r3 = LoadInt32Instr(r1)
    //     0x27b1fc: sbfx            x3, x1, #1, #0x1f
    // 0x27b200: ldur            x1, [fp, #-0x18]
    // 0x27b204: sub             x4, x1, x3
    // 0x27b208: stur            x4, [fp, #-0x20]
    // 0x27b20c: r0 = TextRange()
    //     0x27b20c: bl              #0x202c64  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0x27b210: mov             x1, x0
    // 0x27b214: ldur            x0, [fp, #-0x20]
    // 0x27b218: StoreField: r1->field_7 = r0
    //     0x27b218: stur            x0, [x1, #7]
    // 0x27b21c: ldur            x0, [fp, #-0x18]
    // 0x27b220: StoreField: r1->field_f = r0
    //     0x27b220: stur            x0, [x1, #0xf]
    // 0x27b224: ldur            x16, [fp, #-8]
    // 0x27b228: stp             x1, x16, [SP]
    // 0x27b22c: r0 = getRectForComposingRange()
    //     0x27b22c: bl              #0x23209c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getRectForComposingRange
    // 0x27b230: mov             x1, x0
    // 0x27b234: ldur            x0, [fp, #-0x10]
    // 0x27b238: stur            x1, [fp, #-8]
    // 0x27b23c: cmp             w0, NULL
    // 0x27b240: b.ne            #0x27b24c
    // 0x27b244: r0 = Null
    //     0x27b244: mov             x0, NULL
    // 0x27b248: b               #0x27b280
    // 0x27b24c: LoadField: d0 = r0->field_1f
    //     0x27b24c: ldur            d0, [x0, #0x1f]
    // 0x27b250: LoadField: d1 = r0->field_f
    //     0x27b250: ldur            d1, [x0, #0xf]
    // 0x27b254: fsub            d2, d0, d1
    // 0x27b258: r0 = inline_Allocate_Double()
    //     0x27b258: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x27b25c: add             x0, x0, #0x10
    //     0x27b260: cmp             x2, x0
    //     0x27b264: b.ls            #0x27b3c8
    //     0x27b268: str             x0, [THR, #0x50]  ; THR::top
    //     0x27b26c: sub             x0, x0, #0xf
    //     0x27b270: movz            x2, #0xd148
    //     0x27b274: movk            x2, #0x3, lsl #16
    //     0x27b278: stur            x2, [x0, #-1]
    // 0x27b27c: StoreField: r0->field_7 = d2
    //     0x27b27c: stur            d2, [x0, #7]
    // 0x27b280: cmp             w0, NULL
    // 0x27b284: b.ne            #0x27b2a8
    // 0x27b288: ldr             x0, [fp, #0x10]
    // 0x27b28c: LoadField: r2 = r0->field_ab
    //     0x27b28c: ldur            w2, [x0, #0xab]
    // 0x27b290: DecompressPointer r2
    //     0x27b290: add             x2, x2, HEAP, lsl #32
    // 0x27b294: LoadField: r3 = r2->field_b7
    //     0x27b294: ldur            w3, [x2, #0xb7]
    // 0x27b298: DecompressPointer r3
    //     0x27b298: add             x3, x3, HEAP, lsl #32
    // 0x27b29c: str             x3, [SP]
    // 0x27b2a0: r0 = preferredLineHeight()
    //     0x27b2a0: bl              #0x1d5004  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x27b2a4: b               #0x27b2ac
    // 0x27b2a8: LoadField: d0 = r0->field_7
    //     0x27b2a8: ldur            d0, [x0, #7]
    // 0x27b2ac: ldur            x0, [fp, #-8]
    // 0x27b2b0: stur            d0, [fp, #-0x30]
    // 0x27b2b4: cmp             w0, NULL
    // 0x27b2b8: b.ne            #0x27b2c4
    // 0x27b2bc: r0 = Null
    //     0x27b2bc: mov             x0, NULL
    // 0x27b2c0: b               #0x27b2f8
    // 0x27b2c4: LoadField: d1 = r0->field_1f
    //     0x27b2c4: ldur            d1, [x0, #0x1f]
    // 0x27b2c8: LoadField: d2 = r0->field_f
    //     0x27b2c8: ldur            d2, [x0, #0xf]
    // 0x27b2cc: fsub            d3, d1, d2
    // 0x27b2d0: r0 = inline_Allocate_Double()
    //     0x27b2d0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x27b2d4: add             x0, x0, #0x10
    //     0x27b2d8: cmp             x1, x0
    //     0x27b2dc: b.ls            #0x27b3e0
    //     0x27b2e0: str             x0, [THR, #0x50]  ; THR::top
    //     0x27b2e4: sub             x0, x0, #0xf
    //     0x27b2e8: movz            x1, #0xd148
    //     0x27b2ec: movk            x1, #0x3, lsl #16
    //     0x27b2f0: stur            x1, [x0, #-1]
    // 0x27b2f4: StoreField: r0->field_7 = d3
    //     0x27b2f4: stur            d3, [x0, #7]
    // 0x27b2f8: cmp             w0, NULL
    // 0x27b2fc: b.ne            #0x27b324
    // 0x27b300: ldr             x0, [fp, #0x10]
    // 0x27b304: LoadField: r1 = r0->field_ab
    //     0x27b304: ldur            w1, [x0, #0xab]
    // 0x27b308: DecompressPointer r1
    //     0x27b308: add             x1, x1, HEAP, lsl #32
    // 0x27b30c: LoadField: r0 = r1->field_b7
    //     0x27b30c: ldur            w0, [x1, #0xb7]
    // 0x27b310: DecompressPointer r0
    //     0x27b310: add             x0, x0, HEAP, lsl #32
    // 0x27b314: str             x0, [SP]
    // 0x27b318: r0 = preferredLineHeight()
    //     0x27b318: bl              #0x1d5004  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x27b31c: mov             v1.16b, v0.16b
    // 0x27b320: b               #0x27b32c
    // 0x27b324: LoadField: d0 = r0->field_7
    //     0x27b324: ldur            d0, [x0, #7]
    // 0x27b328: mov             v1.16b, v0.16b
    // 0x27b32c: ldur            d0, [fp, #-0x30]
    // 0x27b330: stur            d1, [fp, #-0x38]
    // 0x27b334: r0 = _GlyphHeights()
    //     0x27b334: bl              #0x27b3f0  ; Allocate_GlyphHeightsStub -> _GlyphHeights (size=0x18)
    // 0x27b338: ldur            d0, [fp, #-0x30]
    // 0x27b33c: StoreField: r0->field_7 = d0
    //     0x27b33c: stur            d0, [x0, #7]
    // 0x27b340: ldur            d0, [fp, #-0x38]
    // 0x27b344: StoreField: r0->field_f = d0
    //     0x27b344: stur            d0, [x0, #0xf]
    // 0x27b348: LeaveFrame
    //     0x27b348: mov             SP, fp
    //     0x27b34c: ldp             fp, lr, [SP], #0x10
    // 0x27b350: ret
    //     0x27b350: ret             
    // 0x27b354: ldr             x0, [fp, #0x10]
    // 0x27b358: LoadField: r1 = r0->field_ab
    //     0x27b358: ldur            w1, [x0, #0xab]
    // 0x27b35c: DecompressPointer r1
    //     0x27b35c: add             x1, x1, HEAP, lsl #32
    // 0x27b360: LoadField: r2 = r1->field_b7
    //     0x27b360: ldur            w2, [x1, #0xb7]
    // 0x27b364: DecompressPointer r2
    //     0x27b364: add             x2, x2, HEAP, lsl #32
    // 0x27b368: str             x2, [SP]
    // 0x27b36c: r0 = preferredLineHeight()
    //     0x27b36c: bl              #0x1d5004  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x27b370: ldr             x0, [fp, #0x10]
    // 0x27b374: stur            d0, [fp, #-0x30]
    // 0x27b378: LoadField: r1 = r0->field_ab
    //     0x27b378: ldur            w1, [x0, #0xab]
    // 0x27b37c: DecompressPointer r1
    //     0x27b37c: add             x1, x1, HEAP, lsl #32
    // 0x27b380: LoadField: r0 = r1->field_b7
    //     0x27b380: ldur            w0, [x1, #0xb7]
    // 0x27b384: DecompressPointer r0
    //     0x27b384: add             x0, x0, HEAP, lsl #32
    // 0x27b388: str             x0, [SP]
    // 0x27b38c: r0 = preferredLineHeight()
    //     0x27b38c: bl              #0x1d5004  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x27b390: stur            d0, [fp, #-0x38]
    // 0x27b394: r0 = _GlyphHeights()
    //     0x27b394: bl              #0x27b3f0  ; Allocate_GlyphHeightsStub -> _GlyphHeights (size=0x18)
    // 0x27b398: ldur            d0, [fp, #-0x30]
    // 0x27b39c: StoreField: r0->field_7 = d0
    //     0x27b39c: stur            d0, [x0, #7]
    // 0x27b3a0: ldur            d0, [fp, #-0x38]
    // 0x27b3a4: StoreField: r0->field_f = d0
    //     0x27b3a4: stur            d0, [x0, #0xf]
    // 0x27b3a8: LeaveFrame
    //     0x27b3a8: mov             SP, fp
    //     0x27b3ac: ldp             fp, lr, [SP], #0x10
    // 0x27b3b0: ret
    //     0x27b3b0: ret             
    // 0x27b3b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27b3b4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27b3b8: b               #0x27b060
    // 0x27b3bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27b3bc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27b3c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27b3c0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27b3c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27b3c4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27b3c8: SaveReg d2
    //     0x27b3c8: str             q2, [SP, #-0x10]!
    // 0x27b3cc: SaveReg r1
    //     0x27b3cc: str             x1, [SP, #-8]!
    // 0x27b3d0: r0 = AllocateDouble()
    //     0x27b3d0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x27b3d4: RestoreReg r1
    //     0x27b3d4: ldr             x1, [SP], #8
    // 0x27b3d8: RestoreReg d2
    //     0x27b3d8: ldr             q2, [SP], #0x10
    // 0x27b3dc: b               #0x27b27c
    // 0x27b3e0: stp             q0, q3, [SP, #-0x20]!
    // 0x27b3e4: r0 = AllocateDouble()
    //     0x27b3e4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x27b3e8: ldp             q0, q3, [SP], #0x20
    // 0x27b3ec: b               #0x27b2f4
  }
  get _ contextMenuButtonItems(/* No info */) {
    // ** addr: 0x27b414, size: 0x188
    // 0x27b414: EnterFrame
    //     0x27b414: stp             fp, lr, [SP, #-0x10]!
    //     0x27b418: mov             fp, SP
    // 0x27b41c: AllocStack(0x60)
    //     0x27b41c: sub             SP, SP, #0x60
    // 0x27b420: CheckStackOverflow
    //     0x27b420: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27b424: cmp             SP, x16
    //     0x27b428: b.ls            #0x27b594
    // 0x27b42c: r1 = 1
    //     0x27b42c: movz            x1, #0x1
    // 0x27b430: r0 = AllocateContext()
    //     0x27b430: bl              #0x3e4e00  ; AllocateContextStub
    // 0x27b434: mov             x1, x0
    // 0x27b438: ldr             x0, [fp, #0x10]
    // 0x27b43c: stur            x1, [fp, #-8]
    // 0x27b440: StoreField: r1->field_f = r0
    //     0x27b440: stur            w0, [x1, #0xf]
    // 0x27b444: str             x0, [SP]
    // 0x27b448: r0 = buttonItemsForToolbarOptions()
    //     0x27b448: bl              #0x27bb90  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions
    // 0x27b44c: cmp             w0, NULL
    // 0x27b450: b.ne            #0x27b588
    // 0x27b454: ldr             x0, [fp, #0x10]
    // 0x27b458: LoadField: r1 = r0->field_33
    //     0x27b458: ldur            w1, [x0, #0x33]
    // 0x27b45c: DecompressPointer r1
    //     0x27b45c: add             x1, x1, HEAP, lsl #32
    // 0x27b460: LoadField: r2 = r1->field_27
    //     0x27b460: ldur            w2, [x1, #0x27]
    // 0x27b464: DecompressPointer r2
    //     0x27b464: add             x2, x2, HEAP, lsl #32
    // 0x27b468: stur            x2, [fp, #-0x10]
    // 0x27b46c: str             x0, [SP]
    // 0x27b470: r0 = cutEnabled()
    //     0x27b470: bl              #0x27bb34  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutEnabled
    // 0x27b474: tbnz            w0, #4, #0x27b48c
    // 0x27b478: ldur            x2, [fp, #-8]
    // 0x27b47c: r1 = Function '<anonymous closure>':.
    //     0x27b47c: add             x1, PP, #0xb, lsl #12  ; [pp+0xbae8] AnonymousClosure: (0x27cbb0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x27b414)
    //     0x27b480: ldr             x1, [x1, #0xae8]
    // 0x27b484: r0 = AllocateClosure()
    //     0x27b484: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27b488: b               #0x27b490
    // 0x27b48c: r0 = Null
    //     0x27b48c: mov             x0, NULL
    // 0x27b490: stur            x0, [fp, #-0x18]
    // 0x27b494: ldr             x16, [fp, #0x10]
    // 0x27b498: str             x16, [SP]
    // 0x27b49c: r0 = cutEnabled()
    //     0x27b49c: bl              #0x27bb34  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutEnabled
    // 0x27b4a0: tbnz            w0, #4, #0x27b4b8
    // 0x27b4a4: ldur            x2, [fp, #-8]
    // 0x27b4a8: r1 = Function '<anonymous closure>':.
    //     0x27b4a8: add             x1, PP, #0xb, lsl #12  ; [pp+0xbaf0] AnonymousClosure: (0x27cb68), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x27b414)
    //     0x27b4ac: ldr             x1, [x1, #0xaf0]
    // 0x27b4b0: r0 = AllocateClosure()
    //     0x27b4b0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27b4b4: b               #0x27b4bc
    // 0x27b4b8: r0 = Null
    //     0x27b4b8: mov             x0, NULL
    // 0x27b4bc: stur            x0, [fp, #-0x20]
    // 0x27b4c0: ldr             x16, [fp, #0x10]
    // 0x27b4c4: str             x16, [SP]
    // 0x27b4c8: r0 = pasteEnabled()
    //     0x27b4c8: bl              #0x26e028  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x27b4cc: tbnz            w0, #4, #0x27b4e4
    // 0x27b4d0: ldur            x2, [fp, #-8]
    // 0x27b4d4: r1 = Function '<anonymous closure>':.
    //     0x27b4d4: add             x1, PP, #0xb, lsl #12  ; [pp+0xbaf8] AnonymousClosure: (0x27cb1c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x27b414)
    //     0x27b4d8: ldr             x1, [x1, #0xaf8]
    // 0x27b4dc: r0 = AllocateClosure()
    //     0x27b4dc: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27b4e0: b               #0x27b4e8
    // 0x27b4e4: r0 = Null
    //     0x27b4e4: mov             x0, NULL
    // 0x27b4e8: stur            x0, [fp, #-0x28]
    // 0x27b4ec: ldr             x16, [fp, #0x10]
    // 0x27b4f0: str             x16, [SP]
    // 0x27b4f4: r0 = selectAllEnabled()
    //     0x27b4f4: bl              #0x27ba60  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAllEnabled
    // 0x27b4f8: tbnz            w0, #4, #0x27b510
    // 0x27b4fc: ldur            x2, [fp, #-8]
    // 0x27b500: r1 = Function '<anonymous closure>':.
    //     0x27b500: add             x1, PP, #0xb, lsl #12  ; [pp+0xbb00] AnonymousClosure: (0x27cad0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x27b414)
    //     0x27b504: ldr             x1, [x1, #0xb00]
    // 0x27b508: r0 = AllocateClosure()
    //     0x27b508: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27b50c: b               #0x27b514
    // 0x27b510: r0 = Null
    //     0x27b510: mov             x0, NULL
    // 0x27b514: stur            x0, [fp, #-0x30]
    // 0x27b518: ldr             x16, [fp, #0x10]
    // 0x27b51c: str             x16, [SP]
    // 0x27b520: r0 = _simpleInstanceOfFalse()
    //     0x27b520: bl              #0x3e3654  ; [dart:core] Object::_simpleInstanceOfFalse
    // 0x27b524: ldr             x16, [fp, #0x10]
    // 0x27b528: str             x16, [SP]
    // 0x27b52c: r0 = _simpleInstanceOfFalse()
    //     0x27b52c: bl              #0x3e3654  ; [dart:core] Object::_simpleInstanceOfFalse
    // 0x27b530: ldr             x16, [fp, #0x10]
    // 0x27b534: str             x16, [SP]
    // 0x27b538: r0 = _simpleInstanceOfFalse()
    //     0x27b538: bl              #0x3e3654  ; [dart:core] Object::_simpleInstanceOfFalse
    // 0x27b53c: ldr             x16, [fp, #0x10]
    // 0x27b540: str             x16, [SP]
    // 0x27b544: r0 = liveTextInputEnabled()
    //     0x27b544: bl              #0x27ba14  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::liveTextInputEnabled
    // 0x27b548: tbnz            w0, #4, #0x27b560
    // 0x27b54c: ldur            x2, [fp, #-8]
    // 0x27b550: r1 = Function '<anonymous closure>':.
    //     0x27b550: add             x1, PP, #0xb, lsl #12  ; [pp+0xbb08] AnonymousClosure: (0x27c9c8), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x27b414)
    //     0x27b554: ldr             x1, [x1, #0xb08]
    // 0x27b558: r0 = AllocateClosure()
    //     0x27b558: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27b55c: b               #0x27b564
    // 0x27b560: r0 = Null
    //     0x27b560: mov             x0, NULL
    // 0x27b564: ldur            x16, [fp, #-0x10]
    // 0x27b568: ldur            lr, [fp, #-0x18]
    // 0x27b56c: stp             lr, x16, [SP, #0x20]
    // 0x27b570: ldur            x16, [fp, #-0x20]
    // 0x27b574: stp             x0, x16, [SP, #0x10]
    // 0x27b578: ldur            x16, [fp, #-0x28]
    // 0x27b57c: ldur            lr, [fp, #-0x30]
    // 0x27b580: stp             lr, x16, [SP]
    // 0x27b584: r0 = getEditableButtonItems()
    //     0x27b584: bl              #0x27b59c  ; [package:flutter/src/widgets/editable_text.dart] EditableText::getEditableButtonItems
    // 0x27b588: LeaveFrame
    //     0x27b588: mov             SP, fp
    //     0x27b58c: ldp             fp, lr, [SP], #0x10
    // 0x27b590: ret
    //     0x27b590: ret             
    // 0x27b594: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27b594: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27b598: b               #0x27b42c
  }
  get _ liveTextInputEnabled(/* No info */) {
    // ** addr: 0x27ba14, size: 0x4c
    // 0x27ba14: EnterFrame
    //     0x27ba14: stp             fp, lr, [SP, #-0x10]!
    //     0x27ba18: mov             fp, SP
    // 0x27ba1c: ldr             x1, [fp, #0x10]
    // 0x27ba20: LoadField: r2 = r1->field_37
    //     0x27ba20: ldur            w2, [x1, #0x37]
    // 0x27ba24: DecompressPointer r2
    //     0x27ba24: add             x2, x2, HEAP, lsl #32
    // 0x27ba28: LoadField: r3 = r2->field_27
    //     0x27ba28: ldur            w3, [x2, #0x27]
    // 0x27ba2c: DecompressPointer r3
    //     0x27ba2c: add             x3, x3, HEAP, lsl #32
    // 0x27ba30: r16 = Instance_LiveTextInputStatus
    //     0x27ba30: ldr             x16, [PP, #0x5488]  ; [pp+0x5488] Obj!LiveTextInputStatus@47dbd1
    // 0x27ba34: cmp             w3, w16
    // 0x27ba38: b.ne            #0x27ba4c
    // 0x27ba3c: LoadField: r2 = r1->field_b
    //     0x27ba3c: ldur            w2, [x1, #0xb]
    // 0x27ba40: DecompressPointer r2
    //     0x27ba40: add             x2, x2, HEAP, lsl #32
    // 0x27ba44: cmp             w2, NULL
    // 0x27ba48: b.eq            #0x27ba5c
    // 0x27ba4c: r0 = false
    //     0x27ba4c: add             x0, NULL, #0x30  ; false
    // 0x27ba50: LeaveFrame
    //     0x27ba50: mov             SP, fp
    //     0x27ba54: ldp             fp, lr, [SP], #0x10
    // 0x27ba58: ret
    //     0x27ba58: ret             
    // 0x27ba5c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27ba5c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ selectAllEnabled(/* No info */) {
    // ** addr: 0x27ba60, size: 0xd4
    // 0x27ba60: EnterFrame
    //     0x27ba60: stp             fp, lr, [SP, #-0x10]!
    //     0x27ba64: mov             fp, SP
    // 0x27ba68: ldr             x1, [fp, #0x10]
    // 0x27ba6c: LoadField: r2 = r1->field_b
    //     0x27ba6c: ldur            w2, [x1, #0xb]
    // 0x27ba70: DecompressPointer r2
    //     0x27ba70: add             x2, x2, HEAP, lsl #32
    // 0x27ba74: cmp             w2, NULL
    // 0x27ba78: b.eq            #0x27bb30
    // 0x27ba7c: LoadField: r1 = r2->field_8f
    //     0x27ba7c: ldur            w1, [x2, #0x8f]
    // 0x27ba80: DecompressPointer r1
    //     0x27ba80: add             x1, x1, HEAP, lsl #32
    // 0x27ba84: r3 = LoadClassIdInstr(r1)
    //     0x27ba84: ldur            x3, [x1, #-1]
    //     0x27ba88: ubfx            x3, x3, #0xc, #0x14
    // 0x27ba8c: sub             x16, x3, #0x737
    // 0x27ba90: cmp             x16, #0xa
    // 0x27ba94: b.ls            #0x27bac4
    // 0x27ba98: LoadField: r1 = r2->field_2b
    //     0x27ba98: ldur            w1, [x2, #0x2b]
    // 0x27ba9c: DecompressPointer r1
    //     0x27ba9c: add             x1, x1, HEAP, lsl #32
    // 0x27baa0: LoadField: r3 = r1->field_13
    //     0x27baa0: ldur            w3, [x1, #0x13]
    // 0x27baa4: DecompressPointer r3
    //     0x27baa4: add             x3, x3, HEAP, lsl #32
    // 0x27baa8: tbnz            w3, #4, #0x27bab4
    // 0x27baac: r0 = true
    //     0x27baac: add             x0, NULL, #0x20  ; true
    // 0x27bab0: b               #0x27bab8
    // 0x27bab4: r0 = false
    //     0x27bab4: add             x0, NULL, #0x30  ; false
    // 0x27bab8: LeaveFrame
    //     0x27bab8: mov             SP, fp
    //     0x27babc: ldp             fp, lr, [SP], #0x10
    // 0x27bac0: ret
    //     0x27bac0: ret             
    // 0x27bac4: LoadField: r1 = r2->field_b
    //     0x27bac4: ldur            w1, [x2, #0xb]
    // 0x27bac8: DecompressPointer r1
    //     0x27bac8: add             x1, x1, HEAP, lsl #32
    // 0x27bacc: LoadField: r2 = r1->field_27
    //     0x27bacc: ldur            w2, [x1, #0x27]
    // 0x27bad0: DecompressPointer r2
    //     0x27bad0: add             x2, x2, HEAP, lsl #32
    // 0x27bad4: LoadField: r1 = r2->field_7
    //     0x27bad4: ldur            w1, [x2, #7]
    // 0x27bad8: DecompressPointer r1
    //     0x27bad8: add             x1, x1, HEAP, lsl #32
    // 0x27badc: LoadField: r3 = r1->field_7
    //     0x27badc: ldur            w3, [x1, #7]
    // 0x27bae0: DecompressPointer r3
    //     0x27bae0: add             x3, x3, HEAP, lsl #32
    // 0x27bae4: cbz             w3, #0x27bb20
    // 0x27bae8: LoadField: r1 = r2->field_b
    //     0x27bae8: ldur            w1, [x2, #0xb]
    // 0x27baec: DecompressPointer r1
    //     0x27baec: add             x1, x1, HEAP, lsl #32
    // 0x27baf0: LoadField: r2 = r1->field_7
    //     0x27baf0: ldur            x2, [x1, #7]
    // 0x27baf4: cbnz            x2, #0x27bb18
    // 0x27baf8: LoadField: r2 = r1->field_f
    //     0x27baf8: ldur            x2, [x1, #0xf]
    // 0x27bafc: r1 = LoadInt32Instr(r3)
    //     0x27bafc: sbfx            x1, x3, #1, #0x1f
    // 0x27bb00: cmp             x2, x1
    // 0x27bb04: r16 = true
    //     0x27bb04: add             x16, NULL, #0x20  ; true
    // 0x27bb08: r17 = false
    //     0x27bb08: add             x17, NULL, #0x30  ; false
    // 0x27bb0c: csel            x3, x16, x17, ne
    // 0x27bb10: mov             x0, x3
    // 0x27bb14: b               #0x27bb24
    // 0x27bb18: r0 = true
    //     0x27bb18: add             x0, NULL, #0x20  ; true
    // 0x27bb1c: b               #0x27bb24
    // 0x27bb20: r0 = false
    //     0x27bb20: add             x0, NULL, #0x30  ; false
    // 0x27bb24: LeaveFrame
    //     0x27bb24: mov             SP, fp
    //     0x27bb28: ldp             fp, lr, [SP], #0x10
    // 0x27bb2c: ret
    //     0x27bb2c: ret             
    // 0x27bb30: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27bb30: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ cutEnabled(/* No info */) {
    // ** addr: 0x27bb34, size: 0x5c
    // 0x27bb34: EnterFrame
    //     0x27bb34: stp             fp, lr, [SP, #-0x10]!
    //     0x27bb38: mov             fp, SP
    // 0x27bb3c: ldr             x1, [fp, #0x10]
    // 0x27bb40: LoadField: r2 = r1->field_b
    //     0x27bb40: ldur            w2, [x1, #0xb]
    // 0x27bb44: DecompressPointer r2
    //     0x27bb44: add             x2, x2, HEAP, lsl #32
    // 0x27bb48: cmp             w2, NULL
    // 0x27bb4c: b.eq            #0x27bb8c
    // 0x27bb50: LoadField: r1 = r2->field_8f
    //     0x27bb50: ldur            w1, [x2, #0x8f]
    // 0x27bb54: DecompressPointer r1
    //     0x27bb54: add             x1, x1, HEAP, lsl #32
    // 0x27bb58: r2 = LoadClassIdInstr(r1)
    //     0x27bb58: ldur            x2, [x1, #-1]
    //     0x27bb5c: ubfx            x2, x2, #0xc, #0x14
    // 0x27bb60: sub             x16, x2, #0x737
    // 0x27bb64: cmp             x16, #0xa
    // 0x27bb68: b.ls            #0x27bb7c
    // 0x27bb6c: r0 = false
    //     0x27bb6c: add             x0, NULL, #0x30  ; false
    // 0x27bb70: LeaveFrame
    //     0x27bb70: mov             SP, fp
    //     0x27bb74: ldp             fp, lr, [SP], #0x10
    // 0x27bb78: ret
    //     0x27bb78: ret             
    // 0x27bb7c: r0 = false
    //     0x27bb7c: add             x0, NULL, #0x30  ; false
    // 0x27bb80: LeaveFrame
    //     0x27bb80: mov             SP, fp
    //     0x27bb84: ldp             fp, lr, [SP], #0x10
    // 0x27bb88: ret
    //     0x27bb88: ret             
    // 0x27bb8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27bb8c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ buttonItemsForToolbarOptions(/* No info */) {
    // ** addr: 0x27bb90, size: 0x2d0
    // 0x27bb90: EnterFrame
    //     0x27bb90: stp             fp, lr, [SP, #-0x10]!
    //     0x27bb94: mov             fp, SP
    // 0x27bb98: AllocStack(0x40)
    //     0x27bb98: sub             SP, SP, #0x40
    // 0x27bb9c: CheckStackOverflow
    //     0x27bb9c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27bba0: cmp             SP, x16
    //     0x27bba4: b.ls            #0x27be44
    // 0x27bba8: r1 = 1
    //     0x27bba8: movz            x1, #0x1
    // 0x27bbac: r0 = AllocateContext()
    //     0x27bbac: bl              #0x3e4e00  ; AllocateContextStub
    // 0x27bbb0: mov             x1, x0
    // 0x27bbb4: ldr             x0, [fp, #0x10]
    // 0x27bbb8: stur            x1, [fp, #-0x10]
    // 0x27bbbc: StoreField: r1->field_f = r0
    //     0x27bbbc: stur            w0, [x1, #0xf]
    // 0x27bbc0: LoadField: r2 = r0->field_b
    //     0x27bbc0: ldur            w2, [x0, #0xb]
    // 0x27bbc4: DecompressPointer r2
    //     0x27bbc4: add             x2, x2, HEAP, lsl #32
    // 0x27bbc8: cmp             w2, NULL
    // 0x27bbcc: b.eq            #0x27be4c
    // 0x27bbd0: LoadField: r3 = r2->field_2b
    //     0x27bbd0: ldur            w3, [x2, #0x2b]
    // 0x27bbd4: DecompressPointer r3
    //     0x27bbd4: add             x3, x3, HEAP, lsl #32
    // 0x27bbd8: stur            x3, [fp, #-8]
    // 0x27bbdc: r16 = Instance_ToolbarOptions
    //     0x27bbdc: add             x16, PP, #0xb, lsl #12  ; [pp+0xbb90] Obj!ToolbarOptions@472941
    //     0x27bbe0: ldr             x16, [x16, #0xb90]
    // 0x27bbe4: cmp             w3, w16
    // 0x27bbe8: b.ne            #0x27bbfc
    // 0x27bbec: r0 = Null
    //     0x27bbec: mov             x0, NULL
    // 0x27bbf0: LeaveFrame
    //     0x27bbf0: mov             SP, fp
    //     0x27bbf4: ldp             fp, lr, [SP], #0x10
    // 0x27bbf8: ret
    //     0x27bbf8: ret             
    // 0x27bbfc: r16 = <ContextMenuButtonItem>
    //     0x27bbfc: add             x16, PP, #0xb, lsl #12  ; [pp+0xbb60] TypeArguments: <ContextMenuButtonItem>
    //     0x27bc00: ldr             x16, [x16, #0xb60]
    // 0x27bc04: stp             xzr, x16, [SP]
    // 0x27bc08: r0 = _GrowableList()
    //     0x27bc08: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x27bc0c: mov             x1, x0
    // 0x27bc10: ldur            x0, [fp, #-8]
    // 0x27bc14: stur            x1, [fp, #-0x18]
    // 0x27bc18: LoadField: r2 = r0->field_b
    //     0x27bc18: ldur            w2, [x0, #0xb]
    // 0x27bc1c: DecompressPointer r2
    //     0x27bc1c: add             x2, x2, HEAP, lsl #32
    // 0x27bc20: tbnz            w2, #4, #0x27bc3c
    // 0x27bc24: ldr             x2, [fp, #0x10]
    // 0x27bc28: LoadField: r3 = r2->field_b
    //     0x27bc28: ldur            w3, [x2, #0xb]
    // 0x27bc2c: DecompressPointer r3
    //     0x27bc2c: add             x3, x3, HEAP, lsl #32
    // 0x27bc30: cmp             w3, NULL
    // 0x27bc34: b.eq            #0x27be50
    // 0x27bc38: b               #0x27bc40
    // 0x27bc3c: ldr             x2, [fp, #0x10]
    // 0x27bc40: LoadField: r3 = r0->field_7
    //     0x27bc40: ldur            w3, [x0, #7]
    // 0x27bc44: DecompressPointer r3
    //     0x27bc44: add             x3, x3, HEAP, lsl #32
    // 0x27bc48: tbnz            w3, #4, #0x27bc5c
    // 0x27bc4c: LoadField: r3 = r2->field_b
    //     0x27bc4c: ldur            w3, [x2, #0xb]
    // 0x27bc50: DecompressPointer r3
    //     0x27bc50: add             x3, x3, HEAP, lsl #32
    // 0x27bc54: cmp             w3, NULL
    // 0x27bc58: b.eq            #0x27be54
    // 0x27bc5c: LoadField: r3 = r0->field_f
    //     0x27bc5c: ldur            w3, [x0, #0xf]
    // 0x27bc60: DecompressPointer r3
    //     0x27bc60: add             x3, x3, HEAP, lsl #32
    // 0x27bc64: tbnz            w3, #4, #0x27bd44
    // 0x27bc68: str             x2, [SP]
    // 0x27bc6c: r0 = pasteEnabled()
    //     0x27bc6c: bl              #0x26e028  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x27bc70: tbnz            w0, #4, #0x27bd3c
    // 0x27bc74: ldur            x0, [fp, #-0x18]
    // 0x27bc78: ldur            x2, [fp, #-0x10]
    // 0x27bc7c: r1 = Function '<anonymous closure>':.
    //     0x27bc7c: add             x1, PP, #0xb, lsl #12  ; [pp+0xbb98] AnonymousClosure: (0x27bff8), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions (0x27bb90)
    //     0x27bc80: ldr             x1, [x1, #0xb98]
    // 0x27bc84: r0 = AllocateClosure()
    //     0x27bc84: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27bc88: stur            x0, [fp, #-0x20]
    // 0x27bc8c: r0 = ContextMenuButtonItem()
    //     0x27bc8c: bl              #0x27b9e8  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x27bc90: mov             x1, x0
    // 0x27bc94: ldur            x0, [fp, #-0x20]
    // 0x27bc98: stur            x1, [fp, #-0x30]
    // 0x27bc9c: StoreField: r1->field_7 = r0
    //     0x27bc9c: stur            w0, [x1, #7]
    // 0x27bca0: r0 = Instance_ContextMenuButtonType
    //     0x27bca0: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb78] Obj!ContextMenuButtonType@480601
    //     0x27bca4: ldr             x0, [x0, #0xb78]
    // 0x27bca8: StoreField: r1->field_b = r0
    //     0x27bca8: stur            w0, [x1, #0xb]
    // 0x27bcac: ldur            x0, [fp, #-0x18]
    // 0x27bcb0: LoadField: r2 = r0->field_b
    //     0x27bcb0: ldur            w2, [x0, #0xb]
    // 0x27bcb4: DecompressPointer r2
    //     0x27bcb4: add             x2, x2, HEAP, lsl #32
    // 0x27bcb8: LoadField: r3 = r0->field_f
    //     0x27bcb8: ldur            w3, [x0, #0xf]
    // 0x27bcbc: DecompressPointer r3
    //     0x27bcbc: add             x3, x3, HEAP, lsl #32
    // 0x27bcc0: LoadField: r4 = r3->field_b
    //     0x27bcc0: ldur            w4, [x3, #0xb]
    // 0x27bcc4: DecompressPointer r4
    //     0x27bcc4: add             x4, x4, HEAP, lsl #32
    // 0x27bcc8: r3 = LoadInt32Instr(r2)
    //     0x27bcc8: sbfx            x3, x2, #1, #0x1f
    // 0x27bccc: stur            x3, [fp, #-0x28]
    // 0x27bcd0: r2 = LoadInt32Instr(r4)
    //     0x27bcd0: sbfx            x2, x4, #1, #0x1f
    // 0x27bcd4: cmp             x3, x2
    // 0x27bcd8: b.ne            #0x27bce4
    // 0x27bcdc: str             x0, [SP]
    // 0x27bce0: r0 = _growToNextCapacity()
    //     0x27bce0: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27bce4: ldur            x2, [fp, #-0x18]
    // 0x27bce8: ldur            x3, [fp, #-0x28]
    // 0x27bcec: add             x0, x3, #1
    // 0x27bcf0: lsl             x1, x0, #1
    // 0x27bcf4: StoreField: r2->field_b = r1
    //     0x27bcf4: stur            w1, [x2, #0xb]
    // 0x27bcf8: mov             x1, x3
    // 0x27bcfc: cmp             x1, x0
    // 0x27bd00: b.hs            #0x27be58
    // 0x27bd04: LoadField: r1 = r2->field_f
    //     0x27bd04: ldur            w1, [x2, #0xf]
    // 0x27bd08: DecompressPointer r1
    //     0x27bd08: add             x1, x1, HEAP, lsl #32
    // 0x27bd0c: ldur            x0, [fp, #-0x30]
    // 0x27bd10: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27bd10: add             x25, x1, x3, lsl #2
    //     0x27bd14: add             x25, x25, #0xf
    //     0x27bd18: str             w0, [x25]
    //     0x27bd1c: tbz             w0, #0, #0x27bd38
    //     0x27bd20: ldurb           w16, [x1, #-1]
    //     0x27bd24: ldurb           w17, [x0, #-1]
    //     0x27bd28: and             x16, x17, x16, lsr #2
    //     0x27bd2c: tst             x16, HEAP, lsr #32
    //     0x27bd30: b.eq            #0x27bd38
    //     0x27bd34: bl              #0x3e41ec
    // 0x27bd38: b               #0x27bd48
    // 0x27bd3c: ldur            x2, [fp, #-0x18]
    // 0x27bd40: b               #0x27bd48
    // 0x27bd44: mov             x2, x1
    // 0x27bd48: ldur            x0, [fp, #-8]
    // 0x27bd4c: LoadField: r1 = r0->field_13
    //     0x27bd4c: ldur            w1, [x0, #0x13]
    // 0x27bd50: DecompressPointer r1
    //     0x27bd50: add             x1, x1, HEAP, lsl #32
    // 0x27bd54: tbnz            w1, #4, #0x27be34
    // 0x27bd58: ldr             x16, [fp, #0x10]
    // 0x27bd5c: str             x16, [SP]
    // 0x27bd60: r0 = selectAllEnabled()
    //     0x27bd60: bl              #0x27ba60  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAllEnabled
    // 0x27bd64: tbnz            w0, #4, #0x27be30
    // 0x27bd68: ldur            x0, [fp, #-0x18]
    // 0x27bd6c: ldur            x2, [fp, #-0x10]
    // 0x27bd70: r1 = Function '<anonymous closure>':.
    //     0x27bd70: add             x1, PP, #0xb, lsl #12  ; [pp+0xbba0] AnonymousClosure: (0x27be60), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions (0x27bb90)
    //     0x27bd74: ldr             x1, [x1, #0xba0]
    // 0x27bd78: r0 = AllocateClosure()
    //     0x27bd78: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27bd7c: stur            x0, [fp, #-8]
    // 0x27bd80: r0 = ContextMenuButtonItem()
    //     0x27bd80: bl              #0x27b9e8  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x27bd84: mov             x1, x0
    // 0x27bd88: ldur            x0, [fp, #-8]
    // 0x27bd8c: stur            x1, [fp, #-0x10]
    // 0x27bd90: StoreField: r1->field_7 = r0
    //     0x27bd90: stur            w0, [x1, #7]
    // 0x27bd94: r0 = Instance_ContextMenuButtonType
    //     0x27bd94: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb80] Obj!ContextMenuButtonType@4805e1
    //     0x27bd98: ldr             x0, [x0, #0xb80]
    // 0x27bd9c: StoreField: r1->field_b = r0
    //     0x27bd9c: stur            w0, [x1, #0xb]
    // 0x27bda0: ldur            x0, [fp, #-0x18]
    // 0x27bda4: LoadField: r2 = r0->field_b
    //     0x27bda4: ldur            w2, [x0, #0xb]
    // 0x27bda8: DecompressPointer r2
    //     0x27bda8: add             x2, x2, HEAP, lsl #32
    // 0x27bdac: LoadField: r3 = r0->field_f
    //     0x27bdac: ldur            w3, [x0, #0xf]
    // 0x27bdb0: DecompressPointer r3
    //     0x27bdb0: add             x3, x3, HEAP, lsl #32
    // 0x27bdb4: LoadField: r4 = r3->field_b
    //     0x27bdb4: ldur            w4, [x3, #0xb]
    // 0x27bdb8: DecompressPointer r4
    //     0x27bdb8: add             x4, x4, HEAP, lsl #32
    // 0x27bdbc: r3 = LoadInt32Instr(r2)
    //     0x27bdbc: sbfx            x3, x2, #1, #0x1f
    // 0x27bdc0: stur            x3, [fp, #-0x28]
    // 0x27bdc4: r2 = LoadInt32Instr(r4)
    //     0x27bdc4: sbfx            x2, x4, #1, #0x1f
    // 0x27bdc8: cmp             x3, x2
    // 0x27bdcc: b.ne            #0x27bdd8
    // 0x27bdd0: str             x0, [SP]
    // 0x27bdd4: r0 = _growToNextCapacity()
    //     0x27bdd4: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27bdd8: ldur            x2, [fp, #-0x18]
    // 0x27bddc: ldur            x3, [fp, #-0x28]
    // 0x27bde0: add             x0, x3, #1
    // 0x27bde4: lsl             x4, x0, #1
    // 0x27bde8: StoreField: r2->field_b = r4
    //     0x27bde8: stur            w4, [x2, #0xb]
    // 0x27bdec: mov             x1, x3
    // 0x27bdf0: cmp             x1, x0
    // 0x27bdf4: b.hs            #0x27be5c
    // 0x27bdf8: LoadField: r1 = r2->field_f
    //     0x27bdf8: ldur            w1, [x2, #0xf]
    // 0x27bdfc: DecompressPointer r1
    //     0x27bdfc: add             x1, x1, HEAP, lsl #32
    // 0x27be00: ldur            x0, [fp, #-0x10]
    // 0x27be04: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27be04: add             x25, x1, x3, lsl #2
    //     0x27be08: add             x25, x25, #0xf
    //     0x27be0c: str             w0, [x25]
    //     0x27be10: tbz             w0, #0, #0x27be2c
    //     0x27be14: ldurb           w16, [x1, #-1]
    //     0x27be18: ldurb           w17, [x0, #-1]
    //     0x27be1c: and             x16, x17, x16, lsr #2
    //     0x27be20: tst             x16, HEAP, lsr #32
    //     0x27be24: b.eq            #0x27be2c
    //     0x27be28: bl              #0x3e41ec
    // 0x27be2c: b               #0x27be34
    // 0x27be30: ldur            x2, [fp, #-0x18]
    // 0x27be34: mov             x0, x2
    // 0x27be38: LeaveFrame
    //     0x27be38: mov             SP, fp
    //     0x27be3c: ldp             fp, lr, [SP], #0x10
    // 0x27be40: ret
    //     0x27be40: ret             
    // 0x27be44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27be44: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27be48: b               #0x27bba8
    // 0x27be4c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27be4c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27be50: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27be50: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27be54: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27be54: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27be58: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27be58: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x27be5c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27be5c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x27be60, size: 0x50
    // 0x27be60: EnterFrame
    //     0x27be60: stp             fp, lr, [SP, #-0x10]!
    //     0x27be64: mov             fp, SP
    // 0x27be68: AllocStack(0x10)
    //     0x27be68: sub             SP, SP, #0x10
    // 0x27be6c: SetupParameters()
    //     0x27be6c: ldr             x0, [fp, #0x10]
    //     0x27be70: ldur            w1, [x0, #0x17]
    //     0x27be74: add             x1, x1, HEAP, lsl #32
    // 0x27be78: CheckStackOverflow
    //     0x27be78: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27be7c: cmp             SP, x16
    //     0x27be80: b.ls            #0x27bea8
    // 0x27be84: LoadField: r0 = r1->field_f
    //     0x27be84: ldur            w0, [x1, #0xf]
    // 0x27be88: DecompressPointer r0
    //     0x27be88: add             x0, x0, HEAP, lsl #32
    // 0x27be8c: r16 = Instance_SelectionChangedCause
    //     0x27be8c: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x27be90: stp             x16, x0, [SP]
    // 0x27be94: r0 = selectAll()
    //     0x27be94: bl              #0x27beb0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAll
    // 0x27be98: r0 = Null
    //     0x27be98: mov             x0, NULL
    // 0x27be9c: LeaveFrame
    //     0x27be9c: mov             SP, fp
    //     0x27bea0: ldp             fp, lr, [SP], #0x10
    // 0x27bea4: ret
    //     0x27bea4: ret             
    // 0x27bea8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27bea8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27beac: b               #0x27be84
  }
  _ selectAll(/* No info */) {
    // ** addr: 0x27beb0, size: 0x148
    // 0x27beb0: EnterFrame
    //     0x27beb0: stp             fp, lr, [SP, #-0x10]!
    //     0x27beb4: mov             fp, SP
    // 0x27beb8: AllocStack(0x28)
    //     0x27beb8: sub             SP, SP, #0x28
    // 0x27bebc: CheckStackOverflow
    //     0x27bebc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27bec0: cmp             SP, x16
    //     0x27bec4: b.ls            #0x27bfe8
    // 0x27bec8: ldr             x0, [fp, #0x18]
    // 0x27becc: LoadField: r1 = r0->field_b
    //     0x27becc: ldur            w1, [x0, #0xb]
    // 0x27bed0: DecompressPointer r1
    //     0x27bed0: add             x1, x1, HEAP, lsl #32
    // 0x27bed4: cmp             w1, NULL
    // 0x27bed8: b.eq            #0x27bff0
    // 0x27bedc: LoadField: r2 = r1->field_b
    //     0x27bedc: ldur            w2, [x1, #0xb]
    // 0x27bee0: DecompressPointer r2
    //     0x27bee0: add             x2, x2, HEAP, lsl #32
    // 0x27bee4: LoadField: r1 = r2->field_27
    //     0x27bee4: ldur            w1, [x2, #0x27]
    // 0x27bee8: DecompressPointer r1
    //     0x27bee8: add             x1, x1, HEAP, lsl #32
    // 0x27beec: stur            x1, [fp, #-0x10]
    // 0x27bef0: LoadField: r2 = r1->field_7
    //     0x27bef0: ldur            w2, [x1, #7]
    // 0x27bef4: DecompressPointer r2
    //     0x27bef4: add             x2, x2, HEAP, lsl #32
    // 0x27bef8: LoadField: r3 = r2->field_7
    //     0x27bef8: ldur            w3, [x2, #7]
    // 0x27befc: DecompressPointer r3
    //     0x27befc: add             x3, x3, HEAP, lsl #32
    // 0x27bf00: stur            x3, [fp, #-8]
    // 0x27bf04: r0 = TextSelection()
    //     0x27bf04: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x27bf08: mov             x1, x0
    // 0x27bf0c: r0 = 0
    //     0x27bf0c: movz            x0, #0
    // 0x27bf10: StoreField: r1->field_17 = r0
    //     0x27bf10: stur            x0, [x1, #0x17]
    // 0x27bf14: ldur            x0, [fp, #-8]
    // 0x27bf18: r2 = LoadInt32Instr(r0)
    //     0x27bf18: sbfx            x2, x0, #1, #0x1f
    // 0x27bf1c: StoreField: r1->field_1f = r2
    //     0x27bf1c: stur            x2, [x1, #0x1f]
    // 0x27bf20: r0 = Instance_TextAffinity
    //     0x27bf20: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x27bf24: StoreField: r1->field_27 = r0
    //     0x27bf24: stur            w0, [x1, #0x27]
    // 0x27bf28: r0 = false
    //     0x27bf28: add             x0, NULL, #0x30  ; false
    // 0x27bf2c: StoreField: r1->field_2b = r0
    //     0x27bf2c: stur            w0, [x1, #0x2b]
    // 0x27bf30: cmp             x2, #0
    // 0x27bf34: r16 = true
    //     0x27bf34: add             x16, NULL, #0x20  ; true
    // 0x27bf38: r17 = false
    //     0x27bf38: add             x17, NULL, #0x30  ; false
    // 0x27bf3c: csel            x0, x16, x17, gt
    // 0x27bf40: tbnz            w0, #4, #0x27bf4c
    // 0x27bf44: r3 = 0
    //     0x27bf44: movz            x3, #0
    // 0x27bf48: b               #0x27bf50
    // 0x27bf4c: mov             x3, x2
    // 0x27bf50: tbz             w0, #4, #0x27bf58
    // 0x27bf54: r2 = 0
    //     0x27bf54: movz            x2, #0
    // 0x27bf58: ldr             x0, [fp, #0x10]
    // 0x27bf5c: StoreField: r1->field_7 = r3
    //     0x27bf5c: stur            x3, [x1, #7]
    // 0x27bf60: StoreField: r1->field_f = r2
    //     0x27bf60: stur            x2, [x1, #0xf]
    // 0x27bf64: ldur            x16, [fp, #-0x10]
    // 0x27bf68: stp             x1, x16, [SP]
    // 0x27bf6c: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x27bf6c: ldr             x4, [PP, #0x5930]  ; [pp+0x5930] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x27bf70: r0 = copyWith()
    //     0x27bf70: bl              #0x2498e0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x27bf74: ldr             x16, [fp, #0x18]
    // 0x27bf78: stp             x0, x16, [SP, #8]
    // 0x27bf7c: ldr             x16, [fp, #0x10]
    // 0x27bf80: str             x16, [SP]
    // 0x27bf84: r0 = userUpdateTextEditingValue()
    //     0x27bf84: bl              #0x22c13c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x27bf88: ldr             x0, [fp, #0x10]
    // 0x27bf8c: r16 = Instance_SelectionChangedCause
    //     0x27bf8c: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x27bf90: cmp             w0, w16
    // 0x27bf94: b.ne            #0x27bfd8
    // 0x27bf98: ldr             x0, [fp, #0x18]
    // 0x27bf9c: LoadField: r1 = r0->field_b
    //     0x27bf9c: ldur            w1, [x0, #0xb]
    // 0x27bfa0: DecompressPointer r1
    //     0x27bfa0: add             x1, x1, HEAP, lsl #32
    // 0x27bfa4: cmp             w1, NULL
    // 0x27bfa8: b.eq            #0x27bff4
    // 0x27bfac: LoadField: r2 = r1->field_b
    //     0x27bfac: ldur            w2, [x1, #0xb]
    // 0x27bfb0: DecompressPointer r2
    //     0x27bfb0: add             x2, x2, HEAP, lsl #32
    // 0x27bfb4: LoadField: r1 = r2->field_27
    //     0x27bfb4: ldur            w1, [x2, #0x27]
    // 0x27bfb8: DecompressPointer r1
    //     0x27bfb8: add             x1, x1, HEAP, lsl #32
    // 0x27bfbc: LoadField: r2 = r1->field_b
    //     0x27bfbc: ldur            w2, [x1, #0xb]
    // 0x27bfc0: DecompressPointer r2
    //     0x27bfc0: add             x2, x2, HEAP, lsl #32
    // 0x27bfc4: str             x2, [SP]
    // 0x27bfc8: r0 = extent()
    //     0x27bfc8: bl              #0x1fc3bc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x27bfcc: ldr             x16, [fp, #0x18]
    // 0x27bfd0: stp             x0, x16, [SP]
    // 0x27bfd4: r0 = bringIntoView()
    //     0x27bfd4: bl              #0x241504  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x27bfd8: r0 = Null
    //     0x27bfd8: mov             x0, NULL
    // 0x27bfdc: LeaveFrame
    //     0x27bfdc: mov             SP, fp
    //     0x27bfe0: ldp             fp, lr, [SP], #0x10
    // 0x27bfe4: ret
    //     0x27bfe4: ret             
    // 0x27bfe8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27bfe8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27bfec: b               #0x27bec8
    // 0x27bff0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27bff0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27bff4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27bff4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x27bff8, size: 0x50
    // 0x27bff8: EnterFrame
    //     0x27bff8: stp             fp, lr, [SP, #-0x10]!
    //     0x27bffc: mov             fp, SP
    // 0x27c000: AllocStack(0x10)
    //     0x27c000: sub             SP, SP, #0x10
    // 0x27c004: SetupParameters()
    //     0x27c004: ldr             x0, [fp, #0x10]
    //     0x27c008: ldur            w1, [x0, #0x17]
    //     0x27c00c: add             x1, x1, HEAP, lsl #32
    // 0x27c010: CheckStackOverflow
    //     0x27c010: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27c014: cmp             SP, x16
    //     0x27c018: b.ls            #0x27c040
    // 0x27c01c: LoadField: r0 = r1->field_f
    //     0x27c01c: ldur            w0, [x1, #0xf]
    // 0x27c020: DecompressPointer r0
    //     0x27c020: add             x0, x0, HEAP, lsl #32
    // 0x27c024: r16 = Instance_SelectionChangedCause
    //     0x27c024: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x27c028: stp             x16, x0, [SP]
    // 0x27c02c: r0 = pasteText()
    //     0x27c02c: bl              #0x27c048  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x27c030: r0 = Null
    //     0x27c030: mov             x0, NULL
    // 0x27c034: LeaveFrame
    //     0x27c034: mov             SP, fp
    //     0x27c038: ldp             fp, lr, [SP], #0x10
    // 0x27c03c: ret
    //     0x27c03c: ret             
    // 0x27c040: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27c040: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27c044: b               #0x27c01c
  }
  _ pasteText(/* No info */) async {
    // ** addr: 0x27c048, size: 0x434
    // 0x27c048: EnterFrame
    //     0x27c048: stp             fp, lr, [SP, #-0x10]!
    //     0x27c04c: mov             fp, SP
    // 0x27c050: AllocStack(0x60)
    //     0x27c050: sub             SP, SP, #0x60
    // 0x27c054: SetupParameters(EditableTextState this /* r1, fp-0x18 */, dynamic _ /* r2, fp-0x10 */)
    //     0x27c054: stur            NULL, [fp, #-8]
    //     0x27c058: movz            x0, #0
    //     0x27c05c: add             x1, fp, w0, sxtw #2
    //     0x27c060: ldr             x1, [x1, #0x18]
    //     0x27c064: stur            x1, [fp, #-0x18]
    //     0x27c068: add             x2, fp, w0, sxtw #2
    //     0x27c06c: ldr             x2, [x2, #0x10]
    //     0x27c070: stur            x2, [fp, #-0x10]
    // 0x27c074: CheckStackOverflow
    //     0x27c074: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27c078: cmp             SP, x16
    //     0x27c07c: b.ls            #0x27c464
    // 0x27c080: r1 = 1
    //     0x27c080: movz            x1, #0x1
    // 0x27c084: r0 = AllocateContext()
    //     0x27c084: bl              #0x3e4e00  ; AllocateContextStub
    // 0x27c088: mov             x2, x0
    // 0x27c08c: ldur            x1, [fp, #-0x18]
    // 0x27c090: stur            x2, [fp, #-0x20]
    // 0x27c094: StoreField: r2->field_f = r1
    //     0x27c094: stur            w1, [x2, #0xf]
    // 0x27c098: InitAsync() -> Future<void?>
    //     0x27c098: ldr             x0, [PP, #0x2c0]  ; [pp+0x2c0] TypeArguments: <void?>
    //     0x27c09c: bl              #0x1a5834
    // 0x27c0a0: ldur            x0, [fp, #-0x18]
    // 0x27c0a4: LoadField: r1 = r0->field_b
    //     0x27c0a4: ldur            w1, [x0, #0xb]
    // 0x27c0a8: DecompressPointer r1
    //     0x27c0a8: add             x1, x1, HEAP, lsl #32
    // 0x27c0ac: cmp             w1, NULL
    // 0x27c0b0: b.eq            #0x27c46c
    // 0x27c0b4: LoadField: r2 = r1->field_b
    //     0x27c0b4: ldur            w2, [x1, #0xb]
    // 0x27c0b8: DecompressPointer r2
    //     0x27c0b8: add             x2, x2, HEAP, lsl #32
    // 0x27c0bc: LoadField: r1 = r2->field_27
    //     0x27c0bc: ldur            w1, [x2, #0x27]
    // 0x27c0c0: DecompressPointer r1
    //     0x27c0c0: add             x1, x1, HEAP, lsl #32
    // 0x27c0c4: LoadField: r2 = r1->field_b
    //     0x27c0c4: ldur            w2, [x1, #0xb]
    // 0x27c0c8: DecompressPointer r2
    //     0x27c0c8: add             x2, x2, HEAP, lsl #32
    // 0x27c0cc: stur            x2, [fp, #-0x28]
    // 0x27c0d0: LoadField: r1 = r2->field_7
    //     0x27c0d0: ldur            x1, [x2, #7]
    // 0x27c0d4: tbnz            x1, #0x3f, #0x27c45c
    // 0x27c0d8: LoadField: r1 = r2->field_f
    //     0x27c0d8: ldur            x1, [x2, #0xf]
    // 0x27c0dc: tbnz            x1, #0x3f, #0x27c45c
    // 0x27c0e0: r0 = getData()
    //     0x27c0e0: bl              #0x27c848  ; [package:flutter/src/services/clipboard.dart] Clipboard::getData
    // 0x27c0e4: mov             x1, x0
    // 0x27c0e8: stur            x1, [fp, #-0x30]
    // 0x27c0ec: r0 = Await()
    //     0x27c0ec: bl              #0x1a53d0  ; AwaitStub
    // 0x27c0f0: mov             x2, x0
    // 0x27c0f4: stur            x2, [fp, #-0x40]
    // 0x27c0f8: cmp             w2, NULL
    // 0x27c0fc: b.ne            #0x27c108
    // 0x27c100: r0 = Null
    //     0x27c100: mov             x0, NULL
    // 0x27c104: r0 = ReturnAsyncNotFuture()
    //     0x27c104: b               #0x1a51ac  ; ReturnAsyncNotFutureStub
    // 0x27c108: ldur            x3, [fp, #-0x28]
    // 0x27c10c: LoadField: r4 = r3->field_17
    //     0x27c10c: ldur            x4, [x3, #0x17]
    // 0x27c110: stur            x4, [fp, #-0x38]
    // 0x27c114: LoadField: r5 = r3->field_1f
    //     0x27c114: ldur            x5, [x3, #0x1f]
    // 0x27c118: cmp             x4, x5
    // 0x27c11c: b.le            #0x27c140
    // 0x27c120: r0 = BoxInt64Instr(r4)
    //     0x27c120: sbfiz           x0, x4, #1, #0x1f
    //     0x27c124: cmp             x4, x0, asr #1
    //     0x27c128: b.eq            #0x27c134
    //     0x27c12c: bl              #0x3e5e54
    //     0x27c130: stur            x4, [x0, #7]
    // 0x27c134: mov             x3, x0
    // 0x27c138: mov             x0, x2
    // 0x27c13c: b               #0x27c290
    // 0x27c140: cmp             x4, x5
    // 0x27c144: b.ge            #0x27c168
    // 0x27c148: r0 = BoxInt64Instr(r5)
    //     0x27c148: sbfiz           x0, x5, #1, #0x1f
    //     0x27c14c: cmp             x5, x0, asr #1
    //     0x27c150: b.eq            #0x27c15c
    //     0x27c154: bl              #0x3e5e54
    //     0x27c158: stur            x5, [x0, #7]
    // 0x27c15c: mov             x3, x0
    // 0x27c160: mov             x0, x2
    // 0x27c164: b               #0x27c290
    // 0x27c168: r0 = BoxInt64Instr(r5)
    //     0x27c168: sbfiz           x0, x5, #1, #0x1f
    //     0x27c16c: cmp             x5, x0, asr #1
    //     0x27c170: b.eq            #0x27c17c
    //     0x27c174: bl              #0x3e5e54
    //     0x27c178: stur            x5, [x0, #7]
    // 0x27c17c: mov             x6, x0
    // 0x27c180: stur            x6, [fp, #-0x30]
    // 0x27c184: r0 = 59
    //     0x27c184: movz            x0, #0x3b
    // 0x27c188: branchIfSmi(r6, 0x27c194)
    //     0x27c188: tbz             w6, #0, #0x27c194
    // 0x27c18c: r0 = LoadClassIdInstr(r6)
    //     0x27c18c: ldur            x0, [x6, #-1]
    //     0x27c190: ubfx            x0, x0, #0xc, #0x14
    // 0x27c194: cmp             x0, #0x3d
    // 0x27c198: b.ne            #0x27c224
    // 0x27c19c: r0 = BoxInt64Instr(r4)
    //     0x27c19c: sbfiz           x0, x4, #1, #0x1f
    //     0x27c1a0: cmp             x4, x0, asr #1
    //     0x27c1a4: b.eq            #0x27c1b0
    //     0x27c1a8: bl              #0x3e5e54
    //     0x27c1ac: stur            x4, [x0, #7]
    // 0x27c1b0: r1 = 59
    //     0x27c1b0: movz            x1, #0x3b
    // 0x27c1b4: branchIfSmi(r0, 0x27c1c0)
    //     0x27c1b4: tbz             w0, #0, #0x27c1c0
    // 0x27c1b8: r1 = LoadClassIdInstr(r0)
    //     0x27c1b8: ldur            x1, [x0, #-1]
    //     0x27c1bc: ubfx            x1, x1, #0xc, #0x14
    // 0x27c1c0: cmp             x1, #0x3d
    // 0x27c1c4: b.ne            #0x27c200
    // 0x27c1c8: d0 = 0.000000
    //     0x27c1c8: eor             v0.16b, v0.16b, v0.16b
    // 0x27c1cc: d0 = 0.000000
    //     0x27c1cc: eor             v0.16b, v0.16b, v0.16b
    // 0x27c1d0: scvtf           d1, x4
    // 0x27c1d4: fcmp            d1, d0
    // 0x27c1d8: b.ne            #0x27c200
    // 0x27c1dc: add             x6, x4, x5
    // 0x27c1e0: r0 = BoxInt64Instr(r6)
    //     0x27c1e0: sbfiz           x0, x6, #1, #0x1f
    //     0x27c1e4: cmp             x6, x0, asr #1
    //     0x27c1e8: b.eq            #0x27c1f4
    //     0x27c1ec: bl              #0x3e5e54
    //     0x27c1f0: stur            x6, [x0, #7]
    // 0x27c1f4: mov             x3, x0
    // 0x27c1f8: mov             x0, x2
    // 0x27c1fc: b               #0x27c290
    // 0x27c200: LoadField: d0 = r6->field_7
    //     0x27c200: ldur            d0, [x6, #7]
    // 0x27c204: fcmp            d0, d0
    // 0x27c208: b.vc            #0x27c218
    // 0x27c20c: mov             x3, x6
    // 0x27c210: mov             x0, x2
    // 0x27c214: b               #0x27c290
    // 0x27c218: mov             x3, x0
    // 0x27c21c: mov             x0, x2
    // 0x27c220: b               #0x27c290
    // 0x27c224: cbnz            x5, #0x27c270
    // 0x27c228: r0 = BoxInt64Instr(r4)
    //     0x27c228: sbfiz           x0, x4, #1, #0x1f
    //     0x27c22c: cmp             x4, x0, asr #1
    //     0x27c230: b.eq            #0x27c23c
    //     0x27c234: bl              #0x3e5e54
    //     0x27c238: stur            x4, [x0, #7]
    // 0x27c23c: r1 = 59
    //     0x27c23c: movz            x1, #0x3b
    // 0x27c240: branchIfSmi(r0, 0x27c24c)
    //     0x27c240: tbz             w0, #0, #0x27c24c
    // 0x27c244: r1 = LoadClassIdInstr(r0)
    //     0x27c244: ldur            x1, [x0, #-1]
    //     0x27c248: ubfx            x1, x1, #0xc, #0x14
    // 0x27c24c: str             x0, [SP]
    // 0x27c250: mov             x0, x1
    // 0x27c254: r0 = GDT[cid_x0 + -0xfed]()
    //     0x27c254: sub             lr, x0, #0xfed
    //     0x27c258: ldr             lr, [x21, lr, lsl #3]
    //     0x27c25c: blr             lr
    // 0x27c260: tbnz            w0, #4, #0x27c270
    // 0x27c264: ldur            x3, [fp, #-0x30]
    // 0x27c268: ldur            x0, [fp, #-0x40]
    // 0x27c26c: b               #0x27c290
    // 0x27c270: ldur            x2, [fp, #-0x38]
    // 0x27c274: r0 = BoxInt64Instr(r2)
    //     0x27c274: sbfiz           x0, x2, #1, #0x1f
    //     0x27c278: cmp             x2, x0, asr #1
    //     0x27c27c: b.eq            #0x27c288
    //     0x27c280: bl              #0x3e5e54
    //     0x27c284: stur            x2, [x0, #7]
    // 0x27c288: mov             x3, x0
    // 0x27c28c: ldur            x0, [fp, #-0x40]
    // 0x27c290: ldur            x1, [fp, #-0x18]
    // 0x27c294: ldur            x2, [fp, #-0x10]
    // 0x27c298: stur            x3, [fp, #-0x48]
    // 0x27c29c: LoadField: r4 = r1->field_b
    //     0x27c29c: ldur            w4, [x1, #0xb]
    // 0x27c2a0: DecompressPointer r4
    //     0x27c2a0: add             x4, x4, HEAP, lsl #32
    // 0x27c2a4: cmp             w4, NULL
    // 0x27c2a8: b.eq            #0x27c470
    // 0x27c2ac: LoadField: r5 = r4->field_b
    //     0x27c2ac: ldur            w5, [x4, #0xb]
    // 0x27c2b0: DecompressPointer r5
    //     0x27c2b0: add             x5, x5, HEAP, lsl #32
    // 0x27c2b4: LoadField: r4 = r5->field_27
    //     0x27c2b4: ldur            w4, [x5, #0x27]
    // 0x27c2b8: DecompressPointer r4
    //     0x27c2b8: add             x4, x4, HEAP, lsl #32
    // 0x27c2bc: stur            x4, [fp, #-0x30]
    // 0x27c2c0: r0 = TextSelection()
    //     0x27c2c0: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x27c2c4: mov             x1, x0
    // 0x27c2c8: r0 = Instance_TextAffinity
    //     0x27c2c8: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x27c2cc: StoreField: r1->field_27 = r0
    //     0x27c2cc: stur            w0, [x1, #0x27]
    // 0x27c2d0: ldur            x0, [fp, #-0x48]
    // 0x27c2d4: r2 = LoadInt32Instr(r0)
    //     0x27c2d4: sbfx            x2, x0, #1, #0x1f
    //     0x27c2d8: tbz             w0, #0, #0x27c2e0
    //     0x27c2dc: ldur            x2, [x0, #7]
    // 0x27c2e0: StoreField: r1->field_17 = r2
    //     0x27c2e0: stur            x2, [x1, #0x17]
    // 0x27c2e4: StoreField: r1->field_1f = r2
    //     0x27c2e4: stur            x2, [x1, #0x1f]
    // 0x27c2e8: r0 = false
    //     0x27c2e8: add             x0, NULL, #0x30  ; false
    // 0x27c2ec: StoreField: r1->field_2b = r0
    //     0x27c2ec: stur            w0, [x1, #0x2b]
    // 0x27c2f0: StoreField: r1->field_7 = r2
    //     0x27c2f0: stur            x2, [x1, #7]
    // 0x27c2f4: StoreField: r1->field_f = r2
    //     0x27c2f4: stur            x2, [x1, #0xf]
    // 0x27c2f8: ldur            x16, [fp, #-0x30]
    // 0x27c2fc: stp             x1, x16, [SP]
    // 0x27c300: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x27c300: ldr             x4, [PP, #0x5930]  ; [pp+0x5930] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x27c304: r0 = copyWith()
    //     0x27c304: bl              #0x2498e0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x27c308: mov             x1, x0
    // 0x27c30c: ldur            x0, [fp, #-0x40]
    // 0x27c310: LoadField: r2 = r0->field_7
    //     0x27c310: ldur            w2, [x0, #7]
    // 0x27c314: DecompressPointer r2
    //     0x27c314: add             x2, x2, HEAP, lsl #32
    // 0x27c318: ldur            x16, [fp, #-0x28]
    // 0x27c31c: stp             x16, x1, [SP, #8]
    // 0x27c320: str             x2, [SP]
    // 0x27c324: r0 = replaced()
    //     0x27c324: bl              #0x27c47c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::replaced
    // 0x27c328: ldur            x16, [fp, #-0x18]
    // 0x27c32c: stp             x0, x16, [SP, #8]
    // 0x27c330: ldur            x16, [fp, #-0x10]
    // 0x27c334: str             x16, [SP]
    // 0x27c338: r0 = userUpdateTextEditingValue()
    //     0x27c338: bl              #0x22c13c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x27c33c: ldur            x0, [fp, #-0x10]
    // 0x27c340: r16 = Instance_SelectionChangedCause
    //     0x27c340: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x27c344: cmp             w0, w16
    // 0x27c348: b.ne            #0x27c454
    // 0x27c34c: r0 = LoadStaticField(0xbe0)
    //     0x27c34c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x27c350: ldr             x0, [x0, #0x17c0]
    // 0x27c354: cmp             w0, NULL
    // 0x27c358: b.eq            #0x27c474
    // 0x27c35c: LoadField: r3 = r0->field_53
    //     0x27c35c: ldur            w3, [x0, #0x53]
    // 0x27c360: DecompressPointer r3
    //     0x27c360: add             x3, x3, HEAP, lsl #32
    // 0x27c364: stur            x3, [fp, #-0x28]
    // 0x27c368: LoadField: r0 = r3->field_7
    //     0x27c368: ldur            w0, [x3, #7]
    // 0x27c36c: DecompressPointer r0
    //     0x27c36c: add             x0, x0, HEAP, lsl #32
    // 0x27c370: ldur            x2, [fp, #-0x20]
    // 0x27c374: stur            x0, [fp, #-0x10]
    // 0x27c378: r1 = Function '<anonymous closure>':.
    //     0x27c378: add             x1, PP, #0xb, lsl #12  ; [pp+0xbb18] AnonymousClosure: (0x27c930), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText (0x27c048)
    //     0x27c37c: ldr             x1, [x1, #0xb18]
    // 0x27c380: r0 = AllocateClosure()
    //     0x27c380: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x27c384: ldur            x2, [fp, #-0x10]
    // 0x27c388: mov             x3, x0
    // 0x27c38c: r1 = Null
    //     0x27c38c: mov             x1, NULL
    // 0x27c390: stur            x3, [fp, #-0x10]
    // 0x27c394: cmp             w2, NULL
    // 0x27c398: b.eq            #0x27c3b8
    // 0x27c39c: LoadField: r4 = r2->field_17
    //     0x27c39c: ldur            w4, [x2, #0x17]
    // 0x27c3a0: DecompressPointer r4
    //     0x27c3a0: add             x4, x4, HEAP, lsl #32
    // 0x27c3a4: r8 = X0
    //     0x27c3a4: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x27c3a8: LoadField: r9 = r4->field_7
    //     0x27c3a8: ldur            x9, [x4, #7]
    // 0x27c3ac: r3 = Null
    //     0x27c3ac: add             x3, PP, #0xb, lsl #12  ; [pp+0xbb20] Null
    //     0x27c3b0: ldr             x3, [x3, #0xb20]
    // 0x27c3b4: blr             x9
    // 0x27c3b8: ldur            x0, [fp, #-0x28]
    // 0x27c3bc: LoadField: r1 = r0->field_b
    //     0x27c3bc: ldur            w1, [x0, #0xb]
    // 0x27c3c0: DecompressPointer r1
    //     0x27c3c0: add             x1, x1, HEAP, lsl #32
    // 0x27c3c4: LoadField: r2 = r0->field_f
    //     0x27c3c4: ldur            w2, [x0, #0xf]
    // 0x27c3c8: DecompressPointer r2
    //     0x27c3c8: add             x2, x2, HEAP, lsl #32
    // 0x27c3cc: LoadField: r3 = r2->field_b
    //     0x27c3cc: ldur            w3, [x2, #0xb]
    // 0x27c3d0: DecompressPointer r3
    //     0x27c3d0: add             x3, x3, HEAP, lsl #32
    // 0x27c3d4: r2 = LoadInt32Instr(r1)
    //     0x27c3d4: sbfx            x2, x1, #1, #0x1f
    // 0x27c3d8: stur            x2, [fp, #-0x38]
    // 0x27c3dc: r1 = LoadInt32Instr(r3)
    //     0x27c3dc: sbfx            x1, x3, #1, #0x1f
    // 0x27c3e0: cmp             x2, x1
    // 0x27c3e4: b.ne            #0x27c3f0
    // 0x27c3e8: str             x0, [SP]
    // 0x27c3ec: r0 = _growToNextCapacity()
    //     0x27c3ec: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27c3f0: ldur            x2, [fp, #-0x28]
    // 0x27c3f4: ldur            x3, [fp, #-0x38]
    // 0x27c3f8: add             x0, x3, #1
    // 0x27c3fc: lsl             x1, x0, #1
    // 0x27c400: StoreField: r2->field_b = r1
    //     0x27c400: stur            w1, [x2, #0xb]
    // 0x27c404: mov             x1, x3
    // 0x27c408: cmp             x1, x0
    // 0x27c40c: b.hs            #0x27c478
    // 0x27c410: LoadField: r1 = r2->field_f
    //     0x27c410: ldur            w1, [x2, #0xf]
    // 0x27c414: DecompressPointer r1
    //     0x27c414: add             x1, x1, HEAP, lsl #32
    // 0x27c418: ldur            x0, [fp, #-0x10]
    // 0x27c41c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27c41c: add             x25, x1, x3, lsl #2
    //     0x27c420: add             x25, x25, #0xf
    //     0x27c424: str             w0, [x25]
    //     0x27c428: tbz             w0, #0, #0x27c444
    //     0x27c42c: ldurb           w16, [x1, #-1]
    //     0x27c430: ldurb           w17, [x0, #-1]
    //     0x27c434: and             x16, x17, x16, lsr #2
    //     0x27c438: tst             x16, HEAP, lsr #32
    //     0x27c43c: b.eq            #0x27c444
    //     0x27c440: bl              #0x3e41ec
    // 0x27c444: ldur            x16, [fp, #-0x18]
    // 0x27c448: str             x16, [SP]
    // 0x27c44c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x27c44c: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x27c450: r0 = hideToolbar()
    //     0x27c450: bl              #0x23dcb8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x27c454: r0 = Null
    //     0x27c454: mov             x0, NULL
    // 0x27c458: r0 = ReturnAsyncNotFuture()
    //     0x27c458: b               #0x1a51ac  ; ReturnAsyncNotFutureStub
    // 0x27c45c: r0 = Null
    //     0x27c45c: mov             x0, NULL
    // 0x27c460: r0 = ReturnAsyncNotFuture()
    //     0x27c460: b               #0x1a51ac  ; ReturnAsyncNotFutureStub
    // 0x27c464: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27c464: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27c468: b               #0x27c080
    // 0x27c46c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27c46c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27c470: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27c470: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27c474: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27c474: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x27c478: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27c478: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x27c930, size: 0x98
    // 0x27c930: EnterFrame
    //     0x27c930: stp             fp, lr, [SP, #-0x10]!
    //     0x27c934: mov             fp, SP
    // 0x27c938: AllocStack(0x18)
    //     0x27c938: sub             SP, SP, #0x18
    // 0x27c93c: SetupParameters()
    //     0x27c93c: ldr             x0, [fp, #0x18]
    //     0x27c940: ldur            w1, [x0, #0x17]
    //     0x27c944: add             x1, x1, HEAP, lsl #32
    // 0x27c948: CheckStackOverflow
    //     0x27c948: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27c94c: cmp             SP, x16
    //     0x27c950: b.ls            #0x27c9bc
    // 0x27c954: LoadField: r0 = r1->field_f
    //     0x27c954: ldur            w0, [x1, #0xf]
    // 0x27c958: DecompressPointer r0
    //     0x27c958: add             x0, x0, HEAP, lsl #32
    // 0x27c95c: stur            x0, [fp, #-8]
    // 0x27c960: LoadField: r1 = r0->field_f
    //     0x27c960: ldur            w1, [x0, #0xf]
    // 0x27c964: DecompressPointer r1
    //     0x27c964: add             x1, x1, HEAP, lsl #32
    // 0x27c968: cmp             w1, NULL
    // 0x27c96c: b.eq            #0x27c9ac
    // 0x27c970: LoadField: r1 = r0->field_b
    //     0x27c970: ldur            w1, [x0, #0xb]
    // 0x27c974: DecompressPointer r1
    //     0x27c974: add             x1, x1, HEAP, lsl #32
    // 0x27c978: cmp             w1, NULL
    // 0x27c97c: b.eq            #0x27c9c4
    // 0x27c980: LoadField: r2 = r1->field_b
    //     0x27c980: ldur            w2, [x1, #0xb]
    // 0x27c984: DecompressPointer r2
    //     0x27c984: add             x2, x2, HEAP, lsl #32
    // 0x27c988: LoadField: r1 = r2->field_27
    //     0x27c988: ldur            w1, [x2, #0x27]
    // 0x27c98c: DecompressPointer r1
    //     0x27c98c: add             x1, x1, HEAP, lsl #32
    // 0x27c990: LoadField: r2 = r1->field_b
    //     0x27c990: ldur            w2, [x1, #0xb]
    // 0x27c994: DecompressPointer r2
    //     0x27c994: add             x2, x2, HEAP, lsl #32
    // 0x27c998: str             x2, [SP]
    // 0x27c99c: r0 = extent()
    //     0x27c99c: bl              #0x1fc3bc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x27c9a0: ldur            x16, [fp, #-8]
    // 0x27c9a4: stp             x0, x16, [SP]
    // 0x27c9a8: r0 = bringIntoView()
    //     0x27c9a8: bl              #0x241504  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x27c9ac: r0 = Null
    //     0x27c9ac: mov             x0, NULL
    // 0x27c9b0: LeaveFrame
    //     0x27c9b0: mov             SP, fp
    //     0x27c9b4: ldp             fp, lr, [SP], #0x10
    // 0x27c9b8: ret
    //     0x27c9b8: ret             
    // 0x27c9bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27c9bc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27c9c0: b               #0x27c954
    // 0x27c9c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27c9c4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x27c9c8, size: 0x48
    // 0x27c9c8: EnterFrame
    //     0x27c9c8: stp             fp, lr, [SP, #-0x10]!
    //     0x27c9cc: mov             fp, SP
    // 0x27c9d0: AllocStack(0x8)
    //     0x27c9d0: sub             SP, SP, #8
    // 0x27c9d4: SetupParameters()
    //     0x27c9d4: ldr             x0, [fp, #0x10]
    //     0x27c9d8: ldur            w1, [x0, #0x17]
    //     0x27c9dc: add             x1, x1, HEAP, lsl #32
    // 0x27c9e0: CheckStackOverflow
    //     0x27c9e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27c9e4: cmp             SP, x16
    //     0x27c9e8: b.ls            #0x27ca08
    // 0x27c9ec: LoadField: r0 = r1->field_f
    //     0x27c9ec: ldur            w0, [x1, #0xf]
    // 0x27c9f0: DecompressPointer r0
    //     0x27c9f0: add             x0, x0, HEAP, lsl #32
    // 0x27c9f4: str             x0, [SP]
    // 0x27c9f8: r0 = _startLiveTextInput()
    //     0x27c9f8: bl              #0x27ca10  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startLiveTextInput
    // 0x27c9fc: LeaveFrame
    //     0x27c9fc: mov             SP, fp
    //     0x27ca00: ldp             fp, lr, [SP], #0x10
    // 0x27ca04: ret
    //     0x27ca04: ret             
    // 0x27ca08: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27ca08: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27ca0c: b               #0x27c9ec
  }
  _ _startLiveTextInput(/* No info */) {
    // ** addr: 0x27ca10, size: 0x74
    // 0x27ca10: EnterFrame
    //     0x27ca10: stp             fp, lr, [SP, #-0x10]!
    //     0x27ca14: mov             fp, SP
    // 0x27ca18: AllocStack(0x8)
    //     0x27ca18: sub             SP, SP, #8
    // 0x27ca1c: CheckStackOverflow
    //     0x27ca1c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27ca20: cmp             SP, x16
    //     0x27ca24: b.ls            #0x27ca7c
    // 0x27ca28: ldr             x16, [fp, #0x10]
    // 0x27ca2c: str             x16, [SP]
    // 0x27ca30: r0 = liveTextInputEnabled()
    //     0x27ca30: bl              #0x27ba14  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::liveTextInputEnabled
    // 0x27ca34: tbz             w0, #4, #0x27ca48
    // 0x27ca38: r0 = Null
    //     0x27ca38: mov             x0, NULL
    // 0x27ca3c: LeaveFrame
    //     0x27ca3c: mov             SP, fp
    //     0x27ca40: ldp             fp, lr, [SP], #0x10
    // 0x27ca44: ret
    //     0x27ca44: ret             
    // 0x27ca48: ldr             x16, [fp, #0x10]
    // 0x27ca4c: str             x16, [SP]
    // 0x27ca50: r0 = _hasInputConnection()
    //     0x27ca50: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x27ca54: tbnz            w0, #4, #0x27ca5c
    // 0x27ca58: r0 = startLiveTextInput()
    //     0x27ca58: bl              #0x27ca84  ; [package:flutter/src/services/live_text.dart] LiveText::startLiveTextInput
    // 0x27ca5c: ldr             x16, [fp, #0x10]
    // 0x27ca60: str             x16, [SP]
    // 0x27ca64: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x27ca64: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x27ca68: r0 = hideToolbar()
    //     0x27ca68: bl              #0x23dcb8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x27ca6c: r0 = Null
    //     0x27ca6c: mov             x0, NULL
    // 0x27ca70: LeaveFrame
    //     0x27ca70: mov             SP, fp
    //     0x27ca74: ldp             fp, lr, [SP], #0x10
    // 0x27ca78: ret
    //     0x27ca78: ret             
    // 0x27ca7c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27ca7c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27ca80: b               #0x27ca28
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x27cad0, size: 0x4c
    // 0x27cad0: EnterFrame
    //     0x27cad0: stp             fp, lr, [SP, #-0x10]!
    //     0x27cad4: mov             fp, SP
    // 0x27cad8: AllocStack(0x10)
    //     0x27cad8: sub             SP, SP, #0x10
    // 0x27cadc: SetupParameters()
    //     0x27cadc: ldr             x0, [fp, #0x10]
    //     0x27cae0: ldur            w1, [x0, #0x17]
    //     0x27cae4: add             x1, x1, HEAP, lsl #32
    // 0x27cae8: CheckStackOverflow
    //     0x27cae8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27caec: cmp             SP, x16
    //     0x27caf0: b.ls            #0x27cb14
    // 0x27caf4: LoadField: r0 = r1->field_f
    //     0x27caf4: ldur            w0, [x1, #0xf]
    // 0x27caf8: DecompressPointer r0
    //     0x27caf8: add             x0, x0, HEAP, lsl #32
    // 0x27cafc: r16 = Instance_SelectionChangedCause
    //     0x27cafc: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x27cb00: stp             x16, x0, [SP]
    // 0x27cb04: r0 = selectAll()
    //     0x27cb04: bl              #0x27beb0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAll
    // 0x27cb08: LeaveFrame
    //     0x27cb08: mov             SP, fp
    //     0x27cb0c: ldp             fp, lr, [SP], #0x10
    // 0x27cb10: ret
    //     0x27cb10: ret             
    // 0x27cb14: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27cb14: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27cb18: b               #0x27caf4
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x27cb1c, size: 0x4c
    // 0x27cb1c: EnterFrame
    //     0x27cb1c: stp             fp, lr, [SP, #-0x10]!
    //     0x27cb20: mov             fp, SP
    // 0x27cb24: AllocStack(0x10)
    //     0x27cb24: sub             SP, SP, #0x10
    // 0x27cb28: SetupParameters()
    //     0x27cb28: ldr             x0, [fp, #0x10]
    //     0x27cb2c: ldur            w1, [x0, #0x17]
    //     0x27cb30: add             x1, x1, HEAP, lsl #32
    // 0x27cb34: CheckStackOverflow
    //     0x27cb34: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27cb38: cmp             SP, x16
    //     0x27cb3c: b.ls            #0x27cb60
    // 0x27cb40: LoadField: r0 = r1->field_f
    //     0x27cb40: ldur            w0, [x1, #0xf]
    // 0x27cb44: DecompressPointer r0
    //     0x27cb44: add             x0, x0, HEAP, lsl #32
    // 0x27cb48: r16 = Instance_SelectionChangedCause
    //     0x27cb48: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x27cb4c: stp             x16, x0, [SP]
    // 0x27cb50: r0 = pasteText()
    //     0x27cb50: bl              #0x27c048  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x27cb54: LeaveFrame
    //     0x27cb54: mov             SP, fp
    //     0x27cb58: ldp             fp, lr, [SP], #0x10
    // 0x27cb5c: ret
    //     0x27cb5c: ret             
    // 0x27cb60: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27cb60: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27cb64: b               #0x27cb40
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x27cb68, size: 0x48
    // 0x27cb68: EnterFrame
    //     0x27cb68: stp             fp, lr, [SP, #-0x10]!
    //     0x27cb6c: mov             fp, SP
    // 0x27cb70: AllocStack(0x8)
    //     0x27cb70: sub             SP, SP, #8
    // 0x27cb74: SetupParameters()
    //     0x27cb74: ldr             x0, [fp, #0x10]
    //     0x27cb78: ldur            w1, [x0, #0x17]
    //     0x27cb7c: add             x1, x1, HEAP, lsl #32
    // 0x27cb80: CheckStackOverflow
    //     0x27cb80: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27cb84: cmp             SP, x16
    //     0x27cb88: b.ls            #0x27cba8
    // 0x27cb8c: LoadField: r0 = r1->field_f
    //     0x27cb8c: ldur            w0, [x1, #0xf]
    // 0x27cb90: DecompressPointer r0
    //     0x27cb90: add             x0, x0, HEAP, lsl #32
    // 0x27cb94: str             x0, [SP]
    // 0x27cb98: r0 = initState()
    //     0x27cb98: bl              #0x2cc79c  ; [package:flutter/src/widgets/scrollable.dart] ScrollableState::initState
    // 0x27cb9c: LeaveFrame
    //     0x27cb9c: mov             SP, fp
    //     0x27cba0: ldp             fp, lr, [SP], #0x10
    // 0x27cba4: ret
    //     0x27cba4: ret             
    // 0x27cba8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27cba8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27cbac: b               #0x27cb8c
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x27cbb0, size: 0x4c
    // 0x27cbb0: EnterFrame
    //     0x27cbb0: stp             fp, lr, [SP, #-0x10]!
    //     0x27cbb4: mov             fp, SP
    // 0x27cbb8: AllocStack(0x10)
    //     0x27cbb8: sub             SP, SP, #0x10
    // 0x27cbbc: SetupParameters()
    //     0x27cbbc: ldr             x0, [fp, #0x10]
    //     0x27cbc0: ldur            w1, [x0, #0x17]
    //     0x27cbc4: add             x1, x1, HEAP, lsl #32
    // 0x27cbc8: CheckStackOverflow
    //     0x27cbc8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27cbcc: cmp             SP, x16
    //     0x27cbd0: b.ls            #0x27cbf4
    // 0x27cbd4: LoadField: r0 = r1->field_f
    //     0x27cbd4: ldur            w0, [x1, #0xf]
    // 0x27cbd8: DecompressPointer r0
    //     0x27cbd8: add             x0, x0, HEAP, lsl #32
    // 0x27cbdc: r16 = Instance_SelectionChangedCause
    //     0x27cbdc: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x27cbe0: stp             x16, x0, [SP]
    // 0x27cbe4: r0 = copySelection()
    //     0x27cbe4: bl              #0x27cbfc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copySelection
    // 0x27cbe8: LeaveFrame
    //     0x27cbe8: mov             SP, fp
    //     0x27cbec: ldp             fp, lr, [SP], #0x10
    // 0x27cbf0: ret
    //     0x27cbf0: ret             
    // 0x27cbf4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27cbf4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27cbf8: b               #0x27cbd4
  }
  _ copySelection(/* No info */) {
    // ** addr: 0x27cbfc, size: 0x30
    // 0x27cbfc: EnterFrame
    //     0x27cbfc: stp             fp, lr, [SP, #-0x10]!
    //     0x27cc00: mov             fp, SP
    // 0x27cc04: ldr             x1, [fp, #0x18]
    // 0x27cc08: LoadField: r2 = r1->field_b
    //     0x27cc08: ldur            w2, [x1, #0xb]
    // 0x27cc0c: DecompressPointer r2
    //     0x27cc0c: add             x2, x2, HEAP, lsl #32
    // 0x27cc10: cmp             w2, NULL
    // 0x27cc14: b.eq            #0x27cc28
    // 0x27cc18: r0 = Null
    //     0x27cc18: mov             x0, NULL
    // 0x27cc1c: LeaveFrame
    //     0x27cc1c: mov             SP, fp
    //     0x27cc20: ldp             fp, lr, [SP], #0x10
    // 0x27cc24: ret
    //     0x27cc24: ret             
    // 0x27cc28: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x27cc28: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _extendSelectionByPage(dynamic, ExtendSelectionByPageIntent) {
    // ** addr: 0x288940, size: 0x40
    // 0x288940: EnterFrame
    //     0x288940: stp             fp, lr, [SP, #-0x10]!
    //     0x288944: mov             fp, SP
    // 0x288948: ldr             x1, [fp, #0x18]
    // 0x28894c: LoadField: r2 = r1->field_17
    //     0x28894c: ldur            w2, [x1, #0x17]
    // 0x288950: DecompressPointer r2
    //     0x288950: add             x2, x2, HEAP, lsl #32
    // 0x288954: LoadField: r1 = r2->field_f
    //     0x288954: ldur            w1, [x2, #0xf]
    // 0x288958: DecompressPointer r1
    //     0x288958: add             x1, x1, HEAP, lsl #32
    // 0x28895c: LoadField: r2 = r1->field_b
    //     0x28895c: ldur            w2, [x1, #0xb]
    // 0x288960: DecompressPointer r2
    //     0x288960: add             x2, x2, HEAP, lsl #32
    // 0x288964: cmp             w2, NULL
    // 0x288968: b.eq            #0x28897c
    // 0x28896c: r0 = Null
    //     0x28896c: mov             x0, NULL
    // 0x288970: LeaveFrame
    //     0x288970: mov             SP, fp
    //     0x288974: ldp             fp, lr, [SP], #0x10
    // 0x288978: ret
    //     0x288978: ret             
    // 0x28897c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28897c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ hideMagnifier(/* No info */) {
    // ** addr: 0x296b20, size: 0x80
    // 0x296b20: EnterFrame
    //     0x296b20: stp             fp, lr, [SP, #-0x10]!
    //     0x296b24: mov             fp, SP
    // 0x296b28: AllocStack(0x8)
    //     0x296b28: sub             SP, SP, #8
    // 0x296b2c: CheckStackOverflow
    //     0x296b2c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x296b30: cmp             SP, x16
    //     0x296b34: b.ls            #0x296b94
    // 0x296b38: ldr             x0, [fp, #0x10]
    // 0x296b3c: LoadField: r1 = r0->field_3f
    //     0x296b3c: ldur            w1, [x0, #0x3f]
    // 0x296b40: DecompressPointer r1
    //     0x296b40: add             x1, x1, HEAP, lsl #32
    // 0x296b44: cmp             w1, NULL
    // 0x296b48: b.ne            #0x296b5c
    // 0x296b4c: r0 = Null
    //     0x296b4c: mov             x0, NULL
    // 0x296b50: LeaveFrame
    //     0x296b50: mov             SP, fp
    //     0x296b54: ldp             fp, lr, [SP], #0x10
    // 0x296b58: ret
    //     0x296b58: ret             
    // 0x296b5c: str             x1, [SP]
    // 0x296b60: r0 = magnifierIsVisible()
    //     0x296b60: bl              #0x296bf8  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::magnifierIsVisible
    // 0x296b64: tbnz            w0, #4, #0x296b84
    // 0x296b68: ldr             x0, [fp, #0x10]
    // 0x296b6c: LoadField: r1 = r0->field_3f
    //     0x296b6c: ldur            w1, [x0, #0x3f]
    // 0x296b70: DecompressPointer r1
    //     0x296b70: add             x1, x1, HEAP, lsl #32
    // 0x296b74: cmp             w1, NULL
    // 0x296b78: b.eq            #0x296b9c
    // 0x296b7c: str             x1, [SP]
    // 0x296b80: r0 = hideMagnifier()
    //     0x296b80: bl              #0x296ba0  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::hideMagnifier
    // 0x296b84: r0 = Null
    //     0x296b84: mov             x0, NULL
    // 0x296b88: LeaveFrame
    //     0x296b88: mov             SP, fp
    //     0x296b8c: ldp             fp, lr, [SP], #0x10
    // 0x296b90: ret
    //     0x296b90: ret             
    // 0x296b94: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x296b94: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x296b98: b               #0x296b38
    // 0x296b9c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x296b9c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ showMagnifier(/* No info */) {
    // ** addr: 0x297ad0, size: 0xd0
    // 0x297ad0: EnterFrame
    //     0x297ad0: stp             fp, lr, [SP, #-0x10]!
    //     0x297ad4: mov             fp, SP
    // 0x297ad8: AllocStack(0x10)
    //     0x297ad8: sub             SP, SP, #0x10
    // 0x297adc: CheckStackOverflow
    //     0x297adc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x297ae0: cmp             SP, x16
    //     0x297ae4: b.ls            #0x297b88
    // 0x297ae8: ldr             x0, [fp, #0x18]
    // 0x297aec: LoadField: r1 = r0->field_3f
    //     0x297aec: ldur            w1, [x0, #0x3f]
    // 0x297af0: DecompressPointer r1
    //     0x297af0: add             x1, x1, HEAP, lsl #32
    // 0x297af4: cmp             w1, NULL
    // 0x297af8: b.ne            #0x297b0c
    // 0x297afc: r0 = Null
    //     0x297afc: mov             x0, NULL
    // 0x297b00: LeaveFrame
    //     0x297b00: mov             SP, fp
    //     0x297b04: ldp             fp, lr, [SP], #0x10
    // 0x297b08: ret
    //     0x297b08: ret             
    // 0x297b0c: LoadField: r2 = r1->field_17
    //     0x297b0c: ldur            w2, [x1, #0x17]
    // 0x297b10: DecompressPointer r2
    //     0x297b10: add             x2, x2, HEAP, lsl #32
    // 0x297b14: r16 = Sentinel
    //     0x297b14: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x297b18: cmp             w2, w16
    // 0x297b1c: b.eq            #0x297b90
    // 0x297b20: LoadField: r1 = r2->field_f
    //     0x297b20: ldur            w1, [x2, #0xf]
    // 0x297b24: DecompressPointer r1
    //     0x297b24: add             x1, x1, HEAP, lsl #32
    // 0x297b28: str             x1, [SP]
    // 0x297b2c: r0 = shown()
    //     0x297b2c: bl              #0x296c54  ; [package:flutter/src/widgets/magnifier.dart] MagnifierController::shown
    // 0x297b30: tbnz            w0, #4, #0x297b58
    // 0x297b34: ldr             x0, [fp, #0x18]
    // 0x297b38: LoadField: r1 = r0->field_3f
    //     0x297b38: ldur            w1, [x0, #0x3f]
    // 0x297b3c: DecompressPointer r1
    //     0x297b3c: add             x1, x1, HEAP, lsl #32
    // 0x297b40: cmp             w1, NULL
    // 0x297b44: b.eq            #0x297b98
    // 0x297b48: ldr             x16, [fp, #0x10]
    // 0x297b4c: stp             x16, x1, [SP]
    // 0x297b50: r0 = updateMagnifier()
    //     0x297b50: bl              #0x297c44  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::updateMagnifier
    // 0x297b54: b               #0x297b78
    // 0x297b58: ldr             x0, [fp, #0x18]
    // 0x297b5c: LoadField: r1 = r0->field_3f
    //     0x297b5c: ldur            w1, [x0, #0x3f]
    // 0x297b60: DecompressPointer r1
    //     0x297b60: add             x1, x1, HEAP, lsl #32
    // 0x297b64: cmp             w1, NULL
    // 0x297b68: b.eq            #0x297b9c
    // 0x297b6c: ldr             x16, [fp, #0x10]
    // 0x297b70: stp             x16, x1, [SP]
    // 0x297b74: r0 = showMagnifier()
    //     0x297b74: bl              #0x297ba0  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::showMagnifier
    // 0x297b78: r0 = Null
    //     0x297b78: mov             x0, NULL
    // 0x297b7c: LeaveFrame
    //     0x297b7c: mov             SP, fp
    //     0x297b80: ldp             fp, lr, [SP], #0x10
    // 0x297b84: ret
    //     0x297b84: ret             
    // 0x297b88: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x297b88: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x297b8c: b               #0x297ae8
    // 0x297b90: r9 = _selectionOverlay
    //     0x297b90: ldr             x9, [PP, #0x4ea8]  ; [pp+0x4ea8] Field <TextSelectionOverlay._selectionOverlay@213111801>: late final (offset: 0x18)
    // 0x297b94: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x297b94: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x297b98: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x297b98: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x297b9c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x297b9c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ toggleToolbar(/* No info */) {
    // ** addr: 0x2994d0, size: 0x100
    // 0x2994d0: EnterFrame
    //     0x2994d0: stp             fp, lr, [SP, #-0x10]!
    //     0x2994d4: mov             fp, SP
    // 0x2994d8: AllocStack(0x20)
    //     0x2994d8: sub             SP, SP, #0x20
    // 0x2994dc: SetupParameters(EditableTextState this /* r1, fp-0x10 */, [dynamic _ = true /* r0, fp-0x8 */])
    //     0x2994dc: mov             x0, x4
    //     0x2994e0: ldur            w1, [x0, #0x13]
    //     0x2994e4: add             x1, x1, HEAP, lsl #32
    //     0x2994e8: sub             x0, x1, #2
    //     0x2994ec: add             x1, fp, w0, sxtw #2
    //     0x2994f0: ldr             x1, [x1, #0x10]
    //     0x2994f4: stur            x1, [fp, #-0x10]
    //     0x2994f8: cmp             w0, #2
    //     0x2994fc: b.lt            #0x299510
    //     0x299500: add             x2, fp, w0, sxtw #2
    //     0x299504: ldr             x2, [x2, #8]
    //     0x299508: mov             x0, x2
    //     0x29950c: b               #0x299514
    //     0x299510: add             x0, NULL, #0x20  ; true
    //     0x299514: stur            x0, [fp, #-8]
    // 0x299518: CheckStackOverflow
    //     0x299518: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x29951c: cmp             SP, x16
    //     0x299520: b.ls            #0x2995c0
    // 0x299524: LoadField: r2 = r1->field_3f
    //     0x299524: ldur            w2, [x1, #0x3f]
    // 0x299528: DecompressPointer r2
    //     0x299528: add             x2, x2, HEAP, lsl #32
    // 0x29952c: cmp             w2, NULL
    // 0x299530: b.ne            #0x299568
    // 0x299534: str             x1, [SP]
    // 0x299538: r0 = _createSelectionOverlay()
    //     0x299538: bl              #0x245c6c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay
    // 0x29953c: mov             x2, x0
    // 0x299540: ldur            x1, [fp, #-0x10]
    // 0x299544: StoreField: r1->field_3f = r0
    //     0x299544: stur            w0, [x1, #0x3f]
    //     0x299548: ldurb           w16, [x1, #-1]
    //     0x29954c: ldurb           w17, [x0, #-1]
    //     0x299550: and             x16, x17, x16, lsr #2
    //     0x299554: tst             x16, HEAP, lsr #32
    //     0x299558: b.eq            #0x299560
    //     0x29955c: bl              #0x3e4608
    // 0x299560: mov             x0, x2
    // 0x299564: b               #0x29956c
    // 0x299568: mov             x0, x2
    // 0x29956c: LoadField: r2 = r0->field_17
    //     0x29956c: ldur            w2, [x0, #0x17]
    // 0x299570: DecompressPointer r2
    //     0x299570: add             x2, x2, HEAP, lsl #32
    // 0x299574: r16 = Sentinel
    //     0x299574: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x299578: cmp             w2, w16
    // 0x29957c: b.eq            #0x2995c8
    // 0x299580: str             x2, [SP]
    // 0x299584: r0 = toolbarIsVisible()
    //     0x299584: bl              #0x23df38  ; [package:flutter/src/widgets/text_selection.dart] SelectionOverlay::toolbarIsVisible
    // 0x299588: tbnz            w0, #4, #0x2995a4
    // 0x29958c: ldur            x16, [fp, #-0x10]
    // 0x299590: ldur            lr, [fp, #-8]
    // 0x299594: stp             lr, x16, [SP]
    // 0x299598: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x299598: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x29959c: r0 = hideToolbar()
    //     0x29959c: bl              #0x23dcb8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x2995a0: b               #0x2995b0
    // 0x2995a4: ldur            x16, [fp, #-0x10]
    // 0x2995a8: str             x16, [SP]
    // 0x2995ac: r0 = showToolbar()
    //     0x2995ac: bl              #0x22f3d0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::showToolbar
    // 0x2995b0: r0 = Null
    //     0x2995b0: mov             x0, NULL
    // 0x2995b4: LeaveFrame
    //     0x2995b4: mov             SP, fp
    //     0x2995b8: ldp             fp, lr, [SP], #0x10
    // 0x2995bc: ret
    //     0x2995bc: ret             
    // 0x2995c0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2995c0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2995c4: b               #0x299524
    // 0x2995c8: r9 = _selectionOverlay
    //     0x2995c8: ldr             x9, [PP, #0x4ea8]  ; [pp+0x4ea8] Field <TextSelectionOverlay._selectionOverlay@213111801>: late final (offset: 0x18)
    // 0x2995cc: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2995cc: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x2a1394, size: 0x54c
    // 0x2a1394: EnterFrame
    //     0x2a1394: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1398: mov             fp, SP
    // 0x2a139c: AllocStack(0x70)
    //     0x2a139c: sub             SP, SP, #0x70
    // 0x2a13a0: CheckStackOverflow
    //     0x2a13a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a13a4: cmp             SP, x16
    //     0x2a13a8: b.ls            #0x2a18c4
    // 0x2a13ac: r1 = 6
    //     0x2a13ac: movz            x1, #0x6
    // 0x2a13b0: r0 = AllocateContext()
    //     0x2a13b0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2a13b4: ldr             x1, [fp, #0x18]
    // 0x2a13b8: stur            x0, [fp, #-8]
    // 0x2a13bc: StoreField: r0->field_f = r1
    //     0x2a13bc: stur            w1, [x0, #0xf]
    // 0x2a13c0: ldr             x16, [fp, #0x10]
    // 0x2a13c4: stp             x16, x1, [SP]
    // 0x2a13c8: r0 = build()
    //     0x2a13c8: bl              #0x2a19b4  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::build
    // 0x2a13cc: ldr             x1, [fp, #0x18]
    // 0x2a13d0: LoadField: r0 = r1->field_b
    //     0x2a13d0: ldur            w0, [x1, #0xb]
    // 0x2a13d4: DecompressPointer r0
    //     0x2a13d4: add             x0, x0, HEAP, lsl #32
    // 0x2a13d8: cmp             w0, NULL
    // 0x2a13dc: b.eq            #0x2a18cc
    // 0x2a13e0: LoadField: r2 = r0->field_8f
    //     0x2a13e0: ldur            w2, [x0, #0x8f]
    // 0x2a13e4: DecompressPointer r2
    //     0x2a13e4: add             x2, x2, HEAP, lsl #32
    // 0x2a13e8: mov             x0, x2
    // 0x2a13ec: ldur            x4, [fp, #-8]
    // 0x2a13f0: StoreField: r4->field_13 = r0
    //     0x2a13f0: stur            w0, [x4, #0x13]
    //     0x2a13f4: ldurb           w16, [x4, #-1]
    //     0x2a13f8: ldurb           w17, [x0, #-1]
    //     0x2a13fc: and             x16, x17, x16, lsr #2
    //     0x2a1400: tst             x16, HEAP, lsr #32
    //     0x2a1404: b.eq            #0x2a140c
    //     0x2a1408: bl              #0x3e4668
    // 0x2a140c: r2 = Null
    //     0x2a140c: mov             x2, NULL
    // 0x2a1410: r3 = Null
    //     0x2a1410: mov             x3, NULL
    // 0x2a1414: r0 = AllocateRecord2()
    //     0x2a1414: bl              #0x3e4b70  ; AllocateRecord2Stub
    // 0x2a1418: mov             x4, x0
    // 0x2a141c: ldur            x3, [fp, #-8]
    // 0x2a1420: stur            x4, [fp, #-0x10]
    // 0x2a1424: StoreField: r3->field_1b = r0
    //     0x2a1424: stur            w0, [x3, #0x1b]
    //     0x2a1428: ldurb           w16, [x3, #-1]
    //     0x2a142c: ldurb           w17, [x0, #-1]
    //     0x2a1430: and             x16, x17, x16, lsr #2
    //     0x2a1434: tst             x16, HEAP, lsr #32
    //     0x2a1438: b.eq            #0x2a1440
    //     0x2a143c: bl              #0x3e4648
    // 0x2a1440: mov             x2, x3
    // 0x2a1444: r1 = Function '##0#1#initializer':.
    //     0x2a1444: add             x1, PP, #0x11, lsl #12  ; [pp+0x111b8] AnonymousClosure: (0x2a5114), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x2a1394)
    //     0x2a1448: ldr             x1, [x1, #0x1b8]
    // 0x2a144c: r0 = AllocateClosure()
    //     0x2a144c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a1450: mov             x4, x0
    // 0x2a1454: ldur            x3, [fp, #-8]
    // 0x2a1458: stur            x4, [fp, #-0x20]
    // 0x2a145c: StoreField: r3->field_1f = r0
    //     0x2a145c: stur            w0, [x3, #0x1f]
    //     0x2a1460: ldurb           w16, [x3, #-1]
    //     0x2a1464: ldurb           w17, [x0, #-1]
    //     0x2a1468: and             x16, x17, x16, lsr #2
    //     0x2a146c: tst             x16, HEAP, lsr #32
    //     0x2a1470: b.eq            #0x2a1478
    //     0x2a1474: bl              #0x3e4648
    // 0x2a1478: r0 = Sentinel
    //     0x2a1478: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a147c: StoreField: r3->field_23 = r0
    //     0x2a147c: stur            w0, [x3, #0x23]
    // 0x2a1480: ldur            x0, [fp, #-0x10]
    // 0x2a1484: LoadField: r5 = r0->field_f
    //     0x2a1484: ldur            w5, [x0, #0xf]
    // 0x2a1488: DecompressPointer r5
    //     0x2a1488: add             x5, x5, HEAP, lsl #32
    // 0x2a148c: mov             x0, x5
    // 0x2a1490: stur            x5, [fp, #-0x18]
    // 0x2a1494: StoreField: r3->field_23 = r0
    //     0x2a1494: stur            w0, [x3, #0x23]
    //     0x2a1498: ldurb           w16, [x3, #-1]
    //     0x2a149c: ldurb           w17, [x0, #-1]
    //     0x2a14a0: and             x16, x17, x16, lsr #2
    //     0x2a14a4: tst             x16, HEAP, lsr #32
    //     0x2a14a8: b.eq            #0x2a14b0
    //     0x2a14ac: bl              #0x3e4648
    // 0x2a14b0: mov             x0, x5
    // 0x2a14b4: r2 = Null
    //     0x2a14b4: mov             x2, NULL
    // 0x2a14b8: r1 = Null
    //     0x2a14b8: mov             x1, NULL
    // 0x2a14bc: cmp             w0, NULL
    // 0x2a14c0: b.eq            #0x2a14e0
    // 0x2a14c4: branchIfSmi(r0, 0x2a14e0)
    //     0x2a14c4: tbz             w0, #0, #0x2a14e0
    // 0x2a14c8: r3 = LoadClassIdInstr(r0)
    //     0x2a14c8: ldur            x3, [x0, #-1]
    //     0x2a14cc: ubfx            x3, x3, #0xc, #0x14
    // 0x2a14d0: cmp             x3, #0x10a
    // 0x2a14d4: b.eq            #0x2a14e8
    // 0x2a14d8: cmp             x3, #0x277
    // 0x2a14dc: b.eq            #0x2a14e8
    // 0x2a14e0: r0 = false
    //     0x2a14e0: add             x0, NULL, #0x30  ; false
    // 0x2a14e4: b               #0x2a14ec
    // 0x2a14e8: r0 = true
    //     0x2a14e8: add             x0, NULL, #0x20  ; true
    // 0x2a14ec: tbnz            w0, #4, #0x2a14f8
    // 0x2a14f0: ldur            x0, [fp, #-0x18]
    // 0x2a14f4: b               #0x2a15dc
    // 0x2a14f8: ldur            x0, [fp, #-0x18]
    // 0x2a14fc: r16 = Sentinel
    //     0x2a14fc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a1500: cmp             w0, w16
    // 0x2a1504: b.ne            #0x2a1550
    // 0x2a1508: ldur            x2, [fp, #-8]
    // 0x2a150c: ldur            x0, [fp, #-0x20]
    // 0x2a1510: LoadField: r1 = r0->field_17
    //     0x2a1510: ldur            w1, [x0, #0x17]
    // 0x2a1514: DecompressPointer r1
    //     0x2a1514: add             x1, x1, HEAP, lsl #32
    // 0x2a1518: LoadField: r0 = r1->field_1b
    //     0x2a1518: ldur            w0, [x1, #0x1b]
    // 0x2a151c: DecompressPointer r0
    //     0x2a151c: add             x0, x0, HEAP, lsl #32
    // 0x2a1520: LoadField: r1 = r0->field_f
    //     0x2a1520: ldur            w1, [x0, #0xf]
    // 0x2a1524: DecompressPointer r1
    //     0x2a1524: add             x1, x1, HEAP, lsl #32
    // 0x2a1528: mov             x0, x1
    // 0x2a152c: StoreField: r2->field_23 = r0
    //     0x2a152c: stur            w0, [x2, #0x23]
    //     0x2a1530: ldurb           w16, [x2, #-1]
    //     0x2a1534: ldurb           w17, [x0, #-1]
    //     0x2a1538: and             x16, x17, x16, lsr #2
    //     0x2a153c: tst             x16, HEAP, lsr #32
    //     0x2a1540: b.eq            #0x2a1548
    //     0x2a1544: bl              #0x3e4628
    // 0x2a1548: mov             x0, x1
    // 0x2a154c: b               #0x2a1554
    // 0x2a1550: ldur            x2, [fp, #-8]
    // 0x2a1554: cmp             w0, NULL
    // 0x2a1558: r16 = true
    //     0x2a1558: add             x16, NULL, #0x20  ; true
    // 0x2a155c: r17 = false
    //     0x2a155c: add             x17, NULL, #0x30  ; false
    // 0x2a1560: csel            x1, x16, x17, eq
    // 0x2a1564: tbnz            w1, #4, #0x2a159c
    // 0x2a1568: r0 = 61
    //     0x2a1568: movz            x0, #0x3d
    // 0x2a156c: cmp             x0, #0xac
    // 0x2a1570: b.ne            #0x2a1590
    // 0x2a1574: r0 = Null
    //     0x2a1574: mov             x0, NULL
    // 0x2a1578: LoadField: d0 = r0->field_7
    //     0x2a1578: ldur            d0, [x0, #7]
    // 0x2a157c: stur            d0, [fp, #-0x60]
    // 0x2a1580: r0 = _LinearTextScaler()
    //     0x2a1580: bl              #0x2245dc  ; Allocate_LinearTextScalerStub -> _LinearTextScaler (size=0x10)
    // 0x2a1584: ldur            d0, [fp, #-0x60]
    // 0x2a1588: StoreField: r0->field_7 = d0
    //     0x2a1588: stur            d0, [x0, #7]
    // 0x2a158c: b               #0x2a15dc
    // 0x2a1590: r0 = Null
    //     0x2a1590: mov             x0, NULL
    // 0x2a1594: r2 = Null
    //     0x2a1594: mov             x2, NULL
    // 0x2a1598: b               #0x2a15a4
    // 0x2a159c: r0 = Null
    //     0x2a159c: mov             x0, NULL
    // 0x2a15a0: r2 = Sentinel
    //     0x2a15a0: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a15a4: tbnz            w1, #4, #0x2a15d8
    // 0x2a15a8: r16 = Sentinel
    //     0x2a15a8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a15ac: cmp             w2, w16
    // 0x2a15b0: b.ne            #0x2a15c0
    // 0x2a15b4: cmp             w0, NULL
    // 0x2a15b8: b.ne            #0x2a15d8
    // 0x2a15bc: b               #0x2a15c8
    // 0x2a15c0: cmp             w2, NULL
    // 0x2a15c4: b.ne            #0x2a15d8
    // 0x2a15c8: ldr             x16, [fp, #0x10]
    // 0x2a15cc: str             x16, [SP]
    // 0x2a15d0: r0 = textScalerOf()
    //     0x2a15d0: bl              #0x28d0bc  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::textScalerOf
    // 0x2a15d4: b               #0x2a15dc
    // 0x2a15d8: r0 = Null
    //     0x2a15d8: mov             x0, NULL
    // 0x2a15dc: ldr             x1, [fp, #0x18]
    // 0x2a15e0: ldur            x2, [fp, #-8]
    // 0x2a15e4: StoreField: r2->field_17 = r0
    //     0x2a15e4: stur            w0, [x2, #0x17]
    //     0x2a15e8: ldurb           w16, [x2, #-1]
    //     0x2a15ec: ldurb           w17, [x0, #-1]
    //     0x2a15f0: and             x16, x17, x16, lsr #2
    //     0x2a15f4: tst             x16, HEAP, lsr #32
    //     0x2a15f8: b.eq            #0x2a1600
    //     0x2a15fc: bl              #0x3e4628
    // 0x2a1600: r1 = 1
    //     0x2a1600: movz            x1, #0x1
    // 0x2a1604: r0 = AllocateContext()
    //     0x2a1604: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2a1608: ldr             x1, [fp, #0x18]
    // 0x2a160c: stur            x0, [fp, #-0x10]
    // 0x2a1610: StoreField: r0->field_f = r1
    //     0x2a1610: stur            w1, [x0, #0xf]
    // 0x2a1614: str             x1, [SP]
    // 0x2a1618: r0 = _hasInputConnection()
    //     0x2a1618: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x2a161c: ldr             x1, [fp, #0x18]
    // 0x2a1620: stur            x0, [fp, #-0x18]
    // 0x2a1624: LoadField: r2 = r1->field_b
    //     0x2a1624: ldur            w2, [x1, #0xb]
    // 0x2a1628: DecompressPointer r2
    //     0x2a1628: add             x2, x2, HEAP, lsl #32
    // 0x2a162c: cmp             w2, NULL
    // 0x2a1630: b.eq            #0x2a18d0
    // 0x2a1634: r1 = 1
    //     0x2a1634: movz            x1, #0x1
    // 0x2a1638: r0 = AllocateContext()
    //     0x2a1638: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2a163c: mov             x2, x0
    // 0x2a1640: ldr             x0, [fp, #0x18]
    // 0x2a1644: stur            x2, [fp, #-0x20]
    // 0x2a1648: StoreField: r2->field_f = r0
    //     0x2a1648: stur            w0, [x2, #0xf]
    // 0x2a164c: mov             x1, x0
    // 0x2a1650: LoadField: r0 = r1->field_cb
    //     0x2a1650: ldur            w0, [x1, #0xcb]
    // 0x2a1654: DecompressPointer r0
    //     0x2a1654: add             x0, x0, HEAP, lsl #32
    // 0x2a1658: r16 = Sentinel
    //     0x2a1658: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a165c: cmp             w0, w16
    // 0x2a1660: b.ne            #0x2a1670
    // 0x2a1664: r2 = _actions
    //     0x2a1664: add             x2, PP, #0x11, lsl #12  ; [pp+0x111c0] Field <EditableTextState._actions@148183791>: late final (offset: 0xcc)
    //     0x2a1668: ldr             x2, [x2, #0x1c0]
    // 0x2a166c: r0 = InitLateFinalInstanceField()
    //     0x2a166c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2a1670: mov             x1, x0
    // 0x2a1674: ldr             x0, [fp, #0x18]
    // 0x2a1678: stur            x1, [fp, #-0x40]
    // 0x2a167c: LoadField: r2 = r0->field_b
    //     0x2a167c: ldur            w2, [x0, #0xb]
    // 0x2a1680: DecompressPointer r2
    //     0x2a1680: add             x2, x2, HEAP, lsl #32
    // 0x2a1684: cmp             w2, NULL
    // 0x2a1688: b.eq            #0x2a18d4
    // 0x2a168c: LoadField: r3 = r2->field_b
    //     0x2a168c: ldur            w3, [x2, #0xb]
    // 0x2a1690: DecompressPointer r3
    //     0x2a1690: add             x3, x3, HEAP, lsl #32
    // 0x2a1694: stur            x3, [fp, #-0x38]
    // 0x2a1698: LoadField: r4 = r2->field_f
    //     0x2a1698: ldur            w4, [x2, #0xf]
    // 0x2a169c: DecompressPointer r4
    //     0x2a169c: add             x4, x4, HEAP, lsl #32
    // 0x2a16a0: stur            x4, [fp, #-0x30]
    // 0x2a16a4: LoadField: r2 = r0->field_43
    //     0x2a16a4: ldur            w2, [x0, #0x43]
    // 0x2a16a8: DecompressPointer r2
    //     0x2a16a8: add             x2, x2, HEAP, lsl #32
    // 0x2a16ac: stur            x2, [fp, #-0x28]
    // 0x2a16b0: str             x0, [SP]
    // 0x2a16b4: r0 = _scrollController()
    //     0x2a16b4: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x2a16b8: mov             x1, x0
    // 0x2a16bc: ldr             x0, [fp, #0x18]
    // 0x2a16c0: stur            x1, [fp, #-0x48]
    // 0x2a16c4: LoadField: r2 = r0->field_b
    //     0x2a16c4: ldur            w2, [x0, #0xb]
    // 0x2a16c8: DecompressPointer r2
    //     0x2a16c8: add             x2, x2, HEAP, lsl #32
    // 0x2a16cc: cmp             w2, NULL
    // 0x2a16d0: b.eq            #0x2a18d8
    // 0x2a16d4: ldr             x16, [fp, #0x10]
    // 0x2a16d8: str             x16, [SP]
    // 0x2a16dc: r0 = of()
    //     0x2a16dc: bl              #0x2a1940  ; [package:flutter/src/widgets/scroll_configuration.dart] ScrollConfiguration::of
    // 0x2a16e0: mov             x1, x0
    // 0x2a16e4: ldr             x0, [fp, #0x18]
    // 0x2a16e8: LoadField: r2 = r0->field_b
    //     0x2a16e8: ldur            w2, [x0, #0xb]
    // 0x2a16ec: DecompressPointer r2
    //     0x2a16ec: add             x2, x2, HEAP, lsl #32
    // 0x2a16f0: cmp             w2, NULL
    // 0x2a16f4: b.eq            #0x2a18dc
    // 0x2a16f8: r16 = false
    //     0x2a16f8: add             x16, NULL, #0x30  ; false
    // 0x2a16fc: stp             x16, x1, [SP]
    // 0x2a1700: r0 = copyWith()
    //     0x2a1700: bl              #0x2a1904  ; [package:flutter/src/widgets/scroll_configuration.dart] ScrollBehavior::copyWith
    // 0x2a1704: stur            x0, [fp, #-0x50]
    // 0x2a1708: r0 = Scrollable()
    //     0x2a1708: bl              #0x2a18f8  ; AllocateScrollableStub -> Scrollable (size=0x34)
    // 0x2a170c: mov             x3, x0
    // 0x2a1710: r0 = Instance_AxisDirection
    //     0x2a1710: ldr             x0, [PP, #0x6140]  ; [pp+0x6140] Obj!AxisDirection@481301
    // 0x2a1714: stur            x3, [fp, #-0x58]
    // 0x2a1718: StoreField: r3->field_b = r0
    //     0x2a1718: stur            w0, [x3, #0xb]
    // 0x2a171c: ldur            x0, [fp, #-0x48]
    // 0x2a1720: StoreField: r3->field_f = r0
    //     0x2a1720: stur            w0, [x3, #0xf]
    // 0x2a1724: ldur            x2, [fp, #-8]
    // 0x2a1728: r1 = Function '<anonymous closure>':.
    //     0x2a1728: add             x1, PP, #0x11, lsl #12  ; [pp+0x111c8] AnonymousClosure: (0x2a1d88), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x2a1394)
    //     0x2a172c: ldr             x1, [x1, #0x1c8]
    // 0x2a1730: r0 = AllocateClosure()
    //     0x2a1730: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a1734: mov             x1, x0
    // 0x2a1738: ldur            x0, [fp, #-0x58]
    // 0x2a173c: StoreField: r0->field_17 = r1
    //     0x2a173c: stur            w1, [x0, #0x17]
    // 0x2a1740: r1 = true
    //     0x2a1740: add             x1, NULL, #0x20  ; true
    // 0x2a1744: StoreField: r0->field_1f = r1
    //     0x2a1744: stur            w1, [x0, #0x1f]
    // 0x2a1748: r2 = Instance_DragStartBehavior
    //     0x2a1748: ldr             x2, [PP, #0x5820]  ; [pp+0x5820] Obj!DragStartBehavior@481c61
    // 0x2a174c: StoreField: r0->field_23 = r2
    //     0x2a174c: stur            w2, [x0, #0x23]
    // 0x2a1750: r2 = "editable"
    //     0x2a1750: add             x2, PP, #0xd, lsl #12  ; [pp+0xdf98] "editable"
    //     0x2a1754: ldr             x2, [x2, #0xf98]
    // 0x2a1758: StoreField: r0->field_27 = r2
    //     0x2a1758: stur            w2, [x0, #0x27]
    // 0x2a175c: ldur            x2, [fp, #-0x50]
    // 0x2a1760: StoreField: r0->field_2b = r2
    //     0x2a1760: stur            w2, [x0, #0x2b]
    // 0x2a1764: r2 = Instance_Clip
    //     0x2a1764: add             x2, PP, #0xb, lsl #12  ; [pp+0xb840] Obj!Clip@482a01
    //     0x2a1768: ldr             x2, [x2, #0x840]
    // 0x2a176c: StoreField: r0->field_2f = r2
    //     0x2a176c: stur            w2, [x0, #0x2f]
    // 0x2a1770: ldur            x2, [fp, #-0x28]
    // 0x2a1774: StoreField: r0->field_7 = r2
    //     0x2a1774: stur            w2, [x0, #7]
    // 0x2a1778: r0 = Focus()
    //     0x2a1778: bl              #0x28100c  ; AllocateFocusStub -> Focus (size=0x40)
    // 0x2a177c: mov             x3, x0
    // 0x2a1780: ldur            x0, [fp, #-0x58]
    // 0x2a1784: stur            x3, [fp, #-0x28]
    // 0x2a1788: StoreField: r3->field_f = r0
    //     0x2a1788: stur            w0, [x3, #0xf]
    // 0x2a178c: ldur            x0, [fp, #-0x30]
    // 0x2a1790: StoreField: r3->field_13 = r0
    //     0x2a1790: stur            w0, [x3, #0x13]
    // 0x2a1794: r1 = false
    //     0x2a1794: add             x1, NULL, #0x30  ; false
    // 0x2a1798: StoreField: r3->field_17 = r1
    //     0x2a1798: stur            w1, [x3, #0x17]
    // 0x2a179c: StoreField: r3->field_37 = r1
    //     0x2a179c: stur            w1, [x3, #0x37]
    // 0x2a17a0: ldur            x2, [fp, #-8]
    // 0x2a17a4: r1 = Function '<anonymous closure>':.
    //     0x2a17a4: add             x1, PP, #0x11, lsl #12  ; [pp+0x111d0] AnonymousClosure: (0x2a1c78), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x2a1394)
    //     0x2a17a8: ldr             x1, [x1, #0x1d0]
    // 0x2a17ac: r0 = AllocateClosure()
    //     0x2a17ac: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a17b0: r1 = <TextEditingValue>
    //     0x2a17b0: ldr             x1, [PP, #0x5950]  ; [pp+0x5950] TypeArguments: <TextEditingValue>
    // 0x2a17b4: stur            x0, [fp, #-0x48]
    // 0x2a17b8: r0 = UndoHistory()
    //     0x2a17b8: bl              #0x2a18ec  ; AllocateUndoHistoryStub -> UndoHistory<X0> (size=0x28)
    // 0x2a17bc: mov             x3, x0
    // 0x2a17c0: ldur            x0, [fp, #-0x48]
    // 0x2a17c4: stur            x3, [fp, #-0x50]
    // 0x2a17c8: StoreField: r3->field_13 = r0
    //     0x2a17c8: stur            w0, [x3, #0x13]
    // 0x2a17cc: ldur            x0, [fp, #-0x38]
    // 0x2a17d0: StoreField: r3->field_f = r0
    //     0x2a17d0: stur            w0, [x3, #0xf]
    // 0x2a17d4: ldur            x2, [fp, #-8]
    // 0x2a17d8: r1 = Function '<anonymous closure>':.
    //     0x2a17d8: add             x1, PP, #0x11, lsl #12  ; [pp+0x111d8] AnonymousClosure: (0x2a1c20), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x2a1394)
    //     0x2a17dc: ldr             x1, [x1, #0x1d8]
    // 0x2a17e0: r0 = AllocateClosure()
    //     0x2a17e0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a17e4: mov             x1, x0
    // 0x2a17e8: ldur            x0, [fp, #-0x50]
    // 0x2a17ec: StoreField: r0->field_17 = r1
    //     0x2a17ec: stur            w1, [x0, #0x17]
    // 0x2a17f0: ldur            x1, [fp, #-0x30]
    // 0x2a17f4: StoreField: r0->field_1b = r1
    //     0x2a17f4: stur            w1, [x0, #0x1b]
    // 0x2a17f8: ldur            x1, [fp, #-0x28]
    // 0x2a17fc: StoreField: r0->field_23 = r1
    //     0x2a17fc: stur            w1, [x0, #0x23]
    // 0x2a1800: r0 = Actions()
    //     0x2a1800: bl              #0x287b2c  ; AllocateActionsStub -> Actions (size=0x18)
    // 0x2a1804: mov             x1, x0
    // 0x2a1808: ldur            x0, [fp, #-0x40]
    // 0x2a180c: stur            x1, [fp, #-8]
    // 0x2a1810: StoreField: r1->field_f = r0
    //     0x2a1810: stur            w0, [x1, #0xf]
    // 0x2a1814: ldur            x0, [fp, #-0x50]
    // 0x2a1818: StoreField: r1->field_13 = r0
    //     0x2a1818: stur            w0, [x1, #0x13]
    // 0x2a181c: r0 = MouseRegion()
    //     0x2a181c: bl              #0x27d1e8  ; AllocateMouseRegionStub -> MouseRegion (size=0x28)
    // 0x2a1820: mov             x1, x0
    // 0x2a1824: r0 = Instance__DeferringMouseCursor
    //     0x2a1824: ldr             x0, [PP, #0x2b88]  ; [pp+0x2b88] Obj!_DeferringMouseCursor@47b771
    // 0x2a1828: stur            x1, [fp, #-0x28]
    // 0x2a182c: StoreField: r1->field_1b = r0
    //     0x2a182c: stur            w0, [x1, #0x1b]
    // 0x2a1830: r0 = true
    //     0x2a1830: add             x0, NULL, #0x20  ; true
    // 0x2a1834: StoreField: r1->field_1f = r0
    //     0x2a1834: stur            w0, [x1, #0x1f]
    // 0x2a1838: ldur            x2, [fp, #-8]
    // 0x2a183c: StoreField: r1->field_b = r2
    //     0x2a183c: stur            w2, [x1, #0xb]
    // 0x2a1840: r0 = TextFieldTapRegion()
    //     0x2a1840: bl              #0x242ca4  ; AllocateTextFieldTapRegionStub -> TextFieldTapRegion (size=0x28)
    // 0x2a1844: mov             x3, x0
    // 0x2a1848: r0 = true
    //     0x2a1848: add             x0, NULL, #0x20  ; true
    // 0x2a184c: stur            x3, [fp, #-8]
    // 0x2a1850: StoreField: r3->field_f = r0
    //     0x2a1850: stur            w0, [x3, #0xf]
    // 0x2a1854: r0 = Instance_HitTestBehavior
    //     0x2a1854: ldr             x0, [PP, #0x5828]  ; [pp+0x5828] Obj!HitTestBehavior@480ee1
    // 0x2a1858: StoreField: r3->field_13 = r0
    //     0x2a1858: stur            w0, [x3, #0x13]
    // 0x2a185c: ldur            x2, [fp, #-0x20]
    // 0x2a1860: r1 = Function '_defaultOnTapOutside@148183791':.
    //     0x2a1860: add             x1, PP, #0x11, lsl #12  ; [pp+0x111e0] AnonymousClosure: (0x2a1b08), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_defaultOnTapOutside (0x2a1b54)
    //     0x2a1864: ldr             x1, [x1, #0x1e0]
    // 0x2a1868: r0 = AllocateClosure()
    //     0x2a1868: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a186c: mov             x1, x0
    // 0x2a1870: ldur            x0, [fp, #-8]
    // 0x2a1874: StoreField: r0->field_17 = r1
    //     0x2a1874: stur            w1, [x0, #0x17]
    // 0x2a1878: r1 = EditableText
    //     0x2a1878: ldr             x1, [PP, #0x5830]  ; [pp+0x5830] Type: EditableText
    // 0x2a187c: StoreField: r0->field_1f = r1
    //     0x2a187c: stur            w1, [x0, #0x1f]
    // 0x2a1880: ldur            x1, [fp, #-0x28]
    // 0x2a1884: StoreField: r0->field_b = r1
    //     0x2a1884: stur            w1, [x0, #0xb]
    // 0x2a1888: ldur            x2, [fp, #-0x10]
    // 0x2a188c: r1 = Function '_compositeCallback@148183791':.
    //     0x2a188c: add             x1, PP, #0x11, lsl #12  ; [pp+0x111e8] AnonymousClosure: (0x2a1a30), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_compositeCallback (0x2a1a7c)
    //     0x2a1890: ldr             x1, [x1, #0x1e8]
    // 0x2a1894: r0 = AllocateClosure()
    //     0x2a1894: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a1898: stur            x0, [fp, #-0x10]
    // 0x2a189c: r0 = _CompositionCallback()
    //     0x2a189c: bl              #0x2a18e0  ; Allocate_CompositionCallbackStub -> _CompositionCallback (size=0x18)
    // 0x2a18a0: ldur            x1, [fp, #-0x10]
    // 0x2a18a4: StoreField: r0->field_f = r1
    //     0x2a18a4: stur            w1, [x0, #0xf]
    // 0x2a18a8: ldur            x1, [fp, #-0x18]
    // 0x2a18ac: StoreField: r0->field_13 = r1
    //     0x2a18ac: stur            w1, [x0, #0x13]
    // 0x2a18b0: ldur            x1, [fp, #-8]
    // 0x2a18b4: StoreField: r0->field_b = r1
    //     0x2a18b4: stur            w1, [x0, #0xb]
    // 0x2a18b8: LeaveFrame
    //     0x2a18b8: mov             SP, fp
    //     0x2a18bc: ldp             fp, lr, [SP], #0x10
    // 0x2a18c0: ret
    //     0x2a18c0: ret             
    // 0x2a18c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a18c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a18c8: b               #0x2a13ac
    // 0x2a18cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a18cc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a18d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a18d0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a18d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a18d4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a18d8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a18d8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a18dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a18dc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _compositeCallback(dynamic, Layer) {
    // ** addr: 0x2a1a30, size: 0x4c
    // 0x2a1a30: EnterFrame
    //     0x2a1a30: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1a34: mov             fp, SP
    // 0x2a1a38: AllocStack(0x10)
    //     0x2a1a38: sub             SP, SP, #0x10
    // 0x2a1a3c: SetupParameters()
    //     0x2a1a3c: ldr             x0, [fp, #0x18]
    //     0x2a1a40: ldur            w1, [x0, #0x17]
    //     0x2a1a44: add             x1, x1, HEAP, lsl #32
    // 0x2a1a48: CheckStackOverflow
    //     0x2a1a48: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a1a4c: cmp             SP, x16
    //     0x2a1a50: b.ls            #0x2a1a74
    // 0x2a1a54: LoadField: r0 = r1->field_f
    //     0x2a1a54: ldur            w0, [x1, #0xf]
    // 0x2a1a58: DecompressPointer r0
    //     0x2a1a58: add             x0, x0, HEAP, lsl #32
    // 0x2a1a5c: ldr             x16, [fp, #0x10]
    // 0x2a1a60: stp             x16, x0, [SP]
    // 0x2a1a64: r0 = _compositeCallback()
    //     0x2a1a64: bl              #0x2a1a7c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_compositeCallback
    // 0x2a1a68: LeaveFrame
    //     0x2a1a68: mov             SP, fp
    //     0x2a1a6c: ldp             fp, lr, [SP], #0x10
    // 0x2a1a70: ret
    //     0x2a1a70: ret             
    // 0x2a1a74: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a1a74: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a1a78: b               #0x2a1a54
  }
  _ _compositeCallback(/* No info */) {
    // ** addr: 0x2a1a7c, size: 0x8c
    // 0x2a1a7c: EnterFrame
    //     0x2a1a7c: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1a80: mov             fp, SP
    // 0x2a1a84: AllocStack(0x8)
    //     0x2a1a84: sub             SP, SP, #8
    // 0x2a1a88: CheckStackOverflow
    //     0x2a1a88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a1a8c: cmp             SP, x16
    //     0x2a1a90: b.ls            #0x2a1b00
    // 0x2a1a94: ldr             x1, [fp, #0x18]
    // 0x2a1a98: LoadField: r0 = r1->field_ab
    //     0x2a1a98: ldur            w0, [x1, #0xab]
    // 0x2a1a9c: DecompressPointer r0
    //     0x2a1a9c: add             x0, x0, HEAP, lsl #32
    // 0x2a1aa0: r16 = Sentinel
    //     0x2a1aa0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a1aa4: cmp             w0, w16
    // 0x2a1aa8: b.ne            #0x2a1ab4
    // 0x2a1aac: r2 = renderEditable
    //     0x2a1aac: ldr             x2, [PP, #0x55b8]  ; [pp+0x55b8] Field <EditableTextState.renderEditable>: late final (offset: 0xac)
    // 0x2a1ab0: r0 = InitLateFinalInstanceField()
    //     0x2a1ab0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2a1ab4: LoadField: r1 = r0->field_17
    //     0x2a1ab4: ldur            w1, [x0, #0x17]
    // 0x2a1ab8: DecompressPointer r1
    //     0x2a1ab8: add             x1, x1, HEAP, lsl #32
    // 0x2a1abc: cmp             w1, NULL
    // 0x2a1ac0: b.eq            #0x2a1ad4
    // 0x2a1ac4: ldr             x16, [fp, #0x18]
    // 0x2a1ac8: str             x16, [SP]
    // 0x2a1acc: r0 = _hasInputConnection()
    //     0x2a1acc: bl              #0x2413a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x2a1ad0: tbz             w0, #4, #0x2a1ae4
    // 0x2a1ad4: r0 = Null
    //     0x2a1ad4: mov             x0, NULL
    // 0x2a1ad8: LeaveFrame
    //     0x2a1ad8: mov             SP, fp
    //     0x2a1adc: ldp             fp, lr, [SP], #0x10
    // 0x2a1ae0: ret
    //     0x2a1ae0: ret             
    // 0x2a1ae4: ldr             x16, [fp, #0x18]
    // 0x2a1ae8: str             x16, [SP]
    // 0x2a1aec: r0 = _updateSizeAndTransform()
    //     0x2a1aec: bl              #0x244cac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSizeAndTransform
    // 0x2a1af0: r0 = Null
    //     0x2a1af0: mov             x0, NULL
    // 0x2a1af4: LeaveFrame
    //     0x2a1af4: mov             SP, fp
    //     0x2a1af8: ldp             fp, lr, [SP], #0x10
    // 0x2a1afc: ret
    //     0x2a1afc: ret             
    // 0x2a1b00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a1b00: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a1b04: b               #0x2a1a94
  }
  [closure] void _defaultOnTapOutside(dynamic, PointerDownEvent) {
    // ** addr: 0x2a1b08, size: 0x4c
    // 0x2a1b08: EnterFrame
    //     0x2a1b08: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1b0c: mov             fp, SP
    // 0x2a1b10: AllocStack(0x10)
    //     0x2a1b10: sub             SP, SP, #0x10
    // 0x2a1b14: SetupParameters()
    //     0x2a1b14: ldr             x0, [fp, #0x18]
    //     0x2a1b18: ldur            w1, [x0, #0x17]
    //     0x2a1b1c: add             x1, x1, HEAP, lsl #32
    // 0x2a1b20: CheckStackOverflow
    //     0x2a1b20: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a1b24: cmp             SP, x16
    //     0x2a1b28: b.ls            #0x2a1b4c
    // 0x2a1b2c: LoadField: r0 = r1->field_f
    //     0x2a1b2c: ldur            w0, [x1, #0xf]
    // 0x2a1b30: DecompressPointer r0
    //     0x2a1b30: add             x0, x0, HEAP, lsl #32
    // 0x2a1b34: ldr             x16, [fp, #0x10]
    // 0x2a1b38: stp             x16, x0, [SP]
    // 0x2a1b3c: r0 = _defaultOnTapOutside()
    //     0x2a1b3c: bl              #0x2a1b54  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_defaultOnTapOutside
    // 0x2a1b40: LeaveFrame
    //     0x2a1b40: mov             SP, fp
    //     0x2a1b44: ldp             fp, lr, [SP], #0x10
    // 0x2a1b48: ret
    //     0x2a1b48: ret             
    // 0x2a1b4c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a1b4c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a1b50: b               #0x2a1b2c
  }
  _ _defaultOnTapOutside(/* No info */) {
    // ** addr: 0x2a1b54, size: 0xcc
    // 0x2a1b54: EnterFrame
    //     0x2a1b54: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1b58: mov             fp, SP
    // 0x2a1b5c: AllocStack(0x8)
    //     0x2a1b5c: sub             SP, SP, #8
    // 0x2a1b60: CheckStackOverflow
    //     0x2a1b60: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a1b64: cmp             SP, x16
    //     0x2a1b68: b.ls            #0x2a1c14
    // 0x2a1b6c: ldr             x0, [fp, #0x10]
    // 0x2a1b70: r1 = LoadClassIdInstr(r0)
    //     0x2a1b70: ldur            x1, [x0, #-1]
    //     0x2a1b74: ubfx            x1, x1, #0xc, #0x14
    // 0x2a1b78: str             x0, [SP]
    // 0x2a1b7c: mov             x0, x1
    // 0x2a1b80: r0 = GDT[cid_x0 + -0xefc]()
    //     0x2a1b80: sub             lr, x0, #0xefc
    //     0x2a1b84: ldr             lr, [x21, lr, lsl #3]
    //     0x2a1b88: blr             lr
    // 0x2a1b8c: LoadField: r1 = r0->field_7
    //     0x2a1b8c: ldur            x1, [x0, #7]
    // 0x2a1b90: cmp             x1, #2
    // 0x2a1b94: b.gt            #0x2a1bac
    // 0x2a1b98: cmp             x1, #1
    // 0x2a1b9c: b.gt            #0x2a1bbc
    // 0x2a1ba0: cmp             x1, #0
    // 0x2a1ba4: b.gt            #0x2a1bbc
    // 0x2a1ba8: b               #0x2a1be4
    // 0x2a1bac: cmp             x1, #4
    // 0x2a1bb0: b.gt            #0x2a1bbc
    // 0x2a1bb4: cmp             x1, #3
    // 0x2a1bb8: b.gt            #0x2a1bf4
    // 0x2a1bbc: ldr             x0, [fp, #0x18]
    // 0x2a1bc0: LoadField: r1 = r0->field_b
    //     0x2a1bc0: ldur            w1, [x0, #0xb]
    // 0x2a1bc4: DecompressPointer r1
    //     0x2a1bc4: add             x1, x1, HEAP, lsl #32
    // 0x2a1bc8: cmp             w1, NULL
    // 0x2a1bcc: b.eq            #0x2a1c1c
    // 0x2a1bd0: LoadField: r0 = r1->field_f
    //     0x2a1bd0: ldur            w0, [x1, #0xf]
    // 0x2a1bd4: DecompressPointer r0
    //     0x2a1bd4: add             x0, x0, HEAP, lsl #32
    // 0x2a1bd8: str             x0, [SP]
    // 0x2a1bdc: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x2a1bdc: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x2a1be0: r0 = unfocus()
    //     0x2a1be0: bl              #0x232d10  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::unfocus
    // 0x2a1be4: r0 = Null
    //     0x2a1be4: mov             x0, NULL
    // 0x2a1be8: LeaveFrame
    //     0x2a1be8: mov             SP, fp
    //     0x2a1bec: ldp             fp, lr, [SP], #0x10
    // 0x2a1bf0: ret
    //     0x2a1bf0: ret             
    // 0x2a1bf4: r0 = UnimplementedError()
    //     0x2a1bf4: bl              #0x273674  ; AllocateUnimplementedErrorStub -> UnimplementedError (size=0x10)
    // 0x2a1bf8: mov             x1, x0
    // 0x2a1bfc: r0 = "Unexpected pointer down event for trackpad"
    //     0x2a1bfc: add             x0, PP, #0x11, lsl #12  ; [pp+0x111f0] "Unexpected pointer down event for trackpad"
    //     0x2a1c00: ldr             x0, [x0, #0x1f0]
    // 0x2a1c04: StoreField: r1->field_b = r0
    //     0x2a1c04: stur            w0, [x1, #0xb]
    // 0x2a1c08: mov             x0, x1
    // 0x2a1c0c: r0 = Throw()
    //     0x2a1c0c: bl              #0x3e41c8  ; ThrowStub
    // 0x2a1c10: brk             #0
    // 0x2a1c14: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a1c14: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a1c18: b               #0x2a1b6c
    // 0x2a1c1c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a1c1c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, TextEditingValue) {
    // ** addr: 0x2a1c20, size: 0x58
    // 0x2a1c20: EnterFrame
    //     0x2a1c20: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1c24: mov             fp, SP
    // 0x2a1c28: AllocStack(0x18)
    //     0x2a1c28: sub             SP, SP, #0x18
    // 0x2a1c2c: SetupParameters()
    //     0x2a1c2c: ldr             x0, [fp, #0x18]
    //     0x2a1c30: ldur            w1, [x0, #0x17]
    //     0x2a1c34: add             x1, x1, HEAP, lsl #32
    // 0x2a1c38: CheckStackOverflow
    //     0x2a1c38: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a1c3c: cmp             SP, x16
    //     0x2a1c40: b.ls            #0x2a1c70
    // 0x2a1c44: LoadField: r0 = r1->field_f
    //     0x2a1c44: ldur            w0, [x1, #0xf]
    // 0x2a1c48: DecompressPointer r0
    //     0x2a1c48: add             x0, x0, HEAP, lsl #32
    // 0x2a1c4c: ldr             x16, [fp, #0x10]
    // 0x2a1c50: stp             x16, x0, [SP, #8]
    // 0x2a1c54: r16 = Instance_SelectionChangedCause
    //     0x2a1c54: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x2a1c58: str             x16, [SP]
    // 0x2a1c5c: r0 = userUpdateTextEditingValue()
    //     0x2a1c5c: bl              #0x22c13c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x2a1c60: r0 = Null
    //     0x2a1c60: mov             x0, NULL
    // 0x2a1c64: LeaveFrame
    //     0x2a1c64: mov             SP, fp
    //     0x2a1c68: ldp             fp, lr, [SP], #0x10
    // 0x2a1c6c: ret
    //     0x2a1c6c: ret             
    // 0x2a1c70: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a1c70: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a1c74: b               #0x2a1c44
  }
  [closure] bool <anonymous closure>(dynamic, TextEditingValue?, TextEditingValue) {
    // ** addr: 0x2a1c78, size: 0x110
    // 0x2a1c78: EnterFrame
    //     0x2a1c78: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1c7c: mov             fp, SP
    // 0x2a1c80: AllocStack(0x10)
    //     0x2a1c80: sub             SP, SP, #0x10
    // 0x2a1c84: CheckStackOverflow
    //     0x2a1c84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a1c88: cmp             SP, x16
    //     0x2a1c8c: b.ls            #0x2a1d80
    // 0x2a1c90: ldr             x1, [fp, #0x10]
    // 0x2a1c94: LoadField: r0 = r1->field_b
    //     0x2a1c94: ldur            w0, [x1, #0xb]
    // 0x2a1c98: DecompressPointer r0
    //     0x2a1c98: add             x0, x0, HEAP, lsl #32
    // 0x2a1c9c: LoadField: r2 = r0->field_7
    //     0x2a1c9c: ldur            x2, [x0, #7]
    // 0x2a1ca0: tbnz            x2, #0x3f, #0x2a1d70
    // 0x2a1ca4: LoadField: r2 = r0->field_f
    //     0x2a1ca4: ldur            x2, [x0, #0xf]
    // 0x2a1ca8: tbnz            x2, #0x3f, #0x2a1d70
    // 0x2a1cac: ldr             x2, [fp, #0x18]
    // 0x2a1cb0: cmp             w2, NULL
    // 0x2a1cb4: b.ne            #0x2a1cc8
    // 0x2a1cb8: r0 = true
    //     0x2a1cb8: add             x0, NULL, #0x20  ; true
    // 0x2a1cbc: LeaveFrame
    //     0x2a1cbc: mov             SP, fp
    //     0x2a1cc0: ldp             fp, lr, [SP], #0x10
    // 0x2a1cc4: ret
    //     0x2a1cc4: ret             
    // 0x2a1cc8: LoadField: r0 = r2->field_7
    //     0x2a1cc8: ldur            w0, [x2, #7]
    // 0x2a1ccc: DecompressPointer r0
    //     0x2a1ccc: add             x0, x0, HEAP, lsl #32
    // 0x2a1cd0: LoadField: r3 = r1->field_7
    //     0x2a1cd0: ldur            w3, [x1, #7]
    // 0x2a1cd4: DecompressPointer r3
    //     0x2a1cd4: add             x3, x3, HEAP, lsl #32
    // 0x2a1cd8: r4 = LoadClassIdInstr(r0)
    //     0x2a1cd8: ldur            x4, [x0, #-1]
    //     0x2a1cdc: ubfx            x4, x4, #0xc, #0x14
    // 0x2a1ce0: stp             x3, x0, [SP]
    // 0x2a1ce4: mov             x0, x4
    // 0x2a1ce8: mov             lr, x0
    // 0x2a1cec: ldr             lr, [x21, lr, lsl #3]
    // 0x2a1cf0: blr             lr
    // 0x2a1cf4: tbz             w0, #4, #0x2a1d00
    // 0x2a1cf8: r0 = true
    //     0x2a1cf8: add             x0, NULL, #0x20  ; true
    // 0x2a1cfc: b               #0x2a1d64
    // 0x2a1d00: ldr             x2, [fp, #0x18]
    // 0x2a1d04: ldr             x1, [fp, #0x10]
    // 0x2a1d08: LoadField: r3 = r2->field_f
    //     0x2a1d08: ldur            w3, [x2, #0xf]
    // 0x2a1d0c: DecompressPointer r3
    //     0x2a1d0c: add             x3, x3, HEAP, lsl #32
    // 0x2a1d10: LoadField: r2 = r1->field_f
    //     0x2a1d10: ldur            w2, [x1, #0xf]
    // 0x2a1d14: DecompressPointer r2
    //     0x2a1d14: add             x2, x2, HEAP, lsl #32
    // 0x2a1d18: cmp             w3, w2
    // 0x2a1d1c: b.ne            #0x2a1d28
    // 0x2a1d20: r1 = true
    //     0x2a1d20: add             x1, NULL, #0x20  ; true
    // 0x2a1d24: b               #0x2a1d5c
    // 0x2a1d28: LoadField: r1 = r2->field_7
    //     0x2a1d28: ldur            x1, [x2, #7]
    // 0x2a1d2c: LoadField: r4 = r3->field_7
    //     0x2a1d2c: ldur            x4, [x3, #7]
    // 0x2a1d30: cmp             x1, x4
    // 0x2a1d34: b.ne            #0x2a1d58
    // 0x2a1d38: LoadField: r1 = r2->field_f
    //     0x2a1d38: ldur            x1, [x2, #0xf]
    // 0x2a1d3c: LoadField: r2 = r3->field_f
    //     0x2a1d3c: ldur            x2, [x3, #0xf]
    // 0x2a1d40: cmp             x1, x2
    // 0x2a1d44: r16 = true
    //     0x2a1d44: add             x16, NULL, #0x20  ; true
    // 0x2a1d48: r17 = false
    //     0x2a1d48: add             x17, NULL, #0x30  ; false
    // 0x2a1d4c: csel            x3, x16, x17, eq
    // 0x2a1d50: mov             x1, x3
    // 0x2a1d54: b               #0x2a1d5c
    // 0x2a1d58: r1 = false
    //     0x2a1d58: add             x1, NULL, #0x30  ; false
    // 0x2a1d5c: eor             x2, x1, #0x10
    // 0x2a1d60: mov             x0, x2
    // 0x2a1d64: LeaveFrame
    //     0x2a1d64: mov             SP, fp
    //     0x2a1d68: ldp             fp, lr, [SP], #0x10
    // 0x2a1d6c: ret
    //     0x2a1d6c: ret             
    // 0x2a1d70: r0 = false
    //     0x2a1d70: add             x0, NULL, #0x30  ; false
    // 0x2a1d74: LeaveFrame
    //     0x2a1d74: mov             SP, fp
    //     0x2a1d78: ldp             fp, lr, [SP], #0x10
    // 0x2a1d7c: ret
    //     0x2a1d7c: ret             
    // 0x2a1d80: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a1d80: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a1d84: b               #0x2a1c90
  }
  [closure] CompositedTransformTarget <anonymous closure>(dynamic, BuildContext, ViewportOffset) {
    // ** addr: 0x2a1d88, size: 0x488
    // 0x2a1d88: EnterFrame
    //     0x2a1d88: stp             fp, lr, [SP, #-0x10]!
    //     0x2a1d8c: mov             fp, SP
    // 0x2a1d90: AllocStack(0x168)
    //     0x2a1d90: sub             SP, SP, #0x168
    // 0x2a1d94: SetupParameters()
    //     0x2a1d94: ldr             x0, [fp, #0x20]
    //     0x2a1d98: ldur            w2, [x0, #0x17]
    //     0x2a1d9c: add             x2, x2, HEAP, lsl #32
    //     0x2a1da0: stur            x2, [fp, #-0x18]
    // 0x2a1da4: CheckStackOverflow
    //     0x2a1da4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a1da8: cmp             SP, x16
    //     0x2a1dac: b.ls            #0x2a21d8
    // 0x2a1db0: LoadField: r0 = r2->field_f
    //     0x2a1db0: ldur            w0, [x2, #0xf]
    // 0x2a1db4: DecompressPointer r0
    //     0x2a1db4: add             x0, x0, HEAP, lsl #32
    // 0x2a1db8: LoadField: r1 = r0->field_4b
    //     0x2a1db8: ldur            w1, [x0, #0x4b]
    // 0x2a1dbc: DecompressPointer r1
    //     0x2a1dbc: add             x1, x1, HEAP, lsl #32
    // 0x2a1dc0: stur            x1, [fp, #-0x10]
    // 0x2a1dc4: LoadField: r3 = r2->field_13
    //     0x2a1dc4: ldur            w3, [x2, #0x13]
    // 0x2a1dc8: DecompressPointer r3
    //     0x2a1dc8: add             x3, x3, HEAP, lsl #32
    // 0x2a1dcc: stur            x3, [fp, #-8]
    // 0x2a1dd0: stp             x3, x0, [SP]
    // 0x2a1dd4: r0 = _semanticsOnCopy()
    //     0x2a1dd4: bl              #0x2a32e4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnCopy
    // 0x2a1dd8: ldur            x2, [fp, #-0x18]
    // 0x2a1ddc: stur            x0, [fp, #-0x20]
    // 0x2a1de0: LoadField: r1 = r2->field_f
    //     0x2a1de0: ldur            w1, [x2, #0xf]
    // 0x2a1de4: DecompressPointer r1
    //     0x2a1de4: add             x1, x1, HEAP, lsl #32
    // 0x2a1de8: ldur            x16, [fp, #-8]
    // 0x2a1dec: stp             x16, x1, [SP]
    // 0x2a1df0: r0 = _semanticsOnCopy()
    //     0x2a1df0: bl              #0x2a32e4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnCopy
    // 0x2a1df4: ldur            x2, [fp, #-0x18]
    // 0x2a1df8: stur            x0, [fp, #-0x28]
    // 0x2a1dfc: LoadField: r1 = r2->field_f
    //     0x2a1dfc: ldur            w1, [x2, #0xf]
    // 0x2a1e00: DecompressPointer r1
    //     0x2a1e00: add             x1, x1, HEAP, lsl #32
    // 0x2a1e04: ldur            x16, [fp, #-8]
    // 0x2a1e08: stp             x16, x1, [SP]
    // 0x2a1e0c: r0 = _semanticsOnPaste()
    //     0x2a1e0c: bl              #0x2a3100  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnPaste
    // 0x2a1e10: ldur            x2, [fp, #-0x18]
    // 0x2a1e14: stur            x0, [fp, #-0x48]
    // 0x2a1e18: LoadField: r1 = r2->field_f
    //     0x2a1e18: ldur            w1, [x2, #0xf]
    // 0x2a1e1c: DecompressPointer r1
    //     0x2a1e1c: add             x1, x1, HEAP, lsl #32
    // 0x2a1e20: LoadField: r3 = r1->field_b
    //     0x2a1e20: ldur            w3, [x1, #0xb]
    // 0x2a1e24: DecompressPointer r3
    //     0x2a1e24: add             x3, x3, HEAP, lsl #32
    // 0x2a1e28: cmp             w3, NULL
    // 0x2a1e2c: b.eq            #0x2a21e0
    // 0x2a1e30: LoadField: r4 = r3->field_f
    //     0x2a1e30: ldur            w4, [x3, #0xf]
    // 0x2a1e34: DecompressPointer r4
    //     0x2a1e34: add             x4, x4, HEAP, lsl #32
    // 0x2a1e38: stur            x4, [fp, #-0x40]
    // 0x2a1e3c: LoadField: r3 = r1->field_2f
    //     0x2a1e3c: ldur            w3, [x1, #0x2f]
    // 0x2a1e40: DecompressPointer r3
    //     0x2a1e40: add             x3, x3, HEAP, lsl #32
    // 0x2a1e44: stur            x3, [fp, #-0x38]
    // 0x2a1e48: LoadField: r5 = r1->field_4f
    //     0x2a1e48: ldur            w5, [x1, #0x4f]
    // 0x2a1e4c: DecompressPointer r5
    //     0x2a1e4c: add             x5, x5, HEAP, lsl #32
    // 0x2a1e50: stur            x5, [fp, #-0x30]
    // 0x2a1e54: LoadField: r6 = r1->field_53
    //     0x2a1e54: ldur            w6, [x1, #0x53]
    // 0x2a1e58: DecompressPointer r6
    //     0x2a1e58: add             x6, x6, HEAP, lsl #32
    // 0x2a1e5c: stur            x6, [fp, #-8]
    // 0x2a1e60: str             x1, [SP]
    // 0x2a1e64: r0 = buildTextSpan()
    //     0x2a1e64: bl              #0x2a2f0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::buildTextSpan
    // 0x2a1e68: ldur            x2, [fp, #-0x18]
    // 0x2a1e6c: stur            x0, [fp, #-0x58]
    // 0x2a1e70: LoadField: r1 = r2->field_f
    //     0x2a1e70: ldur            w1, [x2, #0xf]
    // 0x2a1e74: DecompressPointer r1
    //     0x2a1e74: add             x1, x1, HEAP, lsl #32
    // 0x2a1e78: LoadField: r3 = r1->field_b
    //     0x2a1e78: ldur            w3, [x1, #0xb]
    // 0x2a1e7c: DecompressPointer r3
    //     0x2a1e7c: add             x3, x3, HEAP, lsl #32
    // 0x2a1e80: cmp             w3, NULL
    // 0x2a1e84: b.eq            #0x2a21e4
    // 0x2a1e88: LoadField: r4 = r3->field_b
    //     0x2a1e88: ldur            w4, [x3, #0xb]
    // 0x2a1e8c: DecompressPointer r4
    //     0x2a1e8c: add             x4, x4, HEAP, lsl #32
    // 0x2a1e90: LoadField: r3 = r4->field_27
    //     0x2a1e90: ldur            w3, [x4, #0x27]
    // 0x2a1e94: DecompressPointer r3
    //     0x2a1e94: add             x3, x3, HEAP, lsl #32
    // 0x2a1e98: stur            x3, [fp, #-0x50]
    // 0x2a1e9c: str             x1, [SP]
    // 0x2a1ea0: r0 = _cursorColor()
    //     0x2a1ea0: bl              #0x2a2d84  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorColor
    // 0x2a1ea4: ldur            x2, [fp, #-0x18]
    // 0x2a1ea8: stur            x0, [fp, #-0x68]
    // 0x2a1eac: LoadField: r1 = r2->field_f
    //     0x2a1eac: ldur            w1, [x2, #0xf]
    // 0x2a1eb0: DecompressPointer r1
    //     0x2a1eb0: add             x1, x1, HEAP, lsl #32
    // 0x2a1eb4: LoadField: r3 = r1->field_b
    //     0x2a1eb4: ldur            w3, [x1, #0xb]
    // 0x2a1eb8: DecompressPointer r3
    //     0x2a1eb8: add             x3, x3, HEAP, lsl #32
    // 0x2a1ebc: cmp             w3, NULL
    // 0x2a1ec0: b.eq            #0x2a21e8
    // 0x2a1ec4: LoadField: r4 = r1->field_2b
    //     0x2a1ec4: ldur            w4, [x1, #0x2b]
    // 0x2a1ec8: DecompressPointer r4
    //     0x2a1ec8: add             x4, x4, HEAP, lsl #32
    // 0x2a1ecc: stur            x4, [fp, #-0x60]
    // 0x2a1ed0: LoadField: r1 = r3->field_f
    //     0x2a1ed0: ldur            w1, [x3, #0xf]
    // 0x2a1ed4: DecompressPointer r1
    //     0x2a1ed4: add             x1, x1, HEAP, lsl #32
    // 0x2a1ed8: str             x1, [SP]
    // 0x2a1edc: r0 = hasFocus()
    //     0x2a1edc: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x2a1ee0: ldur            x2, [fp, #-0x18]
    // 0x2a1ee4: stur            x0, [fp, #-0x78]
    // 0x2a1ee8: LoadField: r1 = r2->field_f
    //     0x2a1ee8: ldur            w1, [x2, #0xf]
    // 0x2a1eec: DecompressPointer r1
    //     0x2a1eec: add             x1, x1, HEAP, lsl #32
    // 0x2a1ef0: LoadField: r3 = r1->field_b
    //     0x2a1ef0: ldur            w3, [x1, #0xb]
    // 0x2a1ef4: DecompressPointer r3
    //     0x2a1ef4: add             x3, x3, HEAP, lsl #32
    // 0x2a1ef8: cmp             w3, NULL
    // 0x2a1efc: b.eq            #0x2a21ec
    // 0x2a1f00: LoadField: r1 = r3->field_47
    //     0x2a1f00: ldur            w1, [x3, #0x47]
    // 0x2a1f04: DecompressPointer r1
    //     0x2a1f04: add             x1, x1, HEAP, lsl #32
    // 0x2a1f08: stur            x1, [fp, #-0x70]
    // 0x2a1f0c: r0 = StrutStyle()
    //     0x2a1f0c: bl              #0x2a2d78  ; AllocateStrutStyleStub -> StrutStyle (size=0x2c)
    // 0x2a1f10: stur            x0, [fp, #-0x80]
    // 0x2a1f14: ldur            x16, [fp, #-0x70]
    // 0x2a1f18: stp             x16, x0, [SP]
    // 0x2a1f1c: r0 = StrutStyle.fromTextStyle()
    //     0x2a1f1c: bl              #0x2a2c9c  ; [package:flutter/src/painting/strut_style.dart] StrutStyle::StrutStyle.fromTextStyle
    // 0x2a1f20: ldur            x2, [fp, #-0x18]
    // 0x2a1f24: LoadField: r0 = r2->field_f
    //     0x2a1f24: ldur            w0, [x2, #0xf]
    // 0x2a1f28: DecompressPointer r0
    //     0x2a1f28: add             x0, x0, HEAP, lsl #32
    // 0x2a1f2c: LoadField: r1 = r0->field_3f
    //     0x2a1f2c: ldur            w1, [x0, #0x3f]
    // 0x2a1f30: DecompressPointer r1
    //     0x2a1f30: add             x1, x1, HEAP, lsl #32
    // 0x2a1f34: cmp             w1, NULL
    // 0x2a1f38: b.ne            #0x2a1f44
    // 0x2a1f3c: r0 = Null
    //     0x2a1f3c: mov             x0, NULL
    // 0x2a1f40: b               #0x2a1f4c
    // 0x2a1f44: str             x1, [SP]
    // 0x2a1f48: r0 = spellCheckToolbarIsVisible()
    //     0x2a1f48: bl              #0x2a2c48  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::spellCheckToolbarIsVisible
    // 0x2a1f4c: cmp             w0, NULL
    // 0x2a1f50: b.ne            #0x2a1f5c
    // 0x2a1f54: ldur            x2, [fp, #-0x18]
    // 0x2a1f58: b               #0x2a1fa4
    // 0x2a1f5c: tbnz            w0, #4, #0x2a1fa0
    // 0x2a1f60: ldur            x2, [fp, #-0x18]
    // 0x2a1f64: LoadField: r0 = r2->field_f
    //     0x2a1f64: ldur            w0, [x2, #0xf]
    // 0x2a1f68: DecompressPointer r0
    //     0x2a1f68: add             x0, x0, HEAP, lsl #32
    // 0x2a1f6c: LoadField: r1 = r0->field_5f
    //     0x2a1f6c: ldur            w1, [x0, #0x5f]
    // 0x2a1f70: DecompressPointer r1
    //     0x2a1f70: add             x1, x1, HEAP, lsl #32
    // 0x2a1f74: r16 = Sentinel
    //     0x2a1f74: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a1f78: cmp             w1, w16
    // 0x2a1f7c: b.eq            #0x2a21f0
    // 0x2a1f80: LoadField: r1 = r0->field_b
    //     0x2a1f80: ldur            w1, [x0, #0xb]
    // 0x2a1f84: DecompressPointer r1
    //     0x2a1f84: add             x1, x1, HEAP, lsl #32
    // 0x2a1f88: cmp             w1, NULL
    // 0x2a1f8c: b.eq            #0x2a21f8
    // 0x2a1f90: LoadField: r3 = r1->field_8b
    //     0x2a1f90: ldur            w3, [x1, #0x8b]
    // 0x2a1f94: DecompressPointer r3
    //     0x2a1f94: add             x3, x3, HEAP, lsl #32
    // 0x2a1f98: mov             x1, x3
    // 0x2a1f9c: b               #0x2a1fc8
    // 0x2a1fa0: ldur            x2, [fp, #-0x18]
    // 0x2a1fa4: LoadField: r0 = r2->field_f
    //     0x2a1fa4: ldur            w0, [x2, #0xf]
    // 0x2a1fa8: DecompressPointer r0
    //     0x2a1fa8: add             x0, x0, HEAP, lsl #32
    // 0x2a1fac: LoadField: r1 = r0->field_b
    //     0x2a1fac: ldur            w1, [x0, #0xb]
    // 0x2a1fb0: DecompressPointer r1
    //     0x2a1fb0: add             x1, x1, HEAP, lsl #32
    // 0x2a1fb4: cmp             w1, NULL
    // 0x2a1fb8: b.eq            #0x2a21fc
    // 0x2a1fbc: LoadField: r3 = r1->field_8b
    //     0x2a1fbc: ldur            w3, [x1, #0x8b]
    // 0x2a1fc0: DecompressPointer r3
    //     0x2a1fc0: add             x3, x3, HEAP, lsl #32
    // 0x2a1fc4: mov             x1, x3
    // 0x2a1fc8: stur            x1, [fp, #-0x70]
    // 0x2a1fcc: LoadField: r3 = r0->field_f
    //     0x2a1fcc: ldur            w3, [x0, #0xf]
    // 0x2a1fd0: DecompressPointer r3
    //     0x2a1fd0: add             x3, x3, HEAP, lsl #32
    // 0x2a1fd4: cmp             w3, NULL
    // 0x2a1fd8: b.eq            #0x2a2200
    // 0x2a1fdc: str             x3, [SP]
    // 0x2a1fe0: r0 = of()
    //     0x2a1fe0: bl              #0x243f24  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x2a1fe4: ldur            x2, [fp, #-0x18]
    // 0x2a1fe8: LoadField: r0 = r2->field_f
    //     0x2a1fe8: ldur            w0, [x2, #0xf]
    // 0x2a1fec: DecompressPointer r0
    //     0x2a1fec: add             x0, x0, HEAP, lsl #32
    // 0x2a1ff0: LoadField: r1 = r0->field_b
    //     0x2a1ff0: ldur            w1, [x0, #0xb]
    // 0x2a1ff4: DecompressPointer r1
    //     0x2a1ff4: add             x1, x1, HEAP, lsl #32
    // 0x2a1ff8: cmp             w1, NULL
    // 0x2a1ffc: b.eq            #0x2a2204
    // 0x2a2000: ldr             x16, [fp, #0x18]
    // 0x2a2004: str             x16, [SP]
    // 0x2a2008: r0 = maybeOf()
    //     0x2a2008: bl              #0x2a2c00  ; [package:flutter/src/widgets/text.dart] DefaultTextHeightBehavior::maybeOf
    // 0x2a200c: ldur            x2, [fp, #-0x18]
    // 0x2a2010: LoadField: r0 = r2->field_f
    //     0x2a2010: ldur            w0, [x2, #0xf]
    // 0x2a2014: DecompressPointer r0
    //     0x2a2014: add             x0, x0, HEAP, lsl #32
    // 0x2a2018: LoadField: r1 = r0->field_b
    //     0x2a2018: ldur            w1, [x0, #0xb]
    // 0x2a201c: DecompressPointer r1
    //     0x2a201c: add             x1, x1, HEAP, lsl #32
    // 0x2a2020: cmp             w1, NULL
    // 0x2a2024: b.eq            #0x2a2208
    // 0x2a2028: LoadField: r3 = r1->field_cf
    //     0x2a2028: ldur            w3, [x1, #0xcf]
    // 0x2a202c: DecompressPointer r3
    //     0x2a202c: add             x3, x3, HEAP, lsl #32
    // 0x2a2030: stur            x3, [fp, #-0x98]
    // 0x2a2034: LoadField: r4 = r1->field_d7
    //     0x2a2034: ldur            w4, [x1, #0xd7]
    // 0x2a2038: DecompressPointer r4
    //     0x2a2038: add             x4, x4, HEAP, lsl #32
    // 0x2a203c: cmp             w4, NULL
    // 0x2a2040: b.ne            #0x2a204c
    // 0x2a2044: r7 = Instance_Offset
    //     0x2a2044: ldr             x7, [PP, #0x36e0]  ; [pp+0x36e0] Obj!Offset@47d631
    // 0x2a2048: b               #0x2a2050
    // 0x2a204c: mov             x7, x4
    // 0x2a2050: ldur            x6, [fp, #-0x10]
    // 0x2a2054: ldur            x4, [fp, #-0x40]
    // 0x2a2058: ldur            x5, [fp, #-0x38]
    // 0x2a205c: stur            x7, [fp, #-0x90]
    // 0x2a2060: LoadField: r8 = r1->field_db
    //     0x2a2060: ldur            w8, [x1, #0xdb]
    // 0x2a2064: DecompressPointer r8
    //     0x2a2064: add             x8, x8, HEAP, lsl #32
    // 0x2a2068: stur            x8, [fp, #-0x88]
    // 0x2a206c: str             x0, [SP]
    // 0x2a2070: r0 = _devicePixelRatio()
    //     0x2a2070: bl              #0x2a2bb4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_devicePixelRatio
    // 0x2a2074: ldur            x2, [fp, #-0x18]
    // 0x2a2078: stur            d0, [fp, #-0xc8]
    // 0x2a207c: LoadField: r0 = r2->field_f
    //     0x2a207c: ldur            w0, [x2, #0xf]
    // 0x2a2080: DecompressPointer r0
    //     0x2a2080: add             x0, x0, HEAP, lsl #32
    // 0x2a2084: stur            x0, [fp, #-0xb8]
    // 0x2a2088: LoadField: r1 = r0->field_b7
    //     0x2a2088: ldur            w1, [x0, #0xb7]
    // 0x2a208c: DecompressPointer r1
    //     0x2a208c: add             x1, x1, HEAP, lsl #32
    // 0x2a2090: stur            x1, [fp, #-0xb0]
    // 0x2a2094: LoadField: r3 = r0->field_b
    //     0x2a2094: ldur            w3, [x0, #0xb]
    // 0x2a2098: DecompressPointer r3
    //     0x2a2098: add             x3, x3, HEAP, lsl #32
    // 0x2a209c: cmp             w3, NULL
    // 0x2a20a0: b.eq            #0x2a220c
    // 0x2a20a4: LoadField: r4 = r3->field_6f
    //     0x2a20a4: ldur            w4, [x3, #0x6f]
    // 0x2a20a8: DecompressPointer r4
    //     0x2a20a8: add             x4, x4, HEAP, lsl #32
    // 0x2a20ac: stur            x4, [fp, #-0xa8]
    // 0x2a20b0: LoadField: r3 = r2->field_17
    //     0x2a20b0: ldur            w3, [x2, #0x17]
    // 0x2a20b4: DecompressPointer r3
    //     0x2a20b4: add             x3, x3, HEAP, lsl #32
    // 0x2a20b8: stur            x3, [fp, #-0xa0]
    // 0x2a20bc: r0 = _Editable()
    //     0x2a20bc: bl              #0x2a2ba8  ; Allocate_EditableStub -> _Editable (size=0xb4)
    // 0x2a20c0: stur            x0, [fp, #-0xc0]
    // 0x2a20c4: ldur            x16, [fp, #-0x68]
    // 0x2a20c8: stp             x16, x0, [SP, #0x90]
    // 0x2a20cc: ldur            x16, [fp, #-0x90]
    // 0x2a20d0: ldur            lr, [fp, #-0x98]
    // 0x2a20d4: stp             lr, x16, [SP, #0x80]
    // 0x2a20d8: ldur            d0, [fp, #-0xc8]
    // 0x2a20dc: str             d0, [SP, #0x78]
    // 0x2a20e0: ldur            x16, [fp, #-8]
    // 0x2a20e4: ldur            lr, [fp, #-0x78]
    // 0x2a20e8: stp             lr, x16, [SP, #0x68]
    // 0x2a20ec: ldur            x16, [fp, #-0x58]
    // 0x2a20f0: ldur            lr, [fp, #-0x38]
    // 0x2a20f4: stp             lr, x16, [SP, #0x58]
    // 0x2a20f8: ldr             x16, [fp, #0x10]
    // 0x2a20fc: ldur            lr, [fp, #-0x88]
    // 0x2a2100: stp             lr, x16, [SP, #0x48]
    // 0x2a2104: ldur            x16, [fp, #-0xa8]
    // 0x2a2108: ldur            lr, [fp, #-0xb0]
    // 0x2a210c: stp             lr, x16, [SP, #0x38]
    // 0x2a2110: ldur            x16, [fp, #-0x70]
    // 0x2a2114: ldur            lr, [fp, #-0x60]
    // 0x2a2118: stp             lr, x16, [SP, #0x28]
    // 0x2a211c: ldur            x16, [fp, #-0x30]
    // 0x2a2120: ldur            lr, [fp, #-0x80]
    // 0x2a2124: stp             lr, x16, [SP, #0x18]
    // 0x2a2128: ldur            x16, [fp, #-0xa0]
    // 0x2a212c: ldur            lr, [fp, #-0xb8]
    // 0x2a2130: stp             lr, x16, [SP, #8]
    // 0x2a2134: ldur            x16, [fp, #-0x50]
    // 0x2a2138: str             x16, [SP]
    // 0x2a213c: r0 = _Editable()
    //     0x2a213c: bl              #0x2a2228  ; [package:flutter/src/widgets/editable_text.dart] _Editable::_Editable
    // 0x2a2140: r0 = _ScribbleFocusable()
    //     0x2a2140: bl              #0x2a221c  ; Allocate_ScribbleFocusableStub -> _ScribbleFocusable (size=0x20)
    // 0x2a2144: mov             x3, x0
    // 0x2a2148: ldur            x0, [fp, #-0xc0]
    // 0x2a214c: stur            x3, [fp, #-8]
    // 0x2a2150: StoreField: r3->field_b = r0
    //     0x2a2150: stur            w0, [x3, #0xb]
    // 0x2a2154: ldur            x0, [fp, #-0x40]
    // 0x2a2158: StoreField: r3->field_f = r0
    //     0x2a2158: stur            w0, [x3, #0xf]
    // 0x2a215c: ldur            x0, [fp, #-0x38]
    // 0x2a2160: StoreField: r3->field_13 = r0
    //     0x2a2160: stur            w0, [x3, #0x13]
    // 0x2a2164: ldur            x2, [fp, #-0x18]
    // 0x2a2168: r1 = Function '<anonymous closure>':.
    //     0x2a2168: add             x1, PP, #0x11, lsl #12  ; [pp+0x111f8] AnonymousClosure: (0x2a3358), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x2a1394)
    //     0x2a216c: ldr             x1, [x1, #0x1f8]
    // 0x2a2170: r0 = AllocateClosure()
    //     0x2a2170: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a2174: mov             x1, x0
    // 0x2a2178: ldur            x0, [fp, #-8]
    // 0x2a217c: StoreField: r0->field_17 = r1
    //     0x2a217c: stur            w1, [x0, #0x17]
    // 0x2a2180: r1 = true
    //     0x2a2180: add             x1, NULL, #0x20  ; true
    // 0x2a2184: StoreField: r0->field_1b = r1
    //     0x2a2184: stur            w1, [x0, #0x1b]
    // 0x2a2188: r0 = Semantics()
    //     0x2a2188: bl              #0x27e250  ; AllocateSemanticsStub -> Semantics (size=0x24)
    // 0x2a218c: stur            x0, [fp, #-0x18]
    // 0x2a2190: ldur            x16, [fp, #-8]
    // 0x2a2194: stp             x16, x0, [SP, #0x18]
    // 0x2a2198: ldur            x16, [fp, #-0x20]
    // 0x2a219c: ldur            lr, [fp, #-0x28]
    // 0x2a21a0: stp             lr, x16, [SP, #8]
    // 0x2a21a4: ldur            x16, [fp, #-0x48]
    // 0x2a21a8: str             x16, [SP]
    // 0x2a21ac: r4 = const [0, 0x5, 0x5, 0x2, onCopy, 0x2, onCut, 0x3, onPaste, 0x4, null]
    //     0x2a21ac: add             x4, PP, #0x11, lsl #12  ; [pp+0x11200] List(11) [0, 0x5, 0x5, 0x2, "onCopy", 0x2, "onCut", 0x3, "onPaste", 0x4, Null]
    //     0x2a21b0: ldr             x4, [x4, #0x200]
    // 0x2a21b4: r0 = Semantics()
    //     0x2a21b4: bl              #0x27d840  ; [package:flutter/src/widgets/basic.dart] Semantics::Semantics
    // 0x2a21b8: r0 = CompositedTransformTarget()
    //     0x2a21b8: bl              #0x2a2210  ; AllocateCompositedTransformTargetStub -> CompositedTransformTarget (size=0x14)
    // 0x2a21bc: ldur            x1, [fp, #-0x10]
    // 0x2a21c0: StoreField: r0->field_f = r1
    //     0x2a21c0: stur            w1, [x0, #0xf]
    // 0x2a21c4: ldur            x1, [fp, #-0x18]
    // 0x2a21c8: StoreField: r0->field_b = r1
    //     0x2a21c8: stur            w1, [x0, #0xb]
    // 0x2a21cc: LeaveFrame
    //     0x2a21cc: mov             SP, fp
    //     0x2a21d0: ldp             fp, lr, [SP], #0x10
    // 0x2a21d4: ret
    //     0x2a21d4: ret             
    // 0x2a21d8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a21d8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a21dc: b               #0x2a1db0
    // 0x2a21e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a21e0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a21e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a21e4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a21e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a21e8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a21ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a21ec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a21f0: r9 = _spellCheckConfiguration
    //     0x2a21f0: ldr             x9, [PP, #0x5bc0]  ; [pp+0x5bc0] Field <EditableTextState._spellCheckConfiguration@148183791>: late (offset: 0x60)
    // 0x2a21f4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2a21f4: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x2a21f8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a21f8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a21fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a21fc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a2200: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a2200: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a2204: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a2204: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a2208: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a2208: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a220c: r0 = NullCastErrorSharedWithFPURegs()
    //     0x2a220c: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
  }
  get _ _devicePixelRatio(/* No info */) {
    // ** addr: 0x2a2bb4, size: 0x4c
    // 0x2a2bb4: EnterFrame
    //     0x2a2bb4: stp             fp, lr, [SP, #-0x10]!
    //     0x2a2bb8: mov             fp, SP
    // 0x2a2bbc: AllocStack(0x8)
    //     0x2a2bbc: sub             SP, SP, #8
    // 0x2a2bc0: CheckStackOverflow
    //     0x2a2bc0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a2bc4: cmp             SP, x16
    //     0x2a2bc8: b.ls            #0x2a2bf4
    // 0x2a2bcc: ldr             x0, [fp, #0x10]
    // 0x2a2bd0: LoadField: r1 = r0->field_f
    //     0x2a2bd0: ldur            w1, [x0, #0xf]
    // 0x2a2bd4: DecompressPointer r1
    //     0x2a2bd4: add             x1, x1, HEAP, lsl #32
    // 0x2a2bd8: cmp             w1, NULL
    // 0x2a2bdc: b.eq            #0x2a2bfc
    // 0x2a2be0: str             x1, [SP]
    // 0x2a2be4: r0 = devicePixelRatioOf()
    //     0x2a2be4: bl              #0x2800e4  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::devicePixelRatioOf
    // 0x2a2be8: LeaveFrame
    //     0x2a2be8: mov             SP, fp
    //     0x2a2bec: ldp             fp, lr, [SP], #0x10
    // 0x2a2bf0: ret
    //     0x2a2bf0: ret             
    // 0x2a2bf4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a2bf4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a2bf8: b               #0x2a2bcc
    // 0x2a2bfc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a2bfc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _cursorColor(/* No info */) {
    // ** addr: 0x2a2d84, size: 0x188
    // 0x2a2d84: EnterFrame
    //     0x2a2d84: stp             fp, lr, [SP, #-0x10]!
    //     0x2a2d88: mov             fp, SP
    // 0x2a2d8c: AllocStack(0x20)
    //     0x2a2d8c: sub             SP, SP, #0x20
    // 0x2a2d90: CheckStackOverflow
    //     0x2a2d90: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a2d94: cmp             SP, x16
    //     0x2a2d98: b.ls            #0x2a2ef4
    // 0x2a2d9c: ldr             x0, [fp, #0x10]
    // 0x2a2da0: LoadField: r1 = r0->field_b
    //     0x2a2da0: ldur            w1, [x0, #0xb]
    // 0x2a2da4: DecompressPointer r1
    //     0x2a2da4: add             x1, x1, HEAP, lsl #32
    // 0x2a2da8: cmp             w1, NULL
    // 0x2a2dac: b.eq            #0x2a2efc
    // 0x2a2db0: LoadField: r2 = r1->field_6b
    //     0x2a2db0: ldur            w2, [x1, #0x6b]
    // 0x2a2db4: DecompressPointer r2
    //     0x2a2db4: add             x2, x2, HEAP, lsl #32
    // 0x2a2db8: r1 = LoadClassIdInstr(r2)
    //     0x2a2db8: ldur            x1, [x2, #-1]
    //     0x2a2dbc: ubfx            x1, x1, #0xc, #0x14
    // 0x2a2dc0: sub             x16, x1, #0x7ee
    // 0x2a2dc4: cmp             x16, #1
    // 0x2a2dc8: b.ls            #0x2a2ddc
    // 0x2a2dcc: cmp             x1, #0x7ea
    // 0x2a2dd0: b.eq            #0x2a2ddc
    // 0x2a2dd4: cmp             x1, #0x7ec
    // 0x2a2dd8: b.ne            #0x2a2de8
    // 0x2a2ddc: LoadField: r1 = r2->field_7
    //     0x2a2ddc: ldur            x1, [x2, #7]
    // 0x2a2de0: mov             x2, x1
    // 0x2a2de4: b               #0x2a2df4
    // 0x2a2de8: LoadField: r1 = r2->field_f
    //     0x2a2de8: ldur            w1, [x2, #0xf]
    // 0x2a2dec: DecompressPointer r1
    //     0x2a2dec: add             x1, x1, HEAP, lsl #32
    // 0x2a2df0: LoadField: r2 = r1->field_7
    //     0x2a2df0: ldur            x2, [x1, #7]
    // 0x2a2df4: d0 = 255.000000
    //     0x2a2df4: ldr             d0, [PP, #0x5778]  ; [pp+0x5778] IMM: double(255) from 0x406fe00000000000
    // 0x2a2df8: d0 = 255.000000
    //     0x2a2df8: ldr             d0, [PP, #0x5778]  ; [pp+0x5778] IMM: double(255) from 0x406fe00000000000
    // 0x2a2dfc: r1 = 4278190080
    //     0x2a2dfc: orr             x1, xzr, #0xff000000
    // 0x2a2e00: ubfx            x2, x2, #0, #0x20
    // 0x2a2e04: and             x3, x2, x1
    // 0x2a2e08: ubfx            x3, x3, #0, #0x20
    // 0x2a2e0c: asr             x1, x3, #0x18
    // 0x2a2e10: scvtf           d1, x1
    // 0x2a2e14: fdiv            d2, d1, d0
    // 0x2a2e18: stur            d2, [fp, #-0x10]
    // 0x2a2e1c: str             x0, [SP]
    // 0x2a2e20: r0 = _cursorBlinkOpacityController()
    //     0x2a2e20: bl              #0x23587c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x2a2e24: LoadField: r1 = r0->field_37
    //     0x2a2e24: ldur            w1, [x0, #0x37]
    // 0x2a2e28: DecompressPointer r1
    //     0x2a2e28: add             x1, x1, HEAP, lsl #32
    // 0x2a2e2c: r16 = Sentinel
    //     0x2a2e2c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a2e30: cmp             w1, w16
    // 0x2a2e34: b.eq            #0x2a2f00
    // 0x2a2e38: stur            x1, [fp, #-8]
    // 0x2a2e3c: LoadField: d0 = r1->field_7
    //     0x2a2e3c: ldur            d0, [x1, #7]
    // 0x2a2e40: ldur            d1, [fp, #-0x10]
    // 0x2a2e44: fcmp            d1, d0
    // 0x2a2e48: b.le            #0x2a2e54
    // 0x2a2e4c: LoadField: d0 = r1->field_7
    //     0x2a2e4c: ldur            d0, [x1, #7]
    // 0x2a2e50: b               #0x2a2ec0
    // 0x2a2e54: fcmp            d0, d1
    // 0x2a2e58: b.le            #0x2a2e64
    // 0x2a2e5c: mov             v0.16b, v1.16b
    // 0x2a2e60: b               #0x2a2ec0
    // 0x2a2e64: d2 = 0.000000
    //     0x2a2e64: eor             v2.16b, v2.16b, v2.16b
    // 0x2a2e68: d2 = 0.000000
    //     0x2a2e68: eor             v2.16b, v2.16b, v2.16b
    // 0x2a2e6c: fcmp            d1, d2
    // 0x2a2e70: b.ne            #0x2a2e88
    // 0x2a2e74: fadd            d2, d1, d0
    // 0x2a2e78: fmul            d3, d2, d1
    // 0x2a2e7c: fmul            d1, d3, d0
    // 0x2a2e80: mov             v0.16b, v1.16b
    // 0x2a2e84: b               #0x2a2ec0
    // 0x2a2e88: fcmp            d1, d2
    // 0x2a2e8c: b.ne            #0x2a2ea4
    // 0x2a2e90: str             x1, [SP]
    // 0x2a2e94: r0 = isNegative()
    //     0x2a2e94: bl              #0x3e3414  ; [dart:core] _Double::isNegative
    // 0x2a2e98: tbnz            w0, #4, #0x2a2ea4
    // 0x2a2e9c: ldur            x0, [fp, #-8]
    // 0x2a2ea0: b               #0x2a2eb4
    // 0x2a2ea4: ldur            x0, [fp, #-8]
    // 0x2a2ea8: LoadField: d0 = r0->field_7
    //     0x2a2ea8: ldur            d0, [x0, #7]
    // 0x2a2eac: fcmp            d0, d0
    // 0x2a2eb0: b.vc            #0x2a2ebc
    // 0x2a2eb4: LoadField: d0 = r0->field_7
    //     0x2a2eb4: ldur            d0, [x0, #7]
    // 0x2a2eb8: b               #0x2a2ec0
    // 0x2a2ebc: ldur            d0, [fp, #-0x10]
    // 0x2a2ec0: ldr             x0, [fp, #0x10]
    // 0x2a2ec4: LoadField: r1 = r0->field_b
    //     0x2a2ec4: ldur            w1, [x0, #0xb]
    // 0x2a2ec8: DecompressPointer r1
    //     0x2a2ec8: add             x1, x1, HEAP, lsl #32
    // 0x2a2ecc: cmp             w1, NULL
    // 0x2a2ed0: b.eq            #0x2a2f08
    // 0x2a2ed4: LoadField: r0 = r1->field_6b
    //     0x2a2ed4: ldur            w0, [x1, #0x6b]
    // 0x2a2ed8: DecompressPointer r0
    //     0x2a2ed8: add             x0, x0, HEAP, lsl #32
    // 0x2a2edc: str             x0, [SP, #8]
    // 0x2a2ee0: str             d0, [SP]
    // 0x2a2ee4: r0 = withOpacity()
    //     0x2a2ee4: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x2a2ee8: LeaveFrame
    //     0x2a2ee8: mov             SP, fp
    //     0x2a2eec: ldp             fp, lr, [SP], #0x10
    // 0x2a2ef0: ret
    //     0x2a2ef0: ret             
    // 0x2a2ef4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a2ef4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a2ef8: b               #0x2a2d9c
    // 0x2a2efc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a2efc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a2f00: r9 = _value
    //     0x2a2f00: ldr             x9, [PP, #0x5638]  ; [pp+0x5638] Field <AnimationController._value@337066280>: late (offset: 0x38)
    // 0x2a2f04: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2a2f04: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x2a2f08: r0 = NullCastErrorSharedWithFPURegs()
    //     0x2a2f08: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
  }
  _ buildTextSpan(/* No info */) {
    // ** addr: 0x2a2f0c, size: 0x1f4
    // 0x2a2f0c: EnterFrame
    //     0x2a2f0c: stp             fp, lr, [SP, #-0x10]!
    //     0x2a2f10: mov             fp, SP
    // 0x2a2f14: AllocStack(0x38)
    //     0x2a2f14: sub             SP, SP, #0x38
    // 0x2a2f18: CheckStackOverflow
    //     0x2a2f18: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a2f1c: cmp             SP, x16
    //     0x2a2f20: b.ls            #0x2a30e4
    // 0x2a2f24: ldr             x0, [fp, #0x10]
    // 0x2a2f28: LoadField: r1 = r0->field_b
    //     0x2a2f28: ldur            w1, [x0, #0xb]
    // 0x2a2f2c: DecompressPointer r1
    //     0x2a2f2c: add             x1, x1, HEAP, lsl #32
    // 0x2a2f30: cmp             w1, NULL
    // 0x2a2f34: b.eq            #0x2a30ec
    // 0x2a2f38: LoadField: r2 = r1->field_b
    //     0x2a2f38: ldur            w2, [x1, #0xb]
    // 0x2a2f3c: DecompressPointer r2
    //     0x2a2f3c: add             x2, x2, HEAP, lsl #32
    // 0x2a2f40: LoadField: r1 = r2->field_27
    //     0x2a2f40: ldur            w1, [x2, #0x27]
    // 0x2a2f44: DecompressPointer r1
    //     0x2a2f44: add             x1, x1, HEAP, lsl #32
    // 0x2a2f48: LoadField: r2 = r1->field_7
    //     0x2a2f48: ldur            w2, [x1, #7]
    // 0x2a2f4c: DecompressPointer r2
    //     0x2a2f4c: add             x2, x2, HEAP, lsl #32
    // 0x2a2f50: LoadField: r1 = r2->field_7
    //     0x2a2f50: ldur            w1, [x2, #7]
    // 0x2a2f54: DecompressPointer r1
    //     0x2a2f54: add             x1, x1, HEAP, lsl #32
    // 0x2a2f58: r2 = LoadInt32Instr(r1)
    //     0x2a2f58: sbfx            x2, x1, #1, #0x1f
    // 0x2a2f5c: r16 = "•"
    //     0x2a2f5c: add             x16, PP, #0xb, lsl #12  ; [pp+0xb838] "•"
    //     0x2a2f60: ldr             x16, [x16, #0x838]
    // 0x2a2f64: stp             x2, x16, [SP]
    // 0x2a2f68: r0 = *()
    //     0x2a2f68: bl              #0x22bae0  ; [dart:core] _TwoByteString::*
    // 0x2a2f6c: stur            x0, [fp, #-8]
    // 0x2a2f70: r1 = LoadStaticField(0x970)
    //     0x2a2f70: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x2a2f74: ldr             x1, [x1, #0x12e0]
    // 0x2a2f78: cmp             w1, NULL
    // 0x2a2f7c: b.eq            #0x2a30f0
    // 0x2a2f80: r0 = InitLateStaticField(0x834) // [dart:ui] PlatformDispatcher::_instance
    //     0x2a2f80: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2a2f84: ldr             x0, [x0, #0x1068]
    //     0x2a2f88: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x2a2f8c: cmp             w0, w16
    //     0x2a2f90: b.ne            #0x2a2f9c
    //     0x2a2f94: ldr             x2, [PP, #0x270]  ; [pp+0x270] Field <PlatformDispatcher._instance@15065589>: static late final (offset: 0x834)
    //     0x2a2f98: bl              #0x3e406c
    // 0x2a2f9c: LoadField: r1 = r0->field_77
    //     0x2a2f9c: ldur            w1, [x0, #0x77]
    // 0x2a2fa0: DecompressPointer r1
    //     0x2a2fa0: add             x1, x1, HEAP, lsl #32
    // 0x2a2fa4: tbnz            w1, #4, #0x2a3098
    // 0x2a2fa8: r16 = _ConstSet len:2
    //     0x2a2fa8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11210] Set<TargetPlatform>(2)
    //     0x2a2fac: ldr             x16, [x16, #0x210]
    // 0x2a2fb0: r30 = Instance_TargetPlatform
    //     0x2a2fb0: add             lr, PP, #0xa, lsl #12  ; [pp+0xa530] Obj!TargetPlatform@481e41
    //     0x2a2fb4: ldr             lr, [lr, #0x530]
    // 0x2a2fb8: stp             lr, x16, [SP]
    // 0x2a2fbc: r0 = contains()
    //     0x2a2fbc: bl              #0x3d966c  ; [dart:collection] __ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin&_UnmodifiableSetMixin&_ImmutableLinkedHashSetMixin::contains
    // 0x2a2fc0: tbnz            w0, #4, #0x2a3098
    // 0x2a2fc4: ldr             x2, [fp, #0x10]
    // 0x2a2fc8: LoadField: r0 = r2->field_9b
    //     0x2a2fc8: ldur            x0, [x2, #0x9b]
    // 0x2a2fcc: cmp             x0, #0
    // 0x2a2fd0: b.le            #0x2a2fe0
    // 0x2a2fd4: LoadField: r0 = r2->field_a3
    //     0x2a2fd4: ldur            w0, [x2, #0xa3]
    // 0x2a2fd8: DecompressPointer r0
    //     0x2a2fd8: add             x0, x0, HEAP, lsl #32
    // 0x2a2fdc: b               #0x2a2fe4
    // 0x2a2fe0: r0 = Null
    //     0x2a2fe0: mov             x0, NULL
    // 0x2a2fe4: cmp             w0, NULL
    // 0x2a2fe8: b.eq            #0x2a308c
    // 0x2a2fec: r3 = LoadInt32Instr(r0)
    //     0x2a2fec: sbfx            x3, x0, #1, #0x1f
    //     0x2a2ff0: tbz             w0, #0, #0x2a2ff8
    //     0x2a2ff4: ldur            x3, [x0, #7]
    // 0x2a2ff8: stur            x3, [fp, #-0x18]
    // 0x2a2ffc: tbnz            x3, #0x3f, #0x2a308c
    // 0x2a3000: ldur            x4, [fp, #-8]
    // 0x2a3004: LoadField: r0 = r4->field_7
    //     0x2a3004: ldur            w0, [x4, #7]
    // 0x2a3008: DecompressPointer r0
    //     0x2a3008: add             x0, x0, HEAP, lsl #32
    // 0x2a300c: r1 = LoadInt32Instr(r0)
    //     0x2a300c: sbfx            x1, x0, #1, #0x1f
    // 0x2a3010: cmp             x3, x1
    // 0x2a3014: b.ge            #0x2a308c
    // 0x2a3018: add             x5, x3, #1
    // 0x2a301c: LoadField: r0 = r2->field_b
    //     0x2a301c: ldur            w0, [x2, #0xb]
    // 0x2a3020: DecompressPointer r0
    //     0x2a3020: add             x0, x0, HEAP, lsl #32
    // 0x2a3024: cmp             w0, NULL
    // 0x2a3028: b.eq            #0x2a30f4
    // 0x2a302c: LoadField: r1 = r0->field_b
    //     0x2a302c: ldur            w1, [x0, #0xb]
    // 0x2a3030: DecompressPointer r1
    //     0x2a3030: add             x1, x1, HEAP, lsl #32
    // 0x2a3034: LoadField: r0 = r1->field_27
    //     0x2a3034: ldur            w0, [x1, #0x27]
    // 0x2a3038: DecompressPointer r0
    //     0x2a3038: add             x0, x0, HEAP, lsl #32
    // 0x2a303c: LoadField: r6 = r0->field_7
    //     0x2a303c: ldur            w6, [x0, #7]
    // 0x2a3040: DecompressPointer r6
    //     0x2a3040: add             x6, x6, HEAP, lsl #32
    // 0x2a3044: r0 = BoxInt64Instr(r5)
    //     0x2a3044: sbfiz           x0, x5, #1, #0x1f
    //     0x2a3048: cmp             x5, x0, asr #1
    //     0x2a304c: b.eq            #0x2a3058
    //     0x2a3050: bl              #0x3e5e54
    //     0x2a3054: stur            x5, [x0, #7]
    // 0x2a3058: stur            x0, [fp, #-0x10]
    // 0x2a305c: stp             x3, x6, [SP, #8]
    // 0x2a3060: str             x0, [SP]
    // 0x2a3064: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x2a3064: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x2a3068: r0 = substring()
    //     0x2a3068: bl              #0x195f8c  ; [dart:core] _StringBase::substring
    // 0x2a306c: ldur            x16, [fp, #-8]
    // 0x2a3070: str             x16, [SP, #0x18]
    // 0x2a3074: ldur            x1, [fp, #-0x18]
    // 0x2a3078: ldur            x16, [fp, #-0x10]
    // 0x2a307c: stp             x16, x1, [SP, #8]
    // 0x2a3080: str             x0, [SP]
    // 0x2a3084: r0 = replaceRange()
    //     0x2a3084: bl              #0x19d204  ; [dart:core] _StringBase::replaceRange
    // 0x2a3088: b               #0x2a3090
    // 0x2a308c: ldur            x0, [fp, #-8]
    // 0x2a3090: mov             x1, x0
    // 0x2a3094: b               #0x2a309c
    // 0x2a3098: ldur            x1, [fp, #-8]
    // 0x2a309c: ldr             x0, [fp, #0x10]
    // 0x2a30a0: stur            x1, [fp, #-0x10]
    // 0x2a30a4: LoadField: r2 = r0->field_63
    //     0x2a30a4: ldur            w2, [x0, #0x63]
    // 0x2a30a8: DecompressPointer r2
    //     0x2a30a8: add             x2, x2, HEAP, lsl #32
    // 0x2a30ac: r16 = Sentinel
    //     0x2a30ac: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a30b0: cmp             w2, w16
    // 0x2a30b4: b.eq            #0x2a30f8
    // 0x2a30b8: stur            x2, [fp, #-8]
    // 0x2a30bc: r0 = TextSpan()
    //     0x2a30bc: bl              #0x224624  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x2a30c0: ldur            x1, [fp, #-0x10]
    // 0x2a30c4: StoreField: r0->field_b = r1
    //     0x2a30c4: stur            w1, [x0, #0xb]
    // 0x2a30c8: r1 = Instance__DeferringMouseCursor
    //     0x2a30c8: ldr             x1, [PP, #0x2b88]  ; [pp+0x2b88] Obj!_DeferringMouseCursor@47b771
    // 0x2a30cc: StoreField: r0->field_17 = r1
    //     0x2a30cc: stur            w1, [x0, #0x17]
    // 0x2a30d0: ldur            x1, [fp, #-8]
    // 0x2a30d4: StoreField: r0->field_7 = r1
    //     0x2a30d4: stur            w1, [x0, #7]
    // 0x2a30d8: LeaveFrame
    //     0x2a30d8: mov             SP, fp
    //     0x2a30dc: ldp             fp, lr, [SP], #0x10
    // 0x2a30e0: ret
    //     0x2a30e0: ret             
    // 0x2a30e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a30e4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a30e8: b               #0x2a2f24
    // 0x2a30ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a30ec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a30f0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a30f0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a30f4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a30f4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a30f8: r9 = _style
    //     0x2a30f8: ldr             x9, [PP, #0x5d90]  ; [pp+0x5d90] Field <EditableTextState._style@148183791>: late (offset: 0x64)
    // 0x2a30fc: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2a30fc: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ _semanticsOnPaste(/* No info */) {
    // ** addr: 0x2a3100, size: 0x158
    // 0x2a3100: EnterFrame
    //     0x2a3100: stp             fp, lr, [SP, #-0x10]!
    //     0x2a3104: mov             fp, SP
    // 0x2a3108: AllocStack(0x10)
    //     0x2a3108: sub             SP, SP, #0x10
    // 0x2a310c: CheckStackOverflow
    //     0x2a310c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a3110: cmp             SP, x16
    //     0x2a3114: b.ls            #0x2a3244
    // 0x2a3118: r1 = 2
    //     0x2a3118: movz            x1, #0x2
    // 0x2a311c: r0 = AllocateContext()
    //     0x2a311c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2a3120: mov             x1, x0
    // 0x2a3124: ldr             x0, [fp, #0x18]
    // 0x2a3128: stur            x1, [fp, #-8]
    // 0x2a312c: StoreField: r1->field_f = r0
    //     0x2a312c: stur            w0, [x1, #0xf]
    // 0x2a3130: ldr             x2, [fp, #0x10]
    // 0x2a3134: StoreField: r1->field_13 = r2
    //     0x2a3134: stur            w2, [x1, #0x13]
    // 0x2a3138: LoadField: r2 = r0->field_b
    //     0x2a3138: ldur            w2, [x0, #0xb]
    // 0x2a313c: DecompressPointer r2
    //     0x2a313c: add             x2, x2, HEAP, lsl #32
    // 0x2a3140: cmp             w2, NULL
    // 0x2a3144: b.eq            #0x2a324c
    // 0x2a3148: LoadField: r3 = r2->field_f
    //     0x2a3148: ldur            w3, [x2, #0xf]
    // 0x2a314c: DecompressPointer r3
    //     0x2a314c: add             x3, x3, HEAP, lsl #32
    // 0x2a3150: str             x3, [SP]
    // 0x2a3154: r0 = hasFocus()
    //     0x2a3154: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x2a3158: tbnz            w0, #4, #0x2a3234
    // 0x2a315c: ldr             x0, [fp, #0x18]
    // 0x2a3160: LoadField: r1 = r0->field_b
    //     0x2a3160: ldur            w1, [x0, #0xb]
    // 0x2a3164: DecompressPointer r1
    //     0x2a3164: add             x1, x1, HEAP, lsl #32
    // 0x2a3168: cmp             w1, NULL
    // 0x2a316c: b.eq            #0x2a3250
    // 0x2a3170: LoadField: r2 = r1->field_8f
    //     0x2a3170: ldur            w2, [x1, #0x8f]
    // 0x2a3174: DecompressPointer r2
    //     0x2a3174: add             x2, x2, HEAP, lsl #32
    // 0x2a3178: r1 = LoadClassIdInstr(r2)
    //     0x2a3178: ldur            x1, [x2, #-1]
    //     0x2a317c: ubfx            x1, x1, #0xc, #0x14
    // 0x2a3180: sub             x16, x1, #0x737
    // 0x2a3184: cmp             x16, #0xa
    // 0x2a3188: b.hi            #0x2a319c
    // 0x2a318c: str             x0, [SP]
    // 0x2a3190: r0 = pasteEnabled()
    //     0x2a3190: bl              #0x26e028  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x2a3194: tbnz            w0, #4, #0x2a3234
    // 0x2a3198: b               #0x2a3200
    // 0x2a319c: ldr             x16, [fp, #0x18]
    // 0x2a31a0: str             x16, [SP]
    // 0x2a31a4: r0 = pasteEnabled()
    //     0x2a31a4: bl              #0x26e028  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x2a31a8: tbnz            w0, #4, #0x2a3234
    // 0x2a31ac: ldr             x1, [fp, #0x18]
    // 0x2a31b0: LoadField: r0 = r1->field_b
    //     0x2a31b0: ldur            w0, [x1, #0xb]
    // 0x2a31b4: DecompressPointer r0
    //     0x2a31b4: add             x0, x0, HEAP, lsl #32
    // 0x2a31b8: cmp             w0, NULL
    // 0x2a31bc: b.eq            #0x2a3254
    // 0x2a31c0: LoadField: r2 = r0->field_8f
    //     0x2a31c0: ldur            w2, [x0, #0x8f]
    // 0x2a31c4: DecompressPointer r2
    //     0x2a31c4: add             x2, x2, HEAP, lsl #32
    // 0x2a31c8: cmp             w2, NULL
    // 0x2a31cc: b.ne            #0x2a31d8
    // 0x2a31d0: r0 = Null
    //     0x2a31d0: mov             x0, NULL
    // 0x2a31d4: b               #0x2a31f4
    // 0x2a31d8: r0 = LoadClassIdInstr(r2)
    //     0x2a31d8: ldur            x0, [x2, #-1]
    //     0x2a31dc: ubfx            x0, x0, #0xc, #0x14
    // 0x2a31e0: str             x2, [SP]
    // 0x2a31e4: r0 = GDT[cid_x0 + -0xf45]()
    //     0x2a31e4: sub             lr, x0, #0xf45
    //     0x2a31e8: ldr             lr, [x21, lr, lsl #3]
    //     0x2a31ec: blr             lr
    // 0x2a31f0: r0 = false
    //     0x2a31f0: add             x0, NULL, #0x30  ; false
    // 0x2a31f4: cmp             w0, NULL
    // 0x2a31f8: b.eq            #0x2a3234
    // 0x2a31fc: tbnz            w0, #4, #0x2a3234
    // 0x2a3200: ldr             x0, [fp, #0x18]
    // 0x2a3204: LoadField: r1 = r0->field_33
    //     0x2a3204: ldur            w1, [x0, #0x33]
    // 0x2a3208: DecompressPointer r1
    //     0x2a3208: add             x1, x1, HEAP, lsl #32
    // 0x2a320c: LoadField: r0 = r1->field_27
    //     0x2a320c: ldur            w0, [x1, #0x27]
    // 0x2a3210: DecompressPointer r0
    //     0x2a3210: add             x0, x0, HEAP, lsl #32
    // 0x2a3214: r16 = Instance_ClipboardStatus
    //     0x2a3214: ldr             x16, [PP, #0x5438]  ; [pp+0x5438] Obj!ClipboardStatus@47dc31
    // 0x2a3218: cmp             w0, w16
    // 0x2a321c: b.ne            #0x2a3234
    // 0x2a3220: ldur            x2, [fp, #-8]
    // 0x2a3224: r1 = Function '<anonymous closure>':.
    //     0x2a3224: add             x1, PP, #0x11, lsl #12  ; [pp+0x11218] AnonymousClosure: (0x2a3258), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnPaste (0x2a3100)
    //     0x2a3228: ldr             x1, [x1, #0x218]
    // 0x2a322c: r0 = AllocateClosure()
    //     0x2a322c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a3230: b               #0x2a3238
    // 0x2a3234: r0 = Null
    //     0x2a3234: mov             x0, NULL
    // 0x2a3238: LeaveFrame
    //     0x2a3238: mov             SP, fp
    //     0x2a323c: ldp             fp, lr, [SP], #0x10
    // 0x2a3240: ret
    //     0x2a3240: ret             
    // 0x2a3244: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a3244: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a3248: b               #0x2a3118
    // 0x2a324c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a324c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a3250: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a3250: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a3254: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a3254: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x2a3258, size: 0x8c
    // 0x2a3258: EnterFrame
    //     0x2a3258: stp             fp, lr, [SP, #-0x10]!
    //     0x2a325c: mov             fp, SP
    // 0x2a3260: AllocStack(0x18)
    //     0x2a3260: sub             SP, SP, #0x18
    // 0x2a3264: SetupParameters()
    //     0x2a3264: ldr             x0, [fp, #0x10]
    //     0x2a3268: ldur            w1, [x0, #0x17]
    //     0x2a326c: add             x1, x1, HEAP, lsl #32
    //     0x2a3270: stur            x1, [fp, #-8]
    // 0x2a3274: CheckStackOverflow
    //     0x2a3274: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a3278: cmp             SP, x16
    //     0x2a327c: b.ls            #0x2a32dc
    // 0x2a3280: LoadField: r0 = r1->field_13
    //     0x2a3280: ldur            w0, [x1, #0x13]
    // 0x2a3284: DecompressPointer r0
    //     0x2a3284: add             x0, x0, HEAP, lsl #32
    // 0x2a3288: cmp             w0, NULL
    // 0x2a328c: b.ne            #0x2a3298
    // 0x2a3290: mov             x0, x1
    // 0x2a3294: b               #0x2a32b8
    // 0x2a3298: r2 = LoadClassIdInstr(r0)
    //     0x2a3298: ldur            x2, [x0, #-1]
    //     0x2a329c: ubfx            x2, x2, #0xc, #0x14
    // 0x2a32a0: str             x0, [SP]
    // 0x2a32a4: mov             x0, x2
    // 0x2a32a8: r0 = GDT[cid_x0 + -0xb40]()
    //     0x2a32a8: sub             lr, x0, #0xb40
    //     0x2a32ac: ldr             lr, [x21, lr, lsl #3]
    //     0x2a32b0: blr             lr
    // 0x2a32b4: ldur            x0, [fp, #-8]
    // 0x2a32b8: LoadField: r1 = r0->field_f
    //     0x2a32b8: ldur            w1, [x0, #0xf]
    // 0x2a32bc: DecompressPointer r1
    //     0x2a32bc: add             x1, x1, HEAP, lsl #32
    // 0x2a32c0: r16 = Instance_SelectionChangedCause
    //     0x2a32c0: ldr             x16, [PP, #0x57c8]  ; [pp+0x57c8] Obj!SelectionChangedCause@480701
    // 0x2a32c4: stp             x16, x1, [SP]
    // 0x2a32c8: r0 = pasteText()
    //     0x2a32c8: bl              #0x27c048  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x2a32cc: r0 = Null
    //     0x2a32cc: mov             x0, NULL
    // 0x2a32d0: LeaveFrame
    //     0x2a32d0: mov             SP, fp
    //     0x2a32d4: ldp             fp, lr, [SP], #0x10
    // 0x2a32d8: ret
    //     0x2a32d8: ret             
    // 0x2a32dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a32dc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a32e0: b               #0x2a3280
  }
  _ _semanticsOnCopy(/* No info */) {
    // ** addr: 0x2a32e4, size: 0x74
    // 0x2a32e4: EnterFrame
    //     0x2a32e4: stp             fp, lr, [SP, #-0x10]!
    //     0x2a32e8: mov             fp, SP
    // 0x2a32ec: AllocStack(0x8)
    //     0x2a32ec: sub             SP, SP, #8
    // 0x2a32f0: CheckStackOverflow
    //     0x2a32f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a32f4: cmp             SP, x16
    //     0x2a32f8: b.ls            #0x2a3348
    // 0x2a32fc: ldr             x0, [fp, #0x18]
    // 0x2a3300: LoadField: r1 = r0->field_b
    //     0x2a3300: ldur            w1, [x0, #0xb]
    // 0x2a3304: DecompressPointer r1
    //     0x2a3304: add             x1, x1, HEAP, lsl #32
    // 0x2a3308: cmp             w1, NULL
    // 0x2a330c: b.eq            #0x2a3350
    // 0x2a3310: LoadField: r2 = r1->field_f
    //     0x2a3310: ldur            w2, [x1, #0xf]
    // 0x2a3314: DecompressPointer r2
    //     0x2a3314: add             x2, x2, HEAP, lsl #32
    // 0x2a3318: str             x2, [SP]
    // 0x2a331c: r0 = hasFocus()
    //     0x2a331c: bl              #0x24857c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x2a3320: tbnz            w0, #4, #0x2a3338
    // 0x2a3324: ldr             x1, [fp, #0x18]
    // 0x2a3328: LoadField: r2 = r1->field_b
    //     0x2a3328: ldur            w2, [x1, #0xb]
    // 0x2a332c: DecompressPointer r2
    //     0x2a332c: add             x2, x2, HEAP, lsl #32
    // 0x2a3330: cmp             w2, NULL
    // 0x2a3334: b.eq            #0x2a3354
    // 0x2a3338: r0 = Null
    //     0x2a3338: mov             x0, NULL
    // 0x2a333c: LeaveFrame
    //     0x2a333c: mov             SP, fp
    //     0x2a3340: ldp             fp, lr, [SP], #0x10
    // 0x2a3344: ret
    //     0x2a3344: ret             
    // 0x2a3348: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a3348: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a334c: b               #0x2a32fc
    // 0x2a3350: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a3350: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2a3354: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a3354: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x2a3358, size: 0x70
    // 0x2a3358: EnterFrame
    //     0x2a3358: stp             fp, lr, [SP, #-0x10]!
    //     0x2a335c: mov             fp, SP
    // 0x2a3360: AllocStack(0x18)
    //     0x2a3360: sub             SP, SP, #0x18
    // 0x2a3364: SetupParameters()
    //     0x2a3364: ldr             x0, [fp, #0x10]
    //     0x2a3368: ldur            w1, [x0, #0x17]
    //     0x2a336c: add             x1, x1, HEAP, lsl #32
    //     0x2a3370: stur            x1, [fp, #-8]
    // 0x2a3374: CheckStackOverflow
    //     0x2a3374: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a3378: cmp             SP, x16
    //     0x2a337c: b.ls            #0x2a33c0
    // 0x2a3380: LoadField: r0 = r1->field_f
    //     0x2a3380: ldur            w0, [x1, #0xf]
    // 0x2a3384: DecompressPointer r0
    //     0x2a3384: add             x0, x0, HEAP, lsl #32
    // 0x2a3388: str             x0, [SP]
    // 0x2a338c: r0 = _openInputConnection()
    //     0x2a338c: bl              #0x2436ac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openInputConnection
    // 0x2a3390: ldur            x0, [fp, #-8]
    // 0x2a3394: LoadField: r1 = r0->field_f
    //     0x2a3394: ldur            w1, [x0, #0xf]
    // 0x2a3398: DecompressPointer r1
    //     0x2a3398: add             x1, x1, HEAP, lsl #32
    // 0x2a339c: r16 = true
    //     0x2a339c: add             x16, NULL, #0x20  ; true
    // 0x2a33a0: stp             x16, x1, [SP]
    // 0x2a33a4: r4 = const [0, 0x2, 0x2, 0x1, force, 0x1, null]
    //     0x2a33a4: add             x4, PP, #0x11, lsl #12  ; [pp+0x11208] List(7) [0, 0x2, 0x2, 0x1, "force", 0x1, Null]
    //     0x2a33a8: ldr             x4, [x4, #0x208]
    // 0x2a33ac: r0 = _updateSelectionRects()
    //     0x2a33ac: bl              #0x244c68  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelectionRects
    // 0x2a33b0: r0 = Null
    //     0x2a33b0: mov             x0, NULL
    // 0x2a33b4: LeaveFrame
    //     0x2a33b4: mov             SP, fp
    //     0x2a33b8: ldp             fp, lr, [SP], #0x10
    // 0x2a33bc: ret
    //     0x2a33bc: ret             
    // 0x2a33c0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a33c0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a33c4: b               #0x2a3380
  }
  Map<Type, Action<Intent>> _actions(EditableTextState) {
    // ** addr: 0x2a33c8, size: 0x16d8
    // 0x2a33c8: EnterFrame
    //     0x2a33c8: stp             fp, lr, [SP, #-0x10]!
    //     0x2a33cc: mov             fp, SP
    // 0x2a33d0: AllocStack(0x58)
    //     0x2a33d0: sub             SP, SP, #0x58
    // 0x2a33d4: CheckStackOverflow
    //     0x2a33d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a33d8: cmp             SP, x16
    //     0x2a33dc: b.ls            #0x2a4a98
    // 0x2a33e0: r1 = 1
    //     0x2a33e0: movz            x1, #0x1
    // 0x2a33e4: r0 = AllocateContext()
    //     0x2a33e4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2a33e8: mov             x3, x0
    // 0x2a33ec: ldr             x0, [fp, #0x10]
    // 0x2a33f0: stur            x3, [fp, #-8]
    // 0x2a33f4: StoreField: r3->field_f = r0
    //     0x2a33f4: stur            w0, [x3, #0xf]
    // 0x2a33f8: r1 = Null
    //     0x2a33f8: mov             x1, NULL
    // 0x2a33fc: r2 = 104
    //     0x2a33fc: movz            x2, #0x68
    // 0x2a3400: r0 = AllocateArray()
    //     0x2a3400: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2a3404: stur            x0, [fp, #-0x10]
    // 0x2a3408: r17 = DoNothingAndStopPropagationTextIntent
    //     0x2a3408: add             x17, PP, #0x11, lsl #12  ; [pp+0x11220] Type: DoNothingAndStopPropagationTextIntent
    //     0x2a340c: ldr             x17, [x17, #0x220]
    // 0x2a3410: StoreField: r0->field_f = r17
    //     0x2a3410: stur            w17, [x0, #0xf]
    // 0x2a3414: r1 = <Intent>
    //     0x2a3414: ldr             x1, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3418: r0 = DoNothingAction()
    //     0x2a3418: bl              #0x29e71c  ; AllocateDoNothingActionStub -> DoNothingAction (size=0x18)
    // 0x2a341c: mov             x2, x0
    // 0x2a3420: r0 = false
    //     0x2a3420: add             x0, NULL, #0x30  ; false
    // 0x2a3424: stur            x2, [fp, #-0x18]
    // 0x2a3428: StoreField: r2->field_13 = r0
    //     0x2a3428: stur            w0, [x2, #0x13]
    // 0x2a342c: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a342c: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3430: ldr             x1, [x1, #0xb18]
    // 0x2a3434: r0 = ObserverList()
    //     0x2a3434: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a3438: mov             x1, x0
    // 0x2a343c: r0 = false
    //     0x2a343c: add             x0, NULL, #0x30  ; false
    // 0x2a3440: stur            x1, [fp, #-0x20]
    // 0x2a3444: StoreField: r1->field_f = r0
    //     0x2a3444: stur            w0, [x1, #0xf]
    // 0x2a3448: r2 = Sentinel
    //     0x2a3448: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a344c: StoreField: r1->field_13 = r2
    //     0x2a344c: stur            w2, [x1, #0x13]
    // 0x2a3450: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a3450: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3454: ldr             x16, [x16, #0xb18]
    // 0x2a3458: stp             xzr, x16, [SP]
    // 0x2a345c: r0 = _GrowableList()
    //     0x2a345c: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a3460: ldur            x1, [fp, #-0x20]
    // 0x2a3464: StoreField: r1->field_b = r0
    //     0x2a3464: stur            w0, [x1, #0xb]
    //     0x2a3468: ldurb           w16, [x1, #-1]
    //     0x2a346c: ldurb           w17, [x0, #-1]
    //     0x2a3470: and             x16, x17, x16, lsr #2
    //     0x2a3474: tst             x16, HEAP, lsr #32
    //     0x2a3478: b.eq            #0x2a3480
    //     0x2a347c: bl              #0x3e4608
    // 0x2a3480: mov             x0, x1
    // 0x2a3484: ldur            x1, [fp, #-0x18]
    // 0x2a3488: StoreField: r1->field_b = r0
    //     0x2a3488: stur            w0, [x1, #0xb]
    //     0x2a348c: ldurb           w16, [x1, #-1]
    //     0x2a3490: ldurb           w17, [x0, #-1]
    //     0x2a3494: and             x16, x17, x16, lsr #2
    //     0x2a3498: tst             x16, HEAP, lsr #32
    //     0x2a349c: b.eq            #0x2a34a4
    //     0x2a34a0: bl              #0x3e4608
    // 0x2a34a4: mov             x0, x1
    // 0x2a34a8: ldur            x1, [fp, #-0x10]
    // 0x2a34ac: ArrayStore: r1[1] = r0  ; List_4
    //     0x2a34ac: add             x25, x1, #0x13
    //     0x2a34b0: str             w0, [x25]
    //     0x2a34b4: tbz             w0, #0, #0x2a34d0
    //     0x2a34b8: ldurb           w16, [x1, #-1]
    //     0x2a34bc: ldurb           w17, [x0, #-1]
    //     0x2a34c0: and             x16, x17, x16, lsr #2
    //     0x2a34c4: tst             x16, HEAP, lsr #32
    //     0x2a34c8: b.eq            #0x2a34d0
    //     0x2a34cc: bl              #0x3e41ec
    // 0x2a34d0: ldur            x0, [fp, #-0x10]
    // 0x2a34d4: r17 = ReplaceTextIntent
    //     0x2a34d4: add             x17, PP, #0x11, lsl #12  ; [pp+0x11228] Type: ReplaceTextIntent
    //     0x2a34d8: ldr             x17, [x17, #0x228]
    // 0x2a34dc: StoreField: r0->field_17 = r17
    //     0x2a34dc: stur            w17, [x0, #0x17]
    // 0x2a34e0: ldr             x1, [fp, #0x10]
    // 0x2a34e4: LoadField: r0 = r1->field_bf
    //     0x2a34e4: ldur            w0, [x1, #0xbf]
    // 0x2a34e8: DecompressPointer r0
    //     0x2a34e8: add             x0, x0, HEAP, lsl #32
    // 0x2a34ec: r16 = Sentinel
    //     0x2a34ec: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a34f0: cmp             w0, w16
    // 0x2a34f4: b.ne            #0x2a3504
    // 0x2a34f8: r2 = _replaceTextAction
    //     0x2a34f8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11230] Field <EditableTextState._replaceTextAction@148183791>: late final (offset: 0xc0)
    //     0x2a34fc: ldr             x2, [x2, #0x230]
    // 0x2a3500: r0 = InitLateFinalInstanceField()
    //     0x2a3500: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2a3504: ldur            x1, [fp, #-0x10]
    // 0x2a3508: ArrayStore: r1[3] = r0  ; List_4
    //     0x2a3508: add             x25, x1, #0x1b
    //     0x2a350c: str             w0, [x25]
    //     0x2a3510: tbz             w0, #0, #0x2a352c
    //     0x2a3514: ldurb           w16, [x1, #-1]
    //     0x2a3518: ldurb           w17, [x0, #-1]
    //     0x2a351c: and             x16, x17, x16, lsr #2
    //     0x2a3520: tst             x16, HEAP, lsr #32
    //     0x2a3524: b.eq            #0x2a352c
    //     0x2a3528: bl              #0x3e41ec
    // 0x2a352c: ldur            x0, [fp, #-0x10]
    // 0x2a3530: r17 = UpdateSelectionIntent
    //     0x2a3530: add             x17, PP, #0x11, lsl #12  ; [pp+0x11238] Type: UpdateSelectionIntent
    //     0x2a3534: ldr             x17, [x17, #0x238]
    // 0x2a3538: StoreField: r0->field_1f = r17
    //     0x2a3538: stur            w17, [x0, #0x1f]
    // 0x2a353c: ldr             x1, [fp, #0x10]
    // 0x2a3540: LoadField: r0 = r1->field_c3
    //     0x2a3540: ldur            w0, [x1, #0xc3]
    // 0x2a3544: DecompressPointer r0
    //     0x2a3544: add             x0, x0, HEAP, lsl #32
    // 0x2a3548: r16 = Sentinel
    //     0x2a3548: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a354c: cmp             w0, w16
    // 0x2a3550: b.ne            #0x2a3560
    // 0x2a3554: r2 = _updateSelectionAction
    //     0x2a3554: add             x2, PP, #0x11, lsl #12  ; [pp+0x11240] Field <EditableTextState._updateSelectionAction@148183791>: late final (offset: 0xc4)
    //     0x2a3558: ldr             x2, [x2, #0x240]
    // 0x2a355c: r0 = InitLateFinalInstanceField()
    //     0x2a355c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2a3560: ldur            x1, [fp, #-0x10]
    // 0x2a3564: ArrayStore: r1[5] = r0  ; List_4
    //     0x2a3564: add             x25, x1, #0x23
    //     0x2a3568: str             w0, [x25]
    //     0x2a356c: tbz             w0, #0, #0x2a3588
    //     0x2a3570: ldurb           w16, [x1, #-1]
    //     0x2a3574: ldurb           w17, [x0, #-1]
    //     0x2a3578: and             x16, x17, x16, lsr #2
    //     0x2a357c: tst             x16, HEAP, lsr #32
    //     0x2a3580: b.eq            #0x2a3588
    //     0x2a3584: bl              #0x3e41ec
    // 0x2a3588: ldur            x0, [fp, #-0x10]
    // 0x2a358c: r17 = DirectionalFocusIntent
    //     0x2a358c: add             x17, PP, #0xd, lsl #12  ; [pp+0xdc00] Type: DirectionalFocusIntent
    //     0x2a3590: ldr             x17, [x17, #0xc00]
    // 0x2a3594: StoreField: r0->field_27 = r17
    //     0x2a3594: stur            w17, [x0, #0x27]
    // 0x2a3598: r1 = <DirectionalFocusIntent>
    //     0x2a3598: add             x1, PP, #0xd, lsl #12  ; [pp+0xdc08] TypeArguments: <DirectionalFocusIntent>
    //     0x2a359c: ldr             x1, [x1, #0xc08]
    // 0x2a35a0: r0 = DirectionalFocusAction()
    //     0x2a35a0: bl              #0x29e6ec  ; AllocateDirectionalFocusActionStub -> DirectionalFocusAction (size=0x18)
    // 0x2a35a4: mov             x2, x0
    // 0x2a35a8: r0 = true
    //     0x2a35a8: add             x0, NULL, #0x20  ; true
    // 0x2a35ac: stur            x2, [fp, #-0x18]
    // 0x2a35b0: StoreField: r2->field_13 = r0
    //     0x2a35b0: stur            w0, [x2, #0x13]
    // 0x2a35b4: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a35b4: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a35b8: ldr             x1, [x1, #0xb18]
    // 0x2a35bc: r0 = ObserverList()
    //     0x2a35bc: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a35c0: mov             x1, x0
    // 0x2a35c4: r0 = false
    //     0x2a35c4: add             x0, NULL, #0x30  ; false
    // 0x2a35c8: stur            x1, [fp, #-0x20]
    // 0x2a35cc: StoreField: r1->field_f = r0
    //     0x2a35cc: stur            w0, [x1, #0xf]
    // 0x2a35d0: r2 = Sentinel
    //     0x2a35d0: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a35d4: StoreField: r1->field_13 = r2
    //     0x2a35d4: stur            w2, [x1, #0x13]
    // 0x2a35d8: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a35d8: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a35dc: ldr             x16, [x16, #0xb18]
    // 0x2a35e0: stp             xzr, x16, [SP]
    // 0x2a35e4: r0 = _GrowableList()
    //     0x2a35e4: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a35e8: ldur            x1, [fp, #-0x20]
    // 0x2a35ec: StoreField: r1->field_b = r0
    //     0x2a35ec: stur            w0, [x1, #0xb]
    //     0x2a35f0: ldurb           w16, [x1, #-1]
    //     0x2a35f4: ldurb           w17, [x0, #-1]
    //     0x2a35f8: and             x16, x17, x16, lsr #2
    //     0x2a35fc: tst             x16, HEAP, lsr #32
    //     0x2a3600: b.eq            #0x2a3608
    //     0x2a3604: bl              #0x3e4608
    // 0x2a3608: mov             x0, x1
    // 0x2a360c: ldur            x1, [fp, #-0x18]
    // 0x2a3610: StoreField: r1->field_b = r0
    //     0x2a3610: stur            w0, [x1, #0xb]
    //     0x2a3614: ldurb           w16, [x1, #-1]
    //     0x2a3618: ldurb           w17, [x0, #-1]
    //     0x2a361c: and             x16, x17, x16, lsr #2
    //     0x2a3620: tst             x16, HEAP, lsr #32
    //     0x2a3624: b.eq            #0x2a362c
    //     0x2a3628: bl              #0x3e4608
    // 0x2a362c: mov             x0, x1
    // 0x2a3630: ldur            x1, [fp, #-0x10]
    // 0x2a3634: ArrayStore: r1[7] = r0  ; List_4
    //     0x2a3634: add             x25, x1, #0x2b
    //     0x2a3638: str             w0, [x25]
    //     0x2a363c: tbz             w0, #0, #0x2a3658
    //     0x2a3640: ldurb           w16, [x1, #-1]
    //     0x2a3644: ldurb           w17, [x0, #-1]
    //     0x2a3648: and             x16, x17, x16, lsr #2
    //     0x2a364c: tst             x16, HEAP, lsr #32
    //     0x2a3650: b.eq            #0x2a3658
    //     0x2a3654: bl              #0x3e41ec
    // 0x2a3658: ldur            x1, [fp, #-0x10]
    // 0x2a365c: r17 = DismissIntent
    //     0x2a365c: add             x17, PP, #0xe, lsl #12  ; [pp+0xe238] Type: DismissIntent
    //     0x2a3660: ldr             x17, [x17, #0x238]
    // 0x2a3664: StoreField: r1->field_2f = r17
    //     0x2a3664: stur            w17, [x1, #0x2f]
    // 0x2a3668: ldr             x2, [fp, #0x10]
    // 0x2a366c: r0 = 59
    //     0x2a366c: movz            x0, #0x3b
    // 0x2a3670: branchIfSmi(r2, 0x2a367c)
    //     0x2a3670: tbz             w2, #0, #0x2a367c
    // 0x2a3674: r0 = LoadClassIdInstr(r2)
    //     0x2a3674: ldur            x0, [x2, #-1]
    //     0x2a3678: ubfx            x0, x0, #0xc, #0x14
    // 0x2a367c: str             x2, [SP]
    // 0x2a3680: r0 = GDT[cid_x0 + -0xf6b]()
    //     0x2a3680: sub             lr, x0, #0xf6b
    //     0x2a3684: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3688: blr             lr
    // 0x2a368c: r1 = <DismissIntent>
    //     0x2a368c: add             x1, PP, #0xe, lsl #12  ; [pp+0xe240] TypeArguments: <DismissIntent>
    //     0x2a3690: ldr             x1, [x1, #0x240]
    // 0x2a3694: stur            x0, [fp, #-0x18]
    // 0x2a3698: r0 = CallbackAction()
    //     0x2a3698: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a369c: mov             x2, x0
    // 0x2a36a0: ldur            x0, [fp, #-0x18]
    // 0x2a36a4: stur            x2, [fp, #-0x20]
    // 0x2a36a8: StoreField: r2->field_13 = r0
    //     0x2a36a8: stur            w0, [x2, #0x13]
    // 0x2a36ac: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a36ac: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a36b0: ldr             x1, [x1, #0xb18]
    // 0x2a36b4: r0 = ObserverList()
    //     0x2a36b4: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a36b8: mov             x1, x0
    // 0x2a36bc: r0 = false
    //     0x2a36bc: add             x0, NULL, #0x30  ; false
    // 0x2a36c0: stur            x1, [fp, #-0x18]
    // 0x2a36c4: StoreField: r1->field_f = r0
    //     0x2a36c4: stur            w0, [x1, #0xf]
    // 0x2a36c8: r2 = Sentinel
    //     0x2a36c8: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a36cc: StoreField: r1->field_13 = r2
    //     0x2a36cc: stur            w2, [x1, #0x13]
    // 0x2a36d0: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a36d0: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a36d4: ldr             x16, [x16, #0xb18]
    // 0x2a36d8: stp             xzr, x16, [SP]
    // 0x2a36dc: r0 = _GrowableList()
    //     0x2a36dc: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a36e0: ldur            x1, [fp, #-0x18]
    // 0x2a36e4: StoreField: r1->field_b = r0
    //     0x2a36e4: stur            w0, [x1, #0xb]
    //     0x2a36e8: ldurb           w16, [x1, #-1]
    //     0x2a36ec: ldurb           w17, [x0, #-1]
    //     0x2a36f0: and             x16, x17, x16, lsr #2
    //     0x2a36f4: tst             x16, HEAP, lsr #32
    //     0x2a36f8: b.eq            #0x2a3700
    //     0x2a36fc: bl              #0x3e4608
    // 0x2a3700: mov             x0, x1
    // 0x2a3704: ldur            x1, [fp, #-0x20]
    // 0x2a3708: StoreField: r1->field_b = r0
    //     0x2a3708: stur            w0, [x1, #0xb]
    //     0x2a370c: ldurb           w16, [x1, #-1]
    //     0x2a3710: ldurb           w17, [x0, #-1]
    //     0x2a3714: and             x16, x17, x16, lsr #2
    //     0x2a3718: tst             x16, HEAP, lsr #32
    //     0x2a371c: b.eq            #0x2a3724
    //     0x2a3720: bl              #0x3e4608
    // 0x2a3724: mov             x0, x1
    // 0x2a3728: ldur            x1, [fp, #-0x10]
    // 0x2a372c: ArrayStore: r1[9] = r0  ; List_4
    //     0x2a372c: add             x25, x1, #0x33
    //     0x2a3730: str             w0, [x25]
    //     0x2a3734: tbz             w0, #0, #0x2a3750
    //     0x2a3738: ldurb           w16, [x1, #-1]
    //     0x2a373c: ldurb           w17, [x0, #-1]
    //     0x2a3740: and             x16, x17, x16, lsr #2
    //     0x2a3744: tst             x16, HEAP, lsr #32
    //     0x2a3748: b.eq            #0x2a3750
    //     0x2a374c: bl              #0x3e41ec
    // 0x2a3750: ldur            x1, [fp, #-0x10]
    // 0x2a3754: r17 = DeleteCharacterIntent
    //     0x2a3754: add             x17, PP, #0x11, lsl #12  ; [pp+0x11248] Type: DeleteCharacterIntent
    //     0x2a3758: ldr             x17, [x17, #0x248]
    // 0x2a375c: StoreField: r1->field_37 = r17
    //     0x2a375c: stur            w17, [x1, #0x37]
    // 0x2a3760: ldr             x2, [fp, #0x10]
    // 0x2a3764: r0 = 59
    //     0x2a3764: movz            x0, #0x3b
    // 0x2a3768: branchIfSmi(r2, 0x2a3774)
    //     0x2a3768: tbz             w2, #0, #0x2a3774
    // 0x2a376c: r0 = LoadClassIdInstr(r2)
    //     0x2a376c: ldur            x0, [x2, #-1]
    //     0x2a3770: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3774: str             x2, [SP]
    // 0x2a3778: r0 = GDT[cid_x0 + -0xff4]()
    //     0x2a3778: sub             lr, x0, #0xff4
    //     0x2a377c: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3780: blr             lr
    // 0x2a3784: mov             x2, x0
    // 0x2a3788: ldr             x1, [fp, #0x10]
    // 0x2a378c: stur            x2, [fp, #-0x18]
    // 0x2a3790: r0 = 59
    //     0x2a3790: movz            x0, #0x3b
    // 0x2a3794: branchIfSmi(r1, 0x2a37a0)
    //     0x2a3794: tbz             w1, #0, #0x2a37a0
    // 0x2a3798: r0 = LoadClassIdInstr(r1)
    //     0x2a3798: ldur            x0, [x1, #-1]
    //     0x2a379c: ubfx            x0, x0, #0xc, #0x14
    // 0x2a37a0: str             x1, [SP]
    // 0x2a37a4: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a37a4: sub             lr, x0, #1, lsl #12
    //     0x2a37a8: ldr             lr, [x21, lr, lsl #3]
    //     0x2a37ac: blr             lr
    // 0x2a37b0: r1 = <DeleteCharacterIntent>
    //     0x2a37b0: add             x1, PP, #0x11, lsl #12  ; [pp+0x11250] TypeArguments: <DeleteCharacterIntent>
    //     0x2a37b4: ldr             x1, [x1, #0x250]
    // 0x2a37b8: stur            x0, [fp, #-0x20]
    // 0x2a37bc: r0 = _DeleteTextAction()
    //     0x2a37bc: bl              #0x2a4d2c  ; Allocate_DeleteTextActionStub -> _DeleteTextAction<X0 bound DirectionalTextEditingIntent> (size=0x20)
    // 0x2a37c0: mov             x2, x0
    // 0x2a37c4: ldr             x0, [fp, #0x10]
    // 0x2a37c8: stur            x2, [fp, #-0x28]
    // 0x2a37cc: StoreField: r2->field_13 = r0
    //     0x2a37cc: stur            w0, [x2, #0x13]
    // 0x2a37d0: ldur            x1, [fp, #-0x18]
    // 0x2a37d4: StoreField: r2->field_17 = r1
    //     0x2a37d4: stur            w1, [x2, #0x17]
    // 0x2a37d8: ldur            x1, [fp, #-0x20]
    // 0x2a37dc: StoreField: r2->field_1b = r1
    //     0x2a37dc: stur            w1, [x2, #0x1b]
    // 0x2a37e0: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a37e0: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a37e4: ldr             x1, [x1, #0xb18]
    // 0x2a37e8: r0 = ObserverList()
    //     0x2a37e8: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a37ec: mov             x1, x0
    // 0x2a37f0: r0 = false
    //     0x2a37f0: add             x0, NULL, #0x30  ; false
    // 0x2a37f4: stur            x1, [fp, #-0x18]
    // 0x2a37f8: StoreField: r1->field_f = r0
    //     0x2a37f8: stur            w0, [x1, #0xf]
    // 0x2a37fc: r2 = Sentinel
    //     0x2a37fc: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a3800: StoreField: r1->field_13 = r2
    //     0x2a3800: stur            w2, [x1, #0x13]
    // 0x2a3804: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a3804: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3808: ldr             x16, [x16, #0xb18]
    // 0x2a380c: stp             xzr, x16, [SP]
    // 0x2a3810: r0 = _GrowableList()
    //     0x2a3810: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a3814: ldur            x1, [fp, #-0x18]
    // 0x2a3818: StoreField: r1->field_b = r0
    //     0x2a3818: stur            w0, [x1, #0xb]
    //     0x2a381c: ldurb           w16, [x1, #-1]
    //     0x2a3820: ldurb           w17, [x0, #-1]
    //     0x2a3824: and             x16, x17, x16, lsr #2
    //     0x2a3828: tst             x16, HEAP, lsr #32
    //     0x2a382c: b.eq            #0x2a3834
    //     0x2a3830: bl              #0x3e4608
    // 0x2a3834: mov             x0, x1
    // 0x2a3838: ldur            x1, [fp, #-0x28]
    // 0x2a383c: StoreField: r1->field_b = r0
    //     0x2a383c: stur            w0, [x1, #0xb]
    //     0x2a3840: ldurb           w16, [x1, #-1]
    //     0x2a3844: ldurb           w17, [x0, #-1]
    //     0x2a3848: and             x16, x17, x16, lsr #2
    //     0x2a384c: tst             x16, HEAP, lsr #32
    //     0x2a3850: b.eq            #0x2a3858
    //     0x2a3854: bl              #0x3e4608
    // 0x2a3858: r16 = <Intent>
    //     0x2a3858: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a385c: ldr             lr, [fp, #0x10]
    // 0x2a3860: stp             lr, x16, [SP, #8]
    // 0x2a3864: str             x1, [SP]
    // 0x2a3868: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3868: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a386c: r0 = _makeOverridable()
    //     0x2a386c: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3870: ldur            x1, [fp, #-0x10]
    // 0x2a3874: ArrayStore: r1[11] = r0  ; List_4
    //     0x2a3874: add             x25, x1, #0x3b
    //     0x2a3878: str             w0, [x25]
    //     0x2a387c: tbz             w0, #0, #0x2a3898
    //     0x2a3880: ldurb           w16, [x1, #-1]
    //     0x2a3884: ldurb           w17, [x0, #-1]
    //     0x2a3888: and             x16, x17, x16, lsr #2
    //     0x2a388c: tst             x16, HEAP, lsr #32
    //     0x2a3890: b.eq            #0x2a3898
    //     0x2a3894: bl              #0x3e41ec
    // 0x2a3898: ldur            x1, [fp, #-0x10]
    // 0x2a389c: r17 = DeleteToNextWordBoundaryIntent
    //     0x2a389c: add             x17, PP, #0x11, lsl #12  ; [pp+0x11258] Type: DeleteToNextWordBoundaryIntent
    //     0x2a38a0: ldr             x17, [x17, #0x258]
    // 0x2a38a4: StoreField: r1->field_3f = r17
    //     0x2a38a4: stur            w17, [x1, #0x3f]
    // 0x2a38a8: ldr             x2, [fp, #0x10]
    // 0x2a38ac: r0 = 59
    //     0x2a38ac: movz            x0, #0x3b
    // 0x2a38b0: branchIfSmi(r2, 0x2a38bc)
    //     0x2a38b0: tbz             w2, #0, #0x2a38bc
    // 0x2a38b4: r0 = LoadClassIdInstr(r2)
    //     0x2a38b4: ldur            x0, [x2, #-1]
    //     0x2a38b8: ubfx            x0, x0, #0xc, #0x14
    // 0x2a38bc: str             x2, [SP]
    // 0x2a38c0: r0 = GDT[cid_x0 + -0xffa]()
    //     0x2a38c0: sub             lr, x0, #0xffa
    //     0x2a38c4: ldr             lr, [x21, lr, lsl #3]
    //     0x2a38c8: blr             lr
    // 0x2a38cc: mov             x2, x0
    // 0x2a38d0: ldr             x1, [fp, #0x10]
    // 0x2a38d4: stur            x2, [fp, #-0x18]
    // 0x2a38d8: r0 = 59
    //     0x2a38d8: movz            x0, #0x3b
    // 0x2a38dc: branchIfSmi(r1, 0x2a38e8)
    //     0x2a38dc: tbz             w1, #0, #0x2a38e8
    // 0x2a38e0: r0 = LoadClassIdInstr(r1)
    //     0x2a38e0: ldur            x0, [x1, #-1]
    //     0x2a38e4: ubfx            x0, x0, #0xc, #0x14
    // 0x2a38e8: str             x1, [SP]
    // 0x2a38ec: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a38ec: sub             lr, x0, #1, lsl #12
    //     0x2a38f0: ldr             lr, [x21, lr, lsl #3]
    //     0x2a38f4: blr             lr
    // 0x2a38f8: r1 = <DeleteToNextWordBoundaryIntent>
    //     0x2a38f8: add             x1, PP, #0x11, lsl #12  ; [pp+0x11260] TypeArguments: <DeleteToNextWordBoundaryIntent>
    //     0x2a38fc: ldr             x1, [x1, #0x260]
    // 0x2a3900: stur            x0, [fp, #-0x20]
    // 0x2a3904: r0 = _DeleteTextAction()
    //     0x2a3904: bl              #0x2a4d2c  ; Allocate_DeleteTextActionStub -> _DeleteTextAction<X0 bound DirectionalTextEditingIntent> (size=0x20)
    // 0x2a3908: mov             x2, x0
    // 0x2a390c: ldr             x0, [fp, #0x10]
    // 0x2a3910: stur            x2, [fp, #-0x28]
    // 0x2a3914: StoreField: r2->field_13 = r0
    //     0x2a3914: stur            w0, [x2, #0x13]
    // 0x2a3918: ldur            x1, [fp, #-0x18]
    // 0x2a391c: StoreField: r2->field_17 = r1
    //     0x2a391c: stur            w1, [x2, #0x17]
    // 0x2a3920: ldur            x1, [fp, #-0x20]
    // 0x2a3924: StoreField: r2->field_1b = r1
    //     0x2a3924: stur            w1, [x2, #0x1b]
    // 0x2a3928: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a3928: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a392c: ldr             x1, [x1, #0xb18]
    // 0x2a3930: r0 = ObserverList()
    //     0x2a3930: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a3934: mov             x1, x0
    // 0x2a3938: r0 = false
    //     0x2a3938: add             x0, NULL, #0x30  ; false
    // 0x2a393c: stur            x1, [fp, #-0x18]
    // 0x2a3940: StoreField: r1->field_f = r0
    //     0x2a3940: stur            w0, [x1, #0xf]
    // 0x2a3944: r2 = Sentinel
    //     0x2a3944: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a3948: StoreField: r1->field_13 = r2
    //     0x2a3948: stur            w2, [x1, #0x13]
    // 0x2a394c: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a394c: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3950: ldr             x16, [x16, #0xb18]
    // 0x2a3954: stp             xzr, x16, [SP]
    // 0x2a3958: r0 = _GrowableList()
    //     0x2a3958: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a395c: ldur            x1, [fp, #-0x18]
    // 0x2a3960: StoreField: r1->field_b = r0
    //     0x2a3960: stur            w0, [x1, #0xb]
    //     0x2a3964: ldurb           w16, [x1, #-1]
    //     0x2a3968: ldurb           w17, [x0, #-1]
    //     0x2a396c: and             x16, x17, x16, lsr #2
    //     0x2a3970: tst             x16, HEAP, lsr #32
    //     0x2a3974: b.eq            #0x2a397c
    //     0x2a3978: bl              #0x3e4608
    // 0x2a397c: mov             x0, x1
    // 0x2a3980: ldur            x1, [fp, #-0x28]
    // 0x2a3984: StoreField: r1->field_b = r0
    //     0x2a3984: stur            w0, [x1, #0xb]
    //     0x2a3988: ldurb           w16, [x1, #-1]
    //     0x2a398c: ldurb           w17, [x0, #-1]
    //     0x2a3990: and             x16, x17, x16, lsr #2
    //     0x2a3994: tst             x16, HEAP, lsr #32
    //     0x2a3998: b.eq            #0x2a39a0
    //     0x2a399c: bl              #0x3e4608
    // 0x2a39a0: r16 = <Intent>
    //     0x2a39a0: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a39a4: ldr             lr, [fp, #0x10]
    // 0x2a39a8: stp             lr, x16, [SP, #8]
    // 0x2a39ac: str             x1, [SP]
    // 0x2a39b0: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a39b0: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a39b4: r0 = _makeOverridable()
    //     0x2a39b4: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a39b8: ldur            x1, [fp, #-0x10]
    // 0x2a39bc: ArrayStore: r1[13] = r0  ; List_4
    //     0x2a39bc: add             x25, x1, #0x43
    //     0x2a39c0: str             w0, [x25]
    //     0x2a39c4: tbz             w0, #0, #0x2a39e0
    //     0x2a39c8: ldurb           w16, [x1, #-1]
    //     0x2a39cc: ldurb           w17, [x0, #-1]
    //     0x2a39d0: and             x16, x17, x16, lsr #2
    //     0x2a39d4: tst             x16, HEAP, lsr #32
    //     0x2a39d8: b.eq            #0x2a39e0
    //     0x2a39dc: bl              #0x3e41ec
    // 0x2a39e0: ldur            x1, [fp, #-0x10]
    // 0x2a39e4: r17 = DeleteToLineBreakIntent
    //     0x2a39e4: add             x17, PP, #0x11, lsl #12  ; [pp+0x11268] Type: DeleteToLineBreakIntent
    //     0x2a39e8: ldr             x17, [x17, #0x268]
    // 0x2a39ec: StoreField: r1->field_47 = r17
    //     0x2a39ec: stur            w17, [x1, #0x47]
    // 0x2a39f0: ldr             x2, [fp, #0x10]
    // 0x2a39f4: r0 = 59
    //     0x2a39f4: movz            x0, #0x3b
    // 0x2a39f8: branchIfSmi(r2, 0x2a3a04)
    //     0x2a39f8: tbz             w2, #0, #0x2a3a04
    // 0x2a39fc: r0 = LoadClassIdInstr(r2)
    //     0x2a39fc: ldur            x0, [x2, #-1]
    //     0x2a3a00: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3a04: str             x2, [SP]
    // 0x2a3a08: r0 = GDT[cid_x0 + -0xffb]()
    //     0x2a3a08: sub             lr, x0, #0xffb
    //     0x2a3a0c: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3a10: blr             lr
    // 0x2a3a14: mov             x2, x0
    // 0x2a3a18: ldr             x1, [fp, #0x10]
    // 0x2a3a1c: stur            x2, [fp, #-0x18]
    // 0x2a3a20: r0 = 59
    //     0x2a3a20: movz            x0, #0x3b
    // 0x2a3a24: branchIfSmi(r1, 0x2a3a30)
    //     0x2a3a24: tbz             w1, #0, #0x2a3a30
    // 0x2a3a28: r0 = LoadClassIdInstr(r1)
    //     0x2a3a28: ldur            x0, [x1, #-1]
    //     0x2a3a2c: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3a30: str             x1, [SP]
    // 0x2a3a34: r0 = GDT[cid_x0 + -0xffd]()
    //     0x2a3a34: sub             lr, x0, #0xffd
    //     0x2a3a38: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3a3c: blr             lr
    // 0x2a3a40: r1 = <DeleteToLineBreakIntent>
    //     0x2a3a40: add             x1, PP, #0x11, lsl #12  ; [pp+0x11270] TypeArguments: <DeleteToLineBreakIntent>
    //     0x2a3a44: ldr             x1, [x1, #0x270]
    // 0x2a3a48: stur            x0, [fp, #-0x20]
    // 0x2a3a4c: r0 = _DeleteTextAction()
    //     0x2a3a4c: bl              #0x2a4d2c  ; Allocate_DeleteTextActionStub -> _DeleteTextAction<X0 bound DirectionalTextEditingIntent> (size=0x20)
    // 0x2a3a50: mov             x2, x0
    // 0x2a3a54: ldr             x0, [fp, #0x10]
    // 0x2a3a58: stur            x2, [fp, #-0x28]
    // 0x2a3a5c: StoreField: r2->field_13 = r0
    //     0x2a3a5c: stur            w0, [x2, #0x13]
    // 0x2a3a60: ldur            x1, [fp, #-0x18]
    // 0x2a3a64: StoreField: r2->field_17 = r1
    //     0x2a3a64: stur            w1, [x2, #0x17]
    // 0x2a3a68: ldur            x1, [fp, #-0x20]
    // 0x2a3a6c: StoreField: r2->field_1b = r1
    //     0x2a3a6c: stur            w1, [x2, #0x1b]
    // 0x2a3a70: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a3a70: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3a74: ldr             x1, [x1, #0xb18]
    // 0x2a3a78: r0 = ObserverList()
    //     0x2a3a78: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a3a7c: mov             x1, x0
    // 0x2a3a80: r0 = false
    //     0x2a3a80: add             x0, NULL, #0x30  ; false
    // 0x2a3a84: stur            x1, [fp, #-0x18]
    // 0x2a3a88: StoreField: r1->field_f = r0
    //     0x2a3a88: stur            w0, [x1, #0xf]
    // 0x2a3a8c: r2 = Sentinel
    //     0x2a3a8c: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a3a90: StoreField: r1->field_13 = r2
    //     0x2a3a90: stur            w2, [x1, #0x13]
    // 0x2a3a94: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a3a94: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3a98: ldr             x16, [x16, #0xb18]
    // 0x2a3a9c: stp             xzr, x16, [SP]
    // 0x2a3aa0: r0 = _GrowableList()
    //     0x2a3aa0: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a3aa4: ldur            x1, [fp, #-0x18]
    // 0x2a3aa8: StoreField: r1->field_b = r0
    //     0x2a3aa8: stur            w0, [x1, #0xb]
    //     0x2a3aac: ldurb           w16, [x1, #-1]
    //     0x2a3ab0: ldurb           w17, [x0, #-1]
    //     0x2a3ab4: and             x16, x17, x16, lsr #2
    //     0x2a3ab8: tst             x16, HEAP, lsr #32
    //     0x2a3abc: b.eq            #0x2a3ac4
    //     0x2a3ac0: bl              #0x3e4608
    // 0x2a3ac4: mov             x0, x1
    // 0x2a3ac8: ldur            x1, [fp, #-0x28]
    // 0x2a3acc: StoreField: r1->field_b = r0
    //     0x2a3acc: stur            w0, [x1, #0xb]
    //     0x2a3ad0: ldurb           w16, [x1, #-1]
    //     0x2a3ad4: ldurb           w17, [x0, #-1]
    //     0x2a3ad8: and             x16, x17, x16, lsr #2
    //     0x2a3adc: tst             x16, HEAP, lsr #32
    //     0x2a3ae0: b.eq            #0x2a3ae8
    //     0x2a3ae4: bl              #0x3e4608
    // 0x2a3ae8: r16 = <Intent>
    //     0x2a3ae8: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3aec: ldr             lr, [fp, #0x10]
    // 0x2a3af0: stp             lr, x16, [SP, #8]
    // 0x2a3af4: str             x1, [SP]
    // 0x2a3af8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3af8: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a3afc: r0 = _makeOverridable()
    //     0x2a3afc: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3b00: ldur            x1, [fp, #-0x10]
    // 0x2a3b04: ArrayStore: r1[15] = r0  ; List_4
    //     0x2a3b04: add             x25, x1, #0x4b
    //     0x2a3b08: str             w0, [x25]
    //     0x2a3b0c: tbz             w0, #0, #0x2a3b28
    //     0x2a3b10: ldurb           w16, [x1, #-1]
    //     0x2a3b14: ldurb           w17, [x0, #-1]
    //     0x2a3b18: and             x16, x17, x16, lsr #2
    //     0x2a3b1c: tst             x16, HEAP, lsr #32
    //     0x2a3b20: b.eq            #0x2a3b28
    //     0x2a3b24: bl              #0x3e41ec
    // 0x2a3b28: ldur            x1, [fp, #-0x10]
    // 0x2a3b2c: r17 = ExtendSelectionByCharacterIntent
    //     0x2a3b2c: add             x17, PP, #0x11, lsl #12  ; [pp+0x11278] Type: ExtendSelectionByCharacterIntent
    //     0x2a3b30: ldr             x17, [x17, #0x278]
    // 0x2a3b34: StoreField: r1->field_4f = r17
    //     0x2a3b34: stur            w17, [x1, #0x4f]
    // 0x2a3b38: ldr             x2, [fp, #0x10]
    // 0x2a3b3c: r0 = 59
    //     0x2a3b3c: movz            x0, #0x3b
    // 0x2a3b40: branchIfSmi(r2, 0x2a3b4c)
    //     0x2a3b40: tbz             w2, #0, #0x2a3b4c
    // 0x2a3b44: r0 = LoadClassIdInstr(r2)
    //     0x2a3b44: ldur            x0, [x2, #-1]
    //     0x2a3b48: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3b4c: str             x2, [SP]
    // 0x2a3b50: r0 = GDT[cid_x0 + -0xff4]()
    //     0x2a3b50: sub             lr, x0, #0xff4
    //     0x2a3b54: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3b58: blr             lr
    // 0x2a3b5c: mov             x2, x0
    // 0x2a3b60: ldr             x1, [fp, #0x10]
    // 0x2a3b64: stur            x2, [fp, #-0x18]
    // 0x2a3b68: r0 = 59
    //     0x2a3b68: movz            x0, #0x3b
    // 0x2a3b6c: branchIfSmi(r1, 0x2a3b78)
    //     0x2a3b6c: tbz             w1, #0, #0x2a3b78
    // 0x2a3b70: r0 = LoadClassIdInstr(r1)
    //     0x2a3b70: ldur            x0, [x1, #-1]
    //     0x2a3b74: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3b78: str             x1, [SP]
    // 0x2a3b7c: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a3b7c: sub             lr, x0, #1, lsl #12
    //     0x2a3b80: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3b84: blr             lr
    // 0x2a3b88: r1 = <ExtendSelectionByCharacterIntent>
    //     0x2a3b88: add             x1, PP, #0x11, lsl #12  ; [pp+0x11280] TypeArguments: <ExtendSelectionByCharacterIntent>
    //     0x2a3b8c: ldr             x1, [x1, #0x280]
    // 0x2a3b90: stur            x0, [fp, #-0x20]
    // 0x2a3b94: r0 = _UpdateTextSelectionAction()
    //     0x2a3b94: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a3b98: stur            x0, [fp, #-0x28]
    // 0x2a3b9c: ldr             x16, [fp, #0x10]
    // 0x2a3ba0: stp             x16, x0, [SP, #0x18]
    // 0x2a3ba4: ldur            x16, [fp, #-0x18]
    // 0x2a3ba8: ldur            lr, [fp, #-0x20]
    // 0x2a3bac: stp             lr, x16, [SP, #8]
    // 0x2a3bb0: r16 = false
    //     0x2a3bb0: add             x16, NULL, #0x30  ; false
    // 0x2a3bb4: str             x16, [SP]
    // 0x2a3bb8: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x2a3bb8: ldr             x4, [PP, #0x3d8]  ; [pp+0x3d8] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x2a3bbc: r0 = _UpdateTextSelectionAction()
    //     0x2a3bbc: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a3bc0: r16 = <Intent>
    //     0x2a3bc0: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3bc4: ldr             lr, [fp, #0x10]
    // 0x2a3bc8: stp             lr, x16, [SP, #8]
    // 0x2a3bcc: ldur            x16, [fp, #-0x28]
    // 0x2a3bd0: str             x16, [SP]
    // 0x2a3bd4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3bd4: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a3bd8: r0 = _makeOverridable()
    //     0x2a3bd8: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3bdc: ldur            x1, [fp, #-0x10]
    // 0x2a3be0: ArrayStore: r1[17] = r0  ; List_4
    //     0x2a3be0: add             x25, x1, #0x53
    //     0x2a3be4: str             w0, [x25]
    //     0x2a3be8: tbz             w0, #0, #0x2a3c04
    //     0x2a3bec: ldurb           w16, [x1, #-1]
    //     0x2a3bf0: ldurb           w17, [x0, #-1]
    //     0x2a3bf4: and             x16, x17, x16, lsr #2
    //     0x2a3bf8: tst             x16, HEAP, lsr #32
    //     0x2a3bfc: b.eq            #0x2a3c04
    //     0x2a3c00: bl              #0x3e41ec
    // 0x2a3c04: ldur            x1, [fp, #-0x10]
    // 0x2a3c08: r17 = ExtendSelectionByPageIntent
    //     0x2a3c08: add             x17, PP, #0x11, lsl #12  ; [pp+0x11288] Type: ExtendSelectionByPageIntent
    //     0x2a3c0c: ldr             x17, [x17, #0x288]
    // 0x2a3c10: StoreField: r1->field_57 = r17
    //     0x2a3c10: stur            w17, [x1, #0x57]
    // 0x2a3c14: ldr             x2, [fp, #0x10]
    // 0x2a3c18: r0 = 59
    //     0x2a3c18: movz            x0, #0x3b
    // 0x2a3c1c: branchIfSmi(r2, 0x2a3c28)
    //     0x2a3c1c: tbz             w2, #0, #0x2a3c28
    // 0x2a3c20: r0 = LoadClassIdInstr(r2)
    //     0x2a3c20: ldur            x0, [x2, #-1]
    //     0x2a3c24: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3c28: str             x2, [SP]
    // 0x2a3c2c: r0 = GDT[cid_x0 + -0xf6f]()
    //     0x2a3c2c: sub             lr, x0, #0xf6f
    //     0x2a3c30: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3c34: blr             lr
    // 0x2a3c38: r1 = <ExtendSelectionByPageIntent>
    //     0x2a3c38: add             x1, PP, #0x11, lsl #12  ; [pp+0x11290] TypeArguments: <ExtendSelectionByPageIntent>
    //     0x2a3c3c: ldr             x1, [x1, #0x290]
    // 0x2a3c40: stur            x0, [fp, #-0x18]
    // 0x2a3c44: r0 = CallbackAction()
    //     0x2a3c44: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a3c48: mov             x2, x0
    // 0x2a3c4c: ldur            x0, [fp, #-0x18]
    // 0x2a3c50: stur            x2, [fp, #-0x20]
    // 0x2a3c54: StoreField: r2->field_13 = r0
    //     0x2a3c54: stur            w0, [x2, #0x13]
    // 0x2a3c58: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a3c58: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3c5c: ldr             x1, [x1, #0xb18]
    // 0x2a3c60: r0 = ObserverList()
    //     0x2a3c60: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a3c64: mov             x1, x0
    // 0x2a3c68: r0 = false
    //     0x2a3c68: add             x0, NULL, #0x30  ; false
    // 0x2a3c6c: stur            x1, [fp, #-0x18]
    // 0x2a3c70: StoreField: r1->field_f = r0
    //     0x2a3c70: stur            w0, [x1, #0xf]
    // 0x2a3c74: r2 = Sentinel
    //     0x2a3c74: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a3c78: StoreField: r1->field_13 = r2
    //     0x2a3c78: stur            w2, [x1, #0x13]
    // 0x2a3c7c: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a3c7c: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a3c80: ldr             x16, [x16, #0xb18]
    // 0x2a3c84: stp             xzr, x16, [SP]
    // 0x2a3c88: r0 = _GrowableList()
    //     0x2a3c88: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a3c8c: ldur            x1, [fp, #-0x18]
    // 0x2a3c90: StoreField: r1->field_b = r0
    //     0x2a3c90: stur            w0, [x1, #0xb]
    //     0x2a3c94: ldurb           w16, [x1, #-1]
    //     0x2a3c98: ldurb           w17, [x0, #-1]
    //     0x2a3c9c: and             x16, x17, x16, lsr #2
    //     0x2a3ca0: tst             x16, HEAP, lsr #32
    //     0x2a3ca4: b.eq            #0x2a3cac
    //     0x2a3ca8: bl              #0x3e4608
    // 0x2a3cac: mov             x0, x1
    // 0x2a3cb0: ldur            x1, [fp, #-0x20]
    // 0x2a3cb4: StoreField: r1->field_b = r0
    //     0x2a3cb4: stur            w0, [x1, #0xb]
    //     0x2a3cb8: ldurb           w16, [x1, #-1]
    //     0x2a3cbc: ldurb           w17, [x0, #-1]
    //     0x2a3cc0: and             x16, x17, x16, lsr #2
    //     0x2a3cc4: tst             x16, HEAP, lsr #32
    //     0x2a3cc8: b.eq            #0x2a3cd0
    //     0x2a3ccc: bl              #0x3e4608
    // 0x2a3cd0: r16 = <Intent>
    //     0x2a3cd0: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3cd4: ldr             lr, [fp, #0x10]
    // 0x2a3cd8: stp             lr, x16, [SP, #8]
    // 0x2a3cdc: str             x1, [SP]
    // 0x2a3ce0: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3ce0: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a3ce4: r0 = _makeOverridable()
    //     0x2a3ce4: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3ce8: ldur            x1, [fp, #-0x10]
    // 0x2a3cec: ArrayStore: r1[19] = r0  ; List_4
    //     0x2a3cec: add             x25, x1, #0x5b
    //     0x2a3cf0: str             w0, [x25]
    //     0x2a3cf4: tbz             w0, #0, #0x2a3d10
    //     0x2a3cf8: ldurb           w16, [x1, #-1]
    //     0x2a3cfc: ldurb           w17, [x0, #-1]
    //     0x2a3d00: and             x16, x17, x16, lsr #2
    //     0x2a3d04: tst             x16, HEAP, lsr #32
    //     0x2a3d08: b.eq            #0x2a3d10
    //     0x2a3d0c: bl              #0x3e41ec
    // 0x2a3d10: ldur            x1, [fp, #-0x10]
    // 0x2a3d14: r17 = ExtendSelectionToNextWordBoundaryIntent
    //     0x2a3d14: add             x17, PP, #0x11, lsl #12  ; [pp+0x11298] Type: ExtendSelectionToNextWordBoundaryIntent
    //     0x2a3d18: ldr             x17, [x17, #0x298]
    // 0x2a3d1c: StoreField: r1->field_5f = r17
    //     0x2a3d1c: stur            w17, [x1, #0x5f]
    // 0x2a3d20: ldr             x2, [fp, #0x10]
    // 0x2a3d24: r0 = 59
    //     0x2a3d24: movz            x0, #0x3b
    // 0x2a3d28: branchIfSmi(r2, 0x2a3d34)
    //     0x2a3d28: tbz             w2, #0, #0x2a3d34
    // 0x2a3d2c: r0 = LoadClassIdInstr(r2)
    //     0x2a3d2c: ldur            x0, [x2, #-1]
    //     0x2a3d30: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3d34: str             x2, [SP]
    // 0x2a3d38: r0 = GDT[cid_x0 + -0xffa]()
    //     0x2a3d38: sub             lr, x0, #0xffa
    //     0x2a3d3c: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3d40: blr             lr
    // 0x2a3d44: mov             x2, x0
    // 0x2a3d48: ldr             x1, [fp, #0x10]
    // 0x2a3d4c: stur            x2, [fp, #-0x18]
    // 0x2a3d50: r0 = 59
    //     0x2a3d50: movz            x0, #0x3b
    // 0x2a3d54: branchIfSmi(r1, 0x2a3d60)
    //     0x2a3d54: tbz             w1, #0, #0x2a3d60
    // 0x2a3d58: r0 = LoadClassIdInstr(r1)
    //     0x2a3d58: ldur            x0, [x1, #-1]
    //     0x2a3d5c: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3d60: str             x1, [SP]
    // 0x2a3d64: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a3d64: sub             lr, x0, #1, lsl #12
    //     0x2a3d68: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3d6c: blr             lr
    // 0x2a3d70: r1 = <ExtendSelectionToNextWordBoundaryIntent>
    //     0x2a3d70: add             x1, PP, #0x11, lsl #12  ; [pp+0x112a0] TypeArguments: <ExtendSelectionToNextWordBoundaryIntent>
    //     0x2a3d74: ldr             x1, [x1, #0x2a0]
    // 0x2a3d78: stur            x0, [fp, #-0x20]
    // 0x2a3d7c: r0 = _UpdateTextSelectionAction()
    //     0x2a3d7c: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a3d80: stur            x0, [fp, #-0x28]
    // 0x2a3d84: ldr             x16, [fp, #0x10]
    // 0x2a3d88: stp             x16, x0, [SP, #0x18]
    // 0x2a3d8c: ldur            x16, [fp, #-0x18]
    // 0x2a3d90: ldur            lr, [fp, #-0x20]
    // 0x2a3d94: stp             lr, x16, [SP, #8]
    // 0x2a3d98: r16 = true
    //     0x2a3d98: add             x16, NULL, #0x20  ; true
    // 0x2a3d9c: str             x16, [SP]
    // 0x2a3da0: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x2a3da0: ldr             x4, [PP, #0x3d8]  ; [pp+0x3d8] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x2a3da4: r0 = _UpdateTextSelectionAction()
    //     0x2a3da4: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a3da8: r16 = <Intent>
    //     0x2a3da8: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3dac: ldr             lr, [fp, #0x10]
    // 0x2a3db0: stp             lr, x16, [SP, #8]
    // 0x2a3db4: ldur            x16, [fp, #-0x28]
    // 0x2a3db8: str             x16, [SP]
    // 0x2a3dbc: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3dbc: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a3dc0: r0 = _makeOverridable()
    //     0x2a3dc0: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3dc4: ldur            x1, [fp, #-0x10]
    // 0x2a3dc8: ArrayStore: r1[21] = r0  ; List_4
    //     0x2a3dc8: add             x25, x1, #0x63
    //     0x2a3dcc: str             w0, [x25]
    //     0x2a3dd0: tbz             w0, #0, #0x2a3dec
    //     0x2a3dd4: ldurb           w16, [x1, #-1]
    //     0x2a3dd8: ldurb           w17, [x0, #-1]
    //     0x2a3ddc: and             x16, x17, x16, lsr #2
    //     0x2a3de0: tst             x16, HEAP, lsr #32
    //     0x2a3de4: b.eq            #0x2a3dec
    //     0x2a3de8: bl              #0x3e41ec
    // 0x2a3dec: ldur            x1, [fp, #-0x10]
    // 0x2a3df0: r17 = ExtendSelectionToNextParagraphBoundaryIntent
    //     0x2a3df0: add             x17, PP, #0x11, lsl #12  ; [pp+0x112a8] Type: ExtendSelectionToNextParagraphBoundaryIntent
    //     0x2a3df4: ldr             x17, [x17, #0x2a8]
    // 0x2a3df8: StoreField: r1->field_67 = r17
    //     0x2a3df8: stur            w17, [x1, #0x67]
    // 0x2a3dfc: ldr             x2, [fp, #0x10]
    // 0x2a3e00: r0 = 59
    //     0x2a3e00: movz            x0, #0x3b
    // 0x2a3e04: branchIfSmi(r2, 0x2a3e10)
    //     0x2a3e04: tbz             w2, #0, #0x2a3e10
    // 0x2a3e08: r0 = LoadClassIdInstr(r2)
    //     0x2a3e08: ldur            x0, [x2, #-1]
    //     0x2a3e0c: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3e10: str             x2, [SP]
    // 0x2a3e14: r0 = GDT[cid_x0 + -0xfef]()
    //     0x2a3e14: sub             lr, x0, #0xfef
    //     0x2a3e18: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3e1c: blr             lr
    // 0x2a3e20: mov             x2, x0
    // 0x2a3e24: ldr             x1, [fp, #0x10]
    // 0x2a3e28: stur            x2, [fp, #-0x18]
    // 0x2a3e2c: r0 = 59
    //     0x2a3e2c: movz            x0, #0x3b
    // 0x2a3e30: branchIfSmi(r1, 0x2a3e3c)
    //     0x2a3e30: tbz             w1, #0, #0x2a3e3c
    // 0x2a3e34: r0 = LoadClassIdInstr(r1)
    //     0x2a3e34: ldur            x0, [x1, #-1]
    //     0x2a3e38: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3e3c: str             x1, [SP]
    // 0x2a3e40: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a3e40: sub             lr, x0, #1, lsl #12
    //     0x2a3e44: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3e48: blr             lr
    // 0x2a3e4c: r1 = <ExtendSelectionToNextParagraphBoundaryIntent>
    //     0x2a3e4c: add             x1, PP, #0x11, lsl #12  ; [pp+0x112b0] TypeArguments: <ExtendSelectionToNextParagraphBoundaryIntent>
    //     0x2a3e50: ldr             x1, [x1, #0x2b0]
    // 0x2a3e54: stur            x0, [fp, #-0x20]
    // 0x2a3e58: r0 = _UpdateTextSelectionAction()
    //     0x2a3e58: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a3e5c: stur            x0, [fp, #-0x28]
    // 0x2a3e60: ldr             x16, [fp, #0x10]
    // 0x2a3e64: stp             x16, x0, [SP, #0x18]
    // 0x2a3e68: ldur            x16, [fp, #-0x18]
    // 0x2a3e6c: ldur            lr, [fp, #-0x20]
    // 0x2a3e70: stp             lr, x16, [SP, #8]
    // 0x2a3e74: r16 = true
    //     0x2a3e74: add             x16, NULL, #0x20  ; true
    // 0x2a3e78: str             x16, [SP]
    // 0x2a3e7c: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x2a3e7c: ldr             x4, [PP, #0x3d8]  ; [pp+0x3d8] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x2a3e80: r0 = _UpdateTextSelectionAction()
    //     0x2a3e80: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a3e84: r16 = <Intent>
    //     0x2a3e84: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3e88: ldr             lr, [fp, #0x10]
    // 0x2a3e8c: stp             lr, x16, [SP, #8]
    // 0x2a3e90: ldur            x16, [fp, #-0x28]
    // 0x2a3e94: str             x16, [SP]
    // 0x2a3e98: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3e98: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a3e9c: r0 = _makeOverridable()
    //     0x2a3e9c: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3ea0: ldur            x1, [fp, #-0x10]
    // 0x2a3ea4: ArrayStore: r1[23] = r0  ; List_4
    //     0x2a3ea4: add             x25, x1, #0x6b
    //     0x2a3ea8: str             w0, [x25]
    //     0x2a3eac: tbz             w0, #0, #0x2a3ec8
    //     0x2a3eb0: ldurb           w16, [x1, #-1]
    //     0x2a3eb4: ldurb           w17, [x0, #-1]
    //     0x2a3eb8: and             x16, x17, x16, lsr #2
    //     0x2a3ebc: tst             x16, HEAP, lsr #32
    //     0x2a3ec0: b.eq            #0x2a3ec8
    //     0x2a3ec4: bl              #0x3e41ec
    // 0x2a3ec8: ldur            x1, [fp, #-0x10]
    // 0x2a3ecc: r17 = ExtendSelectionToLineBreakIntent
    //     0x2a3ecc: add             x17, PP, #0x11, lsl #12  ; [pp+0x112b8] Type: ExtendSelectionToLineBreakIntent
    //     0x2a3ed0: ldr             x17, [x17, #0x2b8]
    // 0x2a3ed4: StoreField: r1->field_6f = r17
    //     0x2a3ed4: stur            w17, [x1, #0x6f]
    // 0x2a3ed8: ldr             x2, [fp, #0x10]
    // 0x2a3edc: r0 = 59
    //     0x2a3edc: movz            x0, #0x3b
    // 0x2a3ee0: branchIfSmi(r2, 0x2a3eec)
    //     0x2a3ee0: tbz             w2, #0, #0x2a3eec
    // 0x2a3ee4: r0 = LoadClassIdInstr(r2)
    //     0x2a3ee4: ldur            x0, [x2, #-1]
    //     0x2a3ee8: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3eec: str             x2, [SP]
    // 0x2a3ef0: r0 = GDT[cid_x0 + -0xffb]()
    //     0x2a3ef0: sub             lr, x0, #0xffb
    //     0x2a3ef4: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3ef8: blr             lr
    // 0x2a3efc: mov             x2, x0
    // 0x2a3f00: ldr             x1, [fp, #0x10]
    // 0x2a3f04: stur            x2, [fp, #-0x18]
    // 0x2a3f08: r0 = 59
    //     0x2a3f08: movz            x0, #0x3b
    // 0x2a3f0c: branchIfSmi(r1, 0x2a3f18)
    //     0x2a3f0c: tbz             w1, #0, #0x2a3f18
    // 0x2a3f10: r0 = LoadClassIdInstr(r1)
    //     0x2a3f10: ldur            x0, [x1, #-1]
    //     0x2a3f14: ubfx            x0, x0, #0xc, #0x14
    // 0x2a3f18: str             x1, [SP]
    // 0x2a3f1c: r0 = GDT[cid_x0 + -0xffd]()
    //     0x2a3f1c: sub             lr, x0, #0xffd
    //     0x2a3f20: ldr             lr, [x21, lr, lsl #3]
    //     0x2a3f24: blr             lr
    // 0x2a3f28: r1 = <ExtendSelectionToLineBreakIntent>
    //     0x2a3f28: add             x1, PP, #0x11, lsl #12  ; [pp+0x112c0] TypeArguments: <ExtendSelectionToLineBreakIntent>
    //     0x2a3f2c: ldr             x1, [x1, #0x2c0]
    // 0x2a3f30: stur            x0, [fp, #-0x20]
    // 0x2a3f34: r0 = _UpdateTextSelectionAction()
    //     0x2a3f34: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a3f38: stur            x0, [fp, #-0x28]
    // 0x2a3f3c: ldr             x16, [fp, #0x10]
    // 0x2a3f40: stp             x16, x0, [SP, #0x18]
    // 0x2a3f44: ldur            x16, [fp, #-0x18]
    // 0x2a3f48: ldur            lr, [fp, #-0x20]
    // 0x2a3f4c: stp             lr, x16, [SP, #8]
    // 0x2a3f50: r16 = true
    //     0x2a3f50: add             x16, NULL, #0x20  ; true
    // 0x2a3f54: str             x16, [SP]
    // 0x2a3f58: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x2a3f58: ldr             x4, [PP, #0x3d8]  ; [pp+0x3d8] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x2a3f5c: r0 = _UpdateTextSelectionAction()
    //     0x2a3f5c: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a3f60: r16 = <Intent>
    //     0x2a3f60: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3f64: ldr             lr, [fp, #0x10]
    // 0x2a3f68: stp             lr, x16, [SP, #8]
    // 0x2a3f6c: ldur            x16, [fp, #-0x28]
    // 0x2a3f70: str             x16, [SP]
    // 0x2a3f74: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3f74: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a3f78: r0 = _makeOverridable()
    //     0x2a3f78: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3f7c: ldur            x1, [fp, #-0x10]
    // 0x2a3f80: ArrayStore: r1[25] = r0  ; List_4
    //     0x2a3f80: add             x25, x1, #0x73
    //     0x2a3f84: str             w0, [x25]
    //     0x2a3f88: tbz             w0, #0, #0x2a3fa4
    //     0x2a3f8c: ldurb           w16, [x1, #-1]
    //     0x2a3f90: ldurb           w17, [x0, #-1]
    //     0x2a3f94: and             x16, x17, x16, lsr #2
    //     0x2a3f98: tst             x16, HEAP, lsr #32
    //     0x2a3f9c: b.eq            #0x2a3fa4
    //     0x2a3fa0: bl              #0x3e41ec
    // 0x2a3fa4: ldur            x0, [fp, #-0x10]
    // 0x2a3fa8: r17 = ExtendSelectionVerticallyToAdjacentLineIntent
    //     0x2a3fa8: add             x17, PP, #0x11, lsl #12  ; [pp+0x112c8] Type: ExtendSelectionVerticallyToAdjacentLineIntent
    //     0x2a3fac: ldr             x17, [x17, #0x2c8]
    // 0x2a3fb0: StoreField: r0->field_77 = r17
    //     0x2a3fb0: stur            w17, [x0, #0x77]
    // 0x2a3fb4: ldr             x1, [fp, #0x10]
    // 0x2a3fb8: LoadField: r0 = r1->field_c7
    //     0x2a3fb8: ldur            w0, [x1, #0xc7]
    // 0x2a3fbc: DecompressPointer r0
    //     0x2a3fbc: add             x0, x0, HEAP, lsl #32
    // 0x2a3fc0: r16 = Sentinel
    //     0x2a3fc0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a3fc4: cmp             w0, w16
    // 0x2a3fc8: b.ne            #0x2a3fd8
    // 0x2a3fcc: r2 = _verticalSelectionUpdateAction
    //     0x2a3fcc: add             x2, PP, #0x11, lsl #12  ; [pp+0x112d0] Field <EditableTextState._verticalSelectionUpdateAction@148183791>: late final (offset: 0xc8)
    //     0x2a3fd0: ldr             x2, [x2, #0x2d0]
    // 0x2a3fd4: r0 = InitLateFinalInstanceField()
    //     0x2a3fd4: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2a3fd8: r16 = <Intent>
    //     0x2a3fd8: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a3fdc: ldr             lr, [fp, #0x10]
    // 0x2a3fe0: stp             lr, x16, [SP, #8]
    // 0x2a3fe4: str             x0, [SP]
    // 0x2a3fe8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a3fe8: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a3fec: r0 = _makeOverridable()
    //     0x2a3fec: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a3ff0: ldur            x1, [fp, #-0x10]
    // 0x2a3ff4: ArrayStore: r1[27] = r0  ; List_4
    //     0x2a3ff4: add             x25, x1, #0x7b
    //     0x2a3ff8: str             w0, [x25]
    //     0x2a3ffc: tbz             w0, #0, #0x2a4018
    //     0x2a4000: ldurb           w16, [x1, #-1]
    //     0x2a4004: ldurb           w17, [x0, #-1]
    //     0x2a4008: and             x16, x17, x16, lsr #2
    //     0x2a400c: tst             x16, HEAP, lsr #32
    //     0x2a4010: b.eq            #0x2a4018
    //     0x2a4014: bl              #0x3e41ec
    // 0x2a4018: ldur            x1, [fp, #-0x10]
    // 0x2a401c: r17 = ExtendSelectionVerticallyToAdjacentPageIntent
    //     0x2a401c: add             x17, PP, #0x11, lsl #12  ; [pp+0x112d8] Type: ExtendSelectionVerticallyToAdjacentPageIntent
    //     0x2a4020: ldr             x17, [x17, #0x2d8]
    // 0x2a4024: StoreField: r1->field_7f = r17
    //     0x2a4024: stur            w17, [x1, #0x7f]
    // 0x2a4028: ldr             x0, [fp, #0x10]
    // 0x2a402c: LoadField: r2 = r0->field_c7
    //     0x2a402c: ldur            w2, [x0, #0xc7]
    // 0x2a4030: DecompressPointer r2
    //     0x2a4030: add             x2, x2, HEAP, lsl #32
    // 0x2a4034: r16 = <Intent>
    //     0x2a4034: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a4038: stp             x0, x16, [SP, #8]
    // 0x2a403c: str             x2, [SP]
    // 0x2a4040: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a4040: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a4044: r0 = _makeOverridable()
    //     0x2a4044: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a4048: ldur            x1, [fp, #-0x10]
    // 0x2a404c: ArrayStore: r1[29] = r0  ; List_4
    //     0x2a404c: add             x25, x1, #0x83
    //     0x2a4050: str             w0, [x25]
    //     0x2a4054: tbz             w0, #0, #0x2a4070
    //     0x2a4058: ldurb           w16, [x1, #-1]
    //     0x2a405c: ldurb           w17, [x0, #-1]
    //     0x2a4060: and             x16, x17, x16, lsr #2
    //     0x2a4064: tst             x16, HEAP, lsr #32
    //     0x2a4068: b.eq            #0x2a4070
    //     0x2a406c: bl              #0x3e41ec
    // 0x2a4070: ldur            x1, [fp, #-0x10]
    // 0x2a4074: r17 = ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent
    //     0x2a4074: add             x17, PP, #0x11, lsl #12  ; [pp+0x112e0] Type: ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent
    //     0x2a4078: ldr             x17, [x17, #0x2e0]
    // 0x2a407c: StoreField: r1->field_87 = r17
    //     0x2a407c: stur            w17, [x1, #0x87]
    // 0x2a4080: ldr             x2, [fp, #0x10]
    // 0x2a4084: r0 = 59
    //     0x2a4084: movz            x0, #0x3b
    // 0x2a4088: branchIfSmi(r2, 0x2a4094)
    //     0x2a4088: tbz             w2, #0, #0x2a4094
    // 0x2a408c: r0 = LoadClassIdInstr(r2)
    //     0x2a408c: ldur            x0, [x2, #-1]
    //     0x2a4090: ubfx            x0, x0, #0xc, #0x14
    // 0x2a4094: str             x2, [SP]
    // 0x2a4098: r0 = GDT[cid_x0 + -0xfef]()
    //     0x2a4098: sub             lr, x0, #0xfef
    //     0x2a409c: ldr             lr, [x21, lr, lsl #3]
    //     0x2a40a0: blr             lr
    // 0x2a40a4: mov             x2, x0
    // 0x2a40a8: ldr             x1, [fp, #0x10]
    // 0x2a40ac: stur            x2, [fp, #-0x18]
    // 0x2a40b0: r0 = 59
    //     0x2a40b0: movz            x0, #0x3b
    // 0x2a40b4: branchIfSmi(r1, 0x2a40c0)
    //     0x2a40b4: tbz             w1, #0, #0x2a40c0
    // 0x2a40b8: r0 = LoadClassIdInstr(r1)
    //     0x2a40b8: ldur            x0, [x1, #-1]
    //     0x2a40bc: ubfx            x0, x0, #0xc, #0x14
    // 0x2a40c0: str             x1, [SP]
    // 0x2a40c4: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a40c4: sub             lr, x0, #1, lsl #12
    //     0x2a40c8: ldr             lr, [x21, lr, lsl #3]
    //     0x2a40cc: blr             lr
    // 0x2a40d0: r1 = <ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent>
    //     0x2a40d0: add             x1, PP, #0x11, lsl #12  ; [pp+0x112e8] TypeArguments: <ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent>
    //     0x2a40d4: ldr             x1, [x1, #0x2e8]
    // 0x2a40d8: stur            x0, [fp, #-0x20]
    // 0x2a40dc: r0 = _UpdateTextSelectionAction()
    //     0x2a40dc: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a40e0: stur            x0, [fp, #-0x28]
    // 0x2a40e4: ldr             x16, [fp, #0x10]
    // 0x2a40e8: stp             x16, x0, [SP, #0x18]
    // 0x2a40ec: ldur            x16, [fp, #-0x18]
    // 0x2a40f0: ldur            lr, [fp, #-0x20]
    // 0x2a40f4: stp             lr, x16, [SP, #8]
    // 0x2a40f8: r16 = true
    //     0x2a40f8: add             x16, NULL, #0x20  ; true
    // 0x2a40fc: str             x16, [SP]
    // 0x2a4100: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x2a4100: ldr             x4, [PP, #0x3d8]  ; [pp+0x3d8] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x2a4104: r0 = _UpdateTextSelectionAction()
    //     0x2a4104: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a4108: r16 = <Intent>
    //     0x2a4108: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a410c: ldr             lr, [fp, #0x10]
    // 0x2a4110: stp             lr, x16, [SP, #8]
    // 0x2a4114: ldur            x16, [fp, #-0x28]
    // 0x2a4118: str             x16, [SP]
    // 0x2a411c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a411c: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a4120: r0 = _makeOverridable()
    //     0x2a4120: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a4124: ldur            x1, [fp, #-0x10]
    // 0x2a4128: ArrayStore: r1[31] = r0  ; List_4
    //     0x2a4128: add             x25, x1, #0x8b
    //     0x2a412c: str             w0, [x25]
    //     0x2a4130: tbz             w0, #0, #0x2a414c
    //     0x2a4134: ldurb           w16, [x1, #-1]
    //     0x2a4138: ldurb           w17, [x0, #-1]
    //     0x2a413c: and             x16, x17, x16, lsr #2
    //     0x2a4140: tst             x16, HEAP, lsr #32
    //     0x2a4144: b.eq            #0x2a414c
    //     0x2a4148: bl              #0x3e41ec
    // 0x2a414c: ldur            x1, [fp, #-0x10]
    // 0x2a4150: r17 = ExtendSelectionToDocumentBoundaryIntent
    //     0x2a4150: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f0] Type: ExtendSelectionToDocumentBoundaryIntent
    //     0x2a4154: ldr             x17, [x17, #0x2f0]
    // 0x2a4158: StoreField: r1->field_8f = r17
    //     0x2a4158: stur            w17, [x1, #0x8f]
    // 0x2a415c: ldr             x2, [fp, #0x10]
    // 0x2a4160: r0 = 59
    //     0x2a4160: movz            x0, #0x3b
    // 0x2a4164: branchIfSmi(r2, 0x2a4170)
    //     0x2a4164: tbz             w2, #0, #0x2a4170
    // 0x2a4168: r0 = LoadClassIdInstr(r2)
    //     0x2a4168: ldur            x0, [x2, #-1]
    //     0x2a416c: ubfx            x0, x0, #0xc, #0x14
    // 0x2a4170: str             x2, [SP]
    // 0x2a4174: r0 = GDT[cid_x0 + -0xfee]()
    //     0x2a4174: sub             lr, x0, #0xfee
    //     0x2a4178: ldr             lr, [x21, lr, lsl #3]
    //     0x2a417c: blr             lr
    // 0x2a4180: mov             x2, x0
    // 0x2a4184: ldr             x1, [fp, #0x10]
    // 0x2a4188: stur            x2, [fp, #-0x18]
    // 0x2a418c: r0 = 59
    //     0x2a418c: movz            x0, #0x3b
    // 0x2a4190: branchIfSmi(r1, 0x2a419c)
    //     0x2a4190: tbz             w1, #0, #0x2a419c
    // 0x2a4194: r0 = LoadClassIdInstr(r1)
    //     0x2a4194: ldur            x0, [x1, #-1]
    //     0x2a4198: ubfx            x0, x0, #0xc, #0x14
    // 0x2a419c: str             x1, [SP]
    // 0x2a41a0: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a41a0: sub             lr, x0, #1, lsl #12
    //     0x2a41a4: ldr             lr, [x21, lr, lsl #3]
    //     0x2a41a8: blr             lr
    // 0x2a41ac: r1 = <ExtendSelectionToDocumentBoundaryIntent>
    //     0x2a41ac: add             x1, PP, #0x11, lsl #12  ; [pp+0x112f8] TypeArguments: <ExtendSelectionToDocumentBoundaryIntent>
    //     0x2a41b0: ldr             x1, [x1, #0x2f8]
    // 0x2a41b4: stur            x0, [fp, #-0x20]
    // 0x2a41b8: r0 = _UpdateTextSelectionAction()
    //     0x2a41b8: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a41bc: stur            x0, [fp, #-0x28]
    // 0x2a41c0: ldr             x16, [fp, #0x10]
    // 0x2a41c4: stp             x16, x0, [SP, #0x18]
    // 0x2a41c8: ldur            x16, [fp, #-0x18]
    // 0x2a41cc: ldur            lr, [fp, #-0x20]
    // 0x2a41d0: stp             lr, x16, [SP, #8]
    // 0x2a41d4: r16 = true
    //     0x2a41d4: add             x16, NULL, #0x20  ; true
    // 0x2a41d8: str             x16, [SP]
    // 0x2a41dc: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x2a41dc: ldr             x4, [PP, #0x3d8]  ; [pp+0x3d8] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x2a41e0: r0 = _UpdateTextSelectionAction()
    //     0x2a41e0: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a41e4: r16 = <Intent>
    //     0x2a41e4: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a41e8: ldr             lr, [fp, #0x10]
    // 0x2a41ec: stp             lr, x16, [SP, #8]
    // 0x2a41f0: ldur            x16, [fp, #-0x28]
    // 0x2a41f4: str             x16, [SP]
    // 0x2a41f8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a41f8: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a41fc: r0 = _makeOverridable()
    //     0x2a41fc: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a4200: ldur            x1, [fp, #-0x10]
    // 0x2a4204: ArrayStore: r1[33] = r0  ; List_4
    //     0x2a4204: add             x25, x1, #0x93
    //     0x2a4208: str             w0, [x25]
    //     0x2a420c: tbz             w0, #0, #0x2a4228
    //     0x2a4210: ldurb           w16, [x1, #-1]
    //     0x2a4214: ldurb           w17, [x0, #-1]
    //     0x2a4218: and             x16, x17, x16, lsr #2
    //     0x2a421c: tst             x16, HEAP, lsr #32
    //     0x2a4220: b.eq            #0x2a4228
    //     0x2a4224: bl              #0x3e41ec
    // 0x2a4228: ldur            x1, [fp, #-0x10]
    // 0x2a422c: r17 = ExtendSelectionToNextWordBoundaryOrCaretLocationIntent
    //     0x2a422c: add             x17, PP, #0x11, lsl #12  ; [pp+0x11300] Type: ExtendSelectionToNextWordBoundaryOrCaretLocationIntent
    //     0x2a4230: ldr             x17, [x17, #0x300]
    // 0x2a4234: StoreField: r1->field_97 = r17
    //     0x2a4234: stur            w17, [x1, #0x97]
    // 0x2a4238: ldr             x2, [fp, #0x10]
    // 0x2a423c: r0 = 59
    //     0x2a423c: movz            x0, #0x3b
    // 0x2a4240: branchIfSmi(r2, 0x2a424c)
    //     0x2a4240: tbz             w2, #0, #0x2a424c
    // 0x2a4244: r0 = LoadClassIdInstr(r2)
    //     0x2a4244: ldur            x0, [x2, #-1]
    //     0x2a4248: ubfx            x0, x0, #0xc, #0x14
    // 0x2a424c: str             x2, [SP]
    // 0x2a4250: r0 = GDT[cid_x0 + -0xffa]()
    //     0x2a4250: sub             lr, x0, #0xffa
    //     0x2a4254: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4258: blr             lr
    // 0x2a425c: mov             x2, x0
    // 0x2a4260: ldr             x1, [fp, #0x10]
    // 0x2a4264: stur            x2, [fp, #-0x18]
    // 0x2a4268: r0 = 59
    //     0x2a4268: movz            x0, #0x3b
    // 0x2a426c: branchIfSmi(r1, 0x2a4278)
    //     0x2a426c: tbz             w1, #0, #0x2a4278
    // 0x2a4270: r0 = LoadClassIdInstr(r1)
    //     0x2a4270: ldur            x0, [x1, #-1]
    //     0x2a4274: ubfx            x0, x0, #0xc, #0x14
    // 0x2a4278: str             x1, [SP]
    // 0x2a427c: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2a427c: sub             lr, x0, #1, lsl #12
    //     0x2a4280: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4284: blr             lr
    // 0x2a4288: r1 = <ExtendSelectionToNextWordBoundaryOrCaretLocationIntent>
    //     0x2a4288: add             x1, PP, #0x11, lsl #12  ; [pp+0x11308] TypeArguments: <ExtendSelectionToNextWordBoundaryOrCaretLocationIntent>
    //     0x2a428c: ldr             x1, [x1, #0x308]
    // 0x2a4290: stur            x0, [fp, #-0x20]
    // 0x2a4294: r0 = _UpdateTextSelectionAction()
    //     0x2a4294: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a4298: stur            x0, [fp, #-0x28]
    // 0x2a429c: ldr             x16, [fp, #0x10]
    // 0x2a42a0: stp             x16, x0, [SP, #0x18]
    // 0x2a42a4: ldur            x16, [fp, #-0x18]
    // 0x2a42a8: ldur            lr, [fp, #-0x20]
    // 0x2a42ac: stp             lr, x16, [SP, #8]
    // 0x2a42b0: r16 = true
    //     0x2a42b0: add             x16, NULL, #0x20  ; true
    // 0x2a42b4: str             x16, [SP]
    // 0x2a42b8: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x2a42b8: ldr             x4, [PP, #0x3d8]  ; [pp+0x3d8] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x2a42bc: r0 = _UpdateTextSelectionAction()
    //     0x2a42bc: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a42c0: r16 = <Intent>
    //     0x2a42c0: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a42c4: ldr             lr, [fp, #0x10]
    // 0x2a42c8: stp             lr, x16, [SP, #8]
    // 0x2a42cc: ldur            x16, [fp, #-0x28]
    // 0x2a42d0: str             x16, [SP]
    // 0x2a42d4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a42d4: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a42d8: r0 = _makeOverridable()
    //     0x2a42d8: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a42dc: ldur            x1, [fp, #-0x10]
    // 0x2a42e0: ArrayStore: r1[35] = r0  ; List_4
    //     0x2a42e0: add             x25, x1, #0x9b
    //     0x2a42e4: str             w0, [x25]
    //     0x2a42e8: tbz             w0, #0, #0x2a4304
    //     0x2a42ec: ldurb           w16, [x1, #-1]
    //     0x2a42f0: ldurb           w17, [x0, #-1]
    //     0x2a42f4: and             x16, x17, x16, lsr #2
    //     0x2a42f8: tst             x16, HEAP, lsr #32
    //     0x2a42fc: b.eq            #0x2a4304
    //     0x2a4300: bl              #0x3e41ec
    // 0x2a4304: ldur            x1, [fp, #-0x10]
    // 0x2a4308: r17 = ScrollToDocumentBoundaryIntent
    //     0x2a4308: add             x17, PP, #0x11, lsl #12  ; [pp+0x11310] Type: ScrollToDocumentBoundaryIntent
    //     0x2a430c: ldr             x17, [x17, #0x310]
    // 0x2a4310: StoreField: r1->field_9f = r17
    //     0x2a4310: stur            w17, [x1, #0x9f]
    // 0x2a4314: ldr             x2, [fp, #0x10]
    // 0x2a4318: r0 = 59
    //     0x2a4318: movz            x0, #0x3b
    // 0x2a431c: branchIfSmi(r2, 0x2a4328)
    //     0x2a431c: tbz             w2, #0, #0x2a4328
    // 0x2a4320: r0 = LoadClassIdInstr(r2)
    //     0x2a4320: ldur            x0, [x2, #-1]
    //     0x2a4324: ubfx            x0, x0, #0xc, #0x14
    // 0x2a4328: str             x2, [SP]
    // 0x2a432c: r0 = GDT[cid_x0 + -0xf75]()
    //     0x2a432c: sub             lr, x0, #0xf75
    //     0x2a4330: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4334: blr             lr
    // 0x2a4338: r1 = <ScrollToDocumentBoundaryIntent>
    //     0x2a4338: add             x1, PP, #0x11, lsl #12  ; [pp+0x11318] TypeArguments: <ScrollToDocumentBoundaryIntent>
    //     0x2a433c: ldr             x1, [x1, #0x318]
    // 0x2a4340: stur            x0, [fp, #-0x18]
    // 0x2a4344: r0 = CallbackAction()
    //     0x2a4344: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a4348: mov             x2, x0
    // 0x2a434c: ldur            x0, [fp, #-0x18]
    // 0x2a4350: stur            x2, [fp, #-0x20]
    // 0x2a4354: StoreField: r2->field_13 = r0
    //     0x2a4354: stur            w0, [x2, #0x13]
    // 0x2a4358: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4358: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a435c: ldr             x1, [x1, #0xb18]
    // 0x2a4360: r0 = ObserverList()
    //     0x2a4360: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4364: mov             x1, x0
    // 0x2a4368: r0 = false
    //     0x2a4368: add             x0, NULL, #0x30  ; false
    // 0x2a436c: stur            x1, [fp, #-0x18]
    // 0x2a4370: StoreField: r1->field_f = r0
    //     0x2a4370: stur            w0, [x1, #0xf]
    // 0x2a4374: r2 = Sentinel
    //     0x2a4374: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4378: StoreField: r1->field_13 = r2
    //     0x2a4378: stur            w2, [x1, #0x13]
    // 0x2a437c: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a437c: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4380: ldr             x16, [x16, #0xb18]
    // 0x2a4384: stp             xzr, x16, [SP]
    // 0x2a4388: r0 = _GrowableList()
    //     0x2a4388: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a438c: ldur            x1, [fp, #-0x18]
    // 0x2a4390: StoreField: r1->field_b = r0
    //     0x2a4390: stur            w0, [x1, #0xb]
    //     0x2a4394: ldurb           w16, [x1, #-1]
    //     0x2a4398: ldurb           w17, [x0, #-1]
    //     0x2a439c: and             x16, x17, x16, lsr #2
    //     0x2a43a0: tst             x16, HEAP, lsr #32
    //     0x2a43a4: b.eq            #0x2a43ac
    //     0x2a43a8: bl              #0x3e4608
    // 0x2a43ac: mov             x0, x1
    // 0x2a43b0: ldur            x1, [fp, #-0x20]
    // 0x2a43b4: StoreField: r1->field_b = r0
    //     0x2a43b4: stur            w0, [x1, #0xb]
    //     0x2a43b8: ldurb           w16, [x1, #-1]
    //     0x2a43bc: ldurb           w17, [x0, #-1]
    //     0x2a43c0: and             x16, x17, x16, lsr #2
    //     0x2a43c4: tst             x16, HEAP, lsr #32
    //     0x2a43c8: b.eq            #0x2a43d0
    //     0x2a43cc: bl              #0x3e4608
    // 0x2a43d0: r16 = <Intent>
    //     0x2a43d0: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a43d4: ldr             lr, [fp, #0x10]
    // 0x2a43d8: stp             lr, x16, [SP, #8]
    // 0x2a43dc: str             x1, [SP]
    // 0x2a43e0: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a43e0: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a43e4: r0 = _makeOverridable()
    //     0x2a43e4: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a43e8: ldur            x1, [fp, #-0x10]
    // 0x2a43ec: ArrayStore: r1[37] = r0  ; List_4
    //     0x2a43ec: add             x25, x1, #0xa3
    //     0x2a43f0: str             w0, [x25]
    //     0x2a43f4: tbz             w0, #0, #0x2a4410
    //     0x2a43f8: ldurb           w16, [x1, #-1]
    //     0x2a43fc: ldurb           w17, [x0, #-1]
    //     0x2a4400: and             x16, x17, x16, lsr #2
    //     0x2a4404: tst             x16, HEAP, lsr #32
    //     0x2a4408: b.eq            #0x2a4410
    //     0x2a440c: bl              #0x3e41ec
    // 0x2a4410: ldur            x1, [fp, #-0x10]
    // 0x2a4414: r17 = ScrollIntent
    //     0x2a4414: add             x17, PP, #0xd, lsl #12  ; [pp+0xdb28] Type: ScrollIntent
    //     0x2a4418: ldr             x17, [x17, #0xb28]
    // 0x2a441c: StoreField: r1->field_a7 = r17
    //     0x2a441c: stur            w17, [x1, #0xa7]
    // 0x2a4420: ldr             x2, [fp, #0x10]
    // 0x2a4424: r0 = 59
    //     0x2a4424: movz            x0, #0x3b
    // 0x2a4428: branchIfSmi(r2, 0x2a4434)
    //     0x2a4428: tbz             w2, #0, #0x2a4434
    // 0x2a442c: r0 = LoadClassIdInstr(r2)
    //     0x2a442c: ldur            x0, [x2, #-1]
    //     0x2a4430: ubfx            x0, x0, #0xc, #0x14
    // 0x2a4434: str             x2, [SP]
    // 0x2a4438: r0 = GDT[cid_x0 + -0xf73]()
    //     0x2a4438: sub             lr, x0, #0xf73
    //     0x2a443c: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4440: blr             lr
    // 0x2a4444: r1 = <ScrollIntent>
    //     0x2a4444: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb20] TypeArguments: <ScrollIntent>
    //     0x2a4448: ldr             x1, [x1, #0xb20]
    // 0x2a444c: stur            x0, [fp, #-0x18]
    // 0x2a4450: r0 = CallbackAction()
    //     0x2a4450: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a4454: mov             x2, x0
    // 0x2a4458: ldur            x0, [fp, #-0x18]
    // 0x2a445c: stur            x2, [fp, #-0x20]
    // 0x2a4460: StoreField: r2->field_13 = r0
    //     0x2a4460: stur            w0, [x2, #0x13]
    // 0x2a4464: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4464: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4468: ldr             x1, [x1, #0xb18]
    // 0x2a446c: r0 = ObserverList()
    //     0x2a446c: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4470: mov             x1, x0
    // 0x2a4474: r0 = false
    //     0x2a4474: add             x0, NULL, #0x30  ; false
    // 0x2a4478: stur            x1, [fp, #-0x18]
    // 0x2a447c: StoreField: r1->field_f = r0
    //     0x2a447c: stur            w0, [x1, #0xf]
    // 0x2a4480: r2 = Sentinel
    //     0x2a4480: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4484: StoreField: r1->field_13 = r2
    //     0x2a4484: stur            w2, [x1, #0x13]
    // 0x2a4488: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4488: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a448c: ldr             x16, [x16, #0xb18]
    // 0x2a4490: stp             xzr, x16, [SP]
    // 0x2a4494: r0 = _GrowableList()
    //     0x2a4494: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a4498: ldur            x1, [fp, #-0x18]
    // 0x2a449c: StoreField: r1->field_b = r0
    //     0x2a449c: stur            w0, [x1, #0xb]
    //     0x2a44a0: ldurb           w16, [x1, #-1]
    //     0x2a44a4: ldurb           w17, [x0, #-1]
    //     0x2a44a8: and             x16, x17, x16, lsr #2
    //     0x2a44ac: tst             x16, HEAP, lsr #32
    //     0x2a44b0: b.eq            #0x2a44b8
    //     0x2a44b4: bl              #0x3e4608
    // 0x2a44b8: mov             x0, x1
    // 0x2a44bc: ldur            x1, [fp, #-0x20]
    // 0x2a44c0: StoreField: r1->field_b = r0
    //     0x2a44c0: stur            w0, [x1, #0xb]
    //     0x2a44c4: ldurb           w16, [x1, #-1]
    //     0x2a44c8: ldurb           w17, [x0, #-1]
    //     0x2a44cc: and             x16, x17, x16, lsr #2
    //     0x2a44d0: tst             x16, HEAP, lsr #32
    //     0x2a44d4: b.eq            #0x2a44dc
    //     0x2a44d8: bl              #0x3e4608
    // 0x2a44dc: mov             x0, x1
    // 0x2a44e0: ldur            x1, [fp, #-0x10]
    // 0x2a44e4: ArrayStore: r1[39] = r0  ; List_4
    //     0x2a44e4: add             x25, x1, #0xab
    //     0x2a44e8: str             w0, [x25]
    //     0x2a44ec: tbz             w0, #0, #0x2a4508
    //     0x2a44f0: ldurb           w16, [x1, #-1]
    //     0x2a44f4: ldurb           w17, [x0, #-1]
    //     0x2a44f8: and             x16, x17, x16, lsr #2
    //     0x2a44fc: tst             x16, HEAP, lsr #32
    //     0x2a4500: b.eq            #0x2a4508
    //     0x2a4504: bl              #0x3e41ec
    // 0x2a4508: ldur            x1, [fp, #-0x10]
    // 0x2a450c: r17 = ExpandSelectionToLineBreakIntent
    //     0x2a450c: add             x17, PP, #0x11, lsl #12  ; [pp+0x11320] Type: ExpandSelectionToLineBreakIntent
    //     0x2a4510: ldr             x17, [x17, #0x320]
    // 0x2a4514: StoreField: r1->field_af = r17
    //     0x2a4514: stur            w17, [x1, #0xaf]
    // 0x2a4518: ldr             x2, [fp, #0x10]
    // 0x2a451c: r0 = 59
    //     0x2a451c: movz            x0, #0x3b
    // 0x2a4520: branchIfSmi(r2, 0x2a452c)
    //     0x2a4520: tbz             w2, #0, #0x2a452c
    // 0x2a4524: r0 = LoadClassIdInstr(r2)
    //     0x2a4524: ldur            x0, [x2, #-1]
    //     0x2a4528: ubfx            x0, x0, #0xc, #0x14
    // 0x2a452c: str             x2, [SP]
    // 0x2a4530: r0 = GDT[cid_x0 + -0xffb]()
    //     0x2a4530: sub             lr, x0, #0xffb
    //     0x2a4534: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4538: blr             lr
    // 0x2a453c: mov             x2, x0
    // 0x2a4540: ldr             x1, [fp, #0x10]
    // 0x2a4544: stur            x2, [fp, #-0x18]
    // 0x2a4548: r0 = 59
    //     0x2a4548: movz            x0, #0x3b
    // 0x2a454c: branchIfSmi(r1, 0x2a4558)
    //     0x2a454c: tbz             w1, #0, #0x2a4558
    // 0x2a4550: r0 = LoadClassIdInstr(r1)
    //     0x2a4550: ldur            x0, [x1, #-1]
    //     0x2a4554: ubfx            x0, x0, #0xc, #0x14
    // 0x2a4558: str             x1, [SP]
    // 0x2a455c: r0 = GDT[cid_x0 + -0xffd]()
    //     0x2a455c: sub             lr, x0, #0xffd
    //     0x2a4560: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4564: blr             lr
    // 0x2a4568: r1 = <ExpandSelectionToLineBreakIntent>
    //     0x2a4568: add             x1, PP, #0x11, lsl #12  ; [pp+0x11328] TypeArguments: <ExpandSelectionToLineBreakIntent>
    //     0x2a456c: ldr             x1, [x1, #0x328]
    // 0x2a4570: stur            x0, [fp, #-0x20]
    // 0x2a4574: r0 = _UpdateTextSelectionAction()
    //     0x2a4574: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a4578: stur            x0, [fp, #-0x28]
    // 0x2a457c: ldr             x16, [fp, #0x10]
    // 0x2a4580: stp             x16, x0, [SP, #0x20]
    // 0x2a4584: ldur            x16, [fp, #-0x18]
    // 0x2a4588: ldur            lr, [fp, #-0x20]
    // 0x2a458c: stp             lr, x16, [SP, #0x10]
    // 0x2a4590: r16 = true
    //     0x2a4590: add             x16, NULL, #0x20  ; true
    // 0x2a4594: r30 = true
    //     0x2a4594: add             lr, NULL, #0x20  ; true
    // 0x2a4598: stp             lr, x16, [SP]
    // 0x2a459c: r4 = const [0, 0x6, 0x6, 0x5, isExpand, 0x5, null]
    //     0x2a459c: add             x4, PP, #0x11, lsl #12  ; [pp+0x11330] List(7) [0, 0x6, 0x6, 0x5, "isExpand", 0x5, Null]
    //     0x2a45a0: ldr             x4, [x4, #0x330]
    // 0x2a45a4: r0 = _UpdateTextSelectionAction()
    //     0x2a45a4: bl              #0x2a4ab8  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x2a45a8: r16 = <Intent>
    //     0x2a45a8: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a45ac: ldr             lr, [fp, #0x10]
    // 0x2a45b0: stp             lr, x16, [SP, #8]
    // 0x2a45b4: ldur            x16, [fp, #-0x28]
    // 0x2a45b8: str             x16, [SP]
    // 0x2a45bc: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a45bc: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a45c0: r0 = _makeOverridable()
    //     0x2a45c0: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a45c4: ldur            x1, [fp, #-0x10]
    // 0x2a45c8: ArrayStore: r1[41] = r0  ; List_4
    //     0x2a45c8: add             x25, x1, #0xb3
    //     0x2a45cc: str             w0, [x25]
    //     0x2a45d0: tbz             w0, #0, #0x2a45ec
    //     0x2a45d4: ldurb           w16, [x1, #-1]
    //     0x2a45d8: ldurb           w17, [x0, #-1]
    //     0x2a45dc: and             x16, x17, x16, lsr #2
    //     0x2a45e0: tst             x16, HEAP, lsr #32
    //     0x2a45e4: b.eq            #0x2a45ec
    //     0x2a45e8: bl              #0x3e41ec
    // 0x2a45ec: ldur            x1, [fp, #-0x10]
    // 0x2a45f0: r17 = ExpandSelectionToDocumentBoundaryIntent
    //     0x2a45f0: add             x17, PP, #0x11, lsl #12  ; [pp+0x11338] Type: ExpandSelectionToDocumentBoundaryIntent
    //     0x2a45f4: ldr             x17, [x17, #0x338]
    // 0x2a45f8: StoreField: r1->field_b7 = r17
    //     0x2a45f8: stur            w17, [x1, #0xb7]
    // 0x2a45fc: ldr             x2, [fp, #0x10]
    // 0x2a4600: r0 = 59
    //     0x2a4600: movz            x0, #0x3b
    // 0x2a4604: branchIfSmi(r2, 0x2a4610)
    //     0x2a4604: tbz             w2, #0, #0x2a4610
    // 0x2a4608: r0 = LoadClassIdInstr(r2)
    //     0x2a4608: ldur            x0, [x2, #-1]
    //     0x2a460c: ubfx            x0, x0, #0xc, #0x14
    // 0x2a4610: str             x2, [SP]
    // 0x2a4614: r0 = GDT[cid_x0 + -0xfee]()
    //     0x2a4614: sub             lr, x0, #0xfee
    //     0x2a4618: ldr             lr, [x21, lr, lsl #3]
    //     0x2a461c: blr             lr
    // 0x2a4620: mov             x2, x0
    // 0x2a4624: ldr             x1, [fp, #0x10]
    // 0x2a4628: stur            x2, [fp, #-0x18]
    // 0x2a462c: r0 = 59
    //     0x2a462c: movz            x0, #0x3b
    // 0x2a4630: branchIfSmi(r1, 0x2a463c)
    //     0x2a4630: tbz             w1, #0, #0x2a463c
    // 0x2a4634: r0 = LoadClassIdInstr(r1)
    //     0x2a4634: ldur            x0, [x1, #-1]
    //     0x2a4638: ubfx            x0, x0, #0xc, #0x14
    // 0x2a463c: str             x1, [SP]
    // 0x2a4640: r0 = GDT[cid_x0 + -0xffd]()
    //     0x2a4640: sub             lr, x0, #0xffd
    //     0x2a4644: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4648: blr             lr
    // 0x2a464c: r1 = <ExpandSelectionToDocumentBoundaryIntent>
    //     0x2a464c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11340] TypeArguments: <ExpandSelectionToDocumentBoundaryIntent>
    //     0x2a4650: ldr             x1, [x1, #0x340]
    // 0x2a4654: stur            x0, [fp, #-0x20]
    // 0x2a4658: r0 = _UpdateTextSelectionAction()
    //     0x2a4658: bl              #0x2a4c94  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x2a465c: mov             x2, x0
    // 0x2a4660: ldr             x0, [fp, #0x10]
    // 0x2a4664: stur            x2, [fp, #-0x28]
    // 0x2a4668: StoreField: r2->field_13 = r0
    //     0x2a4668: stur            w0, [x2, #0x13]
    // 0x2a466c: ldur            x1, [fp, #-0x18]
    // 0x2a4670: StoreField: r2->field_23 = r1
    //     0x2a4670: stur            w1, [x2, #0x23]
    // 0x2a4674: ldur            x1, [fp, #-0x20]
    // 0x2a4678: StoreField: r2->field_27 = r1
    //     0x2a4678: stur            w1, [x2, #0x27]
    // 0x2a467c: r1 = true
    //     0x2a467c: add             x1, NULL, #0x20  ; true
    // 0x2a4680: StoreField: r2->field_17 = r1
    //     0x2a4680: stur            w1, [x2, #0x17]
    // 0x2a4684: StoreField: r2->field_1b = r1
    //     0x2a4684: stur            w1, [x2, #0x1b]
    // 0x2a4688: StoreField: r2->field_1f = r1
    //     0x2a4688: stur            w1, [x2, #0x1f]
    // 0x2a468c: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a468c: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4690: ldr             x1, [x1, #0xb18]
    // 0x2a4694: r0 = ObserverList()
    //     0x2a4694: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4698: mov             x1, x0
    // 0x2a469c: r0 = false
    //     0x2a469c: add             x0, NULL, #0x30  ; false
    // 0x2a46a0: stur            x1, [fp, #-0x18]
    // 0x2a46a4: StoreField: r1->field_f = r0
    //     0x2a46a4: stur            w0, [x1, #0xf]
    // 0x2a46a8: r2 = Sentinel
    //     0x2a46a8: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a46ac: StoreField: r1->field_13 = r2
    //     0x2a46ac: stur            w2, [x1, #0x13]
    // 0x2a46b0: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a46b0: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a46b4: ldr             x16, [x16, #0xb18]
    // 0x2a46b8: stp             xzr, x16, [SP]
    // 0x2a46bc: r0 = _GrowableList()
    //     0x2a46bc: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a46c0: ldur            x1, [fp, #-0x18]
    // 0x2a46c4: StoreField: r1->field_b = r0
    //     0x2a46c4: stur            w0, [x1, #0xb]
    //     0x2a46c8: ldurb           w16, [x1, #-1]
    //     0x2a46cc: ldurb           w17, [x0, #-1]
    //     0x2a46d0: and             x16, x17, x16, lsr #2
    //     0x2a46d4: tst             x16, HEAP, lsr #32
    //     0x2a46d8: b.eq            #0x2a46e0
    //     0x2a46dc: bl              #0x3e4608
    // 0x2a46e0: mov             x0, x1
    // 0x2a46e4: ldur            x1, [fp, #-0x28]
    // 0x2a46e8: StoreField: r1->field_b = r0
    //     0x2a46e8: stur            w0, [x1, #0xb]
    //     0x2a46ec: ldurb           w16, [x1, #-1]
    //     0x2a46f0: ldurb           w17, [x0, #-1]
    //     0x2a46f4: and             x16, x17, x16, lsr #2
    //     0x2a46f8: tst             x16, HEAP, lsr #32
    //     0x2a46fc: b.eq            #0x2a4704
    //     0x2a4700: bl              #0x3e4608
    // 0x2a4704: r16 = <Intent>
    //     0x2a4704: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a4708: ldr             lr, [fp, #0x10]
    // 0x2a470c: stp             lr, x16, [SP, #8]
    // 0x2a4710: str             x1, [SP]
    // 0x2a4714: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a4714: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a4718: r0 = _makeOverridable()
    //     0x2a4718: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a471c: ldur            x1, [fp, #-0x10]
    // 0x2a4720: ArrayStore: r1[43] = r0  ; List_4
    //     0x2a4720: add             x25, x1, #0xbb
    //     0x2a4724: str             w0, [x25]
    //     0x2a4728: tbz             w0, #0, #0x2a4744
    //     0x2a472c: ldurb           w16, [x1, #-1]
    //     0x2a4730: ldurb           w17, [x0, #-1]
    //     0x2a4734: and             x16, x17, x16, lsr #2
    //     0x2a4738: tst             x16, HEAP, lsr #32
    //     0x2a473c: b.eq            #0x2a4744
    //     0x2a4740: bl              #0x3e41ec
    // 0x2a4744: ldur            x0, [fp, #-0x10]
    // 0x2a4748: r17 = SelectAllTextIntent
    //     0x2a4748: add             x17, PP, #0x11, lsl #12  ; [pp+0x11348] Type: SelectAllTextIntent
    //     0x2a474c: ldr             x17, [x17, #0x348]
    // 0x2a4750: StoreField: r0->field_bf = r17
    //     0x2a4750: stur            w17, [x0, #0xbf]
    // 0x2a4754: r1 = <SelectAllTextIntent>
    //     0x2a4754: add             x1, PP, #0x11, lsl #12  ; [pp+0x11350] TypeArguments: <SelectAllTextIntent>
    //     0x2a4758: ldr             x1, [x1, #0x350]
    // 0x2a475c: r0 = _SelectAllAction()
    //     0x2a475c: bl              #0x2a4aac  ; Allocate_SelectAllActionStub -> _SelectAllAction (size=0x18)
    // 0x2a4760: mov             x2, x0
    // 0x2a4764: ldr             x0, [fp, #0x10]
    // 0x2a4768: stur            x2, [fp, #-0x18]
    // 0x2a476c: StoreField: r2->field_13 = r0
    //     0x2a476c: stur            w0, [x2, #0x13]
    // 0x2a4770: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4770: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4774: ldr             x1, [x1, #0xb18]
    // 0x2a4778: r0 = ObserverList()
    //     0x2a4778: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a477c: mov             x1, x0
    // 0x2a4780: r0 = false
    //     0x2a4780: add             x0, NULL, #0x30  ; false
    // 0x2a4784: stur            x1, [fp, #-0x20]
    // 0x2a4788: StoreField: r1->field_f = r0
    //     0x2a4788: stur            w0, [x1, #0xf]
    // 0x2a478c: r2 = Sentinel
    //     0x2a478c: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4790: StoreField: r1->field_13 = r2
    //     0x2a4790: stur            w2, [x1, #0x13]
    // 0x2a4794: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4794: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4798: ldr             x16, [x16, #0xb18]
    // 0x2a479c: stp             xzr, x16, [SP]
    // 0x2a47a0: r0 = _GrowableList()
    //     0x2a47a0: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a47a4: ldur            x1, [fp, #-0x20]
    // 0x2a47a8: StoreField: r1->field_b = r0
    //     0x2a47a8: stur            w0, [x1, #0xb]
    //     0x2a47ac: ldurb           w16, [x1, #-1]
    //     0x2a47b0: ldurb           w17, [x0, #-1]
    //     0x2a47b4: and             x16, x17, x16, lsr #2
    //     0x2a47b8: tst             x16, HEAP, lsr #32
    //     0x2a47bc: b.eq            #0x2a47c4
    //     0x2a47c0: bl              #0x3e4608
    // 0x2a47c4: mov             x0, x1
    // 0x2a47c8: ldur            x1, [fp, #-0x18]
    // 0x2a47cc: StoreField: r1->field_b = r0
    //     0x2a47cc: stur            w0, [x1, #0xb]
    //     0x2a47d0: ldurb           w16, [x1, #-1]
    //     0x2a47d4: ldurb           w17, [x0, #-1]
    //     0x2a47d8: and             x16, x17, x16, lsr #2
    //     0x2a47dc: tst             x16, HEAP, lsr #32
    //     0x2a47e0: b.eq            #0x2a47e8
    //     0x2a47e4: bl              #0x3e4608
    // 0x2a47e8: r16 = <Intent>
    //     0x2a47e8: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a47ec: ldr             lr, [fp, #0x10]
    // 0x2a47f0: stp             lr, x16, [SP, #8]
    // 0x2a47f4: str             x1, [SP]
    // 0x2a47f8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a47f8: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a47fc: r0 = _makeOverridable()
    //     0x2a47fc: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a4800: ldur            x1, [fp, #-0x10]
    // 0x2a4804: ArrayStore: r1[45] = r0  ; List_4
    //     0x2a4804: add             x25, x1, #0xc3
    //     0x2a4808: str             w0, [x25]
    //     0x2a480c: tbz             w0, #0, #0x2a4828
    //     0x2a4810: ldurb           w16, [x1, #-1]
    //     0x2a4814: ldurb           w17, [x0, #-1]
    //     0x2a4818: and             x16, x17, x16, lsr #2
    //     0x2a481c: tst             x16, HEAP, lsr #32
    //     0x2a4820: b.eq            #0x2a4828
    //     0x2a4824: bl              #0x3e41ec
    // 0x2a4828: ldur            x0, [fp, #-0x10]
    // 0x2a482c: r17 = CopySelectionTextIntent
    //     0x2a482c: add             x17, PP, #0x11, lsl #12  ; [pp+0x11358] Type: CopySelectionTextIntent
    //     0x2a4830: ldr             x17, [x17, #0x358]
    // 0x2a4834: StoreField: r0->field_c7 = r17
    //     0x2a4834: stur            w17, [x0, #0xc7]
    // 0x2a4838: r1 = <CopySelectionTextIntent>
    //     0x2a4838: add             x1, PP, #0x11, lsl #12  ; [pp+0x11360] TypeArguments: <CopySelectionTextIntent>
    //     0x2a483c: ldr             x1, [x1, #0x360]
    // 0x2a4840: r0 = _CopySelectionAction()
    //     0x2a4840: bl              #0x2a4aa0  ; Allocate_CopySelectionActionStub -> _CopySelectionAction (size=0x18)
    // 0x2a4844: mov             x2, x0
    // 0x2a4848: ldr             x0, [fp, #0x10]
    // 0x2a484c: stur            x2, [fp, #-0x18]
    // 0x2a4850: StoreField: r2->field_13 = r0
    //     0x2a4850: stur            w0, [x2, #0x13]
    // 0x2a4854: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4854: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4858: ldr             x1, [x1, #0xb18]
    // 0x2a485c: r0 = ObserverList()
    //     0x2a485c: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4860: mov             x1, x0
    // 0x2a4864: r0 = false
    //     0x2a4864: add             x0, NULL, #0x30  ; false
    // 0x2a4868: stur            x1, [fp, #-0x20]
    // 0x2a486c: StoreField: r1->field_f = r0
    //     0x2a486c: stur            w0, [x1, #0xf]
    // 0x2a4870: r2 = Sentinel
    //     0x2a4870: ldr             x2, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4874: StoreField: r1->field_13 = r2
    //     0x2a4874: stur            w2, [x1, #0x13]
    // 0x2a4878: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4878: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a487c: ldr             x16, [x16, #0xb18]
    // 0x2a4880: stp             xzr, x16, [SP]
    // 0x2a4884: r0 = _GrowableList()
    //     0x2a4884: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a4888: ldur            x1, [fp, #-0x20]
    // 0x2a488c: StoreField: r1->field_b = r0
    //     0x2a488c: stur            w0, [x1, #0xb]
    //     0x2a4890: ldurb           w16, [x1, #-1]
    //     0x2a4894: ldurb           w17, [x0, #-1]
    //     0x2a4898: and             x16, x17, x16, lsr #2
    //     0x2a489c: tst             x16, HEAP, lsr #32
    //     0x2a48a0: b.eq            #0x2a48a8
    //     0x2a48a4: bl              #0x3e4608
    // 0x2a48a8: mov             x0, x1
    // 0x2a48ac: ldur            x1, [fp, #-0x18]
    // 0x2a48b0: StoreField: r1->field_b = r0
    //     0x2a48b0: stur            w0, [x1, #0xb]
    //     0x2a48b4: ldurb           w16, [x1, #-1]
    //     0x2a48b8: ldurb           w17, [x0, #-1]
    //     0x2a48bc: and             x16, x17, x16, lsr #2
    //     0x2a48c0: tst             x16, HEAP, lsr #32
    //     0x2a48c4: b.eq            #0x2a48cc
    //     0x2a48c8: bl              #0x3e4608
    // 0x2a48cc: r16 = <Intent>
    //     0x2a48cc: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a48d0: ldr             lr, [fp, #0x10]
    // 0x2a48d4: stp             lr, x16, [SP, #8]
    // 0x2a48d8: str             x1, [SP]
    // 0x2a48dc: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a48dc: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a48e0: r0 = _makeOverridable()
    //     0x2a48e0: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a48e4: ldur            x1, [fp, #-0x10]
    // 0x2a48e8: ArrayStore: r1[47] = r0  ; List_4
    //     0x2a48e8: add             x25, x1, #0xcb
    //     0x2a48ec: str             w0, [x25]
    //     0x2a48f0: tbz             w0, #0, #0x2a490c
    //     0x2a48f4: ldurb           w16, [x1, #-1]
    //     0x2a48f8: ldurb           w17, [x0, #-1]
    //     0x2a48fc: and             x16, x17, x16, lsr #2
    //     0x2a4900: tst             x16, HEAP, lsr #32
    //     0x2a4904: b.eq            #0x2a490c
    //     0x2a4908: bl              #0x3e41ec
    // 0x2a490c: ldur            x0, [fp, #-0x10]
    // 0x2a4910: r17 = PasteTextIntent
    //     0x2a4910: add             x17, PP, #0x11, lsl #12  ; [pp+0x11368] Type: PasteTextIntent
    //     0x2a4914: ldr             x17, [x17, #0x368]
    // 0x2a4918: StoreField: r0->field_cf = r17
    //     0x2a4918: stur            w17, [x0, #0xcf]
    // 0x2a491c: ldur            x2, [fp, #-8]
    // 0x2a4920: r1 = Function '<anonymous closure>':.
    //     0x2a4920: add             x1, PP, #0x11, lsl #12  ; [pp+0x11370] AnonymousClosure: (0x2a4e28), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_actions (0x2a33c8)
    //     0x2a4924: ldr             x1, [x1, #0x370]
    // 0x2a4928: r0 = AllocateClosure()
    //     0x2a4928: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2a492c: r1 = <PasteTextIntent>
    //     0x2a492c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11378] TypeArguments: <PasteTextIntent>
    //     0x2a4930: ldr             x1, [x1, #0x378]
    // 0x2a4934: stur            x0, [fp, #-8]
    // 0x2a4938: r0 = CallbackAction()
    //     0x2a4938: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a493c: mov             x2, x0
    // 0x2a4940: ldur            x0, [fp, #-8]
    // 0x2a4944: stur            x2, [fp, #-0x18]
    // 0x2a4948: StoreField: r2->field_13 = r0
    //     0x2a4948: stur            w0, [x2, #0x13]
    // 0x2a494c: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a494c: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4950: ldr             x1, [x1, #0xb18]
    // 0x2a4954: r0 = ObserverList()
    //     0x2a4954: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4958: mov             x1, x0
    // 0x2a495c: r0 = false
    //     0x2a495c: add             x0, NULL, #0x30  ; false
    // 0x2a4960: stur            x1, [fp, #-8]
    // 0x2a4964: StoreField: r1->field_f = r0
    //     0x2a4964: stur            w0, [x1, #0xf]
    // 0x2a4968: r0 = Sentinel
    //     0x2a4968: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a496c: StoreField: r1->field_13 = r0
    //     0x2a496c: stur            w0, [x1, #0x13]
    // 0x2a4970: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4970: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4974: ldr             x16, [x16, #0xb18]
    // 0x2a4978: stp             xzr, x16, [SP]
    // 0x2a497c: r0 = _GrowableList()
    //     0x2a497c: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a4980: ldur            x1, [fp, #-8]
    // 0x2a4984: StoreField: r1->field_b = r0
    //     0x2a4984: stur            w0, [x1, #0xb]
    //     0x2a4988: ldurb           w16, [x1, #-1]
    //     0x2a498c: ldurb           w17, [x0, #-1]
    //     0x2a4990: and             x16, x17, x16, lsr #2
    //     0x2a4994: tst             x16, HEAP, lsr #32
    //     0x2a4998: b.eq            #0x2a49a0
    //     0x2a499c: bl              #0x3e4608
    // 0x2a49a0: mov             x0, x1
    // 0x2a49a4: ldur            x1, [fp, #-0x18]
    // 0x2a49a8: StoreField: r1->field_b = r0
    //     0x2a49a8: stur            w0, [x1, #0xb]
    //     0x2a49ac: ldurb           w16, [x1, #-1]
    //     0x2a49b0: ldurb           w17, [x0, #-1]
    //     0x2a49b4: and             x16, x17, x16, lsr #2
    //     0x2a49b8: tst             x16, HEAP, lsr #32
    //     0x2a49bc: b.eq            #0x2a49c4
    //     0x2a49c0: bl              #0x3e4608
    // 0x2a49c4: r16 = <Intent>
    //     0x2a49c4: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a49c8: ldr             lr, [fp, #0x10]
    // 0x2a49cc: stp             lr, x16, [SP, #8]
    // 0x2a49d0: str             x1, [SP]
    // 0x2a49d4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a49d4: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a49d8: r0 = _makeOverridable()
    //     0x2a49d8: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a49dc: ldur            x1, [fp, #-0x10]
    // 0x2a49e0: ArrayStore: r1[49] = r0  ; List_4
    //     0x2a49e0: add             x25, x1, #0xd3
    //     0x2a49e4: str             w0, [x25]
    //     0x2a49e8: tbz             w0, #0, #0x2a4a04
    //     0x2a49ec: ldurb           w16, [x1, #-1]
    //     0x2a49f0: ldurb           w17, [x0, #-1]
    //     0x2a49f4: and             x16, x17, x16, lsr #2
    //     0x2a49f8: tst             x16, HEAP, lsr #32
    //     0x2a49fc: b.eq            #0x2a4a04
    //     0x2a4a00: bl              #0x3e41ec
    // 0x2a4a04: ldur            x0, [fp, #-0x10]
    // 0x2a4a08: r17 = TransposeCharactersIntent
    //     0x2a4a08: add             x17, PP, #0x11, lsl #12  ; [pp+0x11380] Type: TransposeCharactersIntent
    //     0x2a4a0c: ldr             x17, [x17, #0x380]
    // 0x2a4a10: StoreField: r0->field_d7 = r17
    //     0x2a4a10: stur            w17, [x0, #0xd7]
    // 0x2a4a14: ldr             x1, [fp, #0x10]
    // 0x2a4a18: LoadField: r0 = r1->field_bb
    //     0x2a4a18: ldur            w0, [x1, #0xbb]
    // 0x2a4a1c: DecompressPointer r0
    //     0x2a4a1c: add             x0, x0, HEAP, lsl #32
    // 0x2a4a20: r16 = Sentinel
    //     0x2a4a20: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4a24: cmp             w0, w16
    // 0x2a4a28: b.ne            #0x2a4a38
    // 0x2a4a2c: r2 = _transposeCharactersAction
    //     0x2a4a2c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11388] Field <EditableTextState._transposeCharactersAction@148183791>: late final (offset: 0xbc)
    //     0x2a4a30: ldr             x2, [x2, #0x388]
    // 0x2a4a34: r0 = InitLateFinalInstanceField()
    //     0x2a4a34: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2a4a38: r16 = <Intent>
    //     0x2a4a38: ldr             x16, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a4a3c: ldr             lr, [fp, #0x10]
    // 0x2a4a40: stp             lr, x16, [SP, #8]
    // 0x2a4a44: str             x0, [SP]
    // 0x2a4a48: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2a4a48: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2a4a4c: r0 = _makeOverridable()
    //     0x2a4a4c: bl              #0x2a4ca0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x2a4a50: ldur            x1, [fp, #-0x10]
    // 0x2a4a54: ArrayStore: r1[51] = r0  ; List_4
    //     0x2a4a54: add             x25, x1, #0xdb
    //     0x2a4a58: str             w0, [x25]
    //     0x2a4a5c: tbz             w0, #0, #0x2a4a78
    //     0x2a4a60: ldurb           w16, [x1, #-1]
    //     0x2a4a64: ldurb           w17, [x0, #-1]
    //     0x2a4a68: and             x16, x17, x16, lsr #2
    //     0x2a4a6c: tst             x16, HEAP, lsr #32
    //     0x2a4a70: b.eq            #0x2a4a78
    //     0x2a4a74: bl              #0x3e41ec
    // 0x2a4a78: r16 = <Type, Action<Intent>>
    //     0x2a4a78: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb10] TypeArguments: <Type, Action<Intent>>
    //     0x2a4a7c: ldr             x16, [x16, #0xb10]
    // 0x2a4a80: ldur            lr, [fp, #-0x10]
    // 0x2a4a84: stp             lr, x16, [SP]
    // 0x2a4a88: r0 = Map._fromLiteral()
    //     0x2a4a88: bl              #0x18fe4c  ; [dart:core] Map::Map._fromLiteral
    // 0x2a4a8c: LeaveFrame
    //     0x2a4a8c: mov             SP, fp
    //     0x2a4a90: ldp             fp, lr, [SP], #0x10
    // 0x2a4a94: ret
    //     0x2a4a94: ret             
    // 0x2a4a98: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a4a98: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a4a9c: b               #0x2a33e0
  }
  _ _makeOverridable(/* No info */) {
    // ** addr: 0x2a4ca0, size: 0x8c
    // 0x2a4ca0: EnterFrame
    //     0x2a4ca0: stp             fp, lr, [SP, #-0x10]!
    //     0x2a4ca4: mov             fp, SP
    // 0x2a4ca8: AllocStack(0x18)
    //     0x2a4ca8: sub             SP, SP, #0x18
    // 0x2a4cac: SetupParameters()
    //     0x2a4cac: mov             x0, x4
    //     0x2a4cb0: ldur            w1, [x0, #0xf]
    //     0x2a4cb4: add             x1, x1, HEAP, lsl #32
    //     0x2a4cb8: cbnz            w1, #0x2a4cc4
    //     0x2a4cbc: mov             x0, NULL
    //     0x2a4cc0: b               #0x2a4cd4
    //     0x2a4cc4: ldur            w2, [x0, #0x17]
    //     0x2a4cc8: add             x2, x2, HEAP, lsl #32
    //     0x2a4ccc: add             x0, fp, w2, sxtw #2
    //     0x2a4cd0: ldr             x0, [x0, #0x10]
    // 0x2a4cd4: CheckStackOverflow
    //     0x2a4cd4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a4cd8: cmp             SP, x16
    //     0x2a4cdc: b.ls            #0x2a4d20
    // 0x2a4ce0: cbnz            w1, #0x2a4cec
    // 0x2a4ce4: r1 = <Intent>
    //     0x2a4ce4: ldr             x1, [PP, #0x4bd0]  ; [pp+0x4bd0] TypeArguments: <Intent>
    // 0x2a4ce8: b               #0x2a4cf0
    // 0x2a4cec: mov             x1, x0
    // 0x2a4cf0: ldr             x0, [fp, #0x18]
    // 0x2a4cf4: LoadField: r2 = r0->field_f
    //     0x2a4cf4: ldur            w2, [x0, #0xf]
    // 0x2a4cf8: DecompressPointer r2
    //     0x2a4cf8: add             x2, x2, HEAP, lsl #32
    // 0x2a4cfc: cmp             w2, NULL
    // 0x2a4d00: b.eq            #0x2a4d28
    // 0x2a4d04: stp             x2, x1, [SP, #8]
    // 0x2a4d08: ldr             x16, [fp, #0x10]
    // 0x2a4d0c: str             x16, [SP]
    // 0x2a4d10: r0 = Action.overridable()
    //     0x2a4d10: bl              #0x29d7d8  ; [package:flutter/src/widgets/actions.dart] Action::Action.overridable
    // 0x2a4d14: LeaveFrame
    //     0x2a4d14: mov             SP, fp
    //     0x2a4d18: ldp             fp, lr, [SP], #0x10
    // 0x2a4d1c: ret
    //     0x2a4d1c: ret             
    // 0x2a4d20: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a4d20: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a4d24: b               #0x2a4ce0
    // 0x2a4d28: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2a4d28: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  Action<TransposeCharactersIntent> _transposeCharactersAction(EditableTextState) {
    // ** addr: 0x2a4d38, size: 0xf0
    // 0x2a4d38: EnterFrame
    //     0x2a4d38: stp             fp, lr, [SP, #-0x10]!
    //     0x2a4d3c: mov             fp, SP
    // 0x2a4d40: AllocStack(0x20)
    //     0x2a4d40: sub             SP, SP, #0x20
    // 0x2a4d44: CheckStackOverflow
    //     0x2a4d44: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a4d48: cmp             SP, x16
    //     0x2a4d4c: b.ls            #0x2a4e20
    // 0x2a4d50: ldr             x0, [fp, #0x10]
    // 0x2a4d54: r1 = 59
    //     0x2a4d54: movz            x1, #0x3b
    // 0x2a4d58: branchIfSmi(r0, 0x2a4d64)
    //     0x2a4d58: tbz             w0, #0, #0x2a4d64
    // 0x2a4d5c: r1 = LoadClassIdInstr(r0)
    //     0x2a4d5c: ldur            x1, [x0, #-1]
    //     0x2a4d60: ubfx            x1, x1, #0xc, #0x14
    // 0x2a4d64: str             x0, [SP]
    // 0x2a4d68: mov             x0, x1
    // 0x2a4d6c: r0 = GDT[cid_x0 + -0xf8d]()
    //     0x2a4d6c: sub             lr, x0, #0xf8d
    //     0x2a4d70: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4d74: blr             lr
    // 0x2a4d78: r1 = <TransposeCharactersIntent>
    //     0x2a4d78: add             x1, PP, #0x11, lsl #12  ; [pp+0x11390] TypeArguments: <TransposeCharactersIntent>
    //     0x2a4d7c: ldr             x1, [x1, #0x390]
    // 0x2a4d80: stur            x0, [fp, #-8]
    // 0x2a4d84: r0 = CallbackAction()
    //     0x2a4d84: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a4d88: mov             x2, x0
    // 0x2a4d8c: ldur            x0, [fp, #-8]
    // 0x2a4d90: stur            x2, [fp, #-0x10]
    // 0x2a4d94: StoreField: r2->field_13 = r0
    //     0x2a4d94: stur            w0, [x2, #0x13]
    // 0x2a4d98: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4d98: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4d9c: ldr             x1, [x1, #0xb18]
    // 0x2a4da0: r0 = ObserverList()
    //     0x2a4da0: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4da4: mov             x1, x0
    // 0x2a4da8: r0 = false
    //     0x2a4da8: add             x0, NULL, #0x30  ; false
    // 0x2a4dac: stur            x1, [fp, #-8]
    // 0x2a4db0: StoreField: r1->field_f = r0
    //     0x2a4db0: stur            w0, [x1, #0xf]
    // 0x2a4db4: r0 = Sentinel
    //     0x2a4db4: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4db8: StoreField: r1->field_13 = r0
    //     0x2a4db8: stur            w0, [x1, #0x13]
    // 0x2a4dbc: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4dbc: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4dc0: ldr             x16, [x16, #0xb18]
    // 0x2a4dc4: stp             xzr, x16, [SP]
    // 0x2a4dc8: r0 = _GrowableList()
    //     0x2a4dc8: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a4dcc: ldur            x1, [fp, #-8]
    // 0x2a4dd0: StoreField: r1->field_b = r0
    //     0x2a4dd0: stur            w0, [x1, #0xb]
    //     0x2a4dd4: ldurb           w16, [x1, #-1]
    //     0x2a4dd8: ldurb           w17, [x0, #-1]
    //     0x2a4ddc: and             x16, x17, x16, lsr #2
    //     0x2a4de0: tst             x16, HEAP, lsr #32
    //     0x2a4de4: b.eq            #0x2a4dec
    //     0x2a4de8: bl              #0x3e4608
    // 0x2a4dec: mov             x0, x1
    // 0x2a4df0: ldur            x1, [fp, #-0x10]
    // 0x2a4df4: StoreField: r1->field_b = r0
    //     0x2a4df4: stur            w0, [x1, #0xb]
    //     0x2a4df8: ldurb           w16, [x1, #-1]
    //     0x2a4dfc: ldurb           w17, [x0, #-1]
    //     0x2a4e00: and             x16, x17, x16, lsr #2
    //     0x2a4e04: tst             x16, HEAP, lsr #32
    //     0x2a4e08: b.eq            #0x2a4e10
    //     0x2a4e0c: bl              #0x3e4608
    // 0x2a4e10: mov             x0, x1
    // 0x2a4e14: LeaveFrame
    //     0x2a4e14: mov             SP, fp
    //     0x2a4e18: ldp             fp, lr, [SP], #0x10
    // 0x2a4e1c: ret
    //     0x2a4e1c: ret             
    // 0x2a4e20: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a4e20: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a4e24: b               #0x2a4d50
  }
  [closure] Future<void> <anonymous closure>(dynamic, PasteTextIntent) {
    // ** addr: 0x2a4e28, size: 0x4c
    // 0x2a4e28: EnterFrame
    //     0x2a4e28: stp             fp, lr, [SP, #-0x10]!
    //     0x2a4e2c: mov             fp, SP
    // 0x2a4e30: AllocStack(0x10)
    //     0x2a4e30: sub             SP, SP, #0x10
    // 0x2a4e34: SetupParameters()
    //     0x2a4e34: ldr             x0, [fp, #0x18]
    //     0x2a4e38: ldur            w1, [x0, #0x17]
    //     0x2a4e3c: add             x1, x1, HEAP, lsl #32
    // 0x2a4e40: CheckStackOverflow
    //     0x2a4e40: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a4e44: cmp             SP, x16
    //     0x2a4e48: b.ls            #0x2a4e6c
    // 0x2a4e4c: LoadField: r0 = r1->field_f
    //     0x2a4e4c: ldur            w0, [x1, #0xf]
    // 0x2a4e50: DecompressPointer r0
    //     0x2a4e50: add             x0, x0, HEAP, lsl #32
    // 0x2a4e54: r16 = Instance_SelectionChangedCause
    //     0x2a4e54: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x2a4e58: stp             x16, x0, [SP]
    // 0x2a4e5c: r0 = pasteText()
    //     0x2a4e5c: bl              #0x27c048  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x2a4e60: LeaveFrame
    //     0x2a4e60: mov             SP, fp
    //     0x2a4e64: ldp             fp, lr, [SP], #0x10
    // 0x2a4e68: ret
    //     0x2a4e68: ret             
    // 0x2a4e6c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a4e6c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a4e70: b               #0x2a4e4c
  }
  Action<UpdateSelectionIntent> _updateSelectionAction(EditableTextState) {
    // ** addr: 0x2a4ef4, size: 0xf0
    // 0x2a4ef4: EnterFrame
    //     0x2a4ef4: stp             fp, lr, [SP, #-0x10]!
    //     0x2a4ef8: mov             fp, SP
    // 0x2a4efc: AllocStack(0x20)
    //     0x2a4efc: sub             SP, SP, #0x20
    // 0x2a4f00: CheckStackOverflow
    //     0x2a4f00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a4f04: cmp             SP, x16
    //     0x2a4f08: b.ls            #0x2a4fdc
    // 0x2a4f0c: ldr             x0, [fp, #0x10]
    // 0x2a4f10: r1 = 59
    //     0x2a4f10: movz            x1, #0x3b
    // 0x2a4f14: branchIfSmi(r0, 0x2a4f20)
    //     0x2a4f14: tbz             w0, #0, #0x2a4f20
    // 0x2a4f18: r1 = LoadClassIdInstr(r0)
    //     0x2a4f18: ldur            x1, [x0, #-1]
    //     0x2a4f1c: ubfx            x1, x1, #0xc, #0x14
    // 0x2a4f20: str             x0, [SP]
    // 0x2a4f24: mov             x0, x1
    // 0x2a4f28: r0 = GDT[cid_x0 + -0xf6d]()
    //     0x2a4f28: sub             lr, x0, #0xf6d
    //     0x2a4f2c: ldr             lr, [x21, lr, lsl #3]
    //     0x2a4f30: blr             lr
    // 0x2a4f34: r1 = <UpdateSelectionIntent>
    //     0x2a4f34: add             x1, PP, #0x11, lsl #12  ; [pp+0x113a0] TypeArguments: <UpdateSelectionIntent>
    //     0x2a4f38: ldr             x1, [x1, #0x3a0]
    // 0x2a4f3c: stur            x0, [fp, #-8]
    // 0x2a4f40: r0 = CallbackAction()
    //     0x2a4f40: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a4f44: mov             x2, x0
    // 0x2a4f48: ldur            x0, [fp, #-8]
    // 0x2a4f4c: stur            x2, [fp, #-0x10]
    // 0x2a4f50: StoreField: r2->field_13 = r0
    //     0x2a4f50: stur            w0, [x2, #0x13]
    // 0x2a4f54: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4f54: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4f58: ldr             x1, [x1, #0xb18]
    // 0x2a4f5c: r0 = ObserverList()
    //     0x2a4f5c: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a4f60: mov             x1, x0
    // 0x2a4f64: r0 = false
    //     0x2a4f64: add             x0, NULL, #0x30  ; false
    // 0x2a4f68: stur            x1, [fp, #-8]
    // 0x2a4f6c: StoreField: r1->field_f = r0
    //     0x2a4f6c: stur            w0, [x1, #0xf]
    // 0x2a4f70: r0 = Sentinel
    //     0x2a4f70: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a4f74: StoreField: r1->field_13 = r0
    //     0x2a4f74: stur            w0, [x1, #0x13]
    // 0x2a4f78: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a4f78: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a4f7c: ldr             x16, [x16, #0xb18]
    // 0x2a4f80: stp             xzr, x16, [SP]
    // 0x2a4f84: r0 = _GrowableList()
    //     0x2a4f84: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a4f88: ldur            x1, [fp, #-8]
    // 0x2a4f8c: StoreField: r1->field_b = r0
    //     0x2a4f8c: stur            w0, [x1, #0xb]
    //     0x2a4f90: ldurb           w16, [x1, #-1]
    //     0x2a4f94: ldurb           w17, [x0, #-1]
    //     0x2a4f98: and             x16, x17, x16, lsr #2
    //     0x2a4f9c: tst             x16, HEAP, lsr #32
    //     0x2a4fa0: b.eq            #0x2a4fa8
    //     0x2a4fa4: bl              #0x3e4608
    // 0x2a4fa8: mov             x0, x1
    // 0x2a4fac: ldur            x1, [fp, #-0x10]
    // 0x2a4fb0: StoreField: r1->field_b = r0
    //     0x2a4fb0: stur            w0, [x1, #0xb]
    //     0x2a4fb4: ldurb           w16, [x1, #-1]
    //     0x2a4fb8: ldurb           w17, [x0, #-1]
    //     0x2a4fbc: and             x16, x17, x16, lsr #2
    //     0x2a4fc0: tst             x16, HEAP, lsr #32
    //     0x2a4fc4: b.eq            #0x2a4fcc
    //     0x2a4fc8: bl              #0x3e4608
    // 0x2a4fcc: mov             x0, x1
    // 0x2a4fd0: LeaveFrame
    //     0x2a4fd0: mov             SP, fp
    //     0x2a4fd4: ldp             fp, lr, [SP], #0x10
    // 0x2a4fd8: ret
    //     0x2a4fd8: ret             
    // 0x2a4fdc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a4fdc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a4fe0: b               #0x2a4f0c
  }
  Action<ReplaceTextIntent> _replaceTextAction(EditableTextState) {
    // ** addr: 0x2a5004, size: 0xf0
    // 0x2a5004: EnterFrame
    //     0x2a5004: stp             fp, lr, [SP, #-0x10]!
    //     0x2a5008: mov             fp, SP
    // 0x2a500c: AllocStack(0x20)
    //     0x2a500c: sub             SP, SP, #0x20
    // 0x2a5010: CheckStackOverflow
    //     0x2a5010: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a5014: cmp             SP, x16
    //     0x2a5018: b.ls            #0x2a50ec
    // 0x2a501c: ldr             x0, [fp, #0x10]
    // 0x2a5020: r1 = 59
    //     0x2a5020: movz            x1, #0x3b
    // 0x2a5024: branchIfSmi(r0, 0x2a5030)
    //     0x2a5024: tbz             w0, #0, #0x2a5030
    // 0x2a5028: r1 = LoadClassIdInstr(r0)
    //     0x2a5028: ldur            x1, [x0, #-1]
    //     0x2a502c: ubfx            x1, x1, #0xc, #0x14
    // 0x2a5030: str             x0, [SP]
    // 0x2a5034: mov             x0, x1
    // 0x2a5038: r0 = GDT[cid_x0 + -0xf77]()
    //     0x2a5038: sub             lr, x0, #0xf77
    //     0x2a503c: ldr             lr, [x21, lr, lsl #3]
    //     0x2a5040: blr             lr
    // 0x2a5044: r1 = <ReplaceTextIntent>
    //     0x2a5044: add             x1, PP, #0x11, lsl #12  ; [pp+0x113a8] TypeArguments: <ReplaceTextIntent>
    //     0x2a5048: ldr             x1, [x1, #0x3a8]
    // 0x2a504c: stur            x0, [fp, #-8]
    // 0x2a5050: r0 = CallbackAction()
    //     0x2a5050: bl              #0x28c104  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x2a5054: mov             x2, x0
    // 0x2a5058: ldur            x0, [fp, #-8]
    // 0x2a505c: stur            x2, [fp, #-0x10]
    // 0x2a5060: StoreField: r2->field_13 = r0
    //     0x2a5060: stur            w0, [x2, #0x13]
    // 0x2a5064: r1 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a5064: add             x1, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a5068: ldr             x1, [x1, #0xb18]
    // 0x2a506c: r0 = ObserverList()
    //     0x2a506c: bl              #0x2174f0  ; AllocateObserverListStub -> ObserverList<X0> (size=0x18)
    // 0x2a5070: mov             x1, x0
    // 0x2a5074: r0 = false
    //     0x2a5074: add             x0, NULL, #0x30  ; false
    // 0x2a5078: stur            x1, [fp, #-8]
    // 0x2a507c: StoreField: r1->field_f = r0
    //     0x2a507c: stur            w0, [x1, #0xf]
    // 0x2a5080: r0 = Sentinel
    //     0x2a5080: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2a5084: StoreField: r1->field_13 = r0
    //     0x2a5084: stur            w0, [x1, #0x13]
    // 0x2a5088: r16 = <(dynamic this, Action<Intent>) => void?>
    //     0x2a5088: add             x16, PP, #0xd, lsl #12  ; [pp+0xdb18] TypeArguments: <(dynamic this, Action<Intent>) => void?>
    //     0x2a508c: ldr             x16, [x16, #0xb18]
    // 0x2a5090: stp             xzr, x16, [SP]
    // 0x2a5094: r0 = _GrowableList()
    //     0x2a5094: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2a5098: ldur            x1, [fp, #-8]
    // 0x2a509c: StoreField: r1->field_b = r0
    //     0x2a509c: stur            w0, [x1, #0xb]
    //     0x2a50a0: ldurb           w16, [x1, #-1]
    //     0x2a50a4: ldurb           w17, [x0, #-1]
    //     0x2a50a8: and             x16, x17, x16, lsr #2
    //     0x2a50ac: tst             x16, HEAP, lsr #32
    //     0x2a50b0: b.eq            #0x2a50b8
    //     0x2a50b4: bl              #0x3e4608
    // 0x2a50b8: mov             x0, x1
    // 0x2a50bc: ldur            x1, [fp, #-0x10]
    // 0x2a50c0: StoreField: r1->field_b = r0
    //     0x2a50c0: stur            w0, [x1, #0xb]
    //     0x2a50c4: ldurb           w16, [x1, #-1]
    //     0x2a50c8: ldurb           w17, [x0, #-1]
    //     0x2a50cc: and             x16, x17, x16, lsr #2
    //     0x2a50d0: tst             x16, HEAP, lsr #32
    //     0x2a50d4: b.eq            #0x2a50dc
    //     0x2a50d8: bl              #0x3e4608
    // 0x2a50dc: mov             x0, x1
    // 0x2a50e0: LeaveFrame
    //     0x2a50e0: mov             SP, fp
    //     0x2a50e4: ldp             fp, lr, [SP], #0x10
    // 0x2a50e8: ret
    //     0x2a50e8: ret             
    // 0x2a50ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2a50ec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2a50f0: b               #0x2a501c
  }
  [closure] TextScaler? ##0#1#initializer(dynamic) {
    // ** addr: 0x2a5114, size: 0x20
    // 0x2a5114: ldr             x1, [SP]
    // 0x2a5118: LoadField: r2 = r1->field_17
    //     0x2a5118: ldur            w2, [x1, #0x17]
    // 0x2a511c: DecompressPointer r2
    //     0x2a511c: add             x2, x2, HEAP, lsl #32
    // 0x2a5120: LoadField: r1 = r2->field_1b
    //     0x2a5120: ldur            w1, [x2, #0x1b]
    // 0x2a5124: DecompressPointer r1
    //     0x2a5124: add             x1, x1, HEAP, lsl #32
    // 0x2a5128: LoadField: r0 = r1->field_f
    //     0x2a5128: ldur            w0, [x1, #0xf]
    // 0x2a512c: DecompressPointer r0
    //     0x2a512c: add             x0, x0, HEAP, lsl #32
    // 0x2a5130: ret
    //     0x2a5130: ret             
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2b0254, size: 0x2b8
    // 0x2b0254: EnterFrame
    //     0x2b0254: stp             fp, lr, [SP, #-0x10]!
    //     0x2b0258: mov             fp, SP
    // 0x2b025c: AllocStack(0x18)
    //     0x2b025c: sub             SP, SP, #0x18
    // 0x2b0260: CheckStackOverflow
    //     0x2b0260: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b0264: cmp             SP, x16
    //     0x2b0268: b.ls            #0x2b04f0
    // 0x2b026c: ldr             x0, [fp, #0x10]
    // 0x2b0270: LoadField: r1 = r0->field_47
    //     0x2b0270: ldur            w1, [x0, #0x47]
    // 0x2b0274: DecompressPointer r1
    //     0x2b0274: add             x1, x1, HEAP, lsl #32
    // 0x2b0278: cmp             w1, NULL
    // 0x2b027c: b.eq            #0x2b028c
    // 0x2b0280: str             x1, [SP]
    // 0x2b0284: r0 = dispose()
    //     0x2b0284: bl              #0x2b231c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::dispose
    // 0x2b0288: ldr             x0, [fp, #0x10]
    // 0x2b028c: LoadField: r1 = r0->field_b
    //     0x2b028c: ldur            w1, [x0, #0xb]
    // 0x2b0290: DecompressPointer r1
    //     0x2b0290: add             x1, x1, HEAP, lsl #32
    // 0x2b0294: cmp             w1, NULL
    // 0x2b0298: b.eq            #0x2b04f8
    // 0x2b029c: LoadField: r2 = r1->field_b
    //     0x2b029c: ldur            w2, [x1, #0xb]
    // 0x2b02a0: DecompressPointer r2
    //     0x2b02a0: add             x2, x2, HEAP, lsl #32
    // 0x2b02a4: stur            x2, [fp, #-8]
    // 0x2b02a8: r1 = 1
    //     0x2b02a8: movz            x1, #0x1
    // 0x2b02ac: r0 = AllocateContext()
    //     0x2b02ac: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2b02b0: mov             x1, x0
    // 0x2b02b4: ldr             x0, [fp, #0x10]
    // 0x2b02b8: StoreField: r1->field_f = r0
    //     0x2b02b8: stur            w0, [x1, #0xf]
    // 0x2b02bc: mov             x2, x1
    // 0x2b02c0: r1 = Function '_didChangeTextEditingValue@148183791':.
    //     0x2b02c0: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f0] AnonymousClosure: (0x26ecdc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x26ed24)
    //     0x2b02c4: ldr             x1, [x1, #0x3f0]
    // 0x2b02c8: r0 = AllocateClosure()
    //     0x2b02c8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b02cc: ldur            x16, [fp, #-8]
    // 0x2b02d0: stp             x0, x16, [SP]
    // 0x2b02d4: r0 = removeListener()
    //     0x2b02d4: bl              #0x3b28b0  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0x2b02d8: ldr             x0, [fp, #0x10]
    // 0x2b02dc: LoadField: r1 = r0->field_67
    //     0x2b02dc: ldur            w1, [x0, #0x67]
    // 0x2b02e0: DecompressPointer r1
    //     0x2b02e0: add             x1, x1, HEAP, lsl #32
    // 0x2b02e4: cmp             w1, NULL
    // 0x2b02e8: b.eq            #0x2b02f8
    // 0x2b02ec: str             x1, [SP]
    // 0x2b02f0: r0 = dispose()
    //     0x2b02f0: bl              #0x2069f4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0x2b02f4: ldr             x0, [fp, #0x10]
    // 0x2b02f8: StoreField: r0->field_67 = rNULL
    //     0x2b02f8: stur            NULL, [x0, #0x67]
    // 0x2b02fc: str             x0, [SP]
    // 0x2b0300: r0 = _closeInputConnectionIfNeeded()
    //     0x2b0300: bl              #0x26e87c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_closeInputConnectionIfNeeded
    // 0x2b0304: ldr             x0, [fp, #0x10]
    // 0x2b0308: LoadField: r1 = r0->field_1f
    //     0x2b0308: ldur            w1, [x0, #0x1f]
    // 0x2b030c: DecompressPointer r1
    //     0x2b030c: add             x1, x1, HEAP, lsl #32
    // 0x2b0310: cmp             w1, NULL
    // 0x2b0314: b.eq            #0x2b0324
    // 0x2b0318: str             x1, [SP]
    // 0x2b031c: r0 = cancel()
    //     0x2b031c: bl              #0x1a238c  ; [dart:isolate] _Timer::cancel
    // 0x2b0320: ldr             x0, [fp, #0x10]
    // 0x2b0324: StoreField: r0->field_1f = rNULL
    //     0x2b0324: stur            NULL, [x0, #0x1f]
    // 0x2b0328: LoadField: r1 = r0->field_23
    //     0x2b0328: ldur            w1, [x0, #0x23]
    // 0x2b032c: DecompressPointer r1
    //     0x2b032c: add             x1, x1, HEAP, lsl #32
    // 0x2b0330: cmp             w1, NULL
    // 0x2b0334: b.eq            #0x2b0344
    // 0x2b0338: str             x1, [SP]
    // 0x2b033c: r0 = dispose()
    //     0x2b033c: bl              #0x2069f4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0x2b0340: ldr             x0, [fp, #0x10]
    // 0x2b0344: StoreField: r0->field_23 = rNULL
    //     0x2b0344: stur            NULL, [x0, #0x23]
    // 0x2b0348: LoadField: r1 = r0->field_3f
    //     0x2b0348: ldur            w1, [x0, #0x3f]
    // 0x2b034c: DecompressPointer r1
    //     0x2b034c: add             x1, x1, HEAP, lsl #32
    // 0x2b0350: cmp             w1, NULL
    // 0x2b0354: b.eq            #0x2b0364
    // 0x2b0358: str             x1, [SP]
    // 0x2b035c: r0 = dispose()
    //     0x2b035c: bl              #0x26e610  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::dispose
    // 0x2b0360: ldr             x0, [fp, #0x10]
    // 0x2b0364: StoreField: r0->field_3f = rNULL
    //     0x2b0364: stur            NULL, [x0, #0x3f]
    // 0x2b0368: LoadField: r1 = r0->field_b
    //     0x2b0368: ldur            w1, [x0, #0xb]
    // 0x2b036c: DecompressPointer r1
    //     0x2b036c: add             x1, x1, HEAP, lsl #32
    // 0x2b0370: cmp             w1, NULL
    // 0x2b0374: b.eq            #0x2b04fc
    // 0x2b0378: LoadField: r2 = r1->field_f
    //     0x2b0378: ldur            w2, [x1, #0xf]
    // 0x2b037c: DecompressPointer r2
    //     0x2b037c: add             x2, x2, HEAP, lsl #32
    // 0x2b0380: stur            x2, [fp, #-8]
    // 0x2b0384: r1 = 1
    //     0x2b0384: movz            x1, #0x1
    // 0x2b0388: r0 = AllocateContext()
    //     0x2b0388: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2b038c: mov             x1, x0
    // 0x2b0390: ldr             x0, [fp, #0x10]
    // 0x2b0394: StoreField: r1->field_f = r0
    //     0x2b0394: stur            w0, [x1, #0xf]
    // 0x2b0398: mov             x2, x1
    // 0x2b039c: r1 = Function '_handleFocusChanged@148183791':.
    //     0x2b039c: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f8] AnonymousClosure: (0x26e1ac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x26e1f4)
    //     0x2b03a0: ldr             x1, [x1, #0x3f8]
    // 0x2b03a4: r0 = AllocateClosure()
    //     0x2b03a4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b03a8: ldur            x16, [fp, #-8]
    // 0x2b03ac: stp             x0, x16, [SP]
    // 0x2b03b0: r0 = removeListener()
    //     0x2b03b0: bl              #0x3ba704  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0x2b03b4: r0 = LoadStaticField(0x970)
    //     0x2b03b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2b03b8: ldr             x0, [x0, #0x12e0]
    // 0x2b03bc: cmp             w0, NULL
    // 0x2b03c0: b.eq            #0x2b0500
    // 0x2b03c4: ldr             x16, [fp, #0x10]
    // 0x2b03c8: stp             x16, x0, [SP]
    // 0x2b03cc: r0 = removeObserver()
    //     0x2b03cc: bl              #0x26e450  ; [package:flutter/src/widgets/binding.dart] _WidgetsFlutterBinding&BindingBase&GestureBinding&SchedulerBinding&ServicesBinding&PaintingBinding&SemanticsBinding&RendererBinding&WidgetsBinding::removeObserver
    // 0x2b03d0: ldr             x0, [fp, #0x10]
    // 0x2b03d4: LoadField: r1 = r0->field_37
    //     0x2b03d4: ldur            w1, [x0, #0x37]
    // 0x2b03d8: DecompressPointer r1
    //     0x2b03d8: add             x1, x1, HEAP, lsl #32
    // 0x2b03dc: stur            x1, [fp, #-8]
    // 0x2b03e0: r1 = 1
    //     0x2b03e0: movz            x1, #0x1
    // 0x2b03e4: r0 = AllocateContext()
    //     0x2b03e4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2b03e8: mov             x1, x0
    // 0x2b03ec: ldr             x0, [fp, #0x10]
    // 0x2b03f0: StoreField: r1->field_f = r0
    //     0x2b03f0: stur            w0, [x1, #0xf]
    // 0x2b03f4: mov             x2, x1
    // 0x2b03f8: r1 = Function '_onChangedLiveTextInputStatus@148183791':.
    //     0x2b03f8: add             x1, PP, #0x11, lsl #12  ; [pp+0x11400] AnonymousClosure: (0x2b0640), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedLiveTextInputStatus (0x2b0688)
    //     0x2b03fc: ldr             x1, [x1, #0x400]
    // 0x2b0400: r0 = AllocateClosure()
    //     0x2b0400: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b0404: ldur            x16, [fp, #-8]
    // 0x2b0408: stp             x0, x16, [SP]
    // 0x2b040c: r0 = removeListener()
    //     0x2b040c: bl              #0x3b23d0  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::removeListener
    // 0x2b0410: ldur            x16, [fp, #-8]
    // 0x2b0414: str             x16, [SP]
    // 0x2b0418: r0 = dispose()
    //     0x2b0418: bl              #0x2b1d54  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::dispose
    // 0x2b041c: ldr             x0, [fp, #0x10]
    // 0x2b0420: LoadField: r1 = r0->field_33
    //     0x2b0420: ldur            w1, [x0, #0x33]
    // 0x2b0424: DecompressPointer r1
    //     0x2b0424: add             x1, x1, HEAP, lsl #32
    // 0x2b0428: stur            x1, [fp, #-8]
    // 0x2b042c: r1 = 1
    //     0x2b042c: movz            x1, #0x1
    // 0x2b0430: r0 = AllocateContext()
    //     0x2b0430: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2b0434: mov             x1, x0
    // 0x2b0438: ldr             x0, [fp, #0x10]
    // 0x2b043c: StoreField: r1->field_f = r0
    //     0x2b043c: stur            w0, [x1, #0xf]
    // 0x2b0440: mov             x2, x1
    // 0x2b0444: r1 = Function '_onChangedClipboardStatus@148183791':.
    //     0x2b0444: add             x1, PP, #0x11, lsl #12  ; [pp+0x11408] AnonymousClosure: (0x2b05ac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedClipboardStatus (0x2b05f4)
    //     0x2b0448: ldr             x1, [x1, #0x408]
    // 0x2b044c: r0 = AllocateClosure()
    //     0x2b044c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b0450: ldur            x16, [fp, #-8]
    // 0x2b0454: stp             x0, x16, [SP]
    // 0x2b0458: r0 = removeListener()
    //     0x2b0458: bl              #0x3b23d0  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::removeListener
    // 0x2b045c: ldur            x16, [fp, #-8]
    // 0x2b0460: str             x16, [SP]
    // 0x2b0464: r0 = dispose()
    //     0x2b0464: bl              #0x2b1d54  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::dispose
    // 0x2b0468: ldr             x0, [fp, #0x10]
    // 0x2b046c: LoadField: r1 = r0->field_2b
    //     0x2b046c: ldur            w1, [x0, #0x2b]
    // 0x2b0470: DecompressPointer r1
    //     0x2b0470: add             x1, x1, HEAP, lsl #32
    // 0x2b0474: str             x1, [SP]
    // 0x2b0478: r0 = dispose()
    //     0x2b0478: bl              #0x2b5ba4  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::dispose
    // 0x2b047c: r0 = LoadStaticField(0x970)
    //     0x2b047c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2b0480: ldr             x0, [x0, #0x12e0]
    // 0x2b0484: cmp             w0, NULL
    // 0x2b0488: b.eq            #0x2b0504
    // 0x2b048c: LoadField: r1 = r0->field_e3
    //     0x2b048c: ldur            w1, [x0, #0xe3]
    // 0x2b0490: DecompressPointer r1
    //     0x2b0490: add             x1, x1, HEAP, lsl #32
    // 0x2b0494: cmp             w1, NULL
    // 0x2b0498: b.eq            #0x2b0508
    // 0x2b049c: LoadField: r0 = r1->field_1b
    //     0x2b049c: ldur            w0, [x1, #0x1b]
    // 0x2b04a0: DecompressPointer r0
    //     0x2b04a0: add             x0, x0, HEAP, lsl #32
    // 0x2b04a4: stur            x0, [fp, #-8]
    // 0x2b04a8: r1 = 1
    //     0x2b04a8: movz            x1, #0x1
    // 0x2b04ac: r0 = AllocateContext()
    //     0x2b04ac: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2b04b0: mov             x1, x0
    // 0x2b04b4: ldr             x0, [fp, #0x10]
    // 0x2b04b8: StoreField: r1->field_f = r0
    //     0x2b04b8: stur            w0, [x1, #0xf]
    // 0x2b04bc: mov             x2, x1
    // 0x2b04c0: r1 = Function '_unflagInternalFocus@148183791':.
    //     0x2b04c0: ldr             x1, [PP, #0x5bc8]  ; [pp+0x5bc8] AnonymousClosure: (0x2484a4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus (0x2484ec)
    // 0x2b04c4: r0 = AllocateClosure()
    //     0x2b04c4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b04c8: ldur            x16, [fp, #-8]
    // 0x2b04cc: stp             x0, x16, [SP]
    // 0x2b04d0: r0 = removeListener()
    //     0x2b04d0: bl              #0x3ba704  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0x2b04d4: ldr             x16, [fp, #0x10]
    // 0x2b04d8: str             x16, [SP]
    // 0x2b04dc: r0 = dispose()
    //     0x2b04dc: bl              #0x2b050c  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::dispose
    // 0x2b04e0: r0 = Null
    //     0x2b04e0: mov             x0, NULL
    // 0x2b04e4: LeaveFrame
    //     0x2b04e4: mov             SP, fp
    //     0x2b04e8: ldp             fp, lr, [SP], #0x10
    // 0x2b04ec: ret
    //     0x2b04ec: ret             
    // 0x2b04f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b04f0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b04f4: b               #0x2b026c
    // 0x2b04f8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2b04f8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2b04fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2b04fc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2b0500: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2b0500: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2b0504: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2b0504: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2b0508: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2b0508: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _onChangedClipboardStatus(dynamic) {
    // ** addr: 0x2b05ac, size: 0x48
    // 0x2b05ac: EnterFrame
    //     0x2b05ac: stp             fp, lr, [SP, #-0x10]!
    //     0x2b05b0: mov             fp, SP
    // 0x2b05b4: AllocStack(0x8)
    //     0x2b05b4: sub             SP, SP, #8
    // 0x2b05b8: SetupParameters()
    //     0x2b05b8: ldr             x0, [fp, #0x10]
    //     0x2b05bc: ldur            w1, [x0, #0x17]
    //     0x2b05c0: add             x1, x1, HEAP, lsl #32
    // 0x2b05c4: CheckStackOverflow
    //     0x2b05c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b05c8: cmp             SP, x16
    //     0x2b05cc: b.ls            #0x2b05ec
    // 0x2b05d0: LoadField: r0 = r1->field_f
    //     0x2b05d0: ldur            w0, [x1, #0xf]
    // 0x2b05d4: DecompressPointer r0
    //     0x2b05d4: add             x0, x0, HEAP, lsl #32
    // 0x2b05d8: str             x0, [SP]
    // 0x2b05dc: r0 = _onChangedClipboardStatus()
    //     0x2b05dc: bl              #0x2b05f4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedClipboardStatus
    // 0x2b05e0: LeaveFrame
    //     0x2b05e0: mov             SP, fp
    //     0x2b05e4: ldp             fp, lr, [SP], #0x10
    // 0x2b05e8: ret
    //     0x2b05e8: ret             
    // 0x2b05ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b05ec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b05f0: b               #0x2b05d0
  }
  _ _onChangedClipboardStatus(/* No info */) {
    // ** addr: 0x2b05f4, size: 0x4c
    // 0x2b05f4: EnterFrame
    //     0x2b05f4: stp             fp, lr, [SP, #-0x10]!
    //     0x2b05f8: mov             fp, SP
    // 0x2b05fc: AllocStack(0x10)
    //     0x2b05fc: sub             SP, SP, #0x10
    // 0x2b0600: CheckStackOverflow
    //     0x2b0600: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b0604: cmp             SP, x16
    //     0x2b0608: b.ls            #0x2b0638
    // 0x2b060c: r1 = Function '<anonymous closure>':.
    //     0x2b060c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11410] Function: [dart:ui] _NativeScene::_NativeScene._ (0x3daaf0)
    //     0x2b0610: ldr             x1, [x1, #0x410]
    // 0x2b0614: r2 = Null
    //     0x2b0614: mov             x2, NULL
    // 0x2b0618: r0 = AllocateClosure()
    //     0x2b0618: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b061c: ldr             x16, [fp, #0x10]
    // 0x2b0620: stp             x0, x16, [SP]
    // 0x2b0624: r0 = setState()
    //     0x2b0624: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x2b0628: r0 = Null
    //     0x2b0628: mov             x0, NULL
    // 0x2b062c: LeaveFrame
    //     0x2b062c: mov             SP, fp
    //     0x2b0630: ldp             fp, lr, [SP], #0x10
    // 0x2b0634: ret
    //     0x2b0634: ret             
    // 0x2b0638: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b0638: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b063c: b               #0x2b060c
  }
  [closure] void _onChangedLiveTextInputStatus(dynamic) {
    // ** addr: 0x2b0640, size: 0x48
    // 0x2b0640: EnterFrame
    //     0x2b0640: stp             fp, lr, [SP, #-0x10]!
    //     0x2b0644: mov             fp, SP
    // 0x2b0648: AllocStack(0x8)
    //     0x2b0648: sub             SP, SP, #8
    // 0x2b064c: SetupParameters()
    //     0x2b064c: ldr             x0, [fp, #0x10]
    //     0x2b0650: ldur            w1, [x0, #0x17]
    //     0x2b0654: add             x1, x1, HEAP, lsl #32
    // 0x2b0658: CheckStackOverflow
    //     0x2b0658: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b065c: cmp             SP, x16
    //     0x2b0660: b.ls            #0x2b0680
    // 0x2b0664: LoadField: r0 = r1->field_f
    //     0x2b0664: ldur            w0, [x1, #0xf]
    // 0x2b0668: DecompressPointer r0
    //     0x2b0668: add             x0, x0, HEAP, lsl #32
    // 0x2b066c: str             x0, [SP]
    // 0x2b0670: r0 = _onChangedLiveTextInputStatus()
    //     0x2b0670: bl              #0x2b0688  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedLiveTextInputStatus
    // 0x2b0674: LeaveFrame
    //     0x2b0674: mov             SP, fp
    //     0x2b0678: ldp             fp, lr, [SP], #0x10
    // 0x2b067c: ret
    //     0x2b067c: ret             
    // 0x2b0680: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b0680: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b0684: b               #0x2b0664
  }
  _ _onChangedLiveTextInputStatus(/* No info */) {
    // ** addr: 0x2b0688, size: 0x4c
    // 0x2b0688: EnterFrame
    //     0x2b0688: stp             fp, lr, [SP, #-0x10]!
    //     0x2b068c: mov             fp, SP
    // 0x2b0690: AllocStack(0x10)
    //     0x2b0690: sub             SP, SP, #0x10
    // 0x2b0694: CheckStackOverflow
    //     0x2b0694: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b0698: cmp             SP, x16
    //     0x2b069c: b.ls            #0x2b06cc
    // 0x2b06a0: r1 = Function '<anonymous closure>':.
    //     0x2b06a0: add             x1, PP, #0x11, lsl #12  ; [pp+0x11418] Function: [dart:ui] _NativeScene::_NativeScene._ (0x3daaf0)
    //     0x2b06a4: ldr             x1, [x1, #0x418]
    // 0x2b06a8: r2 = Null
    //     0x2b06a8: mov             x2, NULL
    // 0x2b06ac: r0 = AllocateClosure()
    //     0x2b06ac: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2b06b0: ldr             x16, [fp, #0x10]
    // 0x2b06b4: stp             x0, x16, [SP]
    // 0x2b06b8: r0 = setState()
    //     0x2b06b8: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x2b06bc: r0 = Null
    //     0x2b06bc: mov             x0, NULL
    // 0x2b06c0: LeaveFrame
    //     0x2b06c0: mov             SP, fp
    //     0x2b06c4: ldp             fp, lr, [SP], #0x10
    // 0x2b06c8: ret
    //     0x2b06c8: ret             
    // 0x2b06cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b06cc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b06d0: b               #0x2b06a0
  }
  _ initState(/* No info */) {
    // ** addr: 0x2cbabc, size: 0x200
    // 0x2cbabc: EnterFrame
    //     0x2cbabc: stp             fp, lr, [SP, #-0x10]!
    //     0x2cbac0: mov             fp, SP
    // 0x2cbac4: AllocStack(0x18)
    //     0x2cbac4: sub             SP, SP, #0x18
    // 0x2cbac8: CheckStackOverflow
    //     0x2cbac8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cbacc: cmp             SP, x16
    //     0x2cbad0: b.ls            #0x2cbca4
    // 0x2cbad4: ldr             x16, [fp, #0x10]
    // 0x2cbad8: str             x16, [SP]
    // 0x2cbadc: r0 = initState()
    //     0x2cbadc: bl              #0x2cbd1c  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::initState
    // 0x2cbae0: ldr             x0, [fp, #0x10]
    // 0x2cbae4: LoadField: r1 = r0->field_37
    //     0x2cbae4: ldur            w1, [x0, #0x37]
    // 0x2cbae8: DecompressPointer r1
    //     0x2cbae8: add             x1, x1, HEAP, lsl #32
    // 0x2cbaec: stur            x1, [fp, #-8]
    // 0x2cbaf0: r1 = 1
    //     0x2cbaf0: movz            x1, #0x1
    // 0x2cbaf4: r0 = AllocateContext()
    //     0x2cbaf4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2cbaf8: mov             x1, x0
    // 0x2cbafc: ldr             x0, [fp, #0x10]
    // 0x2cbb00: StoreField: r1->field_f = r0
    //     0x2cbb00: stur            w0, [x1, #0xf]
    // 0x2cbb04: mov             x2, x1
    // 0x2cbb08: r1 = Function '_onChangedLiveTextInputStatus@148183791':.
    //     0x2cbb08: add             x1, PP, #0x11, lsl #12  ; [pp+0x11400] AnonymousClosure: (0x2b0640), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedLiveTextInputStatus (0x2b0688)
    //     0x2cbb0c: ldr             x1, [x1, #0x400]
    // 0x2cbb10: r0 = AllocateClosure()
    //     0x2cbb10: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2cbb14: ldur            x16, [fp, #-8]
    // 0x2cbb18: stp             x0, x16, [SP]
    // 0x2cbb1c: r0 = addListener()
    //     0x2cbb1c: bl              #0x37fe64  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::addListener
    // 0x2cbb20: ldr             x0, [fp, #0x10]
    // 0x2cbb24: LoadField: r1 = r0->field_33
    //     0x2cbb24: ldur            w1, [x0, #0x33]
    // 0x2cbb28: DecompressPointer r1
    //     0x2cbb28: add             x1, x1, HEAP, lsl #32
    // 0x2cbb2c: stur            x1, [fp, #-8]
    // 0x2cbb30: r1 = 1
    //     0x2cbb30: movz            x1, #0x1
    // 0x2cbb34: r0 = AllocateContext()
    //     0x2cbb34: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2cbb38: mov             x1, x0
    // 0x2cbb3c: ldr             x0, [fp, #0x10]
    // 0x2cbb40: StoreField: r1->field_f = r0
    //     0x2cbb40: stur            w0, [x1, #0xf]
    // 0x2cbb44: mov             x2, x1
    // 0x2cbb48: r1 = Function '_onChangedClipboardStatus@148183791':.
    //     0x2cbb48: add             x1, PP, #0x11, lsl #12  ; [pp+0x11408] AnonymousClosure: (0x2b05ac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedClipboardStatus (0x2b05f4)
    //     0x2cbb4c: ldr             x1, [x1, #0x408]
    // 0x2cbb50: r0 = AllocateClosure()
    //     0x2cbb50: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2cbb54: ldur            x16, [fp, #-8]
    // 0x2cbb58: stp             x0, x16, [SP]
    // 0x2cbb5c: r0 = addListener()
    //     0x2cbb5c: bl              #0x37fd48  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::addListener
    // 0x2cbb60: ldr             x0, [fp, #0x10]
    // 0x2cbb64: LoadField: r1 = r0->field_b
    //     0x2cbb64: ldur            w1, [x0, #0xb]
    // 0x2cbb68: DecompressPointer r1
    //     0x2cbb68: add             x1, x1, HEAP, lsl #32
    // 0x2cbb6c: cmp             w1, NULL
    // 0x2cbb70: b.eq            #0x2cbcac
    // 0x2cbb74: LoadField: r2 = r1->field_b
    //     0x2cbb74: ldur            w2, [x1, #0xb]
    // 0x2cbb78: DecompressPointer r2
    //     0x2cbb78: add             x2, x2, HEAP, lsl #32
    // 0x2cbb7c: stur            x2, [fp, #-8]
    // 0x2cbb80: r1 = 1
    //     0x2cbb80: movz            x1, #0x1
    // 0x2cbb84: r0 = AllocateContext()
    //     0x2cbb84: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2cbb88: mov             x1, x0
    // 0x2cbb8c: ldr             x0, [fp, #0x10]
    // 0x2cbb90: StoreField: r1->field_f = r0
    //     0x2cbb90: stur            w0, [x1, #0xf]
    // 0x2cbb94: mov             x2, x1
    // 0x2cbb98: r1 = Function '_didChangeTextEditingValue@148183791':.
    //     0x2cbb98: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f0] AnonymousClosure: (0x26ecdc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x26ed24)
    //     0x2cbb9c: ldr             x1, [x1, #0x3f0]
    // 0x2cbba0: r0 = AllocateClosure()
    //     0x2cbba0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2cbba4: ldur            x16, [fp, #-8]
    // 0x2cbba8: stp             x0, x16, [SP]
    // 0x2cbbac: r0 = addListener()
    //     0x2cbbac: bl              #0x380078  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x2cbbb0: ldr             x0, [fp, #0x10]
    // 0x2cbbb4: LoadField: r1 = r0->field_b
    //     0x2cbbb4: ldur            w1, [x0, #0xb]
    // 0x2cbbb8: DecompressPointer r1
    //     0x2cbbb8: add             x1, x1, HEAP, lsl #32
    // 0x2cbbbc: cmp             w1, NULL
    // 0x2cbbc0: b.eq            #0x2cbcb0
    // 0x2cbbc4: LoadField: r2 = r1->field_f
    //     0x2cbbc4: ldur            w2, [x1, #0xf]
    // 0x2cbbc8: DecompressPointer r2
    //     0x2cbbc8: add             x2, x2, HEAP, lsl #32
    // 0x2cbbcc: stur            x2, [fp, #-8]
    // 0x2cbbd0: r1 = 1
    //     0x2cbbd0: movz            x1, #0x1
    // 0x2cbbd4: r0 = AllocateContext()
    //     0x2cbbd4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2cbbd8: mov             x1, x0
    // 0x2cbbdc: ldr             x0, [fp, #0x10]
    // 0x2cbbe0: StoreField: r1->field_f = r0
    //     0x2cbbe0: stur            w0, [x1, #0xf]
    // 0x2cbbe4: mov             x2, x1
    // 0x2cbbe8: r1 = Function '_handleFocusChanged@148183791':.
    //     0x2cbbe8: add             x1, PP, #0x11, lsl #12  ; [pp+0x113f8] AnonymousClosure: (0x26e1ac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x26e1f4)
    //     0x2cbbec: ldr             x1, [x1, #0x3f8]
    // 0x2cbbf0: r0 = AllocateClosure()
    //     0x2cbbf0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2cbbf4: ldur            x16, [fp, #-8]
    // 0x2cbbf8: stp             x0, x16, [SP]
    // 0x2cbbfc: r0 = addListener()
    //     0x2cbbfc: bl              #0x393c20  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::addListener
    // 0x2cbc00: ldr             x16, [fp, #0x10]
    // 0x2cbc04: str             x16, [SP]
    // 0x2cbc08: r0 = _scrollController()
    //     0x2cbc08: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x2cbc0c: stur            x0, [fp, #-8]
    // 0x2cbc10: r1 = 1
    //     0x2cbc10: movz            x1, #0x1
    // 0x2cbc14: r0 = AllocateContext()
    //     0x2cbc14: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2cbc18: mov             x1, x0
    // 0x2cbc1c: ldr             x0, [fp, #0x10]
    // 0x2cbc20: StoreField: r1->field_f = r0
    //     0x2cbc20: stur            w0, [x1, #0xf]
    // 0x2cbc24: mov             x2, x1
    // 0x2cbc28: r1 = Function '_onEditableScroll@148183791':.
    //     0x2cbc28: add             x1, PP, #0x11, lsl #12  ; [pp+0x11498] AnonymousClosure: (0x2cbd84), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onEditableScroll (0x2cbdcc)
    //     0x2cbc2c: ldr             x1, [x1, #0x498]
    // 0x2cbc30: r0 = AllocateClosure()
    //     0x2cbc30: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2cbc34: ldur            x16, [fp, #-8]
    // 0x2cbc38: stp             x0, x16, [SP]
    // 0x2cbc3c: r0 = addListener()
    //     0x2cbc3c: bl              #0x380078  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x2cbc40: ldr             x0, [fp, #0x10]
    // 0x2cbc44: LoadField: r1 = r0->field_2b
    //     0x2cbc44: ldur            w1, [x0, #0x2b]
    // 0x2cbc48: DecompressPointer r1
    //     0x2cbc48: add             x1, x1, HEAP, lsl #32
    // 0x2cbc4c: LoadField: r2 = r0->field_b
    //     0x2cbc4c: ldur            w2, [x0, #0xb]
    // 0x2cbc50: DecompressPointer r2
    //     0x2cbc50: add             x2, x2, HEAP, lsl #32
    // 0x2cbc54: cmp             w2, NULL
    // 0x2cbc58: b.eq            #0x2cbcb4
    // 0x2cbc5c: LoadField: r3 = r2->field_33
    //     0x2cbc5c: ldur            w3, [x2, #0x33]
    // 0x2cbc60: DecompressPointer r3
    //     0x2cbc60: add             x3, x3, HEAP, lsl #32
    // 0x2cbc64: stp             x3, x1, [SP]
    // 0x2cbc68: r0 = value=()
    //     0x2cbc68: bl              #0x1fd07c  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x2cbc6c: ldr             x0, [fp, #0x10]
    // 0x2cbc70: LoadField: r1 = r0->field_b
    //     0x2cbc70: ldur            w1, [x0, #0xb]
    // 0x2cbc74: DecompressPointer r1
    //     0x2cbc74: add             x1, x1, HEAP, lsl #32
    // 0x2cbc78: cmp             w1, NULL
    // 0x2cbc7c: b.eq            #0x2cbcb8
    // 0x2cbc80: r0 = _inferSpellCheckConfiguration()
    //     0x2cbc80: bl              #0x2cbcbc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_inferSpellCheckConfiguration
    // 0x2cbc84: ldr             x1, [fp, #0x10]
    // 0x2cbc88: r2 = Instance_SpellCheckConfiguration
    //     0x2cbc88: add             x2, PP, #0xd, lsl #12  ; [pp+0xdfa0] Obj!SpellCheckConfiguration@4726f1
    //     0x2cbc8c: ldr             x2, [x2, #0xfa0]
    // 0x2cbc90: StoreField: r1->field_5f = r2
    //     0x2cbc90: stur            w2, [x1, #0x5f]
    // 0x2cbc94: r0 = Null
    //     0x2cbc94: mov             x0, NULL
    // 0x2cbc98: LeaveFrame
    //     0x2cbc98: mov             SP, fp
    //     0x2cbc9c: ldp             fp, lr, [SP], #0x10
    // 0x2cbca0: ret
    //     0x2cbca0: ret             
    // 0x2cbca4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cbca4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cbca8: b               #0x2cbad4
    // 0x2cbcac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2cbcac: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2cbcb0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2cbcb0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2cbcb4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2cbcb4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2cbcb8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2cbcb8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  static _ _inferSpellCheckConfiguration(/* No info */) {
    // ** addr: 0x2cbcbc, size: 0x60
    // 0x2cbcbc: EnterFrame
    //     0x2cbcbc: stp             fp, lr, [SP, #-0x10]!
    //     0x2cbcc0: mov             fp, SP
    // 0x2cbcc4: CheckStackOverflow
    //     0x2cbcc4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cbcc8: cmp             SP, x16
    //     0x2cbccc: b.ls            #0x2cbd10
    // 0x2cbcd0: r0 = LoadStaticField(0x970)
    //     0x2cbcd0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2cbcd4: ldr             x0, [x0, #0x12e0]
    // 0x2cbcd8: cmp             w0, NULL
    // 0x2cbcdc: b.eq            #0x2cbd18
    // 0x2cbce0: r0 = InitLateStaticField(0x834) // [dart:ui] PlatformDispatcher::_instance
    //     0x2cbce0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2cbce4: ldr             x0, [x0, #0x1068]
    //     0x2cbce8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x2cbcec: cmp             w0, w16
    //     0x2cbcf0: b.ne            #0x2cbcfc
    //     0x2cbcf4: ldr             x2, [PP, #0x270]  ; [pp+0x270] Field <PlatformDispatcher._instance@15065589>: static late final (offset: 0x834)
    //     0x2cbcf8: bl              #0x3e406c
    // 0x2cbcfc: r0 = Instance_SpellCheckConfiguration
    //     0x2cbcfc: add             x0, PP, #0xd, lsl #12  ; [pp+0xdfa0] Obj!SpellCheckConfiguration@4726f1
    //     0x2cbd00: ldr             x0, [x0, #0xfa0]
    // 0x2cbd04: LeaveFrame
    //     0x2cbd04: mov             SP, fp
    //     0x2cbd08: ldp             fp, lr, [SP], #0x10
    // 0x2cbd0c: ret
    //     0x2cbd0c: ret             
    // 0x2cbd10: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cbd10: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cbd14: b               #0x2cbcd0
    // 0x2cbd18: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2cbd18: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _onEditableScroll(dynamic) {
    // ** addr: 0x2cbd84, size: 0x48
    // 0x2cbd84: EnterFrame
    //     0x2cbd84: stp             fp, lr, [SP, #-0x10]!
    //     0x2cbd88: mov             fp, SP
    // 0x2cbd8c: AllocStack(0x8)
    //     0x2cbd8c: sub             SP, SP, #8
    // 0x2cbd90: SetupParameters()
    //     0x2cbd90: ldr             x0, [fp, #0x10]
    //     0x2cbd94: ldur            w1, [x0, #0x17]
    //     0x2cbd98: add             x1, x1, HEAP, lsl #32
    // 0x2cbd9c: CheckStackOverflow
    //     0x2cbd9c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cbda0: cmp             SP, x16
    //     0x2cbda4: b.ls            #0x2cbdc4
    // 0x2cbda8: LoadField: r0 = r1->field_f
    //     0x2cbda8: ldur            w0, [x1, #0xf]
    // 0x2cbdac: DecompressPointer r0
    //     0x2cbdac: add             x0, x0, HEAP, lsl #32
    // 0x2cbdb0: str             x0, [SP]
    // 0x2cbdb4: r0 = _onEditableScroll()
    //     0x2cbdb4: bl              #0x2cbdcc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onEditableScroll
    // 0x2cbdb8: LeaveFrame
    //     0x2cbdb8: mov             SP, fp
    //     0x2cbdbc: ldp             fp, lr, [SP], #0x10
    // 0x2cbdc0: ret
    //     0x2cbdc0: ret             
    // 0x2cbdc4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cbdc4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cbdc8: b               #0x2cbda8
  }
  _ _onEditableScroll(/* No info */) {
    // ** addr: 0x2cbdcc, size: 0x5c
    // 0x2cbdcc: EnterFrame
    //     0x2cbdcc: stp             fp, lr, [SP, #-0x10]!
    //     0x2cbdd0: mov             fp, SP
    // 0x2cbdd4: AllocStack(0x8)
    //     0x2cbdd4: sub             SP, SP, #8
    // 0x2cbdd8: CheckStackOverflow
    //     0x2cbdd8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cbddc: cmp             SP, x16
    //     0x2cbde0: b.ls            #0x2cbe20
    // 0x2cbde4: ldr             x0, [fp, #0x10]
    // 0x2cbde8: LoadField: r1 = r0->field_3f
    //     0x2cbde8: ldur            w1, [x0, #0x3f]
    // 0x2cbdec: DecompressPointer r1
    //     0x2cbdec: add             x1, x1, HEAP, lsl #32
    // 0x2cbdf0: cmp             w1, NULL
    // 0x2cbdf4: b.ne            #0x2cbe00
    // 0x2cbdf8: mov             x1, x0
    // 0x2cbdfc: b               #0x2cbe0c
    // 0x2cbe00: str             x1, [SP]
    // 0x2cbe04: r0 = updateForScroll()
    //     0x2cbe04: bl              #0x2cbe28  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::updateForScroll
    // 0x2cbe08: ldr             x1, [fp, #0x10]
    // 0x2cbe0c: StoreField: r1->field_a7 = rNULL
    //     0x2cbe0c: stur            NULL, [x1, #0xa7]
    // 0x2cbe10: r0 = Null
    //     0x2cbe10: mov             x0, NULL
    // 0x2cbe14: LeaveFrame
    //     0x2cbe14: mov             SP, fp
    //     0x2cbe18: ldp             fp, lr, [SP], #0x10
    // 0x2cbe1c: ret
    //     0x2cbe1c: ret             
    // 0x2cbe20: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cbe20: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cbe24: b               #0x2cbde4
  }
  _ EditableTextState(/* No info */) {
    // ** addr: 0x2ceaf8, size: 0x26c
    // 0x2ceaf8: EnterFrame
    //     0x2ceaf8: stp             fp, lr, [SP, #-0x10]!
    //     0x2ceafc: mov             fp, SP
    // 0x2ceb00: AllocStack(0x10)
    //     0x2ceb00: sub             SP, SP, #0x10
    // 0x2ceb04: r1 = Sentinel
    //     0x2ceb04: ldr             x1, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2ceb08: r3 = false
    //     0x2ceb08: add             x3, NULL, #0x30  ; false
    // 0x2ceb0c: r2 = true
    //     0x2ceb0c: add             x2, NULL, #0x20  ; true
    // 0x2ceb10: r0 = 0
    //     0x2ceb10: movz            x0, #0
    // 0x2ceb14: CheckStackOverflow
    //     0x2ceb14: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2ceb18: cmp             SP, x16
    //     0x2ceb1c: b.ls            #0x2ced5c
    // 0x2ceb20: ldr             x4, [fp, #0x10]
    // 0x2ceb24: StoreField: r4->field_27 = r1
    //     0x2ceb24: stur            w1, [x4, #0x27]
    // 0x2ceb28: StoreField: r4->field_57 = r3
    //     0x2ceb28: stur            w3, [x4, #0x57]
    // 0x2ceb2c: StoreField: r4->field_5f = r1
    //     0x2ceb2c: stur            w1, [x4, #0x5f]
    // 0x2ceb30: StoreField: r4->field_63 = r1
    //     0x2ceb30: stur            w1, [x4, #0x63]
    // 0x2ceb34: StoreField: r4->field_6f = r2
    //     0x2ceb34: stur            w2, [x4, #0x6f]
    // 0x2ceb38: StoreField: r4->field_87 = r0
    //     0x2ceb38: stur            x0, [x4, #0x87]
    // 0x2ceb3c: StoreField: r4->field_8f = r3
    //     0x2ceb3c: stur            w3, [x4, #0x8f]
    // 0x2ceb40: StoreField: r4->field_93 = r3
    //     0x2ceb40: stur            w3, [x4, #0x93]
    // 0x2ceb44: StoreField: r4->field_97 = r1
    //     0x2ceb44: stur            w1, [x4, #0x97]
    // 0x2ceb48: StoreField: r4->field_9b = r0
    //     0x2ceb48: stur            x0, [x4, #0x9b]
    // 0x2ceb4c: StoreField: r4->field_ab = r1
    //     0x2ceb4c: stur            w1, [x4, #0xab]
    // 0x2ceb50: StoreField: r4->field_bb = r1
    //     0x2ceb50: stur            w1, [x4, #0xbb]
    // 0x2ceb54: StoreField: r4->field_bf = r1
    //     0x2ceb54: stur            w1, [x4, #0xbf]
    // 0x2ceb58: StoreField: r4->field_c3 = r1
    //     0x2ceb58: stur            w1, [x4, #0xc3]
    // 0x2ceb5c: StoreField: r4->field_c7 = r1
    //     0x2ceb5c: stur            w1, [x4, #0xc7]
    // 0x2ceb60: StoreField: r4->field_cb = r1
    //     0x2ceb60: stur            w1, [x4, #0xcb]
    // 0x2ceb64: r1 = <bool>
    //     0x2ceb64: ldr             x1, [PP, #0x3200]  ; [pp+0x3200] TypeArguments: <bool>
    // 0x2ceb68: r0 = ValueNotifier()
    //     0x2ceb68: bl              #0x2315c0  ; AllocateValueNotifierStub -> ValueNotifier<X0> (size=0x2c)
    // 0x2ceb6c: mov             x1, x0
    // 0x2ceb70: r0 = true
    //     0x2ceb70: add             x0, NULL, #0x20  ; true
    // 0x2ceb74: stur            x1, [fp, #-8]
    // 0x2ceb78: StoreField: r1->field_27 = r0
    //     0x2ceb78: stur            w0, [x1, #0x27]
    // 0x2ceb7c: r0 = 0
    //     0x2ceb7c: movz            x0, #0
    // 0x2ceb80: StoreField: r1->field_7 = r0
    //     0x2ceb80: stur            x0, [x1, #7]
    // 0x2ceb84: StoreField: r1->field_13 = r0
    //     0x2ceb84: stur            x0, [x1, #0x13]
    // 0x2ceb88: StoreField: r1->field_1b = r0
    //     0x2ceb88: stur            x0, [x1, #0x1b]
    // 0x2ceb8c: r0 = InitLateStaticField(0x8f0) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0x2ceb8c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2ceb90: ldr             x0, [x0, #0x11e0]
    //     0x2ceb94: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x2ceb98: cmp             w0, w16
    //     0x2ceb9c: b.ne            #0x2ceba8
    //     0x2ceba0: ldr             x2, [PP, #0x3180]  ; [pp+0x3180] Field <ChangeNotifier._emptyListeners@311329750>: static late final (offset: 0x8f0)
    //     0x2ceba4: bl              #0x3e406c
    // 0x2ceba8: mov             x2, x0
    // 0x2cebac: ldur            x0, [fp, #-8]
    // 0x2cebb0: stur            x2, [fp, #-0x10]
    // 0x2cebb4: StoreField: r0->field_f = r2
    //     0x2cebb4: stur            w2, [x0, #0xf]
    // 0x2cebb8: ldr             x3, [fp, #0x10]
    // 0x2cebbc: StoreField: r3->field_2b = r0
    //     0x2cebbc: stur            w0, [x3, #0x2b]
    //     0x2cebc0: ldurb           w16, [x3, #-1]
    //     0x2cebc4: ldurb           w17, [x0, #-1]
    //     0x2cebc8: and             x16, x17, x16, lsr #2
    //     0x2cebcc: tst             x16, HEAP, lsr #32
    //     0x2cebd0: b.eq            #0x2cebd8
    //     0x2cebd4: bl              #0x3e4648
    // 0x2cebd8: r1 = <State<StatefulWidget>>
    //     0x2cebd8: ldr             x1, [PP, #0x4f50]  ; [pp+0x4f50] TypeArguments: <State<StatefulWidget>>
    // 0x2cebdc: r0 = LabeledGlobalKey()
    //     0x2cebdc: bl              #0x2315b4  ; AllocateLabeledGlobalKeyStub -> LabeledGlobalKey<X0 bound State> (size=0x10)
    // 0x2cebe0: ldr             x2, [fp, #0x10]
    // 0x2cebe4: StoreField: r2->field_2f = r0
    //     0x2cebe4: stur            w0, [x2, #0x2f]
    //     0x2cebe8: ldurb           w16, [x2, #-1]
    //     0x2cebec: ldurb           w17, [x0, #-1]
    //     0x2cebf0: and             x16, x17, x16, lsr #2
    //     0x2cebf4: tst             x16, HEAP, lsr #32
    //     0x2cebf8: b.eq            #0x2cec00
    //     0x2cebfc: bl              #0x3e4628
    // 0x2cec00: r1 = <ClipboardStatus>
    //     0x2cec00: add             x1, PP, #0xf, lsl #12  ; [pp+0xf648] TypeArguments: <ClipboardStatus>
    //     0x2cec04: ldr             x1, [x1, #0x648]
    // 0x2cec08: r0 = ClipboardStatusNotifier()
    //     0x2cec08: bl              #0x2ced7c  ; AllocateClipboardStatusNotifierStub -> ClipboardStatusNotifier (size=0x30)
    // 0x2cec0c: r2 = false
    //     0x2cec0c: add             x2, NULL, #0x30  ; false
    // 0x2cec10: StoreField: r0->field_2b = r2
    //     0x2cec10: stur            w2, [x0, #0x2b]
    // 0x2cec14: r1 = Instance_ClipboardStatus
    //     0x2cec14: ldr             x1, [PP, #0x5458]  ; [pp+0x5458] Obj!ClipboardStatus@47dbf1
    // 0x2cec18: StoreField: r0->field_27 = r1
    //     0x2cec18: stur            w1, [x0, #0x27]
    // 0x2cec1c: r3 = 0
    //     0x2cec1c: movz            x3, #0
    // 0x2cec20: StoreField: r0->field_7 = r3
    //     0x2cec20: stur            x3, [x0, #7]
    // 0x2cec24: StoreField: r0->field_13 = r3
    //     0x2cec24: stur            x3, [x0, #0x13]
    // 0x2cec28: StoreField: r0->field_1b = r3
    //     0x2cec28: stur            x3, [x0, #0x1b]
    // 0x2cec2c: ldur            x4, [fp, #-0x10]
    // 0x2cec30: StoreField: r0->field_f = r4
    //     0x2cec30: stur            w4, [x0, #0xf]
    // 0x2cec34: ldr             x5, [fp, #0x10]
    // 0x2cec38: StoreField: r5->field_33 = r0
    //     0x2cec38: stur            w0, [x5, #0x33]
    //     0x2cec3c: ldurb           w16, [x5, #-1]
    //     0x2cec40: ldurb           w17, [x0, #-1]
    //     0x2cec44: and             x16, x17, x16, lsr #2
    //     0x2cec48: tst             x16, HEAP, lsr #32
    //     0x2cec4c: b.eq            #0x2cec54
    //     0x2cec50: bl              #0x3e4688
    // 0x2cec54: r1 = <LiveTextInputStatus>
    //     0x2cec54: add             x1, PP, #0xf, lsl #12  ; [pp+0xf650] TypeArguments: <LiveTextInputStatus>
    //     0x2cec58: ldr             x1, [x1, #0x650]
    // 0x2cec5c: r0 = LiveTextInputStatusNotifier()
    //     0x2cec5c: bl              #0x2ced70  ; AllocateLiveTextInputStatusNotifierStub -> LiveTextInputStatusNotifier (size=0x30)
    // 0x2cec60: mov             x1, x0
    // 0x2cec64: r0 = false
    //     0x2cec64: add             x0, NULL, #0x30  ; false
    // 0x2cec68: StoreField: r1->field_2b = r0
    //     0x2cec68: stur            w0, [x1, #0x2b]
    // 0x2cec6c: r0 = Instance_LiveTextInputStatus
    //     0x2cec6c: ldr             x0, [PP, #0x54a0]  ; [pp+0x54a0] Obj!LiveTextInputStatus@47db91
    // 0x2cec70: StoreField: r1->field_27 = r0
    //     0x2cec70: stur            w0, [x1, #0x27]
    // 0x2cec74: r0 = 0
    //     0x2cec74: movz            x0, #0
    // 0x2cec78: StoreField: r1->field_7 = r0
    //     0x2cec78: stur            x0, [x1, #7]
    // 0x2cec7c: StoreField: r1->field_13 = r0
    //     0x2cec7c: stur            x0, [x1, #0x13]
    // 0x2cec80: StoreField: r1->field_1b = r0
    //     0x2cec80: stur            x0, [x1, #0x1b]
    // 0x2cec84: ldur            x0, [fp, #-0x10]
    // 0x2cec88: StoreField: r1->field_f = r0
    //     0x2cec88: stur            w0, [x1, #0xf]
    // 0x2cec8c: mov             x0, x1
    // 0x2cec90: ldr             x2, [fp, #0x10]
    // 0x2cec94: StoreField: r2->field_37 = r0
    //     0x2cec94: stur            w0, [x2, #0x37]
    //     0x2cec98: ldurb           w16, [x2, #-1]
    //     0x2cec9c: ldurb           w17, [x0, #-1]
    //     0x2ceca0: and             x16, x17, x16, lsr #2
    //     0x2ceca4: tst             x16, HEAP, lsr #32
    //     0x2ceca8: b.eq            #0x2cecb0
    //     0x2cecac: bl              #0x3e4628
    // 0x2cecb0: r1 = <State<StatefulWidget>>
    //     0x2cecb0: ldr             x1, [PP, #0x4f50]  ; [pp+0x4f50] TypeArguments: <State<StatefulWidget>>
    // 0x2cecb4: r0 = LabeledGlobalKey()
    //     0x2cecb4: bl              #0x2315b4  ; AllocateLabeledGlobalKeyStub -> LabeledGlobalKey<X0 bound State> (size=0x10)
    // 0x2cecb8: ldr             x1, [fp, #0x10]
    // 0x2cecbc: StoreField: r1->field_43 = r0
    //     0x2cecbc: stur            w0, [x1, #0x43]
    //     0x2cecc0: ldurb           w16, [x1, #-1]
    //     0x2cecc4: ldurb           w17, [x0, #-1]
    //     0x2cecc8: and             x16, x17, x16, lsr #2
    //     0x2ceccc: tst             x16, HEAP, lsr #32
    //     0x2cecd0: b.eq            #0x2cecd8
    //     0x2cecd4: bl              #0x3e4608
    // 0x2cecd8: r0 = LayerLink()
    //     0x2cecd8: bl              #0x2ced64  ; AllocateLayerLinkStub -> LayerLink (size=0x10)
    // 0x2cecdc: ldr             x1, [fp, #0x10]
    // 0x2cece0: StoreField: r1->field_4b = r0
    //     0x2cece0: stur            w0, [x1, #0x4b]
    //     0x2cece4: ldurb           w16, [x1, #-1]
    //     0x2cece8: ldurb           w17, [x0, #-1]
    //     0x2cecec: and             x16, x17, x16, lsr #2
    //     0x2cecf0: tst             x16, HEAP, lsr #32
    //     0x2cecf4: b.eq            #0x2cecfc
    //     0x2cecf8: bl              #0x3e4608
    // 0x2cecfc: r0 = LayerLink()
    //     0x2cecfc: bl              #0x2ced64  ; AllocateLayerLinkStub -> LayerLink (size=0x10)
    // 0x2ced00: ldr             x1, [fp, #0x10]
    // 0x2ced04: StoreField: r1->field_4f = r0
    //     0x2ced04: stur            w0, [x1, #0x4f]
    //     0x2ced08: ldurb           w16, [x1, #-1]
    //     0x2ced0c: ldurb           w17, [x0, #-1]
    //     0x2ced10: and             x16, x17, x16, lsr #2
    //     0x2ced14: tst             x16, HEAP, lsr #32
    //     0x2ced18: b.eq            #0x2ced20
    //     0x2ced1c: bl              #0x3e4608
    // 0x2ced20: r0 = LayerLink()
    //     0x2ced20: bl              #0x2ced64  ; AllocateLayerLinkStub -> LayerLink (size=0x10)
    // 0x2ced24: ldr             x1, [fp, #0x10]
    // 0x2ced28: StoreField: r1->field_53 = r0
    //     0x2ced28: stur            w0, [x1, #0x53]
    //     0x2ced2c: ldurb           w16, [x1, #-1]
    //     0x2ced30: ldurb           w17, [x0, #-1]
    //     0x2ced34: and             x16, x17, x16, lsr #2
    //     0x2ced38: tst             x16, HEAP, lsr #32
    //     0x2ced3c: b.eq            #0x2ced44
    //     0x2ced40: bl              #0x3e4608
    // 0x2ced44: r2 = -1
    //     0x2ced44: movn            x2, #0
    // 0x2ced48: StoreField: r1->field_af = r2
    //     0x2ced48: stur            x2, [x1, #0xaf]
    // 0x2ced4c: r0 = Null
    //     0x2ced4c: mov             x0, NULL
    // 0x2ced50: LeaveFrame
    //     0x2ced50: mov             SP, fp
    //     0x2ced54: ldp             fp, lr, [SP], #0x10
    // 0x2ced58: ret
    //     0x2ced58: ret             
    // 0x2ced5c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2ced5c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2ced60: b               #0x2ceb20
  }
  _ didChangeMetrics(/* No info */) {
    // ** addr: 0x32f334, size: 0x270
    // 0x32f334: EnterFrame
    //     0x32f334: stp             fp, lr, [SP, #-0x10]!
    //     0x32f338: mov             fp, SP
    // 0x32f33c: AllocStack(0x38)
    //     0x32f33c: sub             SP, SP, #0x38
    // 0x32f340: CheckStackOverflow
    //     0x32f340: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x32f344: cmp             SP, x16
    //     0x32f348: b.ls            #0x32f570
    // 0x32f34c: r1 = 1
    //     0x32f34c: movz            x1, #0x1
    // 0x32f350: r0 = AllocateContext()
    //     0x32f350: bl              #0x3e4e00  ; AllocateContextStub
    // 0x32f354: mov             x1, x0
    // 0x32f358: ldr             x0, [fp, #0x10]
    // 0x32f35c: stur            x1, [fp, #-8]
    // 0x32f360: StoreField: r1->field_f = r0
    //     0x32f360: stur            w0, [x1, #0xf]
    // 0x32f364: LoadField: r2 = r0->field_f
    //     0x32f364: ldur            w2, [x0, #0xf]
    // 0x32f368: DecompressPointer r2
    //     0x32f368: add             x2, x2, HEAP, lsl #32
    // 0x32f36c: cmp             w2, NULL
    // 0x32f370: b.ne            #0x32f384
    // 0x32f374: r0 = Null
    //     0x32f374: mov             x0, NULL
    // 0x32f378: LeaveFrame
    //     0x32f378: mov             SP, fp
    //     0x32f37c: ldp             fp, lr, [SP], #0x10
    // 0x32f380: ret
    //     0x32f380: ret             
    // 0x32f384: str             x2, [SP]
    // 0x32f388: r0 = of()
    //     0x32f388: bl              #0x240da4  ; [package:flutter/src/widgets/view.dart] View::of
    // 0x32f38c: mov             x3, x0
    // 0x32f390: ldr             x0, [fp, #0x10]
    // 0x32f394: stur            x3, [fp, #-0x20]
    // 0x32f398: LoadField: r1 = r0->field_97
    //     0x32f398: ldur            w1, [x0, #0x97]
    // 0x32f39c: DecompressPointer r1
    //     0x32f39c: add             x1, x1, HEAP, lsl #32
    // 0x32f3a0: r16 = Sentinel
    //     0x32f3a0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x32f3a4: cmp             w1, w16
    // 0x32f3a8: b.eq            #0x32f578
    // 0x32f3ac: LoadField: r2 = r3->field_13
    //     0x32f3ac: ldur            w2, [x3, #0x13]
    // 0x32f3b0: DecompressPointer r2
    //     0x32f3b0: add             x2, x2, HEAP, lsl #32
    // 0x32f3b4: LoadField: r4 = r2->field_13
    //     0x32f3b4: ldur            w4, [x2, #0x13]
    // 0x32f3b8: DecompressPointer r4
    //     0x32f3b8: add             x4, x4, HEAP, lsl #32
    // 0x32f3bc: LoadField: d0 = r4->field_1f
    //     0x32f3bc: ldur            d0, [x4, #0x1f]
    // 0x32f3c0: LoadField: d1 = r1->field_7
    //     0x32f3c0: ldur            d1, [x1, #7]
    // 0x32f3c4: fcmp            d1, d0
    // 0x32f3c8: b.eq            #0x32f500
    // 0x32f3cc: r1 = LoadStaticField(0xbe0)
    //     0x32f3cc: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x32f3d0: ldr             x1, [x1, #0x17c0]
    // 0x32f3d4: cmp             w1, NULL
    // 0x32f3d8: b.eq            #0x32f584
    // 0x32f3dc: LoadField: r4 = r1->field_53
    //     0x32f3dc: ldur            w4, [x1, #0x53]
    // 0x32f3e0: DecompressPointer r4
    //     0x32f3e0: add             x4, x4, HEAP, lsl #32
    // 0x32f3e4: stur            x4, [fp, #-0x18]
    // 0x32f3e8: LoadField: r5 = r4->field_7
    //     0x32f3e8: ldur            w5, [x4, #7]
    // 0x32f3ec: DecompressPointer r5
    //     0x32f3ec: add             x5, x5, HEAP, lsl #32
    // 0x32f3f0: ldur            x2, [fp, #-8]
    // 0x32f3f4: stur            x5, [fp, #-0x10]
    // 0x32f3f8: r1 = Function '<anonymous closure>':.
    //     0x32f3f8: add             x1, PP, #0x11, lsl #12  ; [pp+0x113d0] AnonymousClosure: (0x32f5a4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::didChangeMetrics (0x32f334)
    //     0x32f3fc: ldr             x1, [x1, #0x3d0]
    // 0x32f400: r0 = AllocateClosure()
    //     0x32f400: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x32f404: ldur            x2, [fp, #-0x10]
    // 0x32f408: mov             x3, x0
    // 0x32f40c: r1 = Null
    //     0x32f40c: mov             x1, NULL
    // 0x32f410: stur            x3, [fp, #-8]
    // 0x32f414: cmp             w2, NULL
    // 0x32f418: b.eq            #0x32f438
    // 0x32f41c: LoadField: r4 = r2->field_17
    //     0x32f41c: ldur            w4, [x2, #0x17]
    // 0x32f420: DecompressPointer r4
    //     0x32f420: add             x4, x4, HEAP, lsl #32
    // 0x32f424: r8 = X0
    //     0x32f424: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x32f428: LoadField: r9 = r4->field_7
    //     0x32f428: ldur            x9, [x4, #7]
    // 0x32f42c: r3 = Null
    //     0x32f42c: add             x3, PP, #0x11, lsl #12  ; [pp+0x113d8] Null
    //     0x32f430: ldr             x3, [x3, #0x3d8]
    // 0x32f434: blr             x9
    // 0x32f438: ldur            x0, [fp, #-0x18]
    // 0x32f43c: LoadField: r1 = r0->field_b
    //     0x32f43c: ldur            w1, [x0, #0xb]
    // 0x32f440: DecompressPointer r1
    //     0x32f440: add             x1, x1, HEAP, lsl #32
    // 0x32f444: LoadField: r2 = r0->field_f
    //     0x32f444: ldur            w2, [x0, #0xf]
    // 0x32f448: DecompressPointer r2
    //     0x32f448: add             x2, x2, HEAP, lsl #32
    // 0x32f44c: LoadField: r3 = r2->field_b
    //     0x32f44c: ldur            w3, [x2, #0xb]
    // 0x32f450: DecompressPointer r3
    //     0x32f450: add             x3, x3, HEAP, lsl #32
    // 0x32f454: r2 = LoadInt32Instr(r1)
    //     0x32f454: sbfx            x2, x1, #1, #0x1f
    // 0x32f458: stur            x2, [fp, #-0x28]
    // 0x32f45c: r1 = LoadInt32Instr(r3)
    //     0x32f45c: sbfx            x1, x3, #1, #0x1f
    // 0x32f460: cmp             x2, x1
    // 0x32f464: b.ne            #0x32f470
    // 0x32f468: str             x0, [SP]
    // 0x32f46c: r0 = _growToNextCapacity()
    //     0x32f46c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x32f470: ldr             x4, [fp, #0x10]
    // 0x32f474: ldur            x5, [fp, #-0x20]
    // 0x32f478: ldur            x2, [fp, #-0x18]
    // 0x32f47c: ldur            x3, [fp, #-0x28]
    // 0x32f480: add             x0, x3, #1
    // 0x32f484: lsl             x1, x0, #1
    // 0x32f488: StoreField: r2->field_b = r1
    //     0x32f488: stur            w1, [x2, #0xb]
    // 0x32f48c: mov             x1, x3
    // 0x32f490: cmp             x1, x0
    // 0x32f494: b.hs            #0x32f588
    // 0x32f498: LoadField: r1 = r2->field_f
    //     0x32f498: ldur            w1, [x2, #0xf]
    // 0x32f49c: DecompressPointer r1
    //     0x32f49c: add             x1, x1, HEAP, lsl #32
    // 0x32f4a0: ldur            x0, [fp, #-8]
    // 0x32f4a4: ArrayStore: r1[r3] = r0  ; List_4
    //     0x32f4a4: add             x25, x1, x3, lsl #2
    //     0x32f4a8: add             x25, x25, #0xf
    //     0x32f4ac: str             w0, [x25]
    //     0x32f4b0: tbz             w0, #0, #0x32f4cc
    //     0x32f4b4: ldurb           w16, [x1, #-1]
    //     0x32f4b8: ldurb           w17, [x0, #-1]
    //     0x32f4bc: and             x16, x17, x16, lsr #2
    //     0x32f4c0: tst             x16, HEAP, lsr #32
    //     0x32f4c4: b.eq            #0x32f4cc
    //     0x32f4c8: bl              #0x3e41ec
    // 0x32f4cc: LoadField: r0 = r4->field_97
    //     0x32f4cc: ldur            w0, [x4, #0x97]
    // 0x32f4d0: DecompressPointer r0
    //     0x32f4d0: add             x0, x0, HEAP, lsl #32
    // 0x32f4d4: LoadField: r1 = r5->field_13
    //     0x32f4d4: ldur            w1, [x5, #0x13]
    // 0x32f4d8: DecompressPointer r1
    //     0x32f4d8: add             x1, x1, HEAP, lsl #32
    // 0x32f4dc: LoadField: r2 = r1->field_13
    //     0x32f4dc: ldur            w2, [x1, #0x13]
    // 0x32f4e0: DecompressPointer r2
    //     0x32f4e0: add             x2, x2, HEAP, lsl #32
    // 0x32f4e4: LoadField: d0 = r2->field_1f
    //     0x32f4e4: ldur            d0, [x2, #0x1f]
    // 0x32f4e8: LoadField: d1 = r0->field_7
    //     0x32f4e8: ldur            d1, [x0, #7]
    // 0x32f4ec: fcmp            d0, d1
    // 0x32f4f0: b.le            #0x32f500
    // 0x32f4f4: r16 = false
    //     0x32f4f4: add             x16, NULL, #0x30  ; false
    // 0x32f4f8: stp             x16, x4, [SP]
    // 0x32f4fc: r0 = _scheduleShowCaretOnScreen()
    //     0x32f4fc: bl              #0x24868c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x32f500: ldr             x1, [fp, #0x10]
    // 0x32f504: ldur            x2, [fp, #-0x20]
    // 0x32f508: LoadField: r3 = r2->field_13
    //     0x32f508: ldur            w3, [x2, #0x13]
    // 0x32f50c: DecompressPointer r3
    //     0x32f50c: add             x3, x3, HEAP, lsl #32
    // 0x32f510: LoadField: r2 = r3->field_13
    //     0x32f510: ldur            w2, [x3, #0x13]
    // 0x32f514: DecompressPointer r2
    //     0x32f514: add             x2, x2, HEAP, lsl #32
    // 0x32f518: LoadField: d0 = r2->field_1f
    //     0x32f518: ldur            d0, [x2, #0x1f]
    // 0x32f51c: r0 = inline_Allocate_Double()
    //     0x32f51c: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x32f520: add             x0, x0, #0x10
    //     0x32f524: cmp             x2, x0
    //     0x32f528: b.ls            #0x32f58c
    //     0x32f52c: str             x0, [THR, #0x50]  ; THR::top
    //     0x32f530: sub             x0, x0, #0xf
    //     0x32f534: movz            x2, #0xd148
    //     0x32f538: movk            x2, #0x3, lsl #16
    //     0x32f53c: stur            x2, [x0, #-1]
    // 0x32f540: StoreField: r0->field_7 = d0
    //     0x32f540: stur            d0, [x0, #7]
    // 0x32f544: StoreField: r1->field_97 = r0
    //     0x32f544: stur            w0, [x1, #0x97]
    //     0x32f548: ldurb           w16, [x1, #-1]
    //     0x32f54c: ldurb           w17, [x0, #-1]
    //     0x32f550: and             x16, x17, x16, lsr #2
    //     0x32f554: tst             x16, HEAP, lsr #32
    //     0x32f558: b.eq            #0x32f560
    //     0x32f55c: bl              #0x3e4608
    // 0x32f560: r0 = Null
    //     0x32f560: mov             x0, NULL
    // 0x32f564: LeaveFrame
    //     0x32f564: mov             SP, fp
    //     0x32f568: ldp             fp, lr, [SP], #0x10
    // 0x32f56c: ret
    //     0x32f56c: ret             
    // 0x32f570: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x32f570: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x32f574: b               #0x32f34c
    // 0x32f578: r9 = _lastBottomViewInset
    //     0x32f578: add             x9, PP, #0x11, lsl #12  ; [pp+0x113e8] Field <EditableTextState._lastBottomViewInset@148183791>: late (offset: 0x98)
    //     0x32f57c: ldr             x9, [x9, #0x3e8]
    // 0x32f580: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x32f580: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x32f584: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x32f584: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x32f588: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x32f588: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x32f58c: SaveReg d0
    //     0x32f58c: str             q0, [SP, #-0x10]!
    // 0x32f590: SaveReg r1
    //     0x32f590: str             x1, [SP, #-8]!
    // 0x32f594: r0 = AllocateDouble()
    //     0x32f594: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x32f598: RestoreReg r1
    //     0x32f598: ldr             x1, [SP], #8
    // 0x32f59c: RestoreReg d0
    //     0x32f59c: ldr             q0, [SP], #0x10
    // 0x32f5a0: b               #0x32f540
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x32f5a4, size: 0x5c
    // 0x32f5a4: EnterFrame
    //     0x32f5a4: stp             fp, lr, [SP, #-0x10]!
    //     0x32f5a8: mov             fp, SP
    // 0x32f5ac: AllocStack(0x8)
    //     0x32f5ac: sub             SP, SP, #8
    // 0x32f5b0: SetupParameters()
    //     0x32f5b0: ldr             x0, [fp, #0x18]
    //     0x32f5b4: ldur            w1, [x0, #0x17]
    //     0x32f5b8: add             x1, x1, HEAP, lsl #32
    // 0x32f5bc: CheckStackOverflow
    //     0x32f5bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x32f5c0: cmp             SP, x16
    //     0x32f5c4: b.ls            #0x32f5f8
    // 0x32f5c8: LoadField: r0 = r1->field_f
    //     0x32f5c8: ldur            w0, [x1, #0xf]
    // 0x32f5cc: DecompressPointer r0
    //     0x32f5cc: add             x0, x0, HEAP, lsl #32
    // 0x32f5d0: LoadField: r1 = r0->field_3f
    //     0x32f5d0: ldur            w1, [x0, #0x3f]
    // 0x32f5d4: DecompressPointer r1
    //     0x32f5d4: add             x1, x1, HEAP, lsl #32
    // 0x32f5d8: cmp             w1, NULL
    // 0x32f5dc: b.eq            #0x32f5e8
    // 0x32f5e0: str             x1, [SP]
    // 0x32f5e4: r0 = updateForScroll()
    //     0x32f5e4: bl              #0x2cbe28  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::updateForScroll
    // 0x32f5e8: r0 = Null
    //     0x32f5e8: mov             x0, NULL
    // 0x32f5ec: LeaveFrame
    //     0x32f5ec: mov             SP, fp
    //     0x32f5f0: ldp             fp, lr, [SP], #0x10
    // 0x32f5f4: ret
    //     0x32f5f4: ret             
    // 0x32f5f8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x32f5f8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x32f5fc: b               #0x32f5c8
  }
  _ _characterBoundary(/* No info */) {
    // ** addr: 0x382ca4, size: 0x58
    // 0x382ca4: EnterFrame
    //     0x382ca4: stp             fp, lr, [SP, #-0x10]!
    //     0x382ca8: mov             fp, SP
    // 0x382cac: AllocStack(0x8)
    //     0x382cac: sub             SP, SP, #8
    // 0x382cb0: ldr             x0, [fp, #0x10]
    // 0x382cb4: LoadField: r1 = r0->field_b
    //     0x382cb4: ldur            w1, [x0, #0xb]
    // 0x382cb8: DecompressPointer r1
    //     0x382cb8: add             x1, x1, HEAP, lsl #32
    // 0x382cbc: cmp             w1, NULL
    // 0x382cc0: b.eq            #0x382cf8
    // 0x382cc4: LoadField: r0 = r1->field_b
    //     0x382cc4: ldur            w0, [x1, #0xb]
    // 0x382cc8: DecompressPointer r0
    //     0x382cc8: add             x0, x0, HEAP, lsl #32
    // 0x382ccc: LoadField: r1 = r0->field_27
    //     0x382ccc: ldur            w1, [x0, #0x27]
    // 0x382cd0: DecompressPointer r1
    //     0x382cd0: add             x1, x1, HEAP, lsl #32
    // 0x382cd4: LoadField: r0 = r1->field_7
    //     0x382cd4: ldur            w0, [x1, #7]
    // 0x382cd8: DecompressPointer r0
    //     0x382cd8: add             x0, x0, HEAP, lsl #32
    // 0x382cdc: stur            x0, [fp, #-8]
    // 0x382ce0: r0 = _CodePointBoundary()
    //     0x382ce0: bl              #0x382d44  ; Allocate_CodePointBoundaryStub -> _CodePointBoundary (size=0xc)
    // 0x382ce4: ldur            x1, [fp, #-8]
    // 0x382ce8: StoreField: r0->field_7 = r1
    //     0x382ce8: stur            w1, [x0, #7]
    // 0x382cec: LeaveFrame
    //     0x382cec: mov             SP, fp
    //     0x382cf0: ldp             fp, lr, [SP], #0x10
    // 0x382cf4: ret
    //     0x382cf4: ret             
    // 0x382cf8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x382cf8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] TextBoundary _characterBoundary(dynamic) {
    // ** addr: 0x382cfc, size: 0x48
    // 0x382cfc: EnterFrame
    //     0x382cfc: stp             fp, lr, [SP, #-0x10]!
    //     0x382d00: mov             fp, SP
    // 0x382d04: AllocStack(0x8)
    //     0x382d04: sub             SP, SP, #8
    // 0x382d08: SetupParameters()
    //     0x382d08: ldr             x0, [fp, #0x10]
    //     0x382d0c: ldur            w1, [x0, #0x17]
    //     0x382d10: add             x1, x1, HEAP, lsl #32
    // 0x382d14: CheckStackOverflow
    //     0x382d14: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x382d18: cmp             SP, x16
    //     0x382d1c: b.ls            #0x382d3c
    // 0x382d20: LoadField: r0 = r1->field_f
    //     0x382d20: ldur            w0, [x1, #0xf]
    // 0x382d24: DecompressPointer r0
    //     0x382d24: add             x0, x0, HEAP, lsl #32
    // 0x382d28: str             x0, [SP]
    // 0x382d2c: r0 = _characterBoundary()
    //     0x382d2c: bl              #0x382ca4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_characterBoundary
    // 0x382d30: LeaveFrame
    //     0x382d30: mov             SP, fp
    //     0x382d34: ldp             fp, lr, [SP], #0x10
    // 0x382d38: ret
    //     0x382d38: ret             
    // 0x382d3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x382d3c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x382d40: b               #0x382d20
  }
  get _ _textEditingValueforTextLayoutMetrics(/* No info */) {
    // ** addr: 0x384f78, size: 0xa4
    // 0x384f78: EnterFrame
    //     0x384f78: stp             fp, lr, [SP, #-0x10]!
    //     0x384f7c: mov             fp, SP
    // 0x384f80: AllocStack(0x8)
    //     0x384f80: sub             SP, SP, #8
    // 0x384f84: CheckStackOverflow
    //     0x384f84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x384f88: cmp             SP, x16
    //     0x384f8c: b.ls            #0x385010
    // 0x384f90: ldr             x0, [fp, #0x10]
    // 0x384f94: LoadField: r1 = r0->field_2f
    //     0x384f94: ldur            w1, [x0, #0x2f]
    // 0x384f98: DecompressPointer r1
    //     0x384f98: add             x1, x1, HEAP, lsl #32
    // 0x384f9c: str             x1, [SP]
    // 0x384fa0: r0 = _currentElement()
    //     0x384fa0: bl              #0x214908  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0x384fa4: cmp             w0, NULL
    // 0x384fa8: b.ne            #0x384fb4
    // 0x384fac: r0 = Null
    //     0x384fac: mov             x0, NULL
    // 0x384fb0: b               #0x384fc8
    // 0x384fb4: LoadField: r1 = r0->field_17
    //     0x384fb4: ldur            w1, [x0, #0x17]
    // 0x384fb8: DecompressPointer r1
    //     0x384fb8: add             x1, x1, HEAP, lsl #32
    // 0x384fbc: cmp             w1, NULL
    // 0x384fc0: b.eq            #0x385018
    // 0x384fc4: mov             x0, x1
    // 0x384fc8: r1 = LoadClassIdInstr(r0)
    //     0x384fc8: ldur            x1, [x0, #-1]
    //     0x384fcc: ubfx            x1, x1, #0xc, #0x14
    // 0x384fd0: cmp             x1, #0x604
    // 0x384fd4: b.ne            #0x384ff0
    // 0x384fd8: LoadField: r1 = r0->field_13
    //     0x384fd8: ldur            w1, [x0, #0x13]
    // 0x384fdc: DecompressPointer r1
    //     0x384fdc: add             x1, x1, HEAP, lsl #32
    // 0x384fe0: mov             x0, x1
    // 0x384fe4: LeaveFrame
    //     0x384fe4: mov             SP, fp
    //     0x384fe8: ldp             fp, lr, [SP], #0x10
    // 0x384fec: ret
    //     0x384fec: ret             
    // 0x384ff0: r0 = StateError()
    //     0x384ff0: bl              #0x187d8c  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0x384ff4: mov             x1, x0
    // 0x384ff8: r0 = "_Editable must be mounted."
    //     0x384ff8: add             x0, PP, #0x12, lsl #12  ; [pp+0x126c8] "_Editable must be mounted."
    //     0x384ffc: ldr             x0, [x0, #0x6c8]
    // 0x385000: StoreField: r1->field_b = r0
    //     0x385000: stur            w0, [x1, #0xb]
    // 0x385004: mov             x0, x1
    // 0x385008: r0 = Throw()
    //     0x385008: bl              #0x3e41c8  ; ThrowStub
    // 0x38500c: brk             #0
    // 0x385010: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x385010: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x385014: b               #0x384f90
    // 0x385018: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x385018: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _hideToolbarIfVisible(dynamic) {
    // ** addr: 0x3b5664, size: 0x18
    // 0x3b5664: r4 = 7
    //     0x3b5664: movz            x4, #0x7
    // 0x3b5668: r1 = Function '_hideToolbarIfVisible@148183791':.
    //     0x3b5668: add             x17, PP, #0x12, lsl #12  ; [pp+0x126f0] AnonymousClosure: (0x3b567c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hideToolbarIfVisible (0x3b56c8)
    //     0x3b566c: ldr             x1, [x17, #0x6f0]
    // 0x3b5670: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b5670: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b5674: LoadField: r0 = r24->field_17
    //     0x3b5674: ldur            x0, [x24, #0x17]
    // 0x3b5678: br              x0
  }
  [closure] Object? _hideToolbarIfVisible(dynamic, DismissIntent) {
    // ** addr: 0x3b567c, size: 0x4c
    // 0x3b567c: EnterFrame
    //     0x3b567c: stp             fp, lr, [SP, #-0x10]!
    //     0x3b5680: mov             fp, SP
    // 0x3b5684: AllocStack(0x10)
    //     0x3b5684: sub             SP, SP, #0x10
    // 0x3b5688: SetupParameters()
    //     0x3b5688: ldr             x0, [fp, #0x18]
    //     0x3b568c: ldur            w1, [x0, #0x17]
    //     0x3b5690: add             x1, x1, HEAP, lsl #32
    // 0x3b5694: CheckStackOverflow
    //     0x3b5694: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b5698: cmp             SP, x16
    //     0x3b569c: b.ls            #0x3b56c0
    // 0x3b56a0: LoadField: r0 = r1->field_f
    //     0x3b56a0: ldur            w0, [x1, #0xf]
    // 0x3b56a4: DecompressPointer r0
    //     0x3b56a4: add             x0, x0, HEAP, lsl #32
    // 0x3b56a8: ldr             x16, [fp, #0x10]
    // 0x3b56ac: stp             x16, x0, [SP]
    // 0x3b56b0: r0 = _hideToolbarIfVisible()
    //     0x3b56b0: bl              #0x3b56c8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hideToolbarIfVisible
    // 0x3b56b4: LeaveFrame
    //     0x3b56b4: mov             SP, fp
    //     0x3b56b8: ldp             fp, lr, [SP], #0x10
    // 0x3b56bc: ret
    //     0x3b56bc: ret             
    // 0x3b56c0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b56c0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b56c4: b               #0x3b56a0
  }
  _ _hideToolbarIfVisible(/* No info */) {
    // ** addr: 0x3b56c8, size: 0xd0
    // 0x3b56c8: EnterFrame
    //     0x3b56c8: stp             fp, lr, [SP, #-0x10]!
    //     0x3b56cc: mov             fp, SP
    // 0x3b56d0: AllocStack(0x18)
    //     0x3b56d0: sub             SP, SP, #0x18
    // 0x3b56d4: CheckStackOverflow
    //     0x3b56d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b56d8: cmp             SP, x16
    //     0x3b56dc: b.ls            #0x3b5784
    // 0x3b56e0: ldr             x0, [fp, #0x18]
    // 0x3b56e4: LoadField: r1 = r0->field_3f
    //     0x3b56e4: ldur            w1, [x0, #0x3f]
    // 0x3b56e8: DecompressPointer r1
    //     0x3b56e8: add             x1, x1, HEAP, lsl #32
    // 0x3b56ec: cmp             w1, NULL
    // 0x3b56f0: b.ne            #0x3b56fc
    // 0x3b56f4: r0 = Null
    //     0x3b56f4: mov             x0, NULL
    // 0x3b56f8: b               #0x3b5718
    // 0x3b56fc: LoadField: r2 = r1->field_17
    //     0x3b56fc: ldur            w2, [x1, #0x17]
    // 0x3b5700: DecompressPointer r2
    //     0x3b5700: add             x2, x2, HEAP, lsl #32
    // 0x3b5704: r16 = Sentinel
    //     0x3b5704: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x3b5708: cmp             w2, w16
    // 0x3b570c: b.eq            #0x3b578c
    // 0x3b5710: str             x2, [SP]
    // 0x3b5714: r0 = toolbarIsVisible()
    //     0x3b5714: bl              #0x23df38  ; [package:flutter/src/widgets/text_selection.dart] SelectionOverlay::toolbarIsVisible
    // 0x3b5718: cmp             w0, NULL
    // 0x3b571c: b.eq            #0x3b5748
    // 0x3b5720: tbnz            w0, #4, #0x3b5748
    // 0x3b5724: ldr             x16, [fp, #0x18]
    // 0x3b5728: r30 = false
    //     0x3b5728: add             lr, NULL, #0x30  ; false
    // 0x3b572c: stp             lr, x16, [SP]
    // 0x3b5730: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x3b5730: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x3b5734: r0 = hideToolbar()
    //     0x3b5734: bl              #0x23dcb8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x3b5738: r0 = Null
    //     0x3b5738: mov             x0, NULL
    // 0x3b573c: LeaveFrame
    //     0x3b573c: mov             SP, fp
    //     0x3b5740: ldp             fp, lr, [SP], #0x10
    // 0x3b5744: ret
    //     0x3b5744: ret             
    // 0x3b5748: ldr             x0, [fp, #0x18]
    // 0x3b574c: LoadField: r1 = r0->field_f
    //     0x3b574c: ldur            w1, [x0, #0xf]
    // 0x3b5750: DecompressPointer r1
    //     0x3b5750: add             x1, x1, HEAP, lsl #32
    // 0x3b5754: cmp             w1, NULL
    // 0x3b5758: b.eq            #0x3b5794
    // 0x3b575c: r16 = <DismissIntent>
    //     0x3b575c: add             x16, PP, #0xe, lsl #12  ; [pp+0xe240] TypeArguments: <DismissIntent>
    //     0x3b5760: ldr             x16, [x16, #0x240]
    // 0x3b5764: stp             x1, x16, [SP, #8]
    // 0x3b5768: ldr             x16, [fp, #0x10]
    // 0x3b576c: str             x16, [SP]
    // 0x3b5770: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x3b5770: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x3b5774: r0 = invoke()
    //     0x3b5774: bl              #0x23f70c  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x3b5778: LeaveFrame
    //     0x3b5778: mov             SP, fp
    //     0x3b577c: ldp             fp, lr, [SP], #0x10
    // 0x3b5780: ret
    //     0x3b5780: ret             
    // 0x3b5784: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b5784: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b5788: b               #0x3b56e0
    // 0x3b578c: r9 = _selectionOverlay
    //     0x3b578c: ldr             x9, [PP, #0x4ea8]  ; [pp+0x4ea8] Field <TextSelectionOverlay._selectionOverlay@213111801>: late final (offset: 0x18)
    // 0x3b5790: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x3b5790: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x3b5794: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b5794: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _updateSelection(dynamic) {
    // ** addr: 0x3b5798, size: 0x18
    // 0x3b5798: r4 = 7
    //     0x3b5798: movz            x4, #0x7
    // 0x3b579c: r1 = Function '_updateSelection@148183791':.
    //     0x3b579c: add             x17, PP, #0x12, lsl #12  ; [pp+0x126f8] AnonymousClosure: (0x3b57b0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelection (0x3b57fc)
    //     0x3b57a0: ldr             x1, [x17, #0x6f8]
    // 0x3b57a4: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b57a4: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b57a8: LoadField: r0 = r24->field_17
    //     0x3b57a8: ldur            x0, [x24, #0x17]
    // 0x3b57ac: br              x0
  }
  [closure] void _updateSelection(dynamic, UpdateSelectionIntent) {
    // ** addr: 0x3b57b0, size: 0x4c
    // 0x3b57b0: EnterFrame
    //     0x3b57b0: stp             fp, lr, [SP, #-0x10]!
    //     0x3b57b4: mov             fp, SP
    // 0x3b57b8: AllocStack(0x10)
    //     0x3b57b8: sub             SP, SP, #0x10
    // 0x3b57bc: SetupParameters()
    //     0x3b57bc: ldr             x0, [fp, #0x18]
    //     0x3b57c0: ldur            w1, [x0, #0x17]
    //     0x3b57c4: add             x1, x1, HEAP, lsl #32
    // 0x3b57c8: CheckStackOverflow
    //     0x3b57c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b57cc: cmp             SP, x16
    //     0x3b57d0: b.ls            #0x3b57f4
    // 0x3b57d4: LoadField: r0 = r1->field_f
    //     0x3b57d4: ldur            w0, [x1, #0xf]
    // 0x3b57d8: DecompressPointer r0
    //     0x3b57d8: add             x0, x0, HEAP, lsl #32
    // 0x3b57dc: ldr             x16, [fp, #0x10]
    // 0x3b57e0: stp             x16, x0, [SP]
    // 0x3b57e4: r0 = _updateSelection()
    //     0x3b57e4: bl              #0x3b57fc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelection
    // 0x3b57e8: LeaveFrame
    //     0x3b57e8: mov             SP, fp
    //     0x3b57ec: ldp             fp, lr, [SP], #0x10
    // 0x3b57f0: ret
    //     0x3b57f0: ret             
    // 0x3b57f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b57f4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b57f8: b               #0x3b57d4
  }
  _ _updateSelection(/* No info */) {
    // ** addr: 0x3b57fc, size: 0x84
    // 0x3b57fc: EnterFrame
    //     0x3b57fc: stp             fp, lr, [SP, #-0x10]!
    //     0x3b5800: mov             fp, SP
    // 0x3b5804: AllocStack(0x20)
    //     0x3b5804: sub             SP, SP, #0x20
    // 0x3b5808: CheckStackOverflow
    //     0x3b5808: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b580c: cmp             SP, x16
    //     0x3b5810: b.ls            #0x3b5878
    // 0x3b5814: ldr             x0, [fp, #0x10]
    // 0x3b5818: LoadField: r1 = r0->field_b
    //     0x3b5818: ldur            w1, [x0, #0xb]
    // 0x3b581c: DecompressPointer r1
    //     0x3b581c: add             x1, x1, HEAP, lsl #32
    // 0x3b5820: stur            x1, [fp, #-8]
    // 0x3b5824: str             x1, [SP]
    // 0x3b5828: r0 = extent()
    //     0x3b5828: bl              #0x1fc3bc  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x3b582c: ldr             x16, [fp, #0x18]
    // 0x3b5830: stp             x0, x16, [SP]
    // 0x3b5834: r0 = bringIntoView()
    //     0x3b5834: bl              #0x241504  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x3b5838: ldr             x0, [fp, #0x10]
    // 0x3b583c: LoadField: r1 = r0->field_7
    //     0x3b583c: ldur            w1, [x0, #7]
    // 0x3b5840: DecompressPointer r1
    //     0x3b5840: add             x1, x1, HEAP, lsl #32
    // 0x3b5844: ldur            x16, [fp, #-8]
    // 0x3b5848: stp             x16, x1, [SP]
    // 0x3b584c: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x3b584c: ldr             x4, [PP, #0x5930]  ; [pp+0x5930] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x3b5850: r0 = copyWith()
    //     0x3b5850: bl              #0x2498e0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x3b5854: ldr             x16, [fp, #0x18]
    // 0x3b5858: stp             x0, x16, [SP, #8]
    // 0x3b585c: r16 = Instance_SelectionChangedCause
    //     0x3b585c: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x3b5860: str             x16, [SP]
    // 0x3b5864: r0 = userUpdateTextEditingValue()
    //     0x3b5864: bl              #0x22c13c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x3b5868: r0 = Null
    //     0x3b5868: mov             x0, NULL
    // 0x3b586c: LeaveFrame
    //     0x3b586c: mov             SP, fp
    //     0x3b5870: ldp             fp, lr, [SP], #0x10
    // 0x3b5874: ret
    //     0x3b5874: ret             
    // 0x3b5878: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b5878: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b587c: b               #0x3b5814
  }
  dynamic _extendSelectionByPage(dynamic) {
    // ** addr: 0x3b5880, size: 0x18
    // 0x3b5880: r4 = 7
    //     0x3b5880: movz            x4, #0x7
    // 0x3b5884: r1 = Function '_extendSelectionByPage@148183791':.
    //     0x3b5884: add             x17, PP, #0x12, lsl #12  ; [pp+0x12700] AnonymousClosure: (0x288940), of [package:flutter/src/widgets/editable_text.dart] EditableTextState
    //     0x3b5888: ldr             x1, [x17, #0x700]
    // 0x3b588c: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b588c: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b5890: LoadField: r0 = r24->field_17
    //     0x3b5890: ldur            x0, [x24, #0x17]
    // 0x3b5894: br              x0
  }
  dynamic _scroll(dynamic) {
    // ** addr: 0x3b5898, size: 0x18
    // 0x3b5898: r4 = 7
    //     0x3b5898: movz            x4, #0x7
    // 0x3b589c: r1 = Function '_scroll@148183791':.
    //     0x3b589c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12708] AnonymousClosure: (0x3b58b0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scroll (0x3b58fc)
    //     0x3b58a0: ldr             x1, [x17, #0x708]
    // 0x3b58a4: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b58a4: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b58a8: LoadField: r0 = r24->field_17
    //     0x3b58a8: ldur            x0, [x24, #0x17]
    // 0x3b58ac: br              x0
  }
  [closure] void _scroll(dynamic, ScrollIntent) {
    // ** addr: 0x3b58b0, size: 0x4c
    // 0x3b58b0: EnterFrame
    //     0x3b58b0: stp             fp, lr, [SP, #-0x10]!
    //     0x3b58b4: mov             fp, SP
    // 0x3b58b8: AllocStack(0x10)
    //     0x3b58b8: sub             SP, SP, #0x10
    // 0x3b58bc: SetupParameters()
    //     0x3b58bc: ldr             x0, [fp, #0x18]
    //     0x3b58c0: ldur            w1, [x0, #0x17]
    //     0x3b58c4: add             x1, x1, HEAP, lsl #32
    // 0x3b58c8: CheckStackOverflow
    //     0x3b58c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b58cc: cmp             SP, x16
    //     0x3b58d0: b.ls            #0x3b58f4
    // 0x3b58d4: LoadField: r0 = r1->field_f
    //     0x3b58d4: ldur            w0, [x1, #0xf]
    // 0x3b58d8: DecompressPointer r0
    //     0x3b58d8: add             x0, x0, HEAP, lsl #32
    // 0x3b58dc: ldr             x16, [fp, #0x10]
    // 0x3b58e0: stp             x16, x0, [SP]
    // 0x3b58e4: r0 = _scroll()
    //     0x3b58e4: bl              #0x3b58fc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scroll
    // 0x3b58e8: LeaveFrame
    //     0x3b58e8: mov             SP, fp
    //     0x3b58ec: ldp             fp, lr, [SP], #0x10
    // 0x3b58f0: ret
    //     0x3b58f0: ret             
    // 0x3b58f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b58f4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b58f8: b               #0x3b58d4
  }
  _ _scroll(/* No info */) {
    // ** addr: 0x3b58fc, size: 0xcc
    // 0x3b58fc: EnterFrame
    //     0x3b58fc: stp             fp, lr, [SP, #-0x10]!
    //     0x3b5900: mov             fp, SP
    // 0x3b5904: AllocStack(0x18)
    //     0x3b5904: sub             SP, SP, #0x18
    // 0x3b5908: CheckStackOverflow
    //     0x3b5908: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b590c: cmp             SP, x16
    //     0x3b5910: b.ls            #0x3b59b8
    // 0x3b5914: ldr             x0, [fp, #0x10]
    // 0x3b5918: LoadField: r1 = r0->field_b
    //     0x3b5918: ldur            w1, [x0, #0xb]
    // 0x3b591c: DecompressPointer r1
    //     0x3b591c: add             x1, x1, HEAP, lsl #32
    // 0x3b5920: r16 = Instance_ScrollIncrementType
    //     0x3b5920: add             x16, PP, #0x12, lsl #12  ; [pp+0x12710] Obj!ScrollIncrementType@47dc71
    //     0x3b5924: ldr             x16, [x16, #0x710]
    // 0x3b5928: cmp             w1, w16
    // 0x3b592c: b.eq            #0x3b5940
    // 0x3b5930: r0 = Null
    //     0x3b5930: mov             x0, NULL
    // 0x3b5934: LeaveFrame
    //     0x3b5934: mov             SP, fp
    //     0x3b5938: ldp             fp, lr, [SP], #0x10
    // 0x3b593c: ret
    //     0x3b593c: ret             
    // 0x3b5940: ldr             x0, [fp, #0x18]
    // 0x3b5944: str             x0, [SP]
    // 0x3b5948: r0 = _scrollController()
    //     0x3b5948: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x3b594c: LoadField: r1 = r0->field_3b
    //     0x3b594c: ldur            w1, [x0, #0x3b]
    // 0x3b5950: DecompressPointer r1
    //     0x3b5950: add             x1, x1, HEAP, lsl #32
    // 0x3b5954: str             x1, [SP]
    // 0x3b5958: r0 = single()
    //     0x3b5958: bl              #0x1b91cc  ; [dart:core] _GrowableList::single
    // 0x3b595c: mov             x1, x0
    // 0x3b5960: ldr             x0, [fp, #0x18]
    // 0x3b5964: stur            x1, [fp, #-8]
    // 0x3b5968: LoadField: r2 = r0->field_b
    //     0x3b5968: ldur            w2, [x0, #0xb]
    // 0x3b596c: DecompressPointer r2
    //     0x3b596c: add             x2, x2, HEAP, lsl #32
    // 0x3b5970: cmp             w2, NULL
    // 0x3b5974: b.eq            #0x3b59c0
    // 0x3b5978: str             x0, [SP]
    // 0x3b597c: r0 = _scrollController()
    //     0x3b597c: bl              #0x2419b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x3b5980: mov             x1, x0
    // 0x3b5984: ldur            x0, [fp, #-8]
    // 0x3b5988: LoadField: r2 = r0->field_37
    //     0x3b5988: ldur            w2, [x0, #0x37]
    // 0x3b598c: DecompressPointer r2
    //     0x3b598c: add             x2, x2, HEAP, lsl #32
    // 0x3b5990: cmp             w2, NULL
    // 0x3b5994: b.eq            #0x3b59c4
    // 0x3b5998: LoadField: d0 = r2->field_7
    //     0x3b5998: ldur            d0, [x2, #7]
    // 0x3b599c: str             x1, [SP, #8]
    // 0x3b59a0: str             d0, [SP]
    // 0x3b59a4: r0 = jumpTo()
    //     0x3b59a4: bl              #0x2415b8  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::jumpTo
    // 0x3b59a8: r0 = Null
    //     0x3b59a8: mov             x0, NULL
    // 0x3b59ac: LeaveFrame
    //     0x3b59ac: mov             SP, fp
    //     0x3b59b0: ldp             fp, lr, [SP], #0x10
    // 0x3b59b4: ret
    //     0x3b59b4: ret             
    // 0x3b59b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b59b8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b59bc: b               #0x3b5914
    // 0x3b59c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b59c0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x3b59c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b59c4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _scrollToDocumentBoundary(dynamic) {
    // ** addr: 0x3b59c8, size: 0x18
    // 0x3b59c8: r4 = 7
    //     0x3b59c8: movz            x4, #0x7
    // 0x3b59cc: r1 = Function '_scrollToDocumentBoundary@148183791':.
    //     0x3b59cc: add             x17, PP, #0x12, lsl #12  ; [pp+0x12718] AnonymousClosure: (0x3b59e0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollToDocumentBoundary (0x3b5a2c)
    //     0x3b59d0: ldr             x1, [x17, #0x718]
    // 0x3b59d4: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b59d4: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b59d8: LoadField: r0 = r24->field_17
    //     0x3b59d8: ldur            x0, [x24, #0x17]
    // 0x3b59dc: br              x0
  }
  [closure] void _scrollToDocumentBoundary(dynamic, ScrollToDocumentBoundaryIntent) {
    // ** addr: 0x3b59e0, size: 0x4c
    // 0x3b59e0: EnterFrame
    //     0x3b59e0: stp             fp, lr, [SP, #-0x10]!
    //     0x3b59e4: mov             fp, SP
    // 0x3b59e8: AllocStack(0x10)
    //     0x3b59e8: sub             SP, SP, #0x10
    // 0x3b59ec: SetupParameters()
    //     0x3b59ec: ldr             x0, [fp, #0x18]
    //     0x3b59f0: ldur            w1, [x0, #0x17]
    //     0x3b59f4: add             x1, x1, HEAP, lsl #32
    // 0x3b59f8: CheckStackOverflow
    //     0x3b59f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b59fc: cmp             SP, x16
    //     0x3b5a00: b.ls            #0x3b5a24
    // 0x3b5a04: LoadField: r0 = r1->field_f
    //     0x3b5a04: ldur            w0, [x1, #0xf]
    // 0x3b5a08: DecompressPointer r0
    //     0x3b5a08: add             x0, x0, HEAP, lsl #32
    // 0x3b5a0c: ldr             x16, [fp, #0x10]
    // 0x3b5a10: stp             x16, x0, [SP]
    // 0x3b5a14: r0 = _scrollToDocumentBoundary()
    //     0x3b5a14: bl              #0x3b5a2c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollToDocumentBoundary
    // 0x3b5a18: LeaveFrame
    //     0x3b5a18: mov             SP, fp
    //     0x3b5a1c: ldp             fp, lr, [SP], #0x10
    // 0x3b5a20: ret
    //     0x3b5a20: ret             
    // 0x3b5a24: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b5a24: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b5a28: b               #0x3b5a04
  }
  _ _scrollToDocumentBoundary(/* No info */) {
    // ** addr: 0x3b5a2c, size: 0xbc
    // 0x3b5a2c: EnterFrame
    //     0x3b5a2c: stp             fp, lr, [SP, #-0x10]!
    //     0x3b5a30: mov             fp, SP
    // 0x3b5a34: AllocStack(0x18)
    //     0x3b5a34: sub             SP, SP, #0x18
    // 0x3b5a38: CheckStackOverflow
    //     0x3b5a38: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b5a3c: cmp             SP, x16
    //     0x3b5a40: b.ls            #0x3b5adc
    // 0x3b5a44: ldr             x0, [fp, #0x10]
    // 0x3b5a48: LoadField: r1 = r0->field_7
    //     0x3b5a48: ldur            w1, [x0, #7]
    // 0x3b5a4c: DecompressPointer r1
    //     0x3b5a4c: add             x1, x1, HEAP, lsl #32
    // 0x3b5a50: tbnz            w1, #4, #0x3b5ab8
    // 0x3b5a54: ldr             x0, [fp, #0x18]
    // 0x3b5a58: LoadField: r1 = r0->field_b
    //     0x3b5a58: ldur            w1, [x0, #0xb]
    // 0x3b5a5c: DecompressPointer r1
    //     0x3b5a5c: add             x1, x1, HEAP, lsl #32
    // 0x3b5a60: cmp             w1, NULL
    // 0x3b5a64: b.eq            #0x3b5ae4
    // 0x3b5a68: LoadField: r2 = r1->field_b
    //     0x3b5a68: ldur            w2, [x1, #0xb]
    // 0x3b5a6c: DecompressPointer r2
    //     0x3b5a6c: add             x2, x2, HEAP, lsl #32
    // 0x3b5a70: LoadField: r1 = r2->field_27
    //     0x3b5a70: ldur            w1, [x2, #0x27]
    // 0x3b5a74: DecompressPointer r1
    //     0x3b5a74: add             x1, x1, HEAP, lsl #32
    // 0x3b5a78: LoadField: r2 = r1->field_7
    //     0x3b5a78: ldur            w2, [x1, #7]
    // 0x3b5a7c: DecompressPointer r2
    //     0x3b5a7c: add             x2, x2, HEAP, lsl #32
    // 0x3b5a80: LoadField: r1 = r2->field_7
    //     0x3b5a80: ldur            w1, [x2, #7]
    // 0x3b5a84: DecompressPointer r1
    //     0x3b5a84: add             x1, x1, HEAP, lsl #32
    // 0x3b5a88: r2 = LoadInt32Instr(r1)
    //     0x3b5a88: sbfx            x2, x1, #1, #0x1f
    // 0x3b5a8c: stur            x2, [fp, #-8]
    // 0x3b5a90: r0 = TextPosition()
    //     0x3b5a90: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x3b5a94: mov             x1, x0
    // 0x3b5a98: ldur            x0, [fp, #-8]
    // 0x3b5a9c: StoreField: r1->field_7 = r0
    //     0x3b5a9c: stur            x0, [x1, #7]
    // 0x3b5aa0: r0 = Instance_TextAffinity
    //     0x3b5aa0: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x3b5aa4: StoreField: r1->field_f = r0
    //     0x3b5aa4: stur            w0, [x1, #0xf]
    // 0x3b5aa8: ldr             x16, [fp, #0x18]
    // 0x3b5aac: stp             x1, x16, [SP]
    // 0x3b5ab0: r0 = bringIntoView()
    //     0x3b5ab0: bl              #0x241504  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x3b5ab4: b               #0x3b5acc
    // 0x3b5ab8: ldr             x16, [fp, #0x18]
    // 0x3b5abc: r30 = Instance_TextPosition
    //     0x3b5abc: add             lr, PP, #0x12, lsl #12  ; [pp+0x12670] Obj!TextPosition@47c051
    //     0x3b5ac0: ldr             lr, [lr, #0x670]
    // 0x3b5ac4: stp             lr, x16, [SP]
    // 0x3b5ac8: r0 = bringIntoView()
    //     0x3b5ac8: bl              #0x241504  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x3b5acc: r0 = Null
    //     0x3b5acc: mov             x0, NULL
    // 0x3b5ad0: LeaveFrame
    //     0x3b5ad0: mov             SP, fp
    //     0x3b5ad4: ldp             fp, lr, [SP], #0x10
    // 0x3b5ad8: ret
    //     0x3b5ad8: ret             
    // 0x3b5adc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b5adc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b5ae0: b               #0x3b5a44
    // 0x3b5ae4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b5ae4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _replaceText(dynamic) {
    // ** addr: 0x3b5ae8, size: 0x18
    // 0x3b5ae8: r4 = 7
    //     0x3b5ae8: movz            x4, #0x7
    // 0x3b5aec: r1 = Function '_replaceText@148183791':.
    //     0x3b5aec: add             x17, PP, #0x12, lsl #12  ; [pp+0x12720] AnonymousClosure: (0x3b5b00), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_replaceText (0x3b5b4c)
    //     0x3b5af0: ldr             x1, [x17, #0x720]
    // 0x3b5af4: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b5af4: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b5af8: LoadField: r0 = r24->field_17
    //     0x3b5af8: ldur            x0, [x24, #0x17]
    // 0x3b5afc: br              x0
  }
  [closure] void _replaceText(dynamic, ReplaceTextIntent) {
    // ** addr: 0x3b5b00, size: 0x4c
    // 0x3b5b00: EnterFrame
    //     0x3b5b00: stp             fp, lr, [SP, #-0x10]!
    //     0x3b5b04: mov             fp, SP
    // 0x3b5b08: AllocStack(0x10)
    //     0x3b5b08: sub             SP, SP, #0x10
    // 0x3b5b0c: SetupParameters()
    //     0x3b5b0c: ldr             x0, [fp, #0x18]
    //     0x3b5b10: ldur            w1, [x0, #0x17]
    //     0x3b5b14: add             x1, x1, HEAP, lsl #32
    // 0x3b5b18: CheckStackOverflow
    //     0x3b5b18: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b5b1c: cmp             SP, x16
    //     0x3b5b20: b.ls            #0x3b5b44
    // 0x3b5b24: LoadField: r0 = r1->field_f
    //     0x3b5b24: ldur            w0, [x1, #0xf]
    // 0x3b5b28: DecompressPointer r0
    //     0x3b5b28: add             x0, x0, HEAP, lsl #32
    // 0x3b5b2c: ldr             x16, [fp, #0x10]
    // 0x3b5b30: stp             x16, x0, [SP]
    // 0x3b5b34: r0 = _replaceText()
    //     0x3b5b34: bl              #0x3b5b4c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_replaceText
    // 0x3b5b38: LeaveFrame
    //     0x3b5b38: mov             SP, fp
    //     0x3b5b3c: ldp             fp, lr, [SP], #0x10
    // 0x3b5b40: ret
    //     0x3b5b40: ret             
    // 0x3b5b44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b5b44: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b5b48: b               #0x3b5b24
  }
  _ _replaceText(/* No info */) {
    // ** addr: 0x3b5b4c, size: 0xb8
    // 0x3b5b4c: EnterFrame
    //     0x3b5b4c: stp             fp, lr, [SP, #-0x10]!
    //     0x3b5b50: mov             fp, SP
    // 0x3b5b54: AllocStack(0x28)
    //     0x3b5b54: sub             SP, SP, #0x28
    // 0x3b5b58: CheckStackOverflow
    //     0x3b5b58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b5b5c: cmp             SP, x16
    //     0x3b5b60: b.ls            #0x3b5bf8
    // 0x3b5b64: ldr             x0, [fp, #0x18]
    // 0x3b5b68: LoadField: r1 = r0->field_b
    //     0x3b5b68: ldur            w1, [x0, #0xb]
    // 0x3b5b6c: DecompressPointer r1
    //     0x3b5b6c: add             x1, x1, HEAP, lsl #32
    // 0x3b5b70: cmp             w1, NULL
    // 0x3b5b74: b.eq            #0x3b5c00
    // 0x3b5b78: LoadField: r2 = r1->field_b
    //     0x3b5b78: ldur            w2, [x1, #0xb]
    // 0x3b5b7c: DecompressPointer r2
    //     0x3b5b7c: add             x2, x2, HEAP, lsl #32
    // 0x3b5b80: LoadField: r1 = r2->field_27
    //     0x3b5b80: ldur            w1, [x2, #0x27]
    // 0x3b5b84: DecompressPointer r1
    //     0x3b5b84: add             x1, x1, HEAP, lsl #32
    // 0x3b5b88: ldr             x2, [fp, #0x10]
    // 0x3b5b8c: stur            x1, [fp, #-8]
    // 0x3b5b90: LoadField: r3 = r2->field_7
    //     0x3b5b90: ldur            w3, [x2, #7]
    // 0x3b5b94: DecompressPointer r3
    //     0x3b5b94: add             x3, x3, HEAP, lsl #32
    // 0x3b5b98: LoadField: r4 = r2->field_f
    //     0x3b5b98: ldur            w4, [x2, #0xf]
    // 0x3b5b9c: DecompressPointer r4
    //     0x3b5b9c: add             x4, x4, HEAP, lsl #32
    // 0x3b5ba0: stp             x4, x3, [SP, #8]
    // 0x3b5ba4: r16 = ""
    //     0x3b5ba4: ldr             x16, [PP, #0x1a0]  ; [pp+0x1a0] ""
    // 0x3b5ba8: str             x16, [SP]
    // 0x3b5bac: r0 = replaced()
    //     0x3b5bac: bl              #0x27c47c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::replaced
    // 0x3b5bb0: stur            x0, [fp, #-0x10]
    // 0x3b5bb4: ldr             x16, [fp, #0x18]
    // 0x3b5bb8: stp             x0, x16, [SP, #8]
    // 0x3b5bbc: r16 = Instance_SelectionChangedCause
    //     0x3b5bbc: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x3b5bc0: str             x16, [SP]
    // 0x3b5bc4: r0 = userUpdateTextEditingValue()
    //     0x3b5bc4: bl              #0x22c13c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x3b5bc8: ldur            x16, [fp, #-0x10]
    // 0x3b5bcc: ldur            lr, [fp, #-8]
    // 0x3b5bd0: stp             lr, x16, [SP]
    // 0x3b5bd4: r0 = ==()
    //     0x3b5bd4: bl              #0x3688c0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x3b5bd8: tbnz            w0, #4, #0x3b5be8
    // 0x3b5bdc: ldr             x16, [fp, #0x18]
    // 0x3b5be0: str             x16, [SP]
    // 0x3b5be4: r0 = _didChangeTextEditingValue()
    //     0x3b5be4: bl              #0x26ed24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue
    // 0x3b5be8: r0 = Null
    //     0x3b5be8: mov             x0, NULL
    // 0x3b5bec: LeaveFrame
    //     0x3b5bec: mov             SP, fp
    //     0x3b5bf0: ldp             fp, lr, [SP], #0x10
    // 0x3b5bf4: ret
    //     0x3b5bf4: ret             
    // 0x3b5bf8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b5bf8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b5bfc: b               #0x3b5b64
    // 0x3b5c00: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b5c00: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _transposeCharacters(dynamic) {
    // ** addr: 0x3b635c, size: 0x18
    // 0x3b635c: r4 = 7
    //     0x3b635c: movz            x4, #0x7
    // 0x3b6360: r1 = Function '_transposeCharacters@148183791':.
    //     0x3b6360: add             x17, PP, #0x12, lsl #12  ; [pp+0x12728] AnonymousClosure: (0x3b6374), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_transposeCharacters (0x3b63c0)
    //     0x3b6364: ldr             x1, [x17, #0x728]
    // 0x3b6368: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b6368: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b636c: LoadField: r0 = r24->field_17
    //     0x3b636c: ldur            x0, [x24, #0x17]
    // 0x3b6370: br              x0
  }
  [closure] void _transposeCharacters(dynamic, TransposeCharactersIntent) {
    // ** addr: 0x3b6374, size: 0x4c
    // 0x3b6374: EnterFrame
    //     0x3b6374: stp             fp, lr, [SP, #-0x10]!
    //     0x3b6378: mov             fp, SP
    // 0x3b637c: AllocStack(0x10)
    //     0x3b637c: sub             SP, SP, #0x10
    // 0x3b6380: SetupParameters()
    //     0x3b6380: ldr             x0, [fp, #0x18]
    //     0x3b6384: ldur            w1, [x0, #0x17]
    //     0x3b6388: add             x1, x1, HEAP, lsl #32
    // 0x3b638c: CheckStackOverflow
    //     0x3b638c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b6390: cmp             SP, x16
    //     0x3b6394: b.ls            #0x3b63b8
    // 0x3b6398: LoadField: r0 = r1->field_f
    //     0x3b6398: ldur            w0, [x1, #0xf]
    // 0x3b639c: DecompressPointer r0
    //     0x3b639c: add             x0, x0, HEAP, lsl #32
    // 0x3b63a0: ldr             x16, [fp, #0x10]
    // 0x3b63a4: stp             x16, x0, [SP]
    // 0x3b63a8: r0 = _transposeCharacters()
    //     0x3b63a8: bl              #0x3b63c0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_transposeCharacters
    // 0x3b63ac: LeaveFrame
    //     0x3b63ac: mov             SP, fp
    //     0x3b63b0: ldp             fp, lr, [SP], #0x10
    // 0x3b63b4: ret
    //     0x3b63b4: ret             
    // 0x3b63b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b63b8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b63bc: b               #0x3b6398
  }
  _ _transposeCharacters(/* No info */) {
    // ** addr: 0x3b63c0, size: 0x26c
    // 0x3b63c0: EnterFrame
    //     0x3b63c0: stp             fp, lr, [SP, #-0x10]!
    //     0x3b63c4: mov             fp, SP
    // 0x3b63c8: AllocStack(0x40)
    //     0x3b63c8: sub             SP, SP, #0x40
    // 0x3b63cc: CheckStackOverflow
    //     0x3b63cc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b63d0: cmp             SP, x16
    //     0x3b63d4: b.ls            #0x3b661c
    // 0x3b63d8: ldr             x0, [fp, #0x18]
    // 0x3b63dc: LoadField: r1 = r0->field_b
    //     0x3b63dc: ldur            w1, [x0, #0xb]
    // 0x3b63e0: DecompressPointer r1
    //     0x3b63e0: add             x1, x1, HEAP, lsl #32
    // 0x3b63e4: cmp             w1, NULL
    // 0x3b63e8: b.eq            #0x3b6624
    // 0x3b63ec: LoadField: r2 = r1->field_b
    //     0x3b63ec: ldur            w2, [x1, #0xb]
    // 0x3b63f0: DecompressPointer r2
    //     0x3b63f0: add             x2, x2, HEAP, lsl #32
    // 0x3b63f4: LoadField: r1 = r2->field_27
    //     0x3b63f4: ldur            w1, [x2, #0x27]
    // 0x3b63f8: DecompressPointer r1
    //     0x3b63f8: add             x1, x1, HEAP, lsl #32
    // 0x3b63fc: LoadField: r2 = r1->field_7
    //     0x3b63fc: ldur            w2, [x1, #7]
    // 0x3b6400: DecompressPointer r2
    //     0x3b6400: add             x2, x2, HEAP, lsl #32
    // 0x3b6404: str             x2, [SP]
    // 0x3b6408: r0 = StringCharacters.characters()
    //     0x3b6408: bl              #0x232234  ; [package:characters/src/extensions.dart] ::StringCharacters.characters
    // 0x3b640c: str             x0, [SP]
    // 0x3b6410: r0 = length()
    //     0x3b6410: bl              #0x379efc  ; [package:characters/src/characters_impl.dart] StringCharacters::length
    // 0x3b6414: r1 = LoadInt32Instr(r0)
    //     0x3b6414: sbfx            x1, x0, #1, #0x1f
    //     0x3b6418: tbz             w0, #0, #0x3b6420
    //     0x3b641c: ldur            x1, [x0, #7]
    // 0x3b6420: cmp             x1, #1
    // 0x3b6424: b.le            #0x3b6470
    // 0x3b6428: ldr             x0, [fp, #0x18]
    // 0x3b642c: LoadField: r1 = r0->field_b
    //     0x3b642c: ldur            w1, [x0, #0xb]
    // 0x3b6430: DecompressPointer r1
    //     0x3b6430: add             x1, x1, HEAP, lsl #32
    // 0x3b6434: cmp             w1, NULL
    // 0x3b6438: b.eq            #0x3b6628
    // 0x3b643c: LoadField: r2 = r1->field_b
    //     0x3b643c: ldur            w2, [x1, #0xb]
    // 0x3b6440: DecompressPointer r2
    //     0x3b6440: add             x2, x2, HEAP, lsl #32
    // 0x3b6444: LoadField: r1 = r2->field_27
    //     0x3b6444: ldur            w1, [x2, #0x27]
    // 0x3b6448: DecompressPointer r1
    //     0x3b6448: add             x1, x1, HEAP, lsl #32
    // 0x3b644c: LoadField: r2 = r1->field_b
    //     0x3b644c: ldur            w2, [x1, #0xb]
    // 0x3b6450: DecompressPointer r2
    //     0x3b6450: add             x2, x2, HEAP, lsl #32
    // 0x3b6454: LoadField: r3 = r2->field_7
    //     0x3b6454: ldur            x3, [x2, #7]
    // 0x3b6458: LoadField: r4 = r2->field_f
    //     0x3b6458: ldur            x4, [x2, #0xf]
    // 0x3b645c: cmp             x3, x4
    // 0x3b6460: b.ne            #0x3b6470
    // 0x3b6464: LoadField: r3 = r2->field_17
    //     0x3b6464: ldur            x3, [x2, #0x17]
    // 0x3b6468: stur            x3, [fp, #-0x10]
    // 0x3b646c: cbnz            x3, #0x3b6480
    // 0x3b6470: r0 = Null
    //     0x3b6470: mov             x0, NULL
    // 0x3b6474: LeaveFrame
    //     0x3b6474: mov             SP, fp
    //     0x3b6478: ldp             fp, lr, [SP], #0x10
    // 0x3b647c: ret
    //     0x3b647c: ret             
    // 0x3b6480: LoadField: r2 = r1->field_7
    //     0x3b6480: ldur            w2, [x1, #7]
    // 0x3b6484: DecompressPointer r2
    //     0x3b6484: add             x2, x2, HEAP, lsl #32
    // 0x3b6488: LoadField: r1 = r2->field_7
    //     0x3b6488: ldur            w1, [x2, #7]
    // 0x3b648c: DecompressPointer r1
    //     0x3b648c: add             x1, x1, HEAP, lsl #32
    // 0x3b6490: r4 = LoadInt32Instr(r1)
    //     0x3b6490: sbfx            x4, x1, #1, #0x1f
    // 0x3b6494: stur            x4, [fp, #-8]
    // 0x3b6498: stp             x2, NULL, [SP, #8]
    // 0x3b649c: str             x3, [SP]
    // 0x3b64a0: r0 = StringCharacterRange.at()
    //     0x3b64a0: bl              #0x3b690c  ; [package:characters/src/characters_impl.dart] StringCharacterRange::StringCharacterRange.at
    // 0x3b64a4: mov             x2, x0
    // 0x3b64a8: ldur            x0, [fp, #-0x10]
    // 0x3b64ac: ldur            x1, [fp, #-8]
    // 0x3b64b0: stur            x2, [fp, #-0x18]
    // 0x3b64b4: cmp             x0, x1
    // 0x3b64b8: b.ne            #0x3b64d0
    // 0x3b64bc: r16 = 4
    //     0x3b64bc: movz            x16, #0x4
    // 0x3b64c0: stp             x16, x2, [SP]
    // 0x3b64c4: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x3b64c4: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x3b64c8: r0 = moveBack()
    //     0x3b64c8: bl              #0x3b6764  ; [package:characters/src/characters_impl.dart] StringCharacterRange::moveBack
    // 0x3b64cc: b               #0x3b64ec
    // 0x3b64d0: ldur            x16, [fp, #-0x18]
    // 0x3b64d4: str             x16, [SP]
    // 0x3b64d8: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x3b64d8: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x3b64dc: r0 = moveBack()
    //     0x3b64dc: bl              #0x3b6764  ; [package:characters/src/characters_impl.dart] StringCharacterRange::moveBack
    // 0x3b64e0: ldur            x16, [fp, #-0x18]
    // 0x3b64e4: str             x16, [SP]
    // 0x3b64e8: r0 = expandNext()
    //     0x3b64e8: bl              #0x3b6720  ; [package:characters/src/characters_impl.dart] StringCharacterRange::expandNext
    // 0x3b64ec: ldur            x0, [fp, #-0x18]
    // 0x3b64f0: str             x0, [SP]
    // 0x3b64f4: r0 = stringBefore()
    //     0x3b64f4: bl              #0x3b66c0  ; [package:characters/src/characters_impl.dart] StringCharacterRange::stringBefore
    // 0x3b64f8: stur            x0, [fp, #-0x20]
    // 0x3b64fc: ldur            x16, [fp, #-0x18]
    // 0x3b6500: str             x16, [SP]
    // 0x3b6504: r0 = currentCharacters()
    //     0x3b6504: bl              #0x3b6674  ; [package:characters/src/characters_impl.dart] StringCharacterRange::currentCharacters
    // 0x3b6508: str             x0, [SP]
    // 0x3b650c: r0 = last()
    //     0x3b650c: bl              #0x30fd38  ; [package:characters/src/characters_impl.dart] StringCharacters::last
    // 0x3b6510: ldur            x16, [fp, #-0x20]
    // 0x3b6514: stp             x0, x16, [SP]
    // 0x3b6518: r0 = +()
    //     0x3b6518: bl              #0x18bf94  ; [dart:core] _StringBase::+
    // 0x3b651c: stur            x0, [fp, #-0x20]
    // 0x3b6520: ldur            x16, [fp, #-0x18]
    // 0x3b6524: str             x16, [SP]
    // 0x3b6528: r0 = current()
    //     0x3b6528: bl              #0x3a75dc  ; [package:characters/src/characters_impl.dart] StringCharacterRange::current
    // 0x3b652c: r1 = <String>
    //     0x3b652c: ldr             x1, [PP, #0x798]  ; [pp+0x798] TypeArguments: <String>
    // 0x3b6530: stur            x0, [fp, #-0x28]
    // 0x3b6534: r0 = StringCharacters()
    //     0x3b6534: bl              #0x2322a8  ; AllocateStringCharactersStub -> StringCharacters (size=0x10)
    // 0x3b6538: mov             x1, x0
    // 0x3b653c: ldur            x0, [fp, #-0x28]
    // 0x3b6540: StoreField: r1->field_b = r0
    //     0x3b6540: stur            w0, [x1, #0xb]
    // 0x3b6544: str             x1, [SP]
    // 0x3b6548: r0 = first()
    //     0x3b6548: bl              #0x313fd4  ; [package:characters/src/characters_impl.dart] StringCharacters::first
    // 0x3b654c: ldur            x16, [fp, #-0x20]
    // 0x3b6550: stp             x0, x16, [SP]
    // 0x3b6554: r0 = +()
    //     0x3b6554: bl              #0x18bf94  ; [dart:core] _StringBase::+
    // 0x3b6558: stur            x0, [fp, #-0x20]
    // 0x3b655c: ldur            x16, [fp, #-0x18]
    // 0x3b6560: str             x16, [SP]
    // 0x3b6564: r0 = stringAfter()
    //     0x3b6564: bl              #0x3b662c  ; [package:characters/src/characters_impl.dart] StringCharacterRange::stringAfter
    // 0x3b6568: ldur            x16, [fp, #-0x20]
    // 0x3b656c: stp             x0, x16, [SP]
    // 0x3b6570: r0 = +()
    //     0x3b6570: bl              #0x18bf94  ; [dart:core] _StringBase::+
    // 0x3b6574: mov             x1, x0
    // 0x3b6578: ldur            x0, [fp, #-0x18]
    // 0x3b657c: stur            x1, [fp, #-0x20]
    // 0x3b6580: LoadField: r2 = r0->field_b
    //     0x3b6580: ldur            x2, [x0, #0xb]
    // 0x3b6584: stur            x2, [fp, #-8]
    // 0x3b6588: str             x0, [SP]
    // 0x3b658c: r0 = current()
    //     0x3b658c: bl              #0x3a75dc  ; [package:characters/src/characters_impl.dart] StringCharacterRange::current
    // 0x3b6590: LoadField: r1 = r0->field_7
    //     0x3b6590: ldur            w1, [x0, #7]
    // 0x3b6594: DecompressPointer r1
    //     0x3b6594: add             x1, x1, HEAP, lsl #32
    // 0x3b6598: r0 = LoadInt32Instr(r1)
    //     0x3b6598: sbfx            x0, x1, #1, #0x1f
    // 0x3b659c: ldur            x1, [fp, #-8]
    // 0x3b65a0: add             x2, x1, x0
    // 0x3b65a4: stur            x2, [fp, #-0x10]
    // 0x3b65a8: r0 = TextSelection()
    //     0x3b65a8: bl              #0x204a74  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x3b65ac: mov             x1, x0
    // 0x3b65b0: r0 = Instance_TextAffinity
    //     0x3b65b0: ldr             x0, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x3b65b4: stur            x1, [fp, #-0x18]
    // 0x3b65b8: StoreField: r1->field_27 = r0
    //     0x3b65b8: stur            w0, [x1, #0x27]
    // 0x3b65bc: ldur            x0, [fp, #-0x10]
    // 0x3b65c0: StoreField: r1->field_17 = r0
    //     0x3b65c0: stur            x0, [x1, #0x17]
    // 0x3b65c4: StoreField: r1->field_1f = r0
    //     0x3b65c4: stur            x0, [x1, #0x1f]
    // 0x3b65c8: r2 = false
    //     0x3b65c8: add             x2, NULL, #0x30  ; false
    // 0x3b65cc: StoreField: r1->field_2b = r2
    //     0x3b65cc: stur            w2, [x1, #0x2b]
    // 0x3b65d0: StoreField: r1->field_7 = r0
    //     0x3b65d0: stur            x0, [x1, #7]
    // 0x3b65d4: StoreField: r1->field_f = r0
    //     0x3b65d4: stur            x0, [x1, #0xf]
    // 0x3b65d8: r0 = TextEditingValue()
    //     0x3b65d8: bl              #0x23ea64  ; AllocateTextEditingValueStub -> TextEditingValue (size=0x14)
    // 0x3b65dc: mov             x1, x0
    // 0x3b65e0: ldur            x0, [fp, #-0x20]
    // 0x3b65e4: StoreField: r1->field_7 = r0
    //     0x3b65e4: stur            w0, [x1, #7]
    // 0x3b65e8: ldur            x0, [fp, #-0x18]
    // 0x3b65ec: StoreField: r1->field_b = r0
    //     0x3b65ec: stur            w0, [x1, #0xb]
    // 0x3b65f0: r0 = Instance_TextRange
    //     0x3b65f0: ldr             x0, [PP, #0x5ec0]  ; [pp+0x5ec0] Obj!TextRange@47c001
    // 0x3b65f4: StoreField: r1->field_f = r0
    //     0x3b65f4: stur            w0, [x1, #0xf]
    // 0x3b65f8: ldr             x16, [fp, #0x18]
    // 0x3b65fc: stp             x1, x16, [SP, #8]
    // 0x3b6600: r16 = Instance_SelectionChangedCause
    //     0x3b6600: ldr             x16, [PP, #0x57d0]  ; [pp+0x57d0] Obj!SelectionChangedCause@480781
    // 0x3b6604: str             x16, [SP]
    // 0x3b6608: r0 = userUpdateTextEditingValue()
    //     0x3b6608: bl              #0x22c13c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x3b660c: r0 = Null
    //     0x3b660c: mov             x0, NULL
    // 0x3b6610: LeaveFrame
    //     0x3b6610: mov             SP, fp
    //     0x3b6614: ldp             fp, lr, [SP], #0x10
    // 0x3b6618: ret
    //     0x3b6618: ret             
    // 0x3b661c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b661c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b6620: b               #0x3b63d8
    // 0x3b6624: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b6624: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x3b6628: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b6628: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _schedulePeriodicPostFrameCallbacks(dynamic) {
    // ** addr: 0x3b73fc, size: 0x18
    // 0x3b73fc: r4 = 7
    //     0x3b73fc: movz            x4, #0x7
    // 0x3b7400: r1 = Function '_schedulePeriodicPostFrameCallbacks@148183791':.
    //     0x3b7400: add             x17, PP, #0x11, lsl #12  ; [pp+0x111b0] AnonymousClosure: (0x24411c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_schedulePeriodicPostFrameCallbacks (0x243f74)
    //     0x3b7404: ldr             x1, [x17, #0x1b0]
    // 0x3b7408: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b7408: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b740c: LoadField: r0 = r24->field_17
    //     0x3b740c: ldur            x0, [x24, #0x17]
    // 0x3b7410: br              x0
  }
  dynamic _documentBoundary(dynamic) {
    // ** addr: 0x3b7828, size: 0x18
    // 0x3b7828: r4 = 7
    //     0x3b7828: movz            x4, #0x7
    // 0x3b782c: r1 = Function '_documentBoundary@148183791':.
    //     0x3b782c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12738] AnonymousClosure: (0x3b7840), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_documentBoundary (0x3b7888)
    //     0x3b7830: ldr             x1, [x17, #0x738]
    // 0x3b7834: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b7834: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b7838: LoadField: r0 = r24->field_17
    //     0x3b7838: ldur            x0, [x24, #0x17]
    // 0x3b783c: br              x0
  }
  [closure] TextBoundary _documentBoundary(dynamic) {
    // ** addr: 0x3b7840, size: 0x48
    // 0x3b7840: EnterFrame
    //     0x3b7840: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7844: mov             fp, SP
    // 0x3b7848: AllocStack(0x8)
    //     0x3b7848: sub             SP, SP, #8
    // 0x3b784c: SetupParameters()
    //     0x3b784c: ldr             x0, [fp, #0x10]
    //     0x3b7850: ldur            w1, [x0, #0x17]
    //     0x3b7854: add             x1, x1, HEAP, lsl #32
    // 0x3b7858: CheckStackOverflow
    //     0x3b7858: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b785c: cmp             SP, x16
    //     0x3b7860: b.ls            #0x3b7880
    // 0x3b7864: LoadField: r0 = r1->field_f
    //     0x3b7864: ldur            w0, [x1, #0xf]
    // 0x3b7868: DecompressPointer r0
    //     0x3b7868: add             x0, x0, HEAP, lsl #32
    // 0x3b786c: str             x0, [SP]
    // 0x3b7870: r0 = _documentBoundary()
    //     0x3b7870: bl              #0x3b7888  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_documentBoundary
    // 0x3b7874: LeaveFrame
    //     0x3b7874: mov             SP, fp
    //     0x3b7878: ldp             fp, lr, [SP], #0x10
    // 0x3b787c: ret
    //     0x3b787c: ret             
    // 0x3b7880: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7880: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7884: b               #0x3b7864
  }
  _ _documentBoundary(/* No info */) {
    // ** addr: 0x3b7888, size: 0x58
    // 0x3b7888: EnterFrame
    //     0x3b7888: stp             fp, lr, [SP, #-0x10]!
    //     0x3b788c: mov             fp, SP
    // 0x3b7890: AllocStack(0x8)
    //     0x3b7890: sub             SP, SP, #8
    // 0x3b7894: ldr             x0, [fp, #0x10]
    // 0x3b7898: LoadField: r1 = r0->field_b
    //     0x3b7898: ldur            w1, [x0, #0xb]
    // 0x3b789c: DecompressPointer r1
    //     0x3b789c: add             x1, x1, HEAP, lsl #32
    // 0x3b78a0: cmp             w1, NULL
    // 0x3b78a4: b.eq            #0x3b78dc
    // 0x3b78a8: LoadField: r0 = r1->field_b
    //     0x3b78a8: ldur            w0, [x1, #0xb]
    // 0x3b78ac: DecompressPointer r0
    //     0x3b78ac: add             x0, x0, HEAP, lsl #32
    // 0x3b78b0: LoadField: r1 = r0->field_27
    //     0x3b78b0: ldur            w1, [x0, #0x27]
    // 0x3b78b4: DecompressPointer r1
    //     0x3b78b4: add             x1, x1, HEAP, lsl #32
    // 0x3b78b8: LoadField: r0 = r1->field_7
    //     0x3b78b8: ldur            w0, [x1, #7]
    // 0x3b78bc: DecompressPointer r0
    //     0x3b78bc: add             x0, x0, HEAP, lsl #32
    // 0x3b78c0: stur            x0, [fp, #-8]
    // 0x3b78c4: r0 = DocumentBoundary()
    //     0x3b78c4: bl              #0x3b78e0  ; AllocateDocumentBoundaryStub -> DocumentBoundary (size=0xc)
    // 0x3b78c8: ldur            x1, [fp, #-8]
    // 0x3b78cc: StoreField: r0->field_7 = r1
    //     0x3b78cc: stur            w1, [x0, #7]
    // 0x3b78d0: LeaveFrame
    //     0x3b78d0: mov             SP, fp
    //     0x3b78d4: ldp             fp, lr, [SP], #0x10
    // 0x3b78d8: ret
    //     0x3b78d8: ret             
    // 0x3b78dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b78dc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _paragraphBoundary(dynamic) {
    // ** addr: 0x3b78ec, size: 0x18
    // 0x3b78ec: r4 = 7
    //     0x3b78ec: movz            x4, #0x7
    // 0x3b78f0: r1 = Function '_paragraphBoundary@148183791':.
    //     0x3b78f0: add             x17, PP, #0x12, lsl #12  ; [pp+0x12740] AnonymousClosure: (0x3b7904), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_paragraphBoundary (0x3b794c)
    //     0x3b78f4: ldr             x1, [x17, #0x740]
    // 0x3b78f8: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b78f8: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b78fc: LoadField: r0 = r24->field_17
    //     0x3b78fc: ldur            x0, [x24, #0x17]
    // 0x3b7900: br              x0
  }
  [closure] TextBoundary _paragraphBoundary(dynamic) {
    // ** addr: 0x3b7904, size: 0x48
    // 0x3b7904: EnterFrame
    //     0x3b7904: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7908: mov             fp, SP
    // 0x3b790c: AllocStack(0x8)
    //     0x3b790c: sub             SP, SP, #8
    // 0x3b7910: SetupParameters()
    //     0x3b7910: ldr             x0, [fp, #0x10]
    //     0x3b7914: ldur            w1, [x0, #0x17]
    //     0x3b7918: add             x1, x1, HEAP, lsl #32
    // 0x3b791c: CheckStackOverflow
    //     0x3b791c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b7920: cmp             SP, x16
    //     0x3b7924: b.ls            #0x3b7944
    // 0x3b7928: LoadField: r0 = r1->field_f
    //     0x3b7928: ldur            w0, [x1, #0xf]
    // 0x3b792c: DecompressPointer r0
    //     0x3b792c: add             x0, x0, HEAP, lsl #32
    // 0x3b7930: str             x0, [SP]
    // 0x3b7934: r0 = _paragraphBoundary()
    //     0x3b7934: bl              #0x3b794c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_paragraphBoundary
    // 0x3b7938: LeaveFrame
    //     0x3b7938: mov             SP, fp
    //     0x3b793c: ldp             fp, lr, [SP], #0x10
    // 0x3b7940: ret
    //     0x3b7940: ret             
    // 0x3b7944: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7944: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7948: b               #0x3b7928
  }
  _ _paragraphBoundary(/* No info */) {
    // ** addr: 0x3b794c, size: 0x58
    // 0x3b794c: EnterFrame
    //     0x3b794c: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7950: mov             fp, SP
    // 0x3b7954: AllocStack(0x8)
    //     0x3b7954: sub             SP, SP, #8
    // 0x3b7958: ldr             x0, [fp, #0x10]
    // 0x3b795c: LoadField: r1 = r0->field_b
    //     0x3b795c: ldur            w1, [x0, #0xb]
    // 0x3b7960: DecompressPointer r1
    //     0x3b7960: add             x1, x1, HEAP, lsl #32
    // 0x3b7964: cmp             w1, NULL
    // 0x3b7968: b.eq            #0x3b79a0
    // 0x3b796c: LoadField: r0 = r1->field_b
    //     0x3b796c: ldur            w0, [x1, #0xb]
    // 0x3b7970: DecompressPointer r0
    //     0x3b7970: add             x0, x0, HEAP, lsl #32
    // 0x3b7974: LoadField: r1 = r0->field_27
    //     0x3b7974: ldur            w1, [x0, #0x27]
    // 0x3b7978: DecompressPointer r1
    //     0x3b7978: add             x1, x1, HEAP, lsl #32
    // 0x3b797c: LoadField: r0 = r1->field_7
    //     0x3b797c: ldur            w0, [x1, #7]
    // 0x3b7980: DecompressPointer r0
    //     0x3b7980: add             x0, x0, HEAP, lsl #32
    // 0x3b7984: stur            x0, [fp, #-8]
    // 0x3b7988: r0 = ParagraphBoundary()
    //     0x3b7988: bl              #0x297a60  ; AllocateParagraphBoundaryStub -> ParagraphBoundary (size=0xc)
    // 0x3b798c: ldur            x1, [fp, #-8]
    // 0x3b7990: StoreField: r0->field_7 = r1
    //     0x3b7990: stur            w1, [x0, #7]
    // 0x3b7994: LeaveFrame
    //     0x3b7994: mov             SP, fp
    //     0x3b7998: ldp             fp, lr, [SP], #0x10
    // 0x3b799c: ret
    //     0x3b799c: ret             
    // 0x3b79a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b79a0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _characterBoundary(dynamic) {
    // ** addr: 0x3b79a4, size: 0x18
    // 0x3b79a4: r4 = 7
    //     0x3b79a4: movz            x4, #0x7
    // 0x3b79a8: r1 = Function '_characterBoundary@148183791':.
    //     0x3b79a8: add             x17, PP, #0x12, lsl #12  ; [pp+0x12758] AnonymousClosure: (0x382cfc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_characterBoundary (0x382ca4)
    //     0x3b79ac: ldr             x1, [x17, #0x758]
    // 0x3b79b0: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b79b0: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b79b4: LoadField: r0 = r24->field_17
    //     0x3b79b4: ldur            x0, [x24, #0x17]
    // 0x3b79b8: br              x0
  }
  dynamic _nextWordBoundary(dynamic) {
    // ** addr: 0x3b79bc, size: 0x18
    // 0x3b79bc: r4 = 7
    //     0x3b79bc: movz            x4, #0x7
    // 0x3b79c0: r1 = Function '_nextWordBoundary@148183791':.
    //     0x3b79c0: add             x17, PP, #0x12, lsl #12  ; [pp+0x12750] AnonymousClosure: (0x3b79d4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_nextWordBoundary (0x3b7a1c)
    //     0x3b79c4: ldr             x1, [x17, #0x750]
    // 0x3b79c8: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b79c8: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b79cc: LoadField: r0 = r24->field_17
    //     0x3b79cc: ldur            x0, [x24, #0x17]
    // 0x3b79d0: br              x0
  }
  [closure] TextBoundary _nextWordBoundary(dynamic) {
    // ** addr: 0x3b79d4, size: 0x48
    // 0x3b79d4: EnterFrame
    //     0x3b79d4: stp             fp, lr, [SP, #-0x10]!
    //     0x3b79d8: mov             fp, SP
    // 0x3b79dc: AllocStack(0x8)
    //     0x3b79dc: sub             SP, SP, #8
    // 0x3b79e0: SetupParameters()
    //     0x3b79e0: ldr             x0, [fp, #0x10]
    //     0x3b79e4: ldur            w1, [x0, #0x17]
    //     0x3b79e8: add             x1, x1, HEAP, lsl #32
    // 0x3b79ec: CheckStackOverflow
    //     0x3b79ec: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b79f0: cmp             SP, x16
    //     0x3b79f4: b.ls            #0x3b7a14
    // 0x3b79f8: LoadField: r0 = r1->field_f
    //     0x3b79f8: ldur            w0, [x1, #0xf]
    // 0x3b79fc: DecompressPointer r0
    //     0x3b79fc: add             x0, x0, HEAP, lsl #32
    // 0x3b7a00: str             x0, [SP]
    // 0x3b7a04: r0 = _nextWordBoundary()
    //     0x3b7a04: bl              #0x3b7a1c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_nextWordBoundary
    // 0x3b7a08: LeaveFrame
    //     0x3b7a08: mov             SP, fp
    //     0x3b7a0c: ldp             fp, lr, [SP], #0x10
    // 0x3b7a10: ret
    //     0x3b7a10: ret             
    // 0x3b7a14: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7a14: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7a18: b               #0x3b79f8
  }
  _ _nextWordBoundary(/* No info */) {
    // ** addr: 0x3b7a1c, size: 0x4c
    // 0x3b7a1c: EnterFrame
    //     0x3b7a1c: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7a20: mov             fp, SP
    // 0x3b7a24: AllocStack(0x8)
    //     0x3b7a24: sub             SP, SP, #8
    // 0x3b7a28: CheckStackOverflow
    //     0x3b7a28: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b7a2c: cmp             SP, x16
    //     0x3b7a30: b.ls            #0x3b7a5c
    // 0x3b7a34: ldr             x0, [fp, #0x10]
    // 0x3b7a38: LoadField: r1 = r0->field_b
    //     0x3b7a38: ldur            w1, [x0, #0xb]
    // 0x3b7a3c: DecompressPointer r1
    //     0x3b7a3c: add             x1, x1, HEAP, lsl #32
    // 0x3b7a40: cmp             w1, NULL
    // 0x3b7a44: b.eq            #0x3b7a64
    // 0x3b7a48: str             x0, [SP]
    // 0x3b7a4c: r0 = _documentBoundary()
    //     0x3b7a4c: bl              #0x3b7888  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_documentBoundary
    // 0x3b7a50: LeaveFrame
    //     0x3b7a50: mov             SP, fp
    //     0x3b7a54: ldp             fp, lr, [SP], #0x10
    // 0x3b7a58: ret
    //     0x3b7a58: ret             
    // 0x3b7a5c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7a5c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7a60: b               #0x3b7a34
    // 0x3b7a64: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b7a64: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _linebreak(dynamic) {
    // ** addr: 0x3b7a68, size: 0x18
    // 0x3b7a68: r4 = 7
    //     0x3b7a68: movz            x4, #0x7
    // 0x3b7a6c: r1 = Function '_linebreak@148183791':.
    //     0x3b7a6c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12748] AnonymousClosure: (0x3b7a80), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_nextWordBoundary (0x3b7a1c)
    //     0x3b7a70: ldr             x1, [x17, #0x748]
    // 0x3b7a74: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b7a74: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b7a78: LoadField: r0 = r24->field_17
    //     0x3b7a78: ldur            x0, [x24, #0x17]
    // 0x3b7a7c: br              x0
  }
  [closure] TextBoundary _linebreak(dynamic) {
    // ** addr: 0x3b7a80, size: 0x48
    // 0x3b7a80: EnterFrame
    //     0x3b7a80: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7a84: mov             fp, SP
    // 0x3b7a88: AllocStack(0x8)
    //     0x3b7a88: sub             SP, SP, #8
    // 0x3b7a8c: SetupParameters()
    //     0x3b7a8c: ldr             x0, [fp, #0x10]
    //     0x3b7a90: ldur            w1, [x0, #0x17]
    //     0x3b7a94: add             x1, x1, HEAP, lsl #32
    // 0x3b7a98: CheckStackOverflow
    //     0x3b7a98: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b7a9c: cmp             SP, x16
    //     0x3b7aa0: b.ls            #0x3b7ac0
    // 0x3b7aa4: LoadField: r0 = r1->field_f
    //     0x3b7aa4: ldur            w0, [x1, #0xf]
    // 0x3b7aa8: DecompressPointer r0
    //     0x3b7aa8: add             x0, x0, HEAP, lsl #32
    // 0x3b7aac: str             x0, [SP]
    // 0x3b7ab0: r0 = _nextWordBoundary()
    //     0x3b7ab0: bl              #0x3b7a1c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_nextWordBoundary
    // 0x3b7ab4: LeaveFrame
    //     0x3b7ab4: mov             SP, fp
    //     0x3b7ab8: ldp             fp, lr, [SP], #0x10
    // 0x3b7abc: ret
    //     0x3b7abc: ret             
    // 0x3b7ac0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7ac0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7ac4: b               #0x3b7aa4
  }
  dynamic _moveToTextBoundary(dynamic) {
    // ** addr: 0x3b7ac8, size: 0x18
    // 0x3b7ac8: r4 = 7
    //     0x3b7ac8: movz            x4, #0x7
    // 0x3b7acc: r1 = Function '_moveToTextBoundary@148183791':.
    //     0x3b7acc: add             x17, PP, #0x12, lsl #12  ; [pp+0x12760] AnonymousClosure: (0x3b7ae0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveToTextBoundary (0x3b7b38)
    //     0x3b7ad0: ldr             x1, [x17, #0x760]
    // 0x3b7ad4: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b7ad4: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b7ad8: LoadField: r0 = r24->field_17
    //     0x3b7ad8: ldur            x0, [x24, #0x17]
    // 0x3b7adc: br              x0
  }
  [closure] TextPosition _moveToTextBoundary(dynamic, TextPosition, bool, TextBoundary) {
    // ** addr: 0x3b7ae0, size: 0x58
    // 0x3b7ae0: EnterFrame
    //     0x3b7ae0: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7ae4: mov             fp, SP
    // 0x3b7ae8: AllocStack(0x20)
    //     0x3b7ae8: sub             SP, SP, #0x20
    // 0x3b7aec: SetupParameters()
    //     0x3b7aec: ldr             x0, [fp, #0x28]
    //     0x3b7af0: ldur            w1, [x0, #0x17]
    //     0x3b7af4: add             x1, x1, HEAP, lsl #32
    // 0x3b7af8: CheckStackOverflow
    //     0x3b7af8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b7afc: cmp             SP, x16
    //     0x3b7b00: b.ls            #0x3b7b30
    // 0x3b7b04: LoadField: r0 = r1->field_f
    //     0x3b7b04: ldur            w0, [x1, #0xf]
    // 0x3b7b08: DecompressPointer r0
    //     0x3b7b08: add             x0, x0, HEAP, lsl #32
    // 0x3b7b0c: ldr             x16, [fp, #0x20]
    // 0x3b7b10: stp             x16, x0, [SP, #0x10]
    // 0x3b7b14: ldr             x16, [fp, #0x18]
    // 0x3b7b18: ldr             lr, [fp, #0x10]
    // 0x3b7b1c: stp             lr, x16, [SP]
    // 0x3b7b20: r0 = _moveToTextBoundary()
    //     0x3b7b20: bl              #0x3b7b38  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveToTextBoundary
    // 0x3b7b24: LeaveFrame
    //     0x3b7b24: mov             SP, fp
    //     0x3b7b28: ldp             fp, lr, [SP], #0x10
    // 0x3b7b2c: ret
    //     0x3b7b2c: ret             
    // 0x3b7b30: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7b30: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7b34: b               #0x3b7b04
  }
  _ _moveToTextBoundary(/* No info */) {
    // ** addr: 0x3b7b38, size: 0x20c
    // 0x3b7b38: EnterFrame
    //     0x3b7b38: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7b3c: mov             fp, SP
    // 0x3b7b40: AllocStack(0x18)
    //     0x3b7b40: sub             SP, SP, #0x18
    // 0x3b7b44: CheckStackOverflow
    //     0x3b7b44: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b7b48: cmp             SP, x16
    //     0x3b7b4c: b.ls            #0x3b7d38
    // 0x3b7b50: ldr             x0, [fp, #0x20]
    // 0x3b7b54: LoadField: r1 = r0->field_f
    //     0x3b7b54: ldur            w1, [x0, #0xf]
    // 0x3b7b58: DecompressPointer r1
    //     0x3b7b58: add             x1, x1, HEAP, lsl #32
    // 0x3b7b5c: LoadField: r2 = r1->field_7
    //     0x3b7b5c: ldur            x2, [x1, #7]
    // 0x3b7b60: cmp             x2, #0
    // 0x3b7b64: b.gt            #0x3b7c0c
    // 0x3b7b68: LoadField: r1 = r0->field_7
    //     0x3b7b68: ldur            x1, [x0, #7]
    // 0x3b7b6c: cmp             x1, #1
    // 0x3b7b70: b.ge            #0x3b7b90
    // 0x3b7b74: ldr             x2, [fp, #0x18]
    // 0x3b7b78: tbz             w2, #4, #0x3b7b94
    // 0x3b7b7c: r0 = Instance_TextPosition
    //     0x3b7b7c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12670] Obj!TextPosition@47c051
    //     0x3b7b80: ldr             x0, [x0, #0x670]
    // 0x3b7b84: LeaveFrame
    //     0x3b7b84: mov             SP, fp
    //     0x3b7b88: ldp             fp, lr, [SP], #0x10
    // 0x3b7b8c: ret
    //     0x3b7b8c: ret             
    // 0x3b7b90: ldr             x2, [fp, #0x18]
    // 0x3b7b94: sub             x3, x1, #1
    // 0x3b7b98: tbz             x3, #0x3f, #0x3b7ba4
    // 0x3b7b9c: r0 = 0
    //     0x3b7b9c: movz            x0, #0
    // 0x3b7ba0: b               #0x3b7c28
    // 0x3b7ba4: cmp             x3, #0
    // 0x3b7ba8: b.le            #0x3b7bc4
    // 0x3b7bac: r0 = BoxInt64Instr(r3)
    //     0x3b7bac: sbfiz           x0, x3, #1, #0x1f
    //     0x3b7bb0: cmp             x3, x0, asr #1
    //     0x3b7bb4: b.eq            #0x3b7bc0
    //     0x3b7bb8: bl              #0x3e5e54
    //     0x3b7bbc: stur            x3, [x0, #7]
    // 0x3b7bc0: b               #0x3b7c28
    // 0x3b7bc4: r0 = BoxInt64Instr(r3)
    //     0x3b7bc4: sbfiz           x0, x3, #1, #0x1f
    //     0x3b7bc8: cmp             x3, x0, asr #1
    //     0x3b7bcc: b.eq            #0x3b7bd8
    //     0x3b7bd0: bl              #0x3e5e54
    //     0x3b7bd4: stur            x3, [x0, #7]
    // 0x3b7bd8: r1 = 59
    //     0x3b7bd8: movz            x1, #0x3b
    // 0x3b7bdc: branchIfSmi(r0, 0x3b7be8)
    //     0x3b7bdc: tbz             w0, #0, #0x3b7be8
    // 0x3b7be0: r1 = LoadClassIdInstr(r0)
    //     0x3b7be0: ldur            x1, [x0, #-1]
    //     0x3b7be4: ubfx            x1, x1, #0xc, #0x14
    // 0x3b7be8: cmp             x1, #0x3d
    // 0x3b7bec: b.ne            #0x3b7c04
    // 0x3b7bf0: LoadField: d0 = r0->field_7
    //     0x3b7bf0: ldur            d0, [x0, #7]
    // 0x3b7bf4: fcmp            d0, d0
    // 0x3b7bf8: b.vs            #0x3b7c28
    // 0x3b7bfc: r0 = 0
    //     0x3b7bfc: movz            x0, #0
    // 0x3b7c00: b               #0x3b7c28
    // 0x3b7c04: r0 = 0
    //     0x3b7c04: movz            x0, #0
    // 0x3b7c08: b               #0x3b7c28
    // 0x3b7c0c: ldr             x2, [fp, #0x18]
    // 0x3b7c10: LoadField: r3 = r0->field_7
    //     0x3b7c10: ldur            x3, [x0, #7]
    // 0x3b7c14: r0 = BoxInt64Instr(r3)
    //     0x3b7c14: sbfiz           x0, x3, #1, #0x1f
    //     0x3b7c18: cmp             x3, x0, asr #1
    //     0x3b7c1c: b.eq            #0x3b7c28
    //     0x3b7c20: bl              #0x3e5e54
    //     0x3b7c24: stur            x3, [x0, #7]
    // 0x3b7c28: tbnz            w2, #4, #0x3b7ccc
    // 0x3b7c2c: ldr             x1, [fp, #0x10]
    // 0x3b7c30: r2 = LoadInt32Instr(r0)
    //     0x3b7c30: sbfx            x2, x0, #1, #0x1f
    //     0x3b7c34: tbz             w0, #0, #0x3b7c3c
    //     0x3b7c38: ldur            x2, [x0, #7]
    // 0x3b7c3c: r0 = LoadClassIdInstr(r1)
    //     0x3b7c3c: ldur            x0, [x1, #-1]
    //     0x3b7c40: ubfx            x0, x0, #0xc, #0x14
    // 0x3b7c44: stp             x2, x1, [SP]
    // 0x3b7c48: r0 = GDT[cid_x0 + -0xff2]()
    //     0x3b7c48: sub             lr, x0, #0xff2
    //     0x3b7c4c: ldr             lr, [x21, lr, lsl #3]
    //     0x3b7c50: blr             lr
    // 0x3b7c54: cmp             w0, NULL
    // 0x3b7c58: b.ne            #0x3b7c98
    // 0x3b7c5c: ldr             x0, [fp, #0x28]
    // 0x3b7c60: LoadField: r1 = r0->field_b
    //     0x3b7c60: ldur            w1, [x0, #0xb]
    // 0x3b7c64: DecompressPointer r1
    //     0x3b7c64: add             x1, x1, HEAP, lsl #32
    // 0x3b7c68: cmp             w1, NULL
    // 0x3b7c6c: b.eq            #0x3b7d40
    // 0x3b7c70: LoadField: r0 = r1->field_b
    //     0x3b7c70: ldur            w0, [x1, #0xb]
    // 0x3b7c74: DecompressPointer r0
    //     0x3b7c74: add             x0, x0, HEAP, lsl #32
    // 0x3b7c78: LoadField: r1 = r0->field_27
    //     0x3b7c78: ldur            w1, [x0, #0x27]
    // 0x3b7c7c: DecompressPointer r1
    //     0x3b7c7c: add             x1, x1, HEAP, lsl #32
    // 0x3b7c80: LoadField: r0 = r1->field_7
    //     0x3b7c80: ldur            w0, [x1, #7]
    // 0x3b7c84: DecompressPointer r0
    //     0x3b7c84: add             x0, x0, HEAP, lsl #32
    // 0x3b7c88: LoadField: r1 = r0->field_7
    //     0x3b7c88: ldur            w1, [x0, #7]
    // 0x3b7c8c: DecompressPointer r1
    //     0x3b7c8c: add             x1, x1, HEAP, lsl #32
    // 0x3b7c90: r0 = LoadInt32Instr(r1)
    //     0x3b7c90: sbfx            x0, x1, #1, #0x1f
    // 0x3b7c94: b               #0x3b7ca8
    // 0x3b7c98: r1 = LoadInt32Instr(r0)
    //     0x3b7c98: sbfx            x1, x0, #1, #0x1f
    //     0x3b7c9c: tbz             w0, #0, #0x3b7ca4
    //     0x3b7ca0: ldur            x1, [x0, #7]
    // 0x3b7ca4: mov             x0, x1
    // 0x3b7ca8: stur            x0, [fp, #-8]
    // 0x3b7cac: r0 = TextPosition()
    //     0x3b7cac: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x3b7cb0: mov             x1, x0
    // 0x3b7cb4: ldur            x0, [fp, #-8]
    // 0x3b7cb8: StoreField: r1->field_7 = r0
    //     0x3b7cb8: stur            x0, [x1, #7]
    // 0x3b7cbc: r0 = Instance_TextAffinity
    //     0x3b7cbc: ldr             x0, [PP, #0x5328]  ; [pp+0x5328] Obj!TextAffinity@482141
    // 0x3b7cc0: StoreField: r1->field_f = r0
    //     0x3b7cc0: stur            w0, [x1, #0xf]
    // 0x3b7cc4: mov             x0, x1
    // 0x3b7cc8: b               #0x3b7d2c
    // 0x3b7ccc: ldr             x1, [fp, #0x10]
    // 0x3b7cd0: r2 = LoadInt32Instr(r0)
    //     0x3b7cd0: sbfx            x2, x0, #1, #0x1f
    //     0x3b7cd4: tbz             w0, #0, #0x3b7cdc
    //     0x3b7cd8: ldur            x2, [x0, #7]
    // 0x3b7cdc: r0 = LoadClassIdInstr(r1)
    //     0x3b7cdc: ldur            x0, [x1, #-1]
    //     0x3b7ce0: ubfx            x0, x0, #0xc, #0x14
    // 0x3b7ce4: stp             x2, x1, [SP]
    // 0x3b7ce8: r0 = GDT[cid_x0 + -0xff9]()
    //     0x3b7ce8: sub             lr, x0, #0xff9
    //     0x3b7cec: ldr             lr, [x21, lr, lsl #3]
    //     0x3b7cf0: blr             lr
    // 0x3b7cf4: cmp             w0, NULL
    // 0x3b7cf8: b.ne            #0x3b7d04
    // 0x3b7cfc: r0 = 0
    //     0x3b7cfc: movz            x0, #0
    // 0x3b7d00: b               #0x3b7d14
    // 0x3b7d04: r1 = LoadInt32Instr(r0)
    //     0x3b7d04: sbfx            x1, x0, #1, #0x1f
    //     0x3b7d08: tbz             w0, #0, #0x3b7d10
    //     0x3b7d0c: ldur            x1, [x0, #7]
    // 0x3b7d10: mov             x0, x1
    // 0x3b7d14: stur            x0, [fp, #-8]
    // 0x3b7d18: r0 = TextPosition()
    //     0x3b7d18: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x3b7d1c: ldur            x1, [fp, #-8]
    // 0x3b7d20: StoreField: r0->field_7 = r1
    //     0x3b7d20: stur            x1, [x0, #7]
    // 0x3b7d24: r1 = Instance_TextAffinity
    //     0x3b7d24: ldr             x1, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x3b7d28: StoreField: r0->field_f = r1
    //     0x3b7d28: stur            w1, [x0, #0xf]
    // 0x3b7d2c: LeaveFrame
    //     0x3b7d2c: mov             SP, fp
    //     0x3b7d30: ldp             fp, lr, [SP], #0x10
    // 0x3b7d34: ret
    //     0x3b7d34: ret             
    // 0x3b7d38: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7d38: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7d3c: b               #0x3b7b50
    // 0x3b7d40: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b7d40: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _moveBeyondTextBoundary(dynamic) {
    // ** addr: 0x3b7d44, size: 0x18
    // 0x3b7d44: r4 = 7
    //     0x3b7d44: movz            x4, #0x7
    // 0x3b7d48: r1 = Function '_moveBeyondTextBoundary@148183791':.
    //     0x3b7d48: add             x17, PP, #0x12, lsl #12  ; [pp+0x12768] AnonymousClosure: (0x3b7d5c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveBeyondTextBoundary (0x3b7db4)
    //     0x3b7d4c: ldr             x1, [x17, #0x768]
    // 0x3b7d50: r24 = BuildNonGenericMethodExtractorStub
    //     0x3b7d50: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x3b7d54: LoadField: r0 = r24->field_17
    //     0x3b7d54: ldur            x0, [x24, #0x17]
    // 0x3b7d58: br              x0
  }
  [closure] TextPosition _moveBeyondTextBoundary(dynamic, TextPosition, bool, TextBoundary) {
    // ** addr: 0x3b7d5c, size: 0x58
    // 0x3b7d5c: EnterFrame
    //     0x3b7d5c: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7d60: mov             fp, SP
    // 0x3b7d64: AllocStack(0x20)
    //     0x3b7d64: sub             SP, SP, #0x20
    // 0x3b7d68: SetupParameters()
    //     0x3b7d68: ldr             x0, [fp, #0x28]
    //     0x3b7d6c: ldur            w1, [x0, #0x17]
    //     0x3b7d70: add             x1, x1, HEAP, lsl #32
    // 0x3b7d74: CheckStackOverflow
    //     0x3b7d74: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b7d78: cmp             SP, x16
    //     0x3b7d7c: b.ls            #0x3b7dac
    // 0x3b7d80: LoadField: r0 = r1->field_f
    //     0x3b7d80: ldur            w0, [x1, #0xf]
    // 0x3b7d84: DecompressPointer r0
    //     0x3b7d84: add             x0, x0, HEAP, lsl #32
    // 0x3b7d88: ldr             x16, [fp, #0x20]
    // 0x3b7d8c: stp             x16, x0, [SP, #0x10]
    // 0x3b7d90: ldr             x16, [fp, #0x18]
    // 0x3b7d94: ldr             lr, [fp, #0x10]
    // 0x3b7d98: stp             lr, x16, [SP]
    // 0x3b7d9c: r0 = _moveBeyondTextBoundary()
    //     0x3b7d9c: bl              #0x3b7db4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveBeyondTextBoundary
    // 0x3b7da0: LeaveFrame
    //     0x3b7da0: mov             SP, fp
    //     0x3b7da4: ldp             fp, lr, [SP], #0x10
    // 0x3b7da8: ret
    //     0x3b7da8: ret             
    // 0x3b7dac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7dac: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7db0: b               #0x3b7d80
  }
  _ _moveBeyondTextBoundary(/* No info */) {
    // ** addr: 0x3b7db4, size: 0x11c
    // 0x3b7db4: EnterFrame
    //     0x3b7db4: stp             fp, lr, [SP, #-0x10]!
    //     0x3b7db8: mov             fp, SP
    // 0x3b7dbc: AllocStack(0x18)
    //     0x3b7dbc: sub             SP, SP, #0x18
    // 0x3b7dc0: CheckStackOverflow
    //     0x3b7dc0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3b7dc4: cmp             SP, x16
    //     0x3b7dc8: b.ls            #0x3b7ec4
    // 0x3b7dcc: ldr             x0, [fp, #0x18]
    // 0x3b7dd0: tbnz            w0, #4, #0x3b7e54
    // 0x3b7dd4: ldr             x1, [fp, #0x20]
    // 0x3b7dd8: ldr             x0, [fp, #0x10]
    // 0x3b7ddc: LoadField: r2 = r1->field_7
    //     0x3b7ddc: ldur            x2, [x1, #7]
    // 0x3b7de0: r1 = LoadClassIdInstr(r0)
    //     0x3b7de0: ldur            x1, [x0, #-1]
    //     0x3b7de4: ubfx            x1, x1, #0xc, #0x14
    // 0x3b7de8: stp             x2, x0, [SP]
    // 0x3b7dec: mov             x0, x1
    // 0x3b7df0: r0 = GDT[cid_x0 + -0xff2]()
    //     0x3b7df0: sub             lr, x0, #0xff2
    //     0x3b7df4: ldr             lr, [x21, lr, lsl #3]
    //     0x3b7df8: blr             lr
    // 0x3b7dfc: cmp             w0, NULL
    // 0x3b7e00: b.ne            #0x3b7e40
    // 0x3b7e04: ldr             x0, [fp, #0x28]
    // 0x3b7e08: LoadField: r1 = r0->field_b
    //     0x3b7e08: ldur            w1, [x0, #0xb]
    // 0x3b7e0c: DecompressPointer r1
    //     0x3b7e0c: add             x1, x1, HEAP, lsl #32
    // 0x3b7e10: cmp             w1, NULL
    // 0x3b7e14: b.eq            #0x3b7ecc
    // 0x3b7e18: LoadField: r0 = r1->field_b
    //     0x3b7e18: ldur            w0, [x1, #0xb]
    // 0x3b7e1c: DecompressPointer r0
    //     0x3b7e1c: add             x0, x0, HEAP, lsl #32
    // 0x3b7e20: LoadField: r1 = r0->field_27
    //     0x3b7e20: ldur            w1, [x0, #0x27]
    // 0x3b7e24: DecompressPointer r1
    //     0x3b7e24: add             x1, x1, HEAP, lsl #32
    // 0x3b7e28: LoadField: r0 = r1->field_7
    //     0x3b7e28: ldur            w0, [x1, #7]
    // 0x3b7e2c: DecompressPointer r0
    //     0x3b7e2c: add             x0, x0, HEAP, lsl #32
    // 0x3b7e30: LoadField: r1 = r0->field_7
    //     0x3b7e30: ldur            w1, [x0, #7]
    // 0x3b7e34: DecompressPointer r1
    //     0x3b7e34: add             x1, x1, HEAP, lsl #32
    // 0x3b7e38: r0 = LoadInt32Instr(r1)
    //     0x3b7e38: sbfx            x0, x1, #1, #0x1f
    // 0x3b7e3c: b               #0x3b7ea0
    // 0x3b7e40: r1 = LoadInt32Instr(r0)
    //     0x3b7e40: sbfx            x1, x0, #1, #0x1f
    //     0x3b7e44: tbz             w0, #0, #0x3b7e4c
    //     0x3b7e48: ldur            x1, [x0, #7]
    // 0x3b7e4c: mov             x0, x1
    // 0x3b7e50: b               #0x3b7ea0
    // 0x3b7e54: ldr             x1, [fp, #0x20]
    // 0x3b7e58: ldr             x0, [fp, #0x10]
    // 0x3b7e5c: LoadField: r2 = r1->field_7
    //     0x3b7e5c: ldur            x2, [x1, #7]
    // 0x3b7e60: sub             x1, x2, #1
    // 0x3b7e64: r2 = LoadClassIdInstr(r0)
    //     0x3b7e64: ldur            x2, [x0, #-1]
    //     0x3b7e68: ubfx            x2, x2, #0xc, #0x14
    // 0x3b7e6c: stp             x1, x0, [SP]
    // 0x3b7e70: mov             x0, x2
    // 0x3b7e74: r0 = GDT[cid_x0 + -0xff9]()
    //     0x3b7e74: sub             lr, x0, #0xff9
    //     0x3b7e78: ldr             lr, [x21, lr, lsl #3]
    //     0x3b7e7c: blr             lr
    // 0x3b7e80: cmp             w0, NULL
    // 0x3b7e84: b.ne            #0x3b7e90
    // 0x3b7e88: r0 = 0
    //     0x3b7e88: movz            x0, #0
    // 0x3b7e8c: b               #0x3b7ea0
    // 0x3b7e90: r1 = LoadInt32Instr(r0)
    //     0x3b7e90: sbfx            x1, x0, #1, #0x1f
    //     0x3b7e94: tbz             w0, #0, #0x3b7e9c
    //     0x3b7e98: ldur            x1, [x0, #7]
    // 0x3b7e9c: mov             x0, x1
    // 0x3b7ea0: stur            x0, [fp, #-8]
    // 0x3b7ea4: r0 = TextPosition()
    //     0x3b7ea4: bl              #0x1df294  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x3b7ea8: ldur            x1, [fp, #-8]
    // 0x3b7eac: StoreField: r0->field_7 = r1
    //     0x3b7eac: stur            x1, [x0, #7]
    // 0x3b7eb0: r1 = Instance_TextAffinity
    //     0x3b7eb0: ldr             x1, [PP, #0x5330]  ; [pp+0x5330] Obj!TextAffinity@482121
    // 0x3b7eb4: StoreField: r0->field_f = r1
    //     0x3b7eb4: stur            w1, [x0, #0xf]
    // 0x3b7eb8: LeaveFrame
    //     0x3b7eb8: mov             SP, fp
    //     0x3b7ebc: ldp             fp, lr, [SP], #0x10
    // 0x3b7ec0: ret
    //     0x3b7ec0: ret             
    // 0x3b7ec4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3b7ec4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3b7ec8: b               #0x3b7dcc
    // 0x3b7ecc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3b7ecc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1540, size: 0xb4, field offset: 0x10
class _Editable extends MultiChildRenderObjectWidget {

  _ _Editable(/* No info */) {
    // ** addr: 0x2a2228, size: 0x300
    // 0x2a2228: EnterFrame
    //     0x2a2228: stp             fp, lr, [SP, #-0x10]!
    //     0x2a222c: mov             fp, SP
    // 0x2a2230: AllocStack(0x10)
    //     0x2a2230: sub             SP, SP, #0x10
    // 0x2a2234: r11 = Instance_CupertinoDynamicColor
    //     0x2a2234: add             x11, PP, #0xd, lsl #12  ; [pp+0xdf90] Obj!CupertinoDynamicColor@47cf41
    //     0x2a2238: ldr             x11, [x11, #0xf90]
    // 0x2a223c: r10 = true
    //     0x2a223c: add             x10, NULL, #0x20  ; true
    // 0x2a2240: r9 = false
    //     0x2a2240: add             x9, NULL, #0x30  ; false
    // 0x2a2244: r8 = Instance_TextWidthBasis
    //     0x2a2244: add             x8, PP, #0xc, lsl #12  ; [pp+0xc050] Obj!TextWidthBasis@4811e1
    //     0x2a2248: ldr             x8, [x8, #0x50]
    // 0x2a224c: r7 = Instance_TextAlign
    //     0x2a224c: ldr             x7, [PP, #0x52b0]  ; [pp+0x52b0] Obj!TextAlign@482301
    // 0x2a2250: r6 = Instance_TextDirection
    //     0x2a2250: ldr             x6, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x2a2254: r5 = "•"
    //     0x2a2254: add             x5, PP, #0xb, lsl #12  ; [pp+0xb838] "•"
    //     0x2a2258: ldr             x5, [x5, #0x838]
    // 0x2a225c: r4 = Instance_BoxHeightStyle
    //     0x2a225c: ldr             x4, [PP, #0x5338]  ; [pp+0x5338] Obj!BoxHeightStyle@482101
    // 0x2a2260: r3 = Instance_BoxWidthStyle
    //     0x2a2260: ldr             x3, [PP, #0x5340]  ; [pp+0x5340] Obj!BoxWidthStyle@4820e1
    // 0x2a2264: r2 = Instance_Clip
    //     0x2a2264: add             x2, PP, #0xb, lsl #12  ; [pp+0xb840] Obj!Clip@482a01
    //     0x2a2268: ldr             x2, [x2, #0x840]
    // 0x2a226c: r1 = 1
    //     0x2a226c: movz            x1, #0x1
    // 0x2a2270: d0 = 2.000000
    //     0x2a2270: fmov            d0, #2.00000000
    // 0x2a2274: d0 = 2.000000
    //     0x2a2274: fmov            d0, #2.00000000
    // 0x2a2278: CheckStackOverflow
    //     0x2a2278: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2a227c: cmp             SP, x16
    //     0x2a2280: b.ls            #0x2a2520
    // 0x2a2284: ldr             x0, [fp, #0x70]
    // 0x2a2288: ldr             x12, [fp, #0xa8]
    // 0x2a228c: StoreField: r12->field_f = r0
    //     0x2a228c: stur            w0, [x12, #0xf]
    //     0x2a2290: ldurb           w16, [x12, #-1]
    //     0x2a2294: ldurb           w17, [x0, #-1]
    //     0x2a2298: and             x16, x17, x16, lsr #2
    //     0x2a229c: tst             x16, HEAP, lsr #32
    //     0x2a22a0: b.eq            #0x2a22a8
    //     0x2a22a4: bl              #0x3e4768
    // 0x2a22a8: ldr             x0, [fp, #0x10]
    // 0x2a22ac: StoreField: r12->field_13 = r0
    //     0x2a22ac: stur            w0, [x12, #0x13]
    //     0x2a22b0: ldurb           w16, [x12, #-1]
    //     0x2a22b4: ldurb           w17, [x0, #-1]
    //     0x2a22b8: and             x16, x17, x16, lsr #2
    //     0x2a22bc: tst             x16, HEAP, lsr #32
    //     0x2a22c0: b.eq            #0x2a22c8
    //     0x2a22c4: bl              #0x3e4768
    // 0x2a22c8: ldr             x0, [fp, #0x30]
    // 0x2a22cc: StoreField: r12->field_1b = r0
    //     0x2a22cc: stur            w0, [x12, #0x1b]
    //     0x2a22d0: ldurb           w16, [x12, #-1]
    //     0x2a22d4: ldurb           w17, [x0, #-1]
    //     0x2a22d8: and             x16, x17, x16, lsr #2
    //     0x2a22dc: tst             x16, HEAP, lsr #32
    //     0x2a22e0: b.eq            #0x2a22e8
    //     0x2a22e4: bl              #0x3e4768
    // 0x2a22e8: ldr             x0, [fp, #0x80]
    // 0x2a22ec: StoreField: r12->field_1f = r0
    //     0x2a22ec: stur            w0, [x12, #0x1f]
    //     0x2a22f0: ldurb           w16, [x12, #-1]
    //     0x2a22f4: ldurb           w17, [x0, #-1]
    //     0x2a22f8: and             x16, x17, x16, lsr #2
    //     0x2a22fc: tst             x16, HEAP, lsr #32
    //     0x2a2300: b.eq            #0x2a2308
    //     0x2a2304: bl              #0x3e4768
    // 0x2a2308: ldr             x0, [fp, #0xa0]
    // 0x2a230c: StoreField: r12->field_17 = r0
    //     0x2a230c: stur            w0, [x12, #0x17]
    //     0x2a2310: ldurb           w16, [x12, #-1]
    //     0x2a2314: ldurb           w17, [x0, #-1]
    //     0x2a2318: and             x16, x17, x16, lsr #2
    //     0x2a231c: tst             x16, HEAP, lsr #32
    //     0x2a2320: b.eq            #0x2a2328
    //     0x2a2324: bl              #0x3e4768
    // 0x2a2328: StoreField: r12->field_23 = r11
    //     0x2a2328: stur            w11, [x12, #0x23]
    // 0x2a232c: ldr             x0, [fp, #0x38]
    // 0x2a2330: StoreField: r12->field_27 = r0
    //     0x2a2330: stur            w0, [x12, #0x27]
    //     0x2a2334: ldurb           w16, [x12, #-1]
    //     0x2a2338: ldurb           w17, [x0, #-1]
    //     0x2a233c: and             x16, x17, x16, lsr #2
    //     0x2a2340: tst             x16, HEAP, lsr #32
    //     0x2a2344: b.eq            #0x2a234c
    //     0x2a2348: bl              #0x3e4768
    // 0x2a234c: StoreField: r12->field_2b = r10
    //     0x2a234c: stur            w10, [x12, #0x2b]
    // 0x2a2350: StoreField: r12->field_2f = r9
    //     0x2a2350: stur            w9, [x12, #0x2f]
    // 0x2a2354: StoreField: r12->field_6b = r8
    //     0x2a2354: stur            w8, [x12, #0x6b]
    // 0x2a2358: ldr             x0, [fp, #0x78]
    // 0x2a235c: StoreField: r12->field_33 = r0
    //     0x2a235c: stur            w0, [x12, #0x33]
    // 0x2a2360: StoreField: r12->field_37 = r1
    //     0x2a2360: stur            x1, [x12, #0x37]
    // 0x2a2364: StoreField: r12->field_43 = r9
    //     0x2a2364: stur            w9, [x12, #0x43]
    // 0x2a2368: ldr             x0, [fp, #0x28]
    // 0x2a236c: StoreField: r12->field_47 = r0
    //     0x2a236c: stur            w0, [x12, #0x47]
    //     0x2a2370: ldurb           w16, [x12, #-1]
    //     0x2a2374: ldurb           w17, [x0, #-1]
    //     0x2a2378: and             x16, x17, x16, lsr #2
    //     0x2a237c: tst             x16, HEAP, lsr #32
    //     0x2a2380: b.eq            #0x2a2388
    //     0x2a2384: bl              #0x3e4768
    // 0x2a2388: ldr             x0, [fp, #0x40]
    // 0x2a238c: StoreField: r12->field_4b = r0
    //     0x2a238c: stur            w0, [x12, #0x4b]
    //     0x2a2390: ldurb           w16, [x12, #-1]
    //     0x2a2394: ldurb           w17, [x0, #-1]
    //     0x2a2398: and             x16, x17, x16, lsr #2
    //     0x2a239c: tst             x16, HEAP, lsr #32
    //     0x2a23a0: b.eq            #0x2a23a8
    //     0x2a23a4: bl              #0x3e4768
    // 0x2a23a8: ldr             x0, [fp, #0x20]
    // 0x2a23ac: StoreField: r12->field_4f = r0
    //     0x2a23ac: stur            w0, [x12, #0x4f]
    //     0x2a23b0: ldurb           w16, [x12, #-1]
    //     0x2a23b4: ldurb           w17, [x0, #-1]
    //     0x2a23b8: and             x16, x17, x16, lsr #2
    //     0x2a23bc: tst             x16, HEAP, lsr #32
    //     0x2a23c0: b.eq            #0x2a23c8
    //     0x2a23c4: bl              #0x3e4768
    // 0x2a23c8: StoreField: r12->field_53 = r7
    //     0x2a23c8: stur            w7, [x12, #0x53]
    // 0x2a23cc: StoreField: r12->field_57 = r6
    //     0x2a23cc: stur            w6, [x12, #0x57]
    // 0x2a23d0: StoreField: r12->field_5f = r5
    //     0x2a23d0: stur            w5, [x12, #0x5f]
    // 0x2a23d4: StoreField: r12->field_63 = r10
    //     0x2a23d4: stur            w10, [x12, #0x63]
    // 0x2a23d8: ldr             x0, [fp, #0x60]
    // 0x2a23dc: StoreField: r12->field_6f = r0
    //     0x2a23dc: stur            w0, [x12, #0x6f]
    //     0x2a23e0: ldurb           w16, [x12, #-1]
    //     0x2a23e4: ldurb           w17, [x0, #-1]
    //     0x2a23e8: and             x16, x17, x16, lsr #2
    //     0x2a23ec: tst             x16, HEAP, lsr #32
    //     0x2a23f0: b.eq            #0x2a23f8
    //     0x2a23f4: bl              #0x3e4768
    // 0x2a23f8: StoreField: r12->field_73 = r10
    //     0x2a23f8: stur            w10, [x12, #0x73]
    // 0x2a23fc: StoreField: r12->field_77 = d0
    //     0x2a23fc: stur            d0, [x12, #0x77]
    // 0x2a2400: ldr             x0, [fp, #0x90]
    // 0x2a2404: StoreField: r12->field_83 = r0
    //     0x2a2404: stur            w0, [x12, #0x83]
    //     0x2a2408: ldurb           w16, [x12, #-1]
    //     0x2a240c: ldurb           w17, [x0, #-1]
    //     0x2a2410: and             x16, x17, x16, lsr #2
    //     0x2a2414: tst             x16, HEAP, lsr #32
    //     0x2a2418: b.eq            #0x2a2420
    //     0x2a241c: bl              #0x3e4768
    // 0x2a2420: ldr             x0, [fp, #0x98]
    // 0x2a2424: StoreField: r12->field_87 = r0
    //     0x2a2424: stur            w0, [x12, #0x87]
    //     0x2a2428: ldurb           w16, [x12, #-1]
    //     0x2a242c: ldurb           w17, [x0, #-1]
    //     0x2a2430: and             x16, x17, x16, lsr #2
    //     0x2a2434: tst             x16, HEAP, lsr #32
    //     0x2a2438: b.eq            #0x2a2440
    //     0x2a243c: bl              #0x3e4768
    // 0x2a2440: ldr             x0, [fp, #0x58]
    // 0x2a2444: StoreField: r12->field_8b = r0
    //     0x2a2444: stur            w0, [x12, #0x8b]
    // 0x2a2448: StoreField: r12->field_8f = r4
    //     0x2a2448: stur            w4, [x12, #0x8f]
    // 0x2a244c: StoreField: r12->field_93 = r3
    //     0x2a244c: stur            w3, [x12, #0x93]
    // 0x2a2450: StoreField: r12->field_97 = r10
    //     0x2a2450: stur            w10, [x12, #0x97]
    // 0x2a2454: ldr             x0, [fp, #0x18]
    // 0x2a2458: StoreField: r12->field_9b = r0
    //     0x2a2458: stur            w0, [x12, #0x9b]
    //     0x2a245c: ldurb           w16, [x12, #-1]
    //     0x2a2460: ldurb           w17, [x0, #-1]
    //     0x2a2464: and             x16, x17, x16, lsr #2
    //     0x2a2468: tst             x16, HEAP, lsr #32
    //     0x2a246c: b.eq            #0x2a2474
    //     0x2a2470: bl              #0x3e4768
    // 0x2a2474: ldr             d0, [fp, #0x88]
    // 0x2a2478: StoreField: r12->field_9f = d0
    //     0x2a2478: stur            d0, [x12, #0x9f]
    // 0x2a247c: ldr             x0, [fp, #0x48]
    // 0x2a2480: StoreField: r12->field_a7 = r0
    //     0x2a2480: stur            w0, [x12, #0xa7]
    //     0x2a2484: ldurb           w16, [x12, #-1]
    //     0x2a2488: ldurb           w17, [x0, #-1]
    //     0x2a248c: and             x16, x17, x16, lsr #2
    //     0x2a2490: tst             x16, HEAP, lsr #32
    //     0x2a2494: b.eq            #0x2a249c
    //     0x2a2498: bl              #0x3e4768
    // 0x2a249c: ldr             x0, [fp, #0x50]
    // 0x2a24a0: StoreField: r12->field_ab = r0
    //     0x2a24a0: stur            w0, [x12, #0xab]
    //     0x2a24a4: ldurb           w16, [x12, #-1]
    //     0x2a24a8: ldurb           w17, [x0, #-1]
    //     0x2a24ac: and             x16, x17, x16, lsr #2
    //     0x2a24b0: tst             x16, HEAP, lsr #32
    //     0x2a24b4: b.eq            #0x2a24bc
    //     0x2a24b8: bl              #0x3e4768
    // 0x2a24bc: StoreField: r12->field_af = r2
    //     0x2a24bc: stur            w2, [x12, #0xaf]
    // 0x2a24c0: ldr             x16, [fp, #0x70]
    // 0x2a24c4: ldr             lr, [fp, #0x20]
    // 0x2a24c8: stp             lr, x16, [SP]
    // 0x2a24cc: r0 = extractFromInlineSpan()
    //     0x2a24cc: bl              #0x2a2528  ; [package:flutter/src/widgets/widget_span.dart] WidgetSpan::extractFromInlineSpan
    // 0x2a24d0: ldr             x1, [fp, #0xa8]
    // 0x2a24d4: StoreField: r1->field_b = r0
    //     0x2a24d4: stur            w0, [x1, #0xb]
    //     0x2a24d8: ldurb           w16, [x1, #-1]
    //     0x2a24dc: ldurb           w17, [x0, #-1]
    //     0x2a24e0: and             x16, x17, x16, lsr #2
    //     0x2a24e4: tst             x16, HEAP, lsr #32
    //     0x2a24e8: b.eq            #0x2a24f0
    //     0x2a24ec: bl              #0x3e4608
    // 0x2a24f0: ldr             x0, [fp, #0x68]
    // 0x2a24f4: StoreField: r1->field_7 = r0
    //     0x2a24f4: stur            w0, [x1, #7]
    //     0x2a24f8: ldurb           w16, [x1, #-1]
    //     0x2a24fc: ldurb           w17, [x0, #-1]
    //     0x2a2500: and             x16, x17, x16, lsr #2
    //     0x2a2504: tst             x16, HEAP, lsr #32
    //     0x2a2508: b.eq            #0x2a2510
    //     0x2a250c: bl              #0x3e4608
    // 0x2a2510: r0 = Null
    //     0x2a2510: mov             x0, NULL
    // 0x2a2514: LeaveFrame
    //     0x2a2514: mov             SP, fp
    //     0x2a2518: ldp             fp, lr, [SP], #0x10
    // 0x2a251c: ret
    //     0x2a251c: ret             
    // 0x2a2520: r0 = StackOverflowSharedWithFPURegs()
    //     0x2a2520: bl              #0x3e5d54  ; StackOverflowSharedWithFPURegsStub
    // 0x2a2524: b               #0x2a2284
  }
  _ updateRenderObject(/* No info */) {
    // ** addr: 0x2f602c, size: 0x374
    // 0x2f602c: EnterFrame
    //     0x2f602c: stp             fp, lr, [SP, #-0x10]!
    //     0x2f6030: mov             fp, SP
    // 0x2f6034: AllocStack(0x18)
    //     0x2f6034: sub             SP, SP, #0x18
    // 0x2f6038: CheckStackOverflow
    //     0x2f6038: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2f603c: cmp             SP, x16
    //     0x2f6040: b.ls            #0x2f6398
    // 0x2f6044: ldr             x0, [fp, #0x10]
    // 0x2f6048: r2 = Null
    //     0x2f6048: mov             x2, NULL
    // 0x2f604c: r1 = Null
    //     0x2f604c: mov             x1, NULL
    // 0x2f6050: r4 = 59
    //     0x2f6050: movz            x4, #0x3b
    // 0x2f6054: branchIfSmi(r0, 0x2f6060)
    //     0x2f6054: tbz             w0, #0, #0x2f6060
    // 0x2f6058: r4 = LoadClassIdInstr(r0)
    //     0x2f6058: ldur            x4, [x0, #-1]
    //     0x2f605c: ubfx            x4, x4, #0xc, #0x14
    // 0x2f6060: cmp             x4, #0x208
    // 0x2f6064: b.eq            #0x2f6078
    // 0x2f6068: r8 = RenderEditable
    //     0x2f6068: ldr             x8, [PP, #0x55d8]  ; [pp+0x55d8] Type: RenderEditable
    // 0x2f606c: r3 = Null
    //     0x2f606c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12778] Null
    //     0x2f6070: ldr             x3, [x3, #0x778]
    // 0x2f6074: r0 = DefaultTypeTest()
    //     0x2f6074: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x2f6078: ldr             x0, [fp, #0x20]
    // 0x2f607c: LoadField: r1 = r0->field_f
    //     0x2f607c: ldur            w1, [x0, #0xf]
    // 0x2f6080: DecompressPointer r1
    //     0x2f6080: add             x1, x1, HEAP, lsl #32
    // 0x2f6084: ldr             x16, [fp, #0x10]
    // 0x2f6088: stp             x1, x16, [SP]
    // 0x2f608c: r0 = text=()
    //     0x2f608c: bl              #0x2f7a50  ; [package:flutter/src/rendering/editable.dart] RenderEditable::text=
    // 0x2f6090: ldr             x0, [fp, #0x20]
    // 0x2f6094: LoadField: r2 = r0->field_17
    //     0x2f6094: ldur            w2, [x0, #0x17]
    // 0x2f6098: DecompressPointer r2
    //     0x2f6098: add             x2, x2, HEAP, lsl #32
    // 0x2f609c: ldr             x1, [fp, #0x10]
    // 0x2f60a0: stur            x2, [fp, #-8]
    // 0x2f60a4: LoadField: r0 = r1->field_83
    //     0x2f60a4: ldur            w0, [x1, #0x83]
    // 0x2f60a8: DecompressPointer r0
    //     0x2f60a8: add             x0, x0, HEAP, lsl #32
    // 0x2f60ac: r16 = Sentinel
    //     0x2f60ac: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2f60b0: cmp             w0, w16
    // 0x2f60b4: b.ne            #0x2f60c0
    // 0x2f60b8: r2 = _caretPainter
    //     0x2f60b8: ldr             x2, [PP, #0x5768]  ; [pp+0x5768] Field <RenderEditable._caretPainter@286245603>: late final (offset: 0x84)
    // 0x2f60bc: r0 = InitLateFinalInstanceField()
    //     0x2f60bc: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x2f60c0: ldur            x16, [fp, #-8]
    // 0x2f60c4: stp             x16, x0, [SP]
    // 0x2f60c8: r0 = caretColor=()
    //     0x2f60c8: bl              #0x235c28  ; [package:flutter/src/rendering/editable.dart] _CaretPainter::caretColor=
    // 0x2f60cc: ldr             x0, [fp, #0x20]
    // 0x2f60d0: LoadField: r1 = r0->field_1b
    //     0x2f60d0: ldur            w1, [x0, #0x1b]
    // 0x2f60d4: DecompressPointer r1
    //     0x2f60d4: add             x1, x1, HEAP, lsl #32
    // 0x2f60d8: ldr             x16, [fp, #0x10]
    // 0x2f60dc: stp             x1, x16, [SP]
    // 0x2f60e0: r0 = startHandleLayerLink=()
    //     0x2f60e0: bl              #0x2f79d0  ; [package:flutter/src/rendering/editable.dart] RenderEditable::startHandleLayerLink=
    // 0x2f60e4: ldr             x0, [fp, #0x20]
    // 0x2f60e8: LoadField: r1 = r0->field_1f
    //     0x2f60e8: ldur            w1, [x0, #0x1f]
    // 0x2f60ec: DecompressPointer r1
    //     0x2f60ec: add             x1, x1, HEAP, lsl #32
    // 0x2f60f0: ldr             x16, [fp, #0x10]
    // 0x2f60f4: stp             x1, x16, [SP]
    // 0x2f60f8: r0 = endHandleLayerLink=()
    //     0x2f60f8: bl              #0x2f7950  ; [package:flutter/src/rendering/editable.dart] RenderEditable::endHandleLayerLink=
    // 0x2f60fc: ldr             x16, [fp, #0x10]
    // 0x2f6100: r30 = Instance_CupertinoDynamicColor
    //     0x2f6100: add             lr, PP, #0xd, lsl #12  ; [pp+0xdf90] Obj!CupertinoDynamicColor@47cf41
    //     0x2f6104: ldr             lr, [lr, #0xf90]
    // 0x2f6108: stp             lr, x16, [SP]
    // 0x2f610c: r0 = backgroundCursorColor=()
    //     0x2f610c: bl              #0x2f77f0  ; [package:flutter/src/rendering/editable.dart] RenderEditable::backgroundCursorColor=
    // 0x2f6110: ldr             x0, [fp, #0x20]
    // 0x2f6114: LoadField: r1 = r0->field_27
    //     0x2f6114: ldur            w1, [x0, #0x27]
    // 0x2f6118: DecompressPointer r1
    //     0x2f6118: add             x1, x1, HEAP, lsl #32
    // 0x2f611c: ldr             x16, [fp, #0x10]
    // 0x2f6120: stp             x1, x16, [SP]
    // 0x2f6124: r0 = showCursor=()
    //     0x2f6124: bl              #0x2f75bc  ; [package:flutter/src/rendering/editable.dart] RenderEditable::showCursor=
    // 0x2f6128: ldr             x16, [fp, #0x10]
    // 0x2f612c: r30 = true
    //     0x2f612c: add             lr, NULL, #0x20  ; true
    // 0x2f6130: stp             lr, x16, [SP]
    // 0x2f6134: r0 = forceLine=()
    //     0x2f6134: bl              #0x2f755c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::forceLine=
    // 0x2f6138: ldr             x16, [fp, #0x10]
    // 0x2f613c: r30 = false
    //     0x2f613c: add             lr, NULL, #0x30  ; false
    // 0x2f6140: stp             lr, x16, [SP]
    // 0x2f6144: r0 = _NativeScene._()
    //     0x2f6144: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f6148: ldr             x0, [fp, #0x20]
    // 0x2f614c: LoadField: r1 = r0->field_33
    //     0x2f614c: ldur            w1, [x0, #0x33]
    // 0x2f6150: DecompressPointer r1
    //     0x2f6150: add             x1, x1, HEAP, lsl #32
    // 0x2f6154: ldr             x16, [fp, #0x10]
    // 0x2f6158: stp             x1, x16, [SP]
    // 0x2f615c: r0 = hasFocus=()
    //     0x2f615c: bl              #0x2f74f8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::hasFocus=
    // 0x2f6160: ldr             x16, [fp, #0x10]
    // 0x2f6164: stp             NULL, x16, [SP]
    // 0x2f6168: r0 = _NativeScene._()
    //     0x2f6168: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f616c: ldr             x16, [fp, #0x10]
    // 0x2f6170: r30 = false
    //     0x2f6170: add             lr, NULL, #0x30  ; false
    // 0x2f6174: stp             lr, x16, [SP]
    // 0x2f6178: r0 = _NativeScene._()
    //     0x2f6178: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f617c: ldr             x0, [fp, #0x20]
    // 0x2f6180: LoadField: r1 = r0->field_47
    //     0x2f6180: ldur            w1, [x0, #0x47]
    // 0x2f6184: DecompressPointer r1
    //     0x2f6184: add             x1, x1, HEAP, lsl #32
    // 0x2f6188: ldr             x16, [fp, #0x10]
    // 0x2f618c: stp             x1, x16, [SP]
    // 0x2f6190: r0 = strutStyle=()
    //     0x2f6190: bl              #0x2f7460  ; [package:flutter/src/rendering/editable.dart] RenderEditable::strutStyle=
    // 0x2f6194: ldr             x0, [fp, #0x20]
    // 0x2f6198: LoadField: r1 = r0->field_4b
    //     0x2f6198: ldur            w1, [x0, #0x4b]
    // 0x2f619c: DecompressPointer r1
    //     0x2f619c: add             x1, x1, HEAP, lsl #32
    // 0x2f61a0: ldr             x16, [fp, #0x10]
    // 0x2f61a4: stp             x1, x16, [SP]
    // 0x2f61a8: r0 = selectionColor=()
    //     0x2f61a8: bl              #0x2f7418  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectionColor=
    // 0x2f61ac: ldr             x0, [fp, #0x20]
    // 0x2f61b0: LoadField: r1 = r0->field_4f
    //     0x2f61b0: ldur            w1, [x0, #0x4f]
    // 0x2f61b4: DecompressPointer r1
    //     0x2f61b4: add             x1, x1, HEAP, lsl #32
    // 0x2f61b8: ldr             x16, [fp, #0x10]
    // 0x2f61bc: stp             x1, x16, [SP]
    // 0x2f61c0: r0 = textScaler=()
    //     0x2f61c0: bl              #0x2f7380  ; [package:flutter/src/rendering/editable.dart] RenderEditable::textScaler=
    // 0x2f61c4: ldr             x16, [fp, #0x10]
    // 0x2f61c8: r30 = Instance_TextAlign
    //     0x2f61c8: ldr             lr, [PP, #0x52b0]  ; [pp+0x52b0] Obj!TextAlign@482301
    // 0x2f61cc: stp             lr, x16, [SP]
    // 0x2f61d0: r0 = textAlign=()
    //     0x2f61d0: bl              #0x2f72f8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::textAlign=
    // 0x2f61d4: ldr             x16, [fp, #0x10]
    // 0x2f61d8: r30 = Instance_TextDirection
    //     0x2f61d8: ldr             lr, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x2f61dc: stp             lr, x16, [SP]
    // 0x2f61e0: r0 = _NativeScene._()
    //     0x2f61e0: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f61e4: ldr             x16, [fp, #0x18]
    // 0x2f61e8: str             x16, [SP]
    // 0x2f61ec: r0 = maybeLocaleOf()
    //     0x2f61ec: bl              #0x25d61c  ; [package:flutter/src/widgets/localizations.dart] Localizations::maybeLocaleOf
    // 0x2f61f0: ldr             x16, [fp, #0x10]
    // 0x2f61f4: stp             x0, x16, [SP]
    // 0x2f61f8: r0 = locale=()
    //     0x2f61f8: bl              #0x2f7260  ; [package:flutter/src/rendering/editable.dart] RenderEditable::locale=
    // 0x2f61fc: ldr             x0, [fp, #0x20]
    // 0x2f6200: LoadField: r1 = r0->field_13
    //     0x2f6200: ldur            w1, [x0, #0x13]
    // 0x2f6204: DecompressPointer r1
    //     0x2f6204: add             x1, x1, HEAP, lsl #32
    // 0x2f6208: LoadField: r2 = r1->field_b
    //     0x2f6208: ldur            w2, [x1, #0xb]
    // 0x2f620c: DecompressPointer r2
    //     0x2f620c: add             x2, x2, HEAP, lsl #32
    // 0x2f6210: ldr             x16, [fp, #0x10]
    // 0x2f6214: stp             x2, x16, [SP]
    // 0x2f6218: r0 = selection=()
    //     0x2f6218: bl              #0x2f71b4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selection=
    // 0x2f621c: ldr             x0, [fp, #0x20]
    // 0x2f6220: LoadField: r1 = r0->field_6f
    //     0x2f6220: ldur            w1, [x0, #0x6f]
    // 0x2f6224: DecompressPointer r1
    //     0x2f6224: add             x1, x1, HEAP, lsl #32
    // 0x2f6228: ldr             x16, [fp, #0x10]
    // 0x2f622c: stp             x1, x16, [SP]
    // 0x2f6230: r0 = offset=()
    //     0x2f6230: bl              #0x2f70a8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::offset=
    // 0x2f6234: ldr             x1, [fp, #0x10]
    // 0x2f6238: r0 = true
    //     0x2f6238: add             x0, NULL, #0x20  ; true
    // 0x2f623c: StoreField: r1->field_97 = r0
    //     0x2f623c: stur            w0, [x1, #0x97]
    // 0x2f6240: stp             NULL, x1, [SP]
    // 0x2f6244: r0 = _NativeScene._()
    //     0x2f6244: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f6248: ldr             x16, [fp, #0x10]
    // 0x2f624c: r30 = Instance_TextWidthBasis
    //     0x2f624c: add             lr, PP, #0xc, lsl #12  ; [pp+0xc050] Obj!TextWidthBasis@4811e1
    //     0x2f6250: ldr             lr, [lr, #0x50]
    // 0x2f6254: stp             lr, x16, [SP]
    // 0x2f6258: r0 = _NativeScene._()
    //     0x2f6258: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f625c: ldr             x16, [fp, #0x10]
    // 0x2f6260: r30 = true
    //     0x2f6260: add             lr, NULL, #0x20  ; true
    // 0x2f6264: stp             lr, x16, [SP]
    // 0x2f6268: r0 = _NativeScene._()
    //     0x2f6268: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f626c: ldr             x16, [fp, #0x10]
    // 0x2f6270: str             x16, [SP, #8]
    // 0x2f6274: d0 = 2.000000
    //     0x2f6274: fmov            d0, #2.00000000
    // 0x2f6278: d0 = 2.000000
    //     0x2f6278: fmov            d0, #2.00000000
    // 0x2f627c: str             d0, [SP]
    // 0x2f6280: r0 = cursorWidth=()
    //     0x2f6280: bl              #0x2f7044  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorWidth=
    // 0x2f6284: ldr             x16, [fp, #0x10]
    // 0x2f6288: stp             NULL, x16, [SP]
    // 0x2f628c: r0 = _NativeScene._()
    //     0x2f628c: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f6290: ldr             x0, [fp, #0x20]
    // 0x2f6294: LoadField: r1 = r0->field_83
    //     0x2f6294: ldur            w1, [x0, #0x83]
    // 0x2f6298: DecompressPointer r1
    //     0x2f6298: add             x1, x1, HEAP, lsl #32
    // 0x2f629c: ldr             x16, [fp, #0x10]
    // 0x2f62a0: stp             x1, x16, [SP]
    // 0x2f62a4: r0 = cursorRadius=()
    //     0x2f62a4: bl              #0x2f6f4c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorRadius=
    // 0x2f62a8: ldr             x0, [fp, #0x20]
    // 0x2f62ac: LoadField: r1 = r0->field_87
    //     0x2f62ac: ldur            w1, [x0, #0x87]
    // 0x2f62b0: DecompressPointer r1
    //     0x2f62b0: add             x1, x1, HEAP, lsl #32
    // 0x2f62b4: ldr             x16, [fp, #0x10]
    // 0x2f62b8: stp             x1, x16, [SP]
    // 0x2f62bc: r0 = cursorOffset=()
    //     0x2f62bc: bl              #0x2f6e68  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorOffset=
    // 0x2f62c0: ldr             x16, [fp, #0x10]
    // 0x2f62c4: r30 = Instance_BoxHeightStyle
    //     0x2f62c4: ldr             lr, [PP, #0x5338]  ; [pp+0x5338] Obj!BoxHeightStyle@482101
    // 0x2f62c8: stp             lr, x16, [SP]
    // 0x2f62cc: r0 = selectionHeightStyle=()
    //     0x2f62cc: bl              #0x2f6e20  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectionHeightStyle=
    // 0x2f62d0: ldr             x16, [fp, #0x10]
    // 0x2f62d4: r30 = Instance_BoxWidthStyle
    //     0x2f62d4: ldr             lr, [PP, #0x5340]  ; [pp+0x5340] Obj!BoxWidthStyle@4820e1
    // 0x2f62d8: stp             lr, x16, [SP]
    // 0x2f62dc: r0 = selectionWidthStyle=()
    //     0x2f62dc: bl              #0x2f6dd8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectionWidthStyle=
    // 0x2f62e0: ldr             x16, [fp, #0x10]
    // 0x2f62e4: r30 = true
    //     0x2f62e4: add             lr, NULL, #0x20  ; true
    // 0x2f62e8: stp             lr, x16, [SP]
    // 0x2f62ec: r0 = _NativeScene._()
    //     0x2f62ec: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f62f0: ldr             x1, [fp, #0x20]
    // 0x2f62f4: LoadField: r0 = r1->field_9b
    //     0x2f62f4: ldur            w0, [x1, #0x9b]
    // 0x2f62f8: DecompressPointer r0
    //     0x2f62f8: add             x0, x0, HEAP, lsl #32
    // 0x2f62fc: ldr             x2, [fp, #0x10]
    // 0x2f6300: StoreField: r2->field_ab = r0
    //     0x2f6300: stur            w0, [x2, #0xab]
    //     0x2f6304: ldurb           w16, [x2, #-1]
    //     0x2f6308: ldurb           w17, [x0, #-1]
    //     0x2f630c: and             x16, x17, x16, lsr #2
    //     0x2f6310: tst             x16, HEAP, lsr #32
    //     0x2f6314: b.eq            #0x2f631c
    //     0x2f6318: bl              #0x3e4628
    // 0x2f631c: LoadField: d0 = r1->field_9f
    //     0x2f631c: ldur            d0, [x1, #0x9f]
    // 0x2f6320: str             x2, [SP, #8]
    // 0x2f6324: str             d0, [SP]
    // 0x2f6328: r0 = devicePixelRatio=()
    //     0x2f6328: bl              #0x2f6d78  ; [package:flutter/src/rendering/editable.dart] RenderEditable::devicePixelRatio=
    // 0x2f632c: ldr             x0, [fp, #0x20]
    // 0x2f6330: LoadField: r1 = r0->field_8b
    //     0x2f6330: ldur            w1, [x0, #0x8b]
    // 0x2f6334: DecompressPointer r1
    //     0x2f6334: add             x1, x1, HEAP, lsl #32
    // 0x2f6338: ldr             x16, [fp, #0x10]
    // 0x2f633c: stp             x1, x16, [SP]
    // 0x2f6340: r0 = paintCursorAboveText=()
    //     0x2f6340: bl              #0x2f6568  ; [package:flutter/src/rendering/editable.dart] RenderEditable::paintCursorAboveText=
    // 0x2f6344: ldr             x0, [fp, #0x20]
    // 0x2f6348: LoadField: r1 = r0->field_ab
    //     0x2f6348: ldur            w1, [x0, #0xab]
    // 0x2f634c: DecompressPointer r1
    //     0x2f634c: add             x1, x1, HEAP, lsl #32
    // 0x2f6350: ldr             x16, [fp, #0x10]
    // 0x2f6354: stp             x1, x16, [SP]
    // 0x2f6358: r0 = promptRectColor=()
    //     0x2f6358: bl              #0x2f6484  ; [package:flutter/src/rendering/editable.dart] RenderEditable::promptRectColor=
    // 0x2f635c: ldr             x16, [fp, #0x10]
    // 0x2f6360: r30 = Instance_Clip
    //     0x2f6360: add             lr, PP, #0xb, lsl #12  ; [pp+0xb840] Obj!Clip@482a01
    //     0x2f6364: ldr             lr, [lr, #0x840]
    // 0x2f6368: stp             lr, x16, [SP]
    // 0x2f636c: r0 = _NativeScene._()
    //     0x2f636c: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f6370: ldr             x0, [fp, #0x20]
    // 0x2f6374: LoadField: r1 = r0->field_a7
    //     0x2f6374: ldur            w1, [x0, #0xa7]
    // 0x2f6378: DecompressPointer r1
    //     0x2f6378: add             x1, x1, HEAP, lsl #32
    // 0x2f637c: ldr             x16, [fp, #0x10]
    // 0x2f6380: stp             x1, x16, [SP]
    // 0x2f6384: r0 = setPromptRectRange()
    //     0x2f6384: bl              #0x2f63a0  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setPromptRectRange
    // 0x2f6388: r0 = Null
    //     0x2f6388: mov             x0, NULL
    // 0x2f638c: LeaveFrame
    //     0x2f638c: mov             SP, fp
    //     0x2f6390: ldp             fp, lr, [SP], #0x10
    // 0x2f6394: ret
    //     0x2f6394: ret             
    // 0x2f6398: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2f6398: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2f639c: b               #0x2f6044
  }
  _ createRenderObject(/* No info */) {
    // ** addr: 0x30f0d8, size: 0x1ac
    // 0x30f0d8: EnterFrame
    //     0x30f0d8: stp             fp, lr, [SP, #-0x10]!
    //     0x30f0dc: mov             fp, SP
    // 0x30f0e0: AllocStack(0x140)
    //     0x30f0e0: sub             SP, SP, #0x140
    // 0x30f0e4: CheckStackOverflow
    //     0x30f0e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x30f0e8: cmp             SP, x16
    //     0x30f0ec: b.ls            #0x30f27c
    // 0x30f0f0: ldr             x0, [fp, #0x18]
    // 0x30f0f4: LoadField: r1 = r0->field_f
    //     0x30f0f4: ldur            w1, [x0, #0xf]
    // 0x30f0f8: DecompressPointer r1
    //     0x30f0f8: add             x1, x1, HEAP, lsl #32
    // 0x30f0fc: stur            x1, [fp, #-0x48]
    // 0x30f100: LoadField: r2 = r0->field_17
    //     0x30f100: ldur            w2, [x0, #0x17]
    // 0x30f104: DecompressPointer r2
    //     0x30f104: add             x2, x2, HEAP, lsl #32
    // 0x30f108: stur            x2, [fp, #-0x40]
    // 0x30f10c: LoadField: r3 = r0->field_1b
    //     0x30f10c: ldur            w3, [x0, #0x1b]
    // 0x30f110: DecompressPointer r3
    //     0x30f110: add             x3, x3, HEAP, lsl #32
    // 0x30f114: stur            x3, [fp, #-0x38]
    // 0x30f118: LoadField: r4 = r0->field_1f
    //     0x30f118: ldur            w4, [x0, #0x1f]
    // 0x30f11c: DecompressPointer r4
    //     0x30f11c: add             x4, x4, HEAP, lsl #32
    // 0x30f120: stur            x4, [fp, #-0x30]
    // 0x30f124: LoadField: r5 = r0->field_27
    //     0x30f124: ldur            w5, [x0, #0x27]
    // 0x30f128: DecompressPointer r5
    //     0x30f128: add             x5, x5, HEAP, lsl #32
    // 0x30f12c: stur            x5, [fp, #-0x28]
    // 0x30f130: LoadField: r6 = r0->field_33
    //     0x30f130: ldur            w6, [x0, #0x33]
    // 0x30f134: DecompressPointer r6
    //     0x30f134: add             x6, x6, HEAP, lsl #32
    // 0x30f138: stur            x6, [fp, #-0x20]
    // 0x30f13c: LoadField: r7 = r0->field_47
    //     0x30f13c: ldur            w7, [x0, #0x47]
    // 0x30f140: DecompressPointer r7
    //     0x30f140: add             x7, x7, HEAP, lsl #32
    // 0x30f144: stur            x7, [fp, #-0x18]
    // 0x30f148: LoadField: r8 = r0->field_4b
    //     0x30f148: ldur            w8, [x0, #0x4b]
    // 0x30f14c: DecompressPointer r8
    //     0x30f14c: add             x8, x8, HEAP, lsl #32
    // 0x30f150: stur            x8, [fp, #-0x10]
    // 0x30f154: LoadField: r9 = r0->field_4f
    //     0x30f154: ldur            w9, [x0, #0x4f]
    // 0x30f158: DecompressPointer r9
    //     0x30f158: add             x9, x9, HEAP, lsl #32
    // 0x30f15c: stur            x9, [fp, #-8]
    // 0x30f160: ldr             x16, [fp, #0x10]
    // 0x30f164: str             x16, [SP]
    // 0x30f168: r0 = maybeLocaleOf()
    //     0x30f168: bl              #0x25d61c  ; [package:flutter/src/widgets/localizations.dart] Localizations::maybeLocaleOf
    // 0x30f16c: mov             x1, x0
    // 0x30f170: ldr             x0, [fp, #0x18]
    // 0x30f174: stur            x1, [fp, #-0x90]
    // 0x30f178: LoadField: r2 = r0->field_13
    //     0x30f178: ldur            w2, [x0, #0x13]
    // 0x30f17c: DecompressPointer r2
    //     0x30f17c: add             x2, x2, HEAP, lsl #32
    // 0x30f180: LoadField: r3 = r2->field_b
    //     0x30f180: ldur            w3, [x2, #0xb]
    // 0x30f184: DecompressPointer r3
    //     0x30f184: add             x3, x3, HEAP, lsl #32
    // 0x30f188: stur            x3, [fp, #-0x88]
    // 0x30f18c: LoadField: r2 = r0->field_6f
    //     0x30f18c: ldur            w2, [x0, #0x6f]
    // 0x30f190: DecompressPointer r2
    //     0x30f190: add             x2, x2, HEAP, lsl #32
    // 0x30f194: stur            x2, [fp, #-0x80]
    // 0x30f198: LoadField: r4 = r0->field_83
    //     0x30f198: ldur            w4, [x0, #0x83]
    // 0x30f19c: DecompressPointer r4
    //     0x30f19c: add             x4, x4, HEAP, lsl #32
    // 0x30f1a0: stur            x4, [fp, #-0x78]
    // 0x30f1a4: LoadField: r5 = r0->field_87
    //     0x30f1a4: ldur            w5, [x0, #0x87]
    // 0x30f1a8: DecompressPointer r5
    //     0x30f1a8: add             x5, x5, HEAP, lsl #32
    // 0x30f1ac: stur            x5, [fp, #-0x70]
    // 0x30f1b0: LoadField: r6 = r0->field_8b
    //     0x30f1b0: ldur            w6, [x0, #0x8b]
    // 0x30f1b4: DecompressPointer r6
    //     0x30f1b4: add             x6, x6, HEAP, lsl #32
    // 0x30f1b8: stur            x6, [fp, #-0x68]
    // 0x30f1bc: LoadField: r7 = r0->field_9b
    //     0x30f1bc: ldur            w7, [x0, #0x9b]
    // 0x30f1c0: DecompressPointer r7
    //     0x30f1c0: add             x7, x7, HEAP, lsl #32
    // 0x30f1c4: stur            x7, [fp, #-0x60]
    // 0x30f1c8: LoadField: d0 = r0->field_9f
    //     0x30f1c8: ldur            d0, [x0, #0x9f]
    // 0x30f1cc: stur            d0, [fp, #-0xa0]
    // 0x30f1d0: LoadField: r8 = r0->field_a7
    //     0x30f1d0: ldur            w8, [x0, #0xa7]
    // 0x30f1d4: DecompressPointer r8
    //     0x30f1d4: add             x8, x8, HEAP, lsl #32
    // 0x30f1d8: stur            x8, [fp, #-0x58]
    // 0x30f1dc: LoadField: r9 = r0->field_ab
    //     0x30f1dc: ldur            w9, [x0, #0xab]
    // 0x30f1e0: DecompressPointer r9
    //     0x30f1e0: add             x9, x9, HEAP, lsl #32
    // 0x30f1e4: stur            x9, [fp, #-0x50]
    // 0x30f1e8: r0 = RenderEditable()
    //     0x30f1e8: bl              #0x30f840  ; AllocateRenderEditableStub -> RenderEditable (size=0x160)
    // 0x30f1ec: stur            x0, [fp, #-0x98]
    // 0x30f1f0: ldur            x16, [fp, #-0x40]
    // 0x30f1f4: stp             x16, x0, [SP, #0x90]
    // 0x30f1f8: ldur            x16, [fp, #-0x70]
    // 0x30f1fc: ldur            lr, [fp, #-0x78]
    // 0x30f200: stp             lr, x16, [SP, #0x80]
    // 0x30f204: ldur            d0, [fp, #-0xa0]
    // 0x30f208: str             d0, [SP, #0x78]
    // 0x30f20c: ldur            x16, [fp, #-0x30]
    // 0x30f210: ldur            lr, [fp, #-0x20]
    // 0x30f214: stp             lr, x16, [SP, #0x68]
    // 0x30f218: ldur            x16, [fp, #-0x90]
    // 0x30f21c: ldur            lr, [fp, #-0x80]
    // 0x30f220: stp             lr, x16, [SP, #0x58]
    // 0x30f224: ldur            x16, [fp, #-0x68]
    // 0x30f228: ldur            lr, [fp, #-0x50]
    // 0x30f22c: stp             lr, x16, [SP, #0x48]
    // 0x30f230: ldur            x16, [fp, #-0x58]
    // 0x30f234: ldur            lr, [fp, #-0x88]
    // 0x30f238: stp             lr, x16, [SP, #0x38]
    // 0x30f23c: ldur            x16, [fp, #-0x10]
    // 0x30f240: ldur            lr, [fp, #-0x28]
    // 0x30f244: stp             lr, x16, [SP, #0x28]
    // 0x30f248: ldur            x16, [fp, #-0x38]
    // 0x30f24c: ldur            lr, [fp, #-0x18]
    // 0x30f250: stp             lr, x16, [SP, #0x18]
    // 0x30f254: ldur            x16, [fp, #-0x48]
    // 0x30f258: ldur            lr, [fp, #-8]
    // 0x30f25c: stp             lr, x16, [SP, #8]
    // 0x30f260: ldur            x16, [fp, #-0x60]
    // 0x30f264: str             x16, [SP]
    // 0x30f268: r0 = RenderEditable()
    //     0x30f268: bl              #0x30f284  ; [package:flutter/src/rendering/editable.dart] RenderEditable::RenderEditable
    // 0x30f26c: ldur            x0, [fp, #-0x98]
    // 0x30f270: LeaveFrame
    //     0x30f270: mov             SP, fp
    //     0x30f274: ldp             fp, lr, [SP], #0x10
    // 0x30f278: ret
    //     0x30f278: ret             
    // 0x30f27c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x30f27c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x30f280: b               #0x30f0f0
  }
}

// class id: 1567, size: 0x18, field offset: 0x10
//   const constructor, 
class _CompositionCallback extends SingleChildRenderObjectWidget {

  _ updateRenderObject(/* No info */) {
    // ** addr: 0x2f33e0, size: 0x80
    // 0x2f33e0: EnterFrame
    //     0x2f33e0: stp             fp, lr, [SP, #-0x10]!
    //     0x2f33e4: mov             fp, SP
    // 0x2f33e8: AllocStack(0x10)
    //     0x2f33e8: sub             SP, SP, #0x10
    // 0x2f33ec: CheckStackOverflow
    //     0x2f33ec: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2f33f0: cmp             SP, x16
    //     0x2f33f4: b.ls            #0x2f3458
    // 0x2f33f8: ldr             x0, [fp, #0x10]
    // 0x2f33fc: r2 = Null
    //     0x2f33fc: mov             x2, NULL
    // 0x2f3400: r1 = Null
    //     0x2f3400: mov             x1, NULL
    // 0x2f3404: r4 = 59
    //     0x2f3404: movz            x4, #0x3b
    // 0x2f3408: branchIfSmi(r0, 0x2f3414)
    //     0x2f3408: tbz             w0, #0, #0x2f3414
    // 0x2f340c: r4 = LoadClassIdInstr(r0)
    //     0x2f340c: ldur            x4, [x0, #-1]
    //     0x2f3410: ubfx            x4, x4, #0xc, #0x14
    // 0x2f3414: cmp             x4, #0x21e
    // 0x2f3418: b.eq            #0x2f3430
    // 0x2f341c: r8 = _RenderCompositionCallback
    //     0x2f341c: add             x8, PP, #0x12, lsl #12  ; [pp+0x127b0] Type: _RenderCompositionCallback
    //     0x2f3420: ldr             x8, [x8, #0x7b0]
    // 0x2f3424: r3 = Null
    //     0x2f3424: add             x3, PP, #0x12, lsl #12  ; [pp+0x127b8] Null
    //     0x2f3428: ldr             x3, [x3, #0x7b8]
    // 0x2f342c: r0 = DefaultTypeTest()
    //     0x2f342c: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x2f3430: ldr             x0, [fp, #0x20]
    // 0x2f3434: LoadField: r1 = r0->field_13
    //     0x2f3434: ldur            w1, [x0, #0x13]
    // 0x2f3438: DecompressPointer r1
    //     0x2f3438: add             x1, x1, HEAP, lsl #32
    // 0x2f343c: ldr             x16, [fp, #0x10]
    // 0x2f3440: stp             x1, x16, [SP]
    // 0x2f3444: r0 = enabled=()
    //     0x2f3444: bl              #0x2f3460  ; [package:flutter/src/widgets/editable_text.dart] _RenderCompositionCallback::enabled=
    // 0x2f3448: r0 = Null
    //     0x2f3448: mov             x0, NULL
    // 0x2f344c: LeaveFrame
    //     0x2f344c: mov             SP, fp
    //     0x2f3450: ldp             fp, lr, [SP], #0x10
    // 0x2f3454: ret
    //     0x2f3454: ret             
    // 0x2f3458: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2f3458: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2f345c: b               #0x2f33f8
  }
  _ createRenderObject(/* No info */) {
    // ** addr: 0x30dc2c, size: 0x7c
    // 0x30dc2c: EnterFrame
    //     0x30dc2c: stp             fp, lr, [SP, #-0x10]!
    //     0x30dc30: mov             fp, SP
    // 0x30dc34: AllocStack(0x28)
    //     0x30dc34: sub             SP, SP, #0x28
    // 0x30dc38: CheckStackOverflow
    //     0x30dc38: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x30dc3c: cmp             SP, x16
    //     0x30dc40: b.ls            #0x30dca0
    // 0x30dc44: ldr             x0, [fp, #0x18]
    // 0x30dc48: LoadField: r1 = r0->field_f
    //     0x30dc48: ldur            w1, [x0, #0xf]
    // 0x30dc4c: DecompressPointer r1
    //     0x30dc4c: add             x1, x1, HEAP, lsl #32
    // 0x30dc50: stur            x1, [fp, #-0x10]
    // 0x30dc54: LoadField: r2 = r0->field_13
    //     0x30dc54: ldur            w2, [x0, #0x13]
    // 0x30dc58: DecompressPointer r2
    //     0x30dc58: add             x2, x2, HEAP, lsl #32
    // 0x30dc5c: stur            x2, [fp, #-8]
    // 0x30dc60: r0 = _RenderCompositionCallback()
    //     0x30dc60: bl              #0x30dca8  ; Allocate_RenderCompositionCallbackStub -> _RenderCompositionCallback (size=0x70)
    // 0x30dc64: mov             x1, x0
    // 0x30dc68: ldur            x0, [fp, #-0x10]
    // 0x30dc6c: stur            x1, [fp, #-0x18]
    // 0x30dc70: StoreField: r1->field_63 = r0
    //     0x30dc70: stur            w0, [x1, #0x63]
    // 0x30dc74: ldur            x0, [fp, #-8]
    // 0x30dc78: StoreField: r1->field_6b = r0
    //     0x30dc78: stur            w0, [x1, #0x6b]
    // 0x30dc7c: str             x1, [SP]
    // 0x30dc80: r0 = RenderObject()
    //     0x30dc80: bl              #0x2f67b0  ; [package:flutter/src/rendering/object.dart] RenderObject::RenderObject
    // 0x30dc84: ldur            x16, [fp, #-0x18]
    // 0x30dc88: stp             NULL, x16, [SP]
    // 0x30dc8c: r0 = child=()
    //     0x30dc8c: bl              #0x24d3c0  ; [package:flutter/src/rendering/shifted_box.dart] _RenderShiftedBox&RenderBox&RenderObjectWithChildMixin::child=
    // 0x30dc90: ldur            x0, [fp, #-0x18]
    // 0x30dc94: LeaveFrame
    //     0x30dc94: mov             SP, fp
    //     0x30dc98: ldp             fp, lr, [SP], #0x10
    // 0x30dc9c: ret
    //     0x30dc9c: ret             
    // 0x30dca0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x30dca0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x30dca4: b               #0x30dc44
  }
}

// class id: 1700, size: 0x20, field offset: 0xc
//   const constructor, 
class _ScribbleFocusable extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0x2ced94, size: 0x48
    // 0x2ced94: EnterFrame
    //     0x2ced94: stp             fp, lr, [SP, #-0x10]!
    //     0x2ced98: mov             fp, SP
    // 0x2ced9c: AllocStack(0x10)
    //     0x2ced9c: sub             SP, SP, #0x10
    // 0x2ceda0: CheckStackOverflow
    //     0x2ceda0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2ceda4: cmp             SP, x16
    //     0x2ceda8: b.ls            #0x2cedd4
    // 0x2cedac: r1 = <_ScribbleFocusable>
    //     0x2cedac: add             x1, PP, #0x12, lsl #12  ; [pp+0x12770] TypeArguments: <_ScribbleFocusable>
    //     0x2cedb0: ldr             x1, [x1, #0x770]
    // 0x2cedb4: r0 = _ScribbleFocusableState()
    //     0x2cedb4: bl              #0x2cee88  ; Allocate_ScribbleFocusableStateStub -> _ScribbleFocusableState (size=0x18)
    // 0x2cedb8: stur            x0, [fp, #-8]
    // 0x2cedbc: str             x0, [SP]
    // 0x2cedc0: r0 = _ScribbleFocusableState()
    //     0x2cedc0: bl              #0x2ceddc  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::_ScribbleFocusableState
    // 0x2cedc4: ldur            x0, [fp, #-8]
    // 0x2cedc8: LeaveFrame
    //     0x2cedc8: mov             SP, fp
    //     0x2cedcc: ldp             fp, lr, [SP], #0x10
    // 0x2cedd0: ret
    //     0x2cedd0: ret             
    // 0x2cedd4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cedd4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cedd8: b               #0x2cedac
  }
}

// class id: 1701, size: 0x12c, field offset: 0xc
class EditableText extends StatefulWidget {

  static _ getEditableButtonItems(/* No info */) {
    // ** addr: 0x27b59c, size: 0x44c
    // 0x27b59c: EnterFrame
    //     0x27b59c: stp             fp, lr, [SP, #-0x10]!
    //     0x27b5a0: mov             fp, SP
    // 0x27b5a4: AllocStack(0x30)
    //     0x27b5a4: sub             SP, SP, #0x30
    // 0x27b5a8: CheckStackOverflow
    //     0x27b5a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x27b5ac: cmp             SP, x16
    //     0x27b5b0: b.ls            #0x27b9cc
    // 0x27b5b4: r16 = <ContextMenuButtonItem>
    //     0x27b5b4: add             x16, PP, #0xb, lsl #12  ; [pp+0xbb60] TypeArguments: <ContextMenuButtonItem>
    //     0x27b5b8: ldr             x16, [x16, #0xb60]
    // 0x27b5bc: stp             xzr, x16, [SP]
    // 0x27b5c0: r0 = _GrowableList()
    //     0x27b5c0: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x27b5c4: mov             x1, x0
    // 0x27b5c8: ldr             x0, [fp, #0x18]
    // 0x27b5cc: stur            x1, [fp, #-8]
    // 0x27b5d0: cmp             w0, NULL
    // 0x27b5d4: b.eq            #0x27b5e8
    // 0x27b5d8: ldr             x2, [fp, #0x38]
    // 0x27b5dc: r16 = Instance_ClipboardStatus
    //     0x27b5dc: ldr             x16, [PP, #0x5458]  ; [pp+0x5458] Obj!ClipboardStatus@47dbf1
    // 0x27b5e0: cmp             w2, w16
    // 0x27b5e4: b.eq            #0x27b8f8
    // 0x27b5e8: ldr             x2, [fp, #0x28]
    // 0x27b5ec: r16 = <ContextMenuButtonItem>
    //     0x27b5ec: add             x16, PP, #0xb, lsl #12  ; [pp+0xbb60] TypeArguments: <ContextMenuButtonItem>
    //     0x27b5f0: ldr             x16, [x16, #0xb60]
    // 0x27b5f4: stp             xzr, x16, [SP]
    // 0x27b5f8: r0 = _GrowableList()
    //     0x27b5f8: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x27b5fc: mov             x1, x0
    // 0x27b600: ldr             x0, [fp, #0x28]
    // 0x27b604: stur            x1, [fp, #-0x10]
    // 0x27b608: cmp             w0, NULL
    // 0x27b60c: b.eq            #0x27b6c0
    // 0x27b610: r0 = ContextMenuButtonItem()
    //     0x27b610: bl              #0x27b9e8  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x27b614: mov             x1, x0
    // 0x27b618: ldr             x0, [fp, #0x28]
    // 0x27b61c: stur            x1, [fp, #-0x20]
    // 0x27b620: StoreField: r1->field_7 = r0
    //     0x27b620: stur            w0, [x1, #7]
    // 0x27b624: r0 = Instance_ContextMenuButtonType
    //     0x27b624: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb68] Obj!ContextMenuButtonType@480641
    //     0x27b628: ldr             x0, [x0, #0xb68]
    // 0x27b62c: StoreField: r1->field_b = r0
    //     0x27b62c: stur            w0, [x1, #0xb]
    // 0x27b630: ldur            x0, [fp, #-0x10]
    // 0x27b634: LoadField: r2 = r0->field_b
    //     0x27b634: ldur            w2, [x0, #0xb]
    // 0x27b638: DecompressPointer r2
    //     0x27b638: add             x2, x2, HEAP, lsl #32
    // 0x27b63c: LoadField: r3 = r0->field_f
    //     0x27b63c: ldur            w3, [x0, #0xf]
    // 0x27b640: DecompressPointer r3
    //     0x27b640: add             x3, x3, HEAP, lsl #32
    // 0x27b644: LoadField: r4 = r3->field_b
    //     0x27b644: ldur            w4, [x3, #0xb]
    // 0x27b648: DecompressPointer r4
    //     0x27b648: add             x4, x4, HEAP, lsl #32
    // 0x27b64c: r3 = LoadInt32Instr(r2)
    //     0x27b64c: sbfx            x3, x2, #1, #0x1f
    // 0x27b650: stur            x3, [fp, #-0x18]
    // 0x27b654: r2 = LoadInt32Instr(r4)
    //     0x27b654: sbfx            x2, x4, #1, #0x1f
    // 0x27b658: cmp             x3, x2
    // 0x27b65c: b.ne            #0x27b668
    // 0x27b660: str             x0, [SP]
    // 0x27b664: r0 = _growToNextCapacity()
    //     0x27b664: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27b668: ldur            x2, [fp, #-0x10]
    // 0x27b66c: ldur            x3, [fp, #-0x18]
    // 0x27b670: add             x0, x3, #1
    // 0x27b674: lsl             x1, x0, #1
    // 0x27b678: StoreField: r2->field_b = r1
    //     0x27b678: stur            w1, [x2, #0xb]
    // 0x27b67c: mov             x1, x3
    // 0x27b680: cmp             x1, x0
    // 0x27b684: b.hs            #0x27b9d4
    // 0x27b688: LoadField: r1 = r2->field_f
    //     0x27b688: ldur            w1, [x2, #0xf]
    // 0x27b68c: DecompressPointer r1
    //     0x27b68c: add             x1, x1, HEAP, lsl #32
    // 0x27b690: ldur            x0, [fp, #-0x20]
    // 0x27b694: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27b694: add             x25, x1, x3, lsl #2
    //     0x27b698: add             x25, x25, #0xf
    //     0x27b69c: str             w0, [x25]
    //     0x27b6a0: tbz             w0, #0, #0x27b6bc
    //     0x27b6a4: ldurb           w16, [x1, #-1]
    //     0x27b6a8: ldurb           w17, [x0, #-1]
    //     0x27b6ac: and             x16, x17, x16, lsr #2
    //     0x27b6b0: tst             x16, HEAP, lsr #32
    //     0x27b6b4: b.eq            #0x27b6bc
    //     0x27b6b8: bl              #0x3e41ec
    // 0x27b6bc: b               #0x27b6c4
    // 0x27b6c0: mov             x2, x1
    // 0x27b6c4: ldr             x0, [fp, #0x30]
    // 0x27b6c8: cmp             w0, NULL
    // 0x27b6cc: b.eq            #0x27b77c
    // 0x27b6d0: r0 = ContextMenuButtonItem()
    //     0x27b6d0: bl              #0x27b9e8  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x27b6d4: mov             x1, x0
    // 0x27b6d8: ldr             x0, [fp, #0x30]
    // 0x27b6dc: stur            x1, [fp, #-0x20]
    // 0x27b6e0: StoreField: r1->field_7 = r0
    //     0x27b6e0: stur            w0, [x1, #7]
    // 0x27b6e4: r0 = Instance_ContextMenuButtonType
    //     0x27b6e4: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb70] Obj!ContextMenuButtonType@480621
    //     0x27b6e8: ldr             x0, [x0, #0xb70]
    // 0x27b6ec: StoreField: r1->field_b = r0
    //     0x27b6ec: stur            w0, [x1, #0xb]
    // 0x27b6f0: ldur            x0, [fp, #-0x10]
    // 0x27b6f4: LoadField: r2 = r0->field_b
    //     0x27b6f4: ldur            w2, [x0, #0xb]
    // 0x27b6f8: DecompressPointer r2
    //     0x27b6f8: add             x2, x2, HEAP, lsl #32
    // 0x27b6fc: LoadField: r3 = r0->field_f
    //     0x27b6fc: ldur            w3, [x0, #0xf]
    // 0x27b700: DecompressPointer r3
    //     0x27b700: add             x3, x3, HEAP, lsl #32
    // 0x27b704: LoadField: r4 = r3->field_b
    //     0x27b704: ldur            w4, [x3, #0xb]
    // 0x27b708: DecompressPointer r4
    //     0x27b708: add             x4, x4, HEAP, lsl #32
    // 0x27b70c: r3 = LoadInt32Instr(r2)
    //     0x27b70c: sbfx            x3, x2, #1, #0x1f
    // 0x27b710: stur            x3, [fp, #-0x18]
    // 0x27b714: r2 = LoadInt32Instr(r4)
    //     0x27b714: sbfx            x2, x4, #1, #0x1f
    // 0x27b718: cmp             x3, x2
    // 0x27b71c: b.ne            #0x27b728
    // 0x27b720: str             x0, [SP]
    // 0x27b724: r0 = _growToNextCapacity()
    //     0x27b724: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27b728: ldur            x2, [fp, #-0x10]
    // 0x27b72c: ldur            x3, [fp, #-0x18]
    // 0x27b730: add             x0, x3, #1
    // 0x27b734: lsl             x1, x0, #1
    // 0x27b738: StoreField: r2->field_b = r1
    //     0x27b738: stur            w1, [x2, #0xb]
    // 0x27b73c: mov             x1, x3
    // 0x27b740: cmp             x1, x0
    // 0x27b744: b.hs            #0x27b9d8
    // 0x27b748: LoadField: r1 = r2->field_f
    //     0x27b748: ldur            w1, [x2, #0xf]
    // 0x27b74c: DecompressPointer r1
    //     0x27b74c: add             x1, x1, HEAP, lsl #32
    // 0x27b750: ldur            x0, [fp, #-0x20]
    // 0x27b754: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27b754: add             x25, x1, x3, lsl #2
    //     0x27b758: add             x25, x25, #0xf
    //     0x27b75c: str             w0, [x25]
    //     0x27b760: tbz             w0, #0, #0x27b77c
    //     0x27b764: ldurb           w16, [x1, #-1]
    //     0x27b768: ldurb           w17, [x0, #-1]
    //     0x27b76c: and             x16, x17, x16, lsr #2
    //     0x27b770: tst             x16, HEAP, lsr #32
    //     0x27b774: b.eq            #0x27b77c
    //     0x27b778: bl              #0x3e41ec
    // 0x27b77c: ldr             x0, [fp, #0x18]
    // 0x27b780: cmp             w0, NULL
    // 0x27b784: b.eq            #0x27b834
    // 0x27b788: r0 = ContextMenuButtonItem()
    //     0x27b788: bl              #0x27b9e8  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x27b78c: mov             x1, x0
    // 0x27b790: ldr             x0, [fp, #0x18]
    // 0x27b794: stur            x1, [fp, #-0x20]
    // 0x27b798: StoreField: r1->field_7 = r0
    //     0x27b798: stur            w0, [x1, #7]
    // 0x27b79c: r0 = Instance_ContextMenuButtonType
    //     0x27b79c: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb78] Obj!ContextMenuButtonType@480601
    //     0x27b7a0: ldr             x0, [x0, #0xb78]
    // 0x27b7a4: StoreField: r1->field_b = r0
    //     0x27b7a4: stur            w0, [x1, #0xb]
    // 0x27b7a8: ldur            x0, [fp, #-0x10]
    // 0x27b7ac: LoadField: r2 = r0->field_b
    //     0x27b7ac: ldur            w2, [x0, #0xb]
    // 0x27b7b0: DecompressPointer r2
    //     0x27b7b0: add             x2, x2, HEAP, lsl #32
    // 0x27b7b4: LoadField: r3 = r0->field_f
    //     0x27b7b4: ldur            w3, [x0, #0xf]
    // 0x27b7b8: DecompressPointer r3
    //     0x27b7b8: add             x3, x3, HEAP, lsl #32
    // 0x27b7bc: LoadField: r4 = r3->field_b
    //     0x27b7bc: ldur            w4, [x3, #0xb]
    // 0x27b7c0: DecompressPointer r4
    //     0x27b7c0: add             x4, x4, HEAP, lsl #32
    // 0x27b7c4: r3 = LoadInt32Instr(r2)
    //     0x27b7c4: sbfx            x3, x2, #1, #0x1f
    // 0x27b7c8: stur            x3, [fp, #-0x18]
    // 0x27b7cc: r2 = LoadInt32Instr(r4)
    //     0x27b7cc: sbfx            x2, x4, #1, #0x1f
    // 0x27b7d0: cmp             x3, x2
    // 0x27b7d4: b.ne            #0x27b7e0
    // 0x27b7d8: str             x0, [SP]
    // 0x27b7dc: r0 = _growToNextCapacity()
    //     0x27b7dc: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27b7e0: ldur            x2, [fp, #-0x10]
    // 0x27b7e4: ldur            x3, [fp, #-0x18]
    // 0x27b7e8: add             x0, x3, #1
    // 0x27b7ec: lsl             x1, x0, #1
    // 0x27b7f0: StoreField: r2->field_b = r1
    //     0x27b7f0: stur            w1, [x2, #0xb]
    // 0x27b7f4: mov             x1, x3
    // 0x27b7f8: cmp             x1, x0
    // 0x27b7fc: b.hs            #0x27b9dc
    // 0x27b800: LoadField: r1 = r2->field_f
    //     0x27b800: ldur            w1, [x2, #0xf]
    // 0x27b804: DecompressPointer r1
    //     0x27b804: add             x1, x1, HEAP, lsl #32
    // 0x27b808: ldur            x0, [fp, #-0x20]
    // 0x27b80c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27b80c: add             x25, x1, x3, lsl #2
    //     0x27b810: add             x25, x25, #0xf
    //     0x27b814: str             w0, [x25]
    //     0x27b818: tbz             w0, #0, #0x27b834
    //     0x27b81c: ldurb           w16, [x1, #-1]
    //     0x27b820: ldurb           w17, [x0, #-1]
    //     0x27b824: and             x16, x17, x16, lsr #2
    //     0x27b828: tst             x16, HEAP, lsr #32
    //     0x27b82c: b.eq            #0x27b834
    //     0x27b830: bl              #0x3e41ec
    // 0x27b834: ldr             x0, [fp, #0x10]
    // 0x27b838: cmp             w0, NULL
    // 0x27b83c: b.eq            #0x27b8ec
    // 0x27b840: r0 = ContextMenuButtonItem()
    //     0x27b840: bl              #0x27b9e8  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x27b844: mov             x1, x0
    // 0x27b848: ldr             x0, [fp, #0x10]
    // 0x27b84c: stur            x1, [fp, #-0x20]
    // 0x27b850: StoreField: r1->field_7 = r0
    //     0x27b850: stur            w0, [x1, #7]
    // 0x27b854: r0 = Instance_ContextMenuButtonType
    //     0x27b854: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb80] Obj!ContextMenuButtonType@4805e1
    //     0x27b858: ldr             x0, [x0, #0xb80]
    // 0x27b85c: StoreField: r1->field_b = r0
    //     0x27b85c: stur            w0, [x1, #0xb]
    // 0x27b860: ldur            x0, [fp, #-0x10]
    // 0x27b864: LoadField: r2 = r0->field_b
    //     0x27b864: ldur            w2, [x0, #0xb]
    // 0x27b868: DecompressPointer r2
    //     0x27b868: add             x2, x2, HEAP, lsl #32
    // 0x27b86c: LoadField: r3 = r0->field_f
    //     0x27b86c: ldur            w3, [x0, #0xf]
    // 0x27b870: DecompressPointer r3
    //     0x27b870: add             x3, x3, HEAP, lsl #32
    // 0x27b874: LoadField: r4 = r3->field_b
    //     0x27b874: ldur            w4, [x3, #0xb]
    // 0x27b878: DecompressPointer r4
    //     0x27b878: add             x4, x4, HEAP, lsl #32
    // 0x27b87c: r3 = LoadInt32Instr(r2)
    //     0x27b87c: sbfx            x3, x2, #1, #0x1f
    // 0x27b880: stur            x3, [fp, #-0x18]
    // 0x27b884: r2 = LoadInt32Instr(r4)
    //     0x27b884: sbfx            x2, x4, #1, #0x1f
    // 0x27b888: cmp             x3, x2
    // 0x27b88c: b.ne            #0x27b898
    // 0x27b890: str             x0, [SP]
    // 0x27b894: r0 = _growToNextCapacity()
    //     0x27b894: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27b898: ldur            x2, [fp, #-0x10]
    // 0x27b89c: ldur            x3, [fp, #-0x18]
    // 0x27b8a0: add             x0, x3, #1
    // 0x27b8a4: lsl             x1, x0, #1
    // 0x27b8a8: StoreField: r2->field_b = r1
    //     0x27b8a8: stur            w1, [x2, #0xb]
    // 0x27b8ac: mov             x1, x3
    // 0x27b8b0: cmp             x1, x0
    // 0x27b8b4: b.hs            #0x27b9e0
    // 0x27b8b8: LoadField: r1 = r2->field_f
    //     0x27b8b8: ldur            w1, [x2, #0xf]
    // 0x27b8bc: DecompressPointer r1
    //     0x27b8bc: add             x1, x1, HEAP, lsl #32
    // 0x27b8c0: ldur            x0, [fp, #-0x20]
    // 0x27b8c4: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27b8c4: add             x25, x1, x3, lsl #2
    //     0x27b8c8: add             x25, x25, #0xf
    //     0x27b8cc: str             w0, [x25]
    //     0x27b8d0: tbz             w0, #0, #0x27b8ec
    //     0x27b8d4: ldurb           w16, [x1, #-1]
    //     0x27b8d8: ldurb           w17, [x0, #-1]
    //     0x27b8dc: and             x16, x17, x16, lsr #2
    //     0x27b8e0: tst             x16, HEAP, lsr #32
    //     0x27b8e4: b.eq            #0x27b8ec
    //     0x27b8e8: bl              #0x3e41ec
    // 0x27b8ec: ldur            x16, [fp, #-8]
    // 0x27b8f0: stp             x2, x16, [SP]
    // 0x27b8f4: r0 = addAll()
    //     0x27b8f4: bl              #0x18699c  ; [dart:core] _GrowableList::addAll
    // 0x27b8f8: ldr             x0, [fp, #0x20]
    // 0x27b8fc: cmp             w0, NULL
    // 0x27b900: b.eq            #0x27b9b8
    // 0x27b904: ldur            x1, [fp, #-8]
    // 0x27b908: r0 = ContextMenuButtonItem()
    //     0x27b908: bl              #0x27b9e8  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x27b90c: mov             x1, x0
    // 0x27b910: ldr             x0, [fp, #0x20]
    // 0x27b914: stur            x1, [fp, #-0x10]
    // 0x27b918: StoreField: r1->field_7 = r0
    //     0x27b918: stur            w0, [x1, #7]
    // 0x27b91c: r0 = Instance_ContextMenuButtonType
    //     0x27b91c: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb88] Obj!ContextMenuButtonType@4805c1
    //     0x27b920: ldr             x0, [x0, #0xb88]
    // 0x27b924: StoreField: r1->field_b = r0
    //     0x27b924: stur            w0, [x1, #0xb]
    // 0x27b928: ldur            x0, [fp, #-8]
    // 0x27b92c: LoadField: r2 = r0->field_b
    //     0x27b92c: ldur            w2, [x0, #0xb]
    // 0x27b930: DecompressPointer r2
    //     0x27b930: add             x2, x2, HEAP, lsl #32
    // 0x27b934: LoadField: r3 = r0->field_f
    //     0x27b934: ldur            w3, [x0, #0xf]
    // 0x27b938: DecompressPointer r3
    //     0x27b938: add             x3, x3, HEAP, lsl #32
    // 0x27b93c: LoadField: r4 = r3->field_b
    //     0x27b93c: ldur            w4, [x3, #0xb]
    // 0x27b940: DecompressPointer r4
    //     0x27b940: add             x4, x4, HEAP, lsl #32
    // 0x27b944: r3 = LoadInt32Instr(r2)
    //     0x27b944: sbfx            x3, x2, #1, #0x1f
    // 0x27b948: stur            x3, [fp, #-0x18]
    // 0x27b94c: r2 = LoadInt32Instr(r4)
    //     0x27b94c: sbfx            x2, x4, #1, #0x1f
    // 0x27b950: cmp             x3, x2
    // 0x27b954: b.ne            #0x27b960
    // 0x27b958: str             x0, [SP]
    // 0x27b95c: r0 = _growToNextCapacity()
    //     0x27b95c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x27b960: ldur            x2, [fp, #-8]
    // 0x27b964: ldur            x3, [fp, #-0x18]
    // 0x27b968: add             x0, x3, #1
    // 0x27b96c: lsl             x4, x0, #1
    // 0x27b970: StoreField: r2->field_b = r4
    //     0x27b970: stur            w4, [x2, #0xb]
    // 0x27b974: mov             x1, x3
    // 0x27b978: cmp             x1, x0
    // 0x27b97c: b.hs            #0x27b9e4
    // 0x27b980: LoadField: r1 = r2->field_f
    //     0x27b980: ldur            w1, [x2, #0xf]
    // 0x27b984: DecompressPointer r1
    //     0x27b984: add             x1, x1, HEAP, lsl #32
    // 0x27b988: ldur            x0, [fp, #-0x10]
    // 0x27b98c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x27b98c: add             x25, x1, x3, lsl #2
    //     0x27b990: add             x25, x25, #0xf
    //     0x27b994: str             w0, [x25]
    //     0x27b998: tbz             w0, #0, #0x27b9b4
    //     0x27b99c: ldurb           w16, [x1, #-1]
    //     0x27b9a0: ldurb           w17, [x0, #-1]
    //     0x27b9a4: and             x16, x17, x16, lsr #2
    //     0x27b9a8: tst             x16, HEAP, lsr #32
    //     0x27b9ac: b.eq            #0x27b9b4
    //     0x27b9b0: bl              #0x3e41ec
    // 0x27b9b4: b               #0x27b9bc
    // 0x27b9b8: ldur            x2, [fp, #-8]
    // 0x27b9bc: mov             x0, x2
    // 0x27b9c0: LeaveFrame
    //     0x27b9c0: mov             SP, fp
    //     0x27b9c4: ldp             fp, lr, [SP], #0x10
    // 0x27b9c8: ret
    //     0x27b9c8: ret             
    // 0x27b9cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x27b9cc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x27b9d0: b               #0x27b5b4
    // 0x27b9d4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27b9d4: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x27b9d8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27b9d8: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x27b9dc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27b9dc: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x27b9e0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27b9e0: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x27b9e4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x27b9e4: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ EditableText(/* No info */) {
    // ** addr: 0x299ca4, size: 0x468
    // 0x299ca4: EnterFrame
    //     0x299ca4: stp             fp, lr, [SP, #-0x10]!
    //     0x299ca8: mov             fp, SP
    // 0x299cac: AllocStack(0x20)
    //     0x299cac: sub             SP, SP, #0x20
    // 0x299cb0: r24 = false
    //     0x299cb0: add             x24, NULL, #0x30  ; false
    // 0x299cb4: r23 = "•"
    //     0x299cb4: add             x23, PP, #0xb, lsl #12  ; [pp+0xb838] "•"
    //     0x299cb8: ldr             x23, [x23, #0x838]
    // 0x299cbc: r20 = true
    //     0x299cbc: add             x20, NULL, #0x20  ; true
    // 0x299cc0: r19 = Instance_CupertinoDynamicColor
    //     0x299cc0: add             x19, PP, #0xd, lsl #12  ; [pp+0xdf90] Obj!CupertinoDynamicColor@47cf41
    //     0x299cc4: ldr             x19, [x19, #0xf90]
    // 0x299cc8: r14 = Instance_TextAlign
    //     0x299cc8: ldr             x14, [PP, #0x52b0]  ; [pp+0x52b0] Obj!TextAlign@482301
    // 0x299ccc: r13 = Instance_TextWidthBasis
    //     0x299ccc: add             x13, PP, #0xc, lsl #12  ; [pp+0xc050] Obj!TextWidthBasis@4811e1
    //     0x299cd0: ldr             x13, [x13, #0x50]
    // 0x299cd4: r12 = Instance_TextCapitalization
    //     0x299cd4: ldr             x12, [PP, #0x5e98]  ; [pp+0x5e98] Obj!TextCapitalization@480801
    // 0x299cd8: r11 = Instance__DeferringMouseCursor
    //     0x299cd8: ldr             x11, [PP, #0x2b88]  ; [pp+0x2b88] Obj!_DeferringMouseCursor@47b771
    // 0x299cdc: r10 = Instance_BoxHeightStyle
    //     0x299cdc: ldr             x10, [PP, #0x5338]  ; [pp+0x5338] Obj!BoxHeightStyle@482101
    // 0x299ce0: r9 = Instance_BoxWidthStyle
    //     0x299ce0: ldr             x9, [PP, #0x5340]  ; [pp+0x5340] Obj!BoxWidthStyle@4820e1
    // 0x299ce4: r8 = Instance_EdgeInsets
    //     0x299ce4: ldr             x8, [PP, #0x5c38]  ; [pp+0x5c38] Obj!EdgeInsets@473001
    // 0x299ce8: r7 = Instance_DragStartBehavior
    //     0x299ce8: ldr             x7, [PP, #0x5820]  ; [pp+0x5820] Obj!DragStartBehavior@481c61
    // 0x299cec: r6 = const []
    //     0x299cec: ldr             x6, [PP, #0x5e90]  ; [pp+0x5e90] List<String>(0)
    // 0x299cf0: r5 = Instance_Clip
    //     0x299cf0: add             x5, PP, #0xb, lsl #12  ; [pp+0xb840] Obj!Clip@482a01
    //     0x299cf4: ldr             x5, [x5, #0x840]
    // 0x299cf8: r4 = "editable"
    //     0x299cf8: add             x4, PP, #0xd, lsl #12  ; [pp+0xdf98] "editable"
    //     0x299cfc: ldr             x4, [x4, #0xf98]
    // 0x299d00: r3 = Instance_SpellCheckConfiguration
    //     0x299d00: add             x3, PP, #0xd, lsl #12  ; [pp+0xdfa0] Obj!SpellCheckConfiguration@4726f1
    //     0x299d04: ldr             x3, [x3, #0xfa0]
    // 0x299d08: r2 = Instance_SmartDashesType
    //     0x299d08: ldr             x2, [PP, #0x5ea0]  ; [pp+0x5ea0] Obj!SmartDashesType@4809e1
    // 0x299d0c: r1 = 1
    //     0x299d0c: movz            x1, #0x1
    // 0x299d10: d0 = 2.000000
    //     0x299d10: fmov            d0, #2.00000000
    // 0x299d14: d0 = 2.000000
    //     0x299d14: fmov            d0, #2.00000000
    // 0x299d18: CheckStackOverflow
    //     0x299d18: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x299d1c: cmp             SP, x16
    //     0x299d20: b.ls            #0x29a104
    // 0x299d24: ldr             x0, [fp, #0xa0]
    // 0x299d28: ldr             x25, [fp, #0xc0]
    // 0x299d2c: StoreField: r25->field_b = r0
    //     0x299d2c: stur            w0, [x25, #0xb]
    //     0x299d30: ldurb           w16, [x25, #-1]
    //     0x299d34: ldurb           w17, [x0, #-1]
    //     0x299d38: and             x16, x17, x16, lsr #2
    //     0x299d3c: tst             x16, HEAP, lsr #32
    //     0x299d40: b.eq            #0x299d48
    //     0x299d44: bl              #0x3e4848
    // 0x299d48: ldr             x0, [fp, #0x78]
    // 0x299d4c: StoreField: r25->field_f = r0
    //     0x299d4c: stur            w0, [x25, #0xf]
    //     0x299d50: ldurb           w16, [x25, #-1]
    //     0x299d54: ldurb           w17, [x0, #-1]
    //     0x299d58: and             x16, x17, x16, lsr #2
    //     0x299d5c: tst             x16, HEAP, lsr #32
    //     0x299d60: b.eq            #0x299d68
    //     0x299d64: bl              #0x3e4848
    // 0x299d68: StoreField: r25->field_23 = r24
    //     0x299d68: stur            w24, [x25, #0x23]
    // 0x299d6c: StoreField: r25->field_13 = r23
    //     0x299d6c: stur            w23, [x25, #0x13]
    // 0x299d70: StoreField: r25->field_17 = r20
    //     0x299d70: stur            w20, [x25, #0x17]
    // 0x299d74: StoreField: r25->field_37 = r20
    //     0x299d74: stur            w20, [x25, #0x37]
    // 0x299d78: StoreField: r25->field_43 = r20
    //     0x299d78: stur            w20, [x25, #0x43]
    // 0x299d7c: ldr             x0, [fp, #0x10]
    // 0x299d80: StoreField: r25->field_47 = r0
    //     0x299d80: stur            w0, [x25, #0x47]
    //     0x299d84: ldurb           w16, [x25, #-1]
    //     0x299d88: ldurb           w17, [x0, #-1]
    //     0x299d8c: and             x16, x17, x16, lsr #2
    //     0x299d90: tst             x16, HEAP, lsr #32
    //     0x299d94: b.eq            #0x299d9c
    //     0x299d98: bl              #0x3e4848
    // 0x299d9c: ldr             x0, [fp, #0x98]
    // 0x299da0: StoreField: r25->field_6b = r0
    //     0x299da0: stur            w0, [x25, #0x6b]
    //     0x299da4: ldurb           w16, [x25, #-1]
    //     0x299da8: ldurb           w17, [x0, #-1]
    //     0x299dac: and             x16, x17, x16, lsr #2
    //     0x299db0: tst             x16, HEAP, lsr #32
    //     0x299db4: b.eq            #0x299dbc
    //     0x299db8: bl              #0x3e4848
    // 0x299dbc: StoreField: r25->field_73 = r19
    //     0x299dbc: stur            w19, [x25, #0x73]
    // 0x299dc0: StoreField: r25->field_53 = r14
    //     0x299dc0: stur            w14, [x25, #0x53]
    // 0x299dc4: StoreField: r25->field_77 = r1
    //     0x299dc4: stur            x1, [x25, #0x77]
    // 0x299dc8: StoreField: r25->field_83 = r24
    //     0x299dc8: stur            w24, [x25, #0x83]
    // 0x299dcc: StoreField: r25->field_27 = r20
    //     0x299dcc: stur            w20, [x25, #0x27]
    // 0x299dd0: StoreField: r25->field_1f = r13
    //     0x299dd0: stur            w13, [x25, #0x1f]
    // 0x299dd4: StoreField: r25->field_87 = r24
    //     0x299dd4: stur            w24, [x25, #0x87]
    // 0x299dd8: ldr             x0, [fp, #0x20]
    // 0x299ddc: StoreField: r25->field_2f = r0
    //     0x299ddc: stur            w0, [x25, #0x2f]
    // 0x299de0: ldr             x0, [fp, #0x30]
    // 0x299de4: StoreField: r25->field_8b = r0
    //     0x299de4: stur            w0, [x25, #0x8b]
    //     0x299de8: ldurb           w16, [x25, #-1]
    //     0x299dec: ldurb           w17, [x0, #-1]
    //     0x299df0: and             x16, x17, x16, lsr #2
    //     0x299df4: tst             x16, HEAP, lsr #32
    //     0x299df8: b.eq            #0x299e00
    //     0x299dfc: bl              #0x3e4848
    // 0x299e00: ldr             x0, [fp, #0x28]
    // 0x299e04: StoreField: r25->field_8f = r0
    //     0x299e04: stur            w0, [x25, #0x8f]
    //     0x299e08: ldurb           w16, [x25, #-1]
    //     0x299e0c: ldurb           w17, [x0, #-1]
    //     0x299e10: and             x16, x17, x16, lsr #2
    //     0x299e14: tst             x16, HEAP, lsr #32
    //     0x299e18: b.eq            #0x299e20
    //     0x299e1c: bl              #0x3e4848
    // 0x299e20: StoreField: r25->field_5b = r12
    //     0x299e20: stur            w12, [x25, #0x5b]
    // 0x299e24: ldr             x0, [fp, #0x48]
    // 0x299e28: StoreField: r25->field_ab = r0
    //     0x299e28: stur            w0, [x25, #0xab]
    //     0x299e2c: ldurb           w16, [x25, #-1]
    //     0x299e30: ldurb           w17, [x0, #-1]
    //     0x299e34: and             x16, x17, x16, lsr #2
    //     0x299e38: tst             x16, HEAP, lsr #32
    //     0x299e3c: b.eq            #0x299e44
    //     0x299e40: bl              #0x3e4848
    // 0x299e44: ldr             x0, [fp, #0x40]
    // 0x299e48: StoreField: r25->field_af = r0
    //     0x299e48: stur            w0, [x25, #0xaf]
    //     0x299e4c: ldurb           w16, [x25, #-1]
    //     0x299e50: ldurb           w17, [x0, #-1]
    //     0x299e54: and             x16, x17, x16, lsr #2
    //     0x299e58: tst             x16, HEAP, lsr #32
    //     0x299e5c: b.eq            #0x299e64
    //     0x299e60: bl              #0x3e4848
    // 0x299e64: StoreField: r25->field_bb = r11
    //     0x299e64: stur            w11, [x25, #0xbb]
    // 0x299e68: StoreField: r25->field_bf = r20
    //     0x299e68: stur            w20, [x25, #0xbf]
    // 0x299e6c: StoreField: r25->field_c3 = d0
    //     0x299e6c: stur            d0, [x25, #0xc3]
    // 0x299e70: ldr             x0, [fp, #0x80]
    // 0x299e74: StoreField: r25->field_cf = r0
    //     0x299e74: stur            w0, [x25, #0xcf]
    //     0x299e78: ldurb           w16, [x25, #-1]
    //     0x299e7c: ldurb           w17, [x0, #-1]
    //     0x299e80: and             x16, x17, x16, lsr #2
    //     0x299e84: tst             x16, HEAP, lsr #32
    //     0x299e88: b.eq            #0x299e90
    //     0x299e8c: bl              #0x3e4848
    // 0x299e90: ldr             x0, [fp, #0x88]
    // 0x299e94: StoreField: r25->field_d3 = r0
    //     0x299e94: stur            w0, [x25, #0xd3]
    // 0x299e98: ldr             x0, [fp, #0x90]
    // 0x299e9c: StoreField: r25->field_d7 = r0
    //     0x299e9c: stur            w0, [x25, #0xd7]
    //     0x299ea0: ldurb           w16, [x25, #-1]
    //     0x299ea4: ldurb           w17, [x0, #-1]
    //     0x299ea8: and             x16, x17, x16, lsr #2
    //     0x299eac: tst             x16, HEAP, lsr #32
    //     0x299eb0: b.eq            #0x299eb8
    //     0x299eb4: bl              #0x3e4848
    // 0x299eb8: ldr             x0, [fp, #0x38]
    // 0x299ebc: StoreField: r25->field_db = r0
    //     0x299ebc: stur            w0, [x25, #0xdb]
    // 0x299ec0: StoreField: r25->field_df = r10
    //     0x299ec0: stur            w10, [x25, #0xdf]
    // 0x299ec4: StoreField: r25->field_e3 = r9
    //     0x299ec4: stur            w9, [x25, #0xe3]
    // 0x299ec8: StoreField: r25->field_eb = r8
    //     0x299ec8: stur            w8, [x25, #0xeb]
    // 0x299ecc: ldr             x0, [fp, #0x60]
    // 0x299ed0: StoreField: r25->field_e7 = r0
    //     0x299ed0: stur            w0, [x25, #0xe7]
    //     0x299ed4: ldurb           w16, [x25, #-1]
    //     0x299ed8: ldurb           w17, [x0, #-1]
    //     0x299edc: and             x16, x17, x16, lsr #2
    //     0x299ee0: tst             x16, HEAP, lsr #32
    //     0x299ee4: b.eq            #0x299eec
    //     0x299ee8: bl              #0x3e4848
    // 0x299eec: StoreField: r25->field_f3 = r7
    //     0x299eec: stur            w7, [x25, #0xf3]
    // 0x299ef0: ldr             x0, [fp, #0xb8]
    // 0x299ef4: StoreField: r25->field_6f = r0
    //     0x299ef4: stur            w0, [x25, #0x6f]
    //     0x299ef8: ldurb           w16, [x25, #-1]
    //     0x299efc: ldurb           w17, [x0, #-1]
    //     0x299f00: and             x16, x17, x16, lsr #2
    //     0x299f04: tst             x16, HEAP, lsr #32
    //     0x299f08: b.eq            #0x299f10
    //     0x299f0c: bl              #0x3e4848
    // 0x299f10: add             x16, x25, #0x103
    // 0x299f14: str             w6, [x16]
    // 0x299f18: ldr             x0, [fp, #0xb0]
    // 0x299f1c: r17 = 263
    //     0x299f1c: movz            x17, #0x107
    // 0x299f20: str             w0, [x25, x17]
    // 0x299f24: WriteBarrierInstr(obj = r25, val = r0)
    //     0x299f24: ldurb           w16, [x25, #-1]
    //     0x299f28: ldurb           w17, [x0, #-1]
    //     0x299f2c: and             x16, x17, x16, lsr #2
    //     0x299f30: tst             x16, HEAP, lsr #32
    //     0x299f34: b.eq            #0x299f3c
    //     0x299f38: bl              #0x3e4848
    // 0x299f3c: add             x16, x25, #0x10b
    // 0x299f40: str             w5, [x16]
    // 0x299f44: add             x16, x25, #0x10f
    // 0x299f48: str             w4, [x16]
    // 0x299f4c: StoreField: r25->field_ff = r20
    //     0x299f4c: stur            w20, [x25, #0xff]
    // 0x299f50: add             x16, x25, #0x117
    // 0x299f54: str             w20, [x16]
    // 0x299f58: ldr             x0, [fp, #0xa8]
    // 0x299f5c: r17 = 287
    //     0x299f5c: movz            x17, #0x11f
    // 0x299f60: str             w0, [x25, x17]
    // 0x299f64: WriteBarrierInstr(obj = r25, val = r0)
    //     0x299f64: ldurb           w16, [x25, #-1]
    //     0x299f68: ldurb           w17, [x0, #-1]
    //     0x299f6c: and             x16, x17, x16, lsr #2
    //     0x299f70: tst             x16, HEAP, lsr #32
    //     0x299f74: b.eq            #0x299f7c
    //     0x299f78: bl              #0x3e4848
    // 0x299f7c: add             x16, x25, #0x123
    // 0x299f80: str             w3, [x16]
    // 0x299f84: ldr             x0, [fp, #0x50]
    // 0x299f88: r17 = 295
    //     0x299f88: movz            x17, #0x127
    // 0x299f8c: str             w0, [x25, x17]
    // 0x299f90: WriteBarrierInstr(obj = r25, val = r0)
    //     0x299f90: ldurb           w16, [x25, #-1]
    //     0x299f94: ldurb           w17, [x0, #-1]
    //     0x299f98: and             x16, x17, x16, lsr #2
    //     0x299f9c: tst             x16, HEAP, lsr #32
    //     0x299fa0: b.eq            #0x299fa8
    //     0x299fa4: bl              #0x3e4848
    // 0x299fa8: StoreField: r25->field_3b = r2
    //     0x299fa8: stur            w2, [x25, #0x3b]
    // 0x299fac: ldr             x0, [fp, #0x18]
    // 0x299fb0: StoreField: r25->field_3f = r0
    //     0x299fb0: stur            w0, [x25, #0x3f]
    //     0x299fb4: ldurb           w16, [x25, #-1]
    //     0x299fb8: ldurb           w17, [x0, #-1]
    //     0x299fbc: and             x16, x17, x16, lsr #2
    //     0x299fc0: tst             x16, HEAP, lsr #32
    //     0x299fc4: b.eq            #0x299fcc
    //     0x299fc8: bl              #0x3e4848
    // 0x299fcc: StoreField: r25->field_ef = r20
    //     0x299fcc: stur            w20, [x25, #0xef]
    // 0x299fd0: ldr             x0, [fp, #0x28]
    // 0x299fd4: r1 = LoadClassIdInstr(r0)
    //     0x299fd4: ldur            x1, [x0, #-1]
    //     0x299fd8: ubfx            x1, x1, #0xc, #0x14
    // 0x299fdc: sub             x16, x1, #0x737
    // 0x299fe0: cmp             x16, #0xa
    // 0x299fe4: b.hi            #0x299ff4
    // 0x299fe8: r0 = Instance_ToolbarOptions
    //     0x299fe8: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb90] Obj!ToolbarOptions@472941
    //     0x299fec: ldr             x0, [x0, #0xb90]
    // 0x299ff0: b               #0x299ffc
    // 0x299ff4: r0 = Instance_ToolbarOptions
    //     0x299ff4: add             x0, PP, #0xd, lsl #12  ; [pp+0xdfa8] Obj!ToolbarOptions@472961
    //     0x299ff8: ldr             x0, [x0, #0xfa8]
    // 0x299ffc: StoreField: r25->field_2b = r0
    //     0x299ffc: stur            w0, [x25, #0x2b]
    //     0x29a000: ldurb           w16, [x25, #-1]
    //     0x29a004: ldurb           w17, [x0, #-1]
    //     0x29a008: and             x16, x17, x16, lsr #2
    //     0x29a00c: tst             x16, HEAP, lsr #32
    //     0x29a010: b.eq            #0x29a018
    //     0x29a014: bl              #0x3e4848
    // 0x29a018: ldr             x0, [fp, #0x58]
    // 0x29a01c: StoreField: r25->field_93 = r0
    //     0x29a01c: stur            w0, [x25, #0x93]
    //     0x29a020: ldurb           w16, [x25, #-1]
    //     0x29a024: ldurb           w17, [x0, #-1]
    //     0x29a028: and             x16, x17, x16, lsr #2
    //     0x29a02c: tst             x16, HEAP, lsr #32
    //     0x29a030: b.eq            #0x29a038
    //     0x29a034: bl              #0x3e4848
    // 0x29a038: r0 = InitLateStaticField(0xa7c) // [package:flutter/src/services/text_formatter.dart] FilteringTextInputFormatter::singleLineFormatter
    //     0x29a038: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x29a03c: ldr             x0, [x0, #0x14f8]
    //     0x29a040: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x29a044: cmp             w0, w16
    //     0x29a048: b.ne            #0x29a058
    //     0x29a04c: add             x2, PP, #0xd, lsl #12  ; [pp+0xdfb0] Field <FilteringTextInputFormatter.singleLineFormatter>: static late final (offset: 0xa7c)
    //     0x29a050: ldr             x2, [x2, #0xfb0]
    //     0x29a054: bl              #0x3e406c
    // 0x29a058: r1 = Null
    //     0x29a058: mov             x1, NULL
    // 0x29a05c: r2 = 2
    //     0x29a05c: movz            x2, #0x2
    // 0x29a060: stur            x0, [fp, #-8]
    // 0x29a064: r0 = AllocateArray()
    //     0x29a064: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x29a068: mov             x2, x0
    // 0x29a06c: ldur            x0, [fp, #-8]
    // 0x29a070: stur            x2, [fp, #-0x10]
    // 0x29a074: StoreField: r2->field_f = r0
    //     0x29a074: stur            w0, [x2, #0xf]
    // 0x29a078: r1 = <TextInputFormatter>
    //     0x29a078: add             x1, PP, #0xd, lsl #12  ; [pp+0xdd90] TypeArguments: <TextInputFormatter>
    //     0x29a07c: ldr             x1, [x1, #0xd90]
    // 0x29a080: r0 = AllocateGrowableArray()
    //     0x29a080: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x29a084: mov             x1, x0
    // 0x29a088: ldur            x0, [fp, #-0x10]
    // 0x29a08c: stur            x1, [fp, #-8]
    // 0x29a090: StoreField: r1->field_f = r0
    //     0x29a090: stur            w0, [x1, #0xf]
    // 0x29a094: r0 = 2
    //     0x29a094: movz            x0, #0x2
    // 0x29a098: StoreField: r1->field_b = r0
    //     0x29a098: stur            w0, [x1, #0xb]
    // 0x29a09c: ldr             x16, [fp, #0x70]
    // 0x29a0a0: stp             x16, x1, [SP]
    // 0x29a0a4: r0 = addAll()
    //     0x29a0a4: bl              #0x18699c  ; [dart:core] _GrowableList::addAll
    // 0x29a0a8: ldur            x0, [fp, #-8]
    // 0x29a0ac: ldr             x1, [fp, #0xc0]
    // 0x29a0b0: StoreField: r1->field_b7 = r0
    //     0x29a0b0: stur            w0, [x1, #0xb7]
    //     0x29a0b4: ldurb           w16, [x1, #-1]
    //     0x29a0b8: ldurb           w17, [x0, #-1]
    //     0x29a0bc: and             x16, x17, x16, lsr #2
    //     0x29a0c0: tst             x16, HEAP, lsr #32
    //     0x29a0c4: b.eq            #0x29a0cc
    //     0x29a0c8: bl              #0x3e4608
    // 0x29a0cc: r2 = true
    //     0x29a0cc: add             x2, NULL, #0x20  ; true
    // 0x29a0d0: StoreField: r1->field_33 = r2
    //     0x29a0d0: stur            w2, [x1, #0x33]
    // 0x29a0d4: ldr             x0, [fp, #0x68]
    // 0x29a0d8: StoreField: r1->field_7 = r0
    //     0x29a0d8: stur            w0, [x1, #7]
    //     0x29a0dc: ldurb           w16, [x1, #-1]
    //     0x29a0e0: ldurb           w17, [x0, #-1]
    //     0x29a0e4: and             x16, x17, x16, lsr #2
    //     0x29a0e8: tst             x16, HEAP, lsr #32
    //     0x29a0ec: b.eq            #0x29a0f4
    //     0x29a0f0: bl              #0x3e4608
    // 0x29a0f4: r0 = Null
    //     0x29a0f4: mov             x0, NULL
    // 0x29a0f8: LeaveFrame
    //     0x29a0f8: mov             SP, fp
    //     0x29a0fc: ldp             fp, lr, [SP], #0x10
    // 0x29a100: ret
    //     0x29a100: ret             
    // 0x29a104: r0 = StackOverflowSharedWithFPURegs()
    //     0x29a104: bl              #0x3e5d54  ; StackOverflowSharedWithFPURegsStub
    // 0x29a108: b               #0x299d24
  }
  _ createState(/* No info */) {
    // ** addr: 0x2ceab0, size: 0x48
    // 0x2ceab0: EnterFrame
    //     0x2ceab0: stp             fp, lr, [SP, #-0x10]!
    //     0x2ceab4: mov             fp, SP
    // 0x2ceab8: AllocStack(0x10)
    //     0x2ceab8: sub             SP, SP, #0x10
    // 0x2ceabc: CheckStackOverflow
    //     0x2ceabc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2ceac0: cmp             SP, x16
    //     0x2ceac4: b.ls            #0x2ceaf0
    // 0x2ceac8: r1 = <EditableText>
    //     0x2ceac8: add             x1, PP, #0xf, lsl #12  ; [pp+0xf640] TypeArguments: <EditableText>
    //     0x2ceacc: ldr             x1, [x1, #0x640]
    // 0x2cead0: r0 = EditableTextState()
    //     0x2cead0: bl              #0x2ced88  ; AllocateEditableTextStateStub -> EditableTextState (size=0xd0)
    // 0x2cead4: stur            x0, [fp, #-8]
    // 0x2cead8: str             x0, [SP]
    // 0x2ceadc: r0 = EditableTextState()
    //     0x2ceadc: bl              #0x2ceaf8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::EditableTextState
    // 0x2ceae0: ldur            x0, [fp, #-8]
    // 0x2ceae4: LeaveFrame
    //     0x2ceae4: mov             SP, fp
    //     0x2ceae8: ldp             fp, lr, [SP], #0x10
    // 0x2ceaec: ret
    //     0x2ceaec: ret             
    // 0x2ceaf0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2ceaf0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2ceaf4: b               #0x2ceac8
  }
}

// class id: 1896, size: 0x20, field offset: 0xc
class _DiscreteKeyFrameSimulation extends Simulation {

  _ isDone(/* No info */) {
    // ** addr: 0x38d8d0, size: 0x20
    // 0x38d8d0: d0 = 1.000000
    //     0x38d8d0: fmov            d0, #1.00000000
    // 0x38d8d4: d0 = 1.000000
    //     0x38d8d4: fmov            d0, #1.00000000
    // 0x38d8d8: ldr             d1, [SP]
    // 0x38d8dc: fcmp            d1, d0
    // 0x38d8e0: r16 = true
    //     0x38d8e0: add             x16, NULL, #0x20  ; true
    // 0x38d8e4: r17 = false
    //     0x38d8e4: add             x17, NULL, #0x30  ; false
    // 0x38d8e8: csel            x0, x16, x17, ge
    // 0x38d8ec: ret
    //     0x38d8ec: ret             
  }
  _ x(/* No info */) {
    // ** addr: 0x3a5f04, size: 0xe8
    // 0x3a5f04: EnterFrame
    //     0x3a5f04: stp             fp, lr, [SP, #-0x10]!
    //     0x3a5f08: mov             fp, SP
    // 0x3a5f0c: r2 = const [Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame']
    //     0x3a5f0c: ldr             x2, [PP, #0x56f8]  ; [pp+0x56f8] List<_KeyFrame>(11)
    // 0x3a5f10: ldr             x3, [fp, #0x18]
    // 0x3a5f14: LoadField: r4 = r3->field_17
    //     0x3a5f14: ldur            x4, [x3, #0x17]
    // 0x3a5f18: mov             x1, x4
    // 0x3a5f1c: r0 = 11
    //     0x3a5f1c: movz            x0, #0xb
    // 0x3a5f20: cmp             x1, x0
    // 0x3a5f24: b.hs            #0x3a5fd8
    // 0x3a5f28: ArrayLoad: r5 = r2[r4]  ; Unknown_4
    //     0x3a5f28: add             x16, x2, x4, lsl #2
    //     0x3a5f2c: ldur            w5, [x16, #0xf]
    // 0x3a5f30: DecompressPointer r5
    //     0x3a5f30: add             x5, x5, HEAP, lsl #32
    // 0x3a5f34: LoadField: d1 = r5->field_7
    //     0x3a5f34: ldur            d1, [x5, #7]
    // 0x3a5f38: ldr             x5, [fp, #0x10]
    // 0x3a5f3c: LoadField: d2 = r5->field_7
    //     0x3a5f3c: ldur            d2, [x5, #7]
    // 0x3a5f40: fcmp            d1, d2
    // 0x3a5f44: b.le            #0x3a5f50
    // 0x3a5f48: r5 = 0
    //     0x3a5f48: movz            x5, #0
    // 0x3a5f4c: b               #0x3a5f58
    // 0x3a5f50: mov             x5, x4
    // 0x3a5f54: r4 = 11
    //     0x3a5f54: movz            x4, #0xb
    // 0x3a5f58: sub             x6, x4, #1
    // 0x3a5f5c: mov             x4, x5
    // 0x3a5f60: CheckStackOverflow
    //     0x3a5f60: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3a5f64: cmp             SP, x16
    //     0x3a5f68: b.ls            #0x3a5fdc
    // 0x3a5f6c: cmp             x4, x6
    // 0x3a5f70: b.ge            #0x3a5fa8
    // 0x3a5f74: add             x5, x4, #1
    // 0x3a5f78: mov             x1, x5
    // 0x3a5f7c: r0 = 11
    //     0x3a5f7c: movz            x0, #0xb
    // 0x3a5f80: cmp             x1, x0
    // 0x3a5f84: b.hs            #0x3a5fe4
    // 0x3a5f88: ArrayLoad: r7 = r2[r5]  ; Unknown_4
    //     0x3a5f88: add             x16, x2, x5, lsl #2
    //     0x3a5f8c: ldur            w7, [x16, #0xf]
    // 0x3a5f90: DecompressPointer r7
    //     0x3a5f90: add             x7, x7, HEAP, lsl #32
    // 0x3a5f94: LoadField: d1 = r7->field_7
    //     0x3a5f94: ldur            d1, [x7, #7]
    // 0x3a5f98: fcmp            d1, d2
    // 0x3a5f9c: b.gt            #0x3a5fa8
    // 0x3a5fa0: mov             x4, x5
    // 0x3a5fa4: b               #0x3a5f60
    // 0x3a5fa8: StoreField: r3->field_17 = r4
    //     0x3a5fa8: stur            x4, [x3, #0x17]
    // 0x3a5fac: mov             x1, x4
    // 0x3a5fb0: r0 = 11
    //     0x3a5fb0: movz            x0, #0xb
    // 0x3a5fb4: cmp             x1, x0
    // 0x3a5fb8: b.hs            #0x3a5fe8
    // 0x3a5fbc: ArrayLoad: r0 = r2[r4]  ; Unknown_4
    //     0x3a5fbc: add             x16, x2, x4, lsl #2
    //     0x3a5fc0: ldur            w0, [x16, #0xf]
    // 0x3a5fc4: DecompressPointer r0
    //     0x3a5fc4: add             x0, x0, HEAP, lsl #32
    // 0x3a5fc8: LoadField: d0 = r0->field_f
    //     0x3a5fc8: ldur            d0, [x0, #0xf]
    // 0x3a5fcc: LeaveFrame
    //     0x3a5fcc: mov             SP, fp
    //     0x3a5fd0: ldp             fp, lr, [SP], #0x10
    // 0x3a5fd4: ret
    //     0x3a5fd4: ret             
    // 0x3a5fd8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x3a5fd8: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x3a5fdc: r0 = StackOverflowSharedWithFPURegs()
    //     0x3a5fdc: bl              #0x3e5d54  ; StackOverflowSharedWithFPURegsStub
    // 0x3a5fe0: b               #0x3a5f6c
    // 0x3a5fe4: r0 = RangeErrorSharedWithFPURegs()
    //     0x3a5fe4: bl              #0x3e61ac  ; RangeErrorSharedWithFPURegsStub
    // 0x3a5fe8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x3a5fe8: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
}
