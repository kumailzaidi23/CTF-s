// lib: , url: package:flutter/src/material/input_decorator.dart

// class id: 1048725, size: 0x8
class :: {
}

// class id: 521, size: 0x64, field offset: 0x60
//   transformed mixin,
abstract class __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin extends RenderBox
     with SlottedContainerRenderObjectMixin<X0, X1 bound RenderObject> {

  _ childForSlot(/* No info */) {
    // ** addr: 0x1cf26c, size: 0x60
    // 0x1cf26c: EnterFrame
    //     0x1cf26c: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf270: mov             fp, SP
    // 0x1cf274: AllocStack(0x18)
    //     0x1cf274: sub             SP, SP, #0x18
    // 0x1cf278: CheckStackOverflow
    //     0x1cf278: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf27c: cmp             SP, x16
    //     0x1cf280: b.ls            #0x1cf2c4
    // 0x1cf284: ldr             x0, [fp, #0x18]
    // 0x1cf288: LoadField: r1 = r0->field_5f
    //     0x1cf288: ldur            w1, [x0, #0x5f]
    // 0x1cf28c: DecompressPointer r1
    //     0x1cf28c: add             x1, x1, HEAP, lsl #32
    // 0x1cf290: stur            x1, [fp, #-8]
    // 0x1cf294: ldr             x16, [fp, #0x10]
    // 0x1cf298: stp             x16, x1, [SP]
    // 0x1cf29c: r0 = _getValueOrData()
    //     0x1cf29c: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x1cf2a0: ldur            x1, [fp, #-8]
    // 0x1cf2a4: LoadField: r2 = r1->field_f
    //     0x1cf2a4: ldur            w2, [x1, #0xf]
    // 0x1cf2a8: DecompressPointer r2
    //     0x1cf2a8: add             x2, x2, HEAP, lsl #32
    // 0x1cf2ac: cmp             w2, w0
    // 0x1cf2b0: b.ne            #0x1cf2b8
    // 0x1cf2b4: r0 = Null
    //     0x1cf2b4: mov             x0, NULL
    // 0x1cf2b8: LeaveFrame
    //     0x1cf2b8: mov             SP, fp
    //     0x1cf2bc: ldp             fp, lr, [SP], #0x10
    // 0x1cf2c0: ret
    //     0x1cf2c0: ret             
    // 0x1cf2c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf2c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf2c8: b               #0x1cf284
  }
  _ redepthChildren(/* No info */) {
    // ** addr: 0x226c18, size: 0x104
    // 0x226c18: EnterFrame
    //     0x226c18: stp             fp, lr, [SP, #-0x10]!
    //     0x226c1c: mov             fp, SP
    // 0x226c20: AllocStack(0x28)
    //     0x226c20: sub             SP, SP, #0x28
    // 0x226c24: CheckStackOverflow
    //     0x226c24: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x226c28: cmp             SP, x16
    //     0x226c2c: b.ls            #0x226d08
    // 0x226c30: ldr             x16, [fp, #0x10]
    // 0x226c34: str             x16, [SP]
    // 0x226c38: r0 = children()
    //     0x226c38: bl              #0x1ddff0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x226c3c: mov             x2, x0
    // 0x226c40: stur            x2, [fp, #-0x18]
    // 0x226c44: LoadField: r3 = r2->field_b
    //     0x226c44: ldur            w3, [x2, #0xb]
    // 0x226c48: DecompressPointer r3
    //     0x226c48: add             x3, x3, HEAP, lsl #32
    // 0x226c4c: stur            x3, [fp, #-0x10]
    // 0x226c50: r0 = LoadInt32Instr(r3)
    //     0x226c50: sbfx            x0, x3, #1, #0x1f
    // 0x226c54: r4 = 0
    //     0x226c54: movz            x4, #0
    // 0x226c58: stur            x4, [fp, #-8]
    // 0x226c5c: CheckStackOverflow
    //     0x226c5c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x226c60: cmp             SP, x16
    //     0x226c64: b.ls            #0x226d10
    // 0x226c68: cmp             x4, x0
    // 0x226c6c: b.ge            #0x226cdc
    // 0x226c70: mov             x1, x4
    // 0x226c74: cmp             x1, x0
    // 0x226c78: b.hs            #0x226d18
    // 0x226c7c: LoadField: r0 = r2->field_f
    //     0x226c7c: ldur            w0, [x2, #0xf]
    // 0x226c80: DecompressPointer r0
    //     0x226c80: add             x0, x0, HEAP, lsl #32
    // 0x226c84: ArrayLoad: r1 = r0[r4]  ; Unknown_4
    //     0x226c84: add             x16, x0, x4, lsl #2
    //     0x226c88: ldur            w1, [x16, #0xf]
    // 0x226c8c: DecompressPointer r1
    //     0x226c8c: add             x1, x1, HEAP, lsl #32
    // 0x226c90: ldr             x16, [fp, #0x10]
    // 0x226c94: stp             x1, x16, [SP]
    // 0x226c98: r0 = redepthChild()
    //     0x226c98: bl              #0x226864  ; [package:flutter/src/rendering/object.dart] RenderObject::redepthChild
    // 0x226c9c: ldur            x0, [fp, #-0x18]
    // 0x226ca0: LoadField: r1 = r0->field_b
    //     0x226ca0: ldur            w1, [x0, #0xb]
    // 0x226ca4: DecompressPointer r1
    //     0x226ca4: add             x1, x1, HEAP, lsl #32
    // 0x226ca8: ldur            x2, [fp, #-0x10]
    // 0x226cac: cmp             w1, w2
    // 0x226cb0: b.ne            #0x226cec
    // 0x226cb4: ldur            x3, [fp, #-8]
    // 0x226cb8: add             x4, x3, #1
    // 0x226cbc: r3 = LoadInt32Instr(r1)
    //     0x226cbc: sbfx            x3, x1, #1, #0x1f
    // 0x226cc0: mov             x16, x2
    // 0x226cc4: mov             x2, x3
    // 0x226cc8: mov             x3, x16
    // 0x226ccc: mov             x16, x0
    // 0x226cd0: mov             x0, x2
    // 0x226cd4: mov             x2, x16
    // 0x226cd8: b               #0x226c58
    // 0x226cdc: r0 = Null
    //     0x226cdc: mov             x0, NULL
    // 0x226ce0: LeaveFrame
    //     0x226ce0: mov             SP, fp
    //     0x226ce4: ldp             fp, lr, [SP], #0x10
    // 0x226ce8: ret
    //     0x226ce8: ret             
    // 0x226cec: r0 = ConcurrentModificationError()
    //     0x226cec: bl              #0x186f0c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x226cf0: mov             x1, x0
    // 0x226cf4: ldur            x0, [fp, #-0x18]
    // 0x226cf8: StoreField: r1->field_b = r0
    //     0x226cf8: stur            w0, [x1, #0xb]
    // 0x226cfc: mov             x0, x1
    // 0x226d00: r0 = Throw()
    //     0x226d00: bl              #0x3e41c8  ; ThrowStub
    // 0x226d04: brk             #0
    // 0x226d08: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x226d08: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x226d0c: b               #0x226c30
    // 0x226d10: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x226d10: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x226d14: b               #0x226c68
    // 0x226d18: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x226d18: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ visitChildren(/* No info */) {
    // ** addr: 0x32bc44, size: 0x110
    // 0x32bc44: EnterFrame
    //     0x32bc44: stp             fp, lr, [SP, #-0x10]!
    //     0x32bc48: mov             fp, SP
    // 0x32bc4c: AllocStack(0x28)
    //     0x32bc4c: sub             SP, SP, #0x28
    // 0x32bc50: CheckStackOverflow
    //     0x32bc50: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x32bc54: cmp             SP, x16
    //     0x32bc58: b.ls            #0x32bd40
    // 0x32bc5c: ldr             x16, [fp, #0x18]
    // 0x32bc60: str             x16, [SP]
    // 0x32bc64: r0 = children()
    //     0x32bc64: bl              #0x1ddff0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x32bc68: mov             x2, x0
    // 0x32bc6c: stur            x2, [fp, #-0x18]
    // 0x32bc70: LoadField: r3 = r2->field_b
    //     0x32bc70: ldur            w3, [x2, #0xb]
    // 0x32bc74: DecompressPointer r3
    //     0x32bc74: add             x3, x3, HEAP, lsl #32
    // 0x32bc78: stur            x3, [fp, #-0x10]
    // 0x32bc7c: r0 = LoadInt32Instr(r3)
    //     0x32bc7c: sbfx            x0, x3, #1, #0x1f
    // 0x32bc80: r4 = 0
    //     0x32bc80: movz            x4, #0
    // 0x32bc84: stur            x4, [fp, #-8]
    // 0x32bc88: CheckStackOverflow
    //     0x32bc88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x32bc8c: cmp             SP, x16
    //     0x32bc90: b.ls            #0x32bd48
    // 0x32bc94: cmp             x4, x0
    // 0x32bc98: b.ge            #0x32bd14
    // 0x32bc9c: mov             x1, x4
    // 0x32bca0: cmp             x1, x0
    // 0x32bca4: b.hs            #0x32bd50
    // 0x32bca8: LoadField: r0 = r2->field_f
    //     0x32bca8: ldur            w0, [x2, #0xf]
    // 0x32bcac: DecompressPointer r0
    //     0x32bcac: add             x0, x0, HEAP, lsl #32
    // 0x32bcb0: ArrayLoad: r1 = r0[r4]  ; Unknown_4
    //     0x32bcb0: add             x16, x0, x4, lsl #2
    //     0x32bcb4: ldur            w1, [x16, #0xf]
    // 0x32bcb8: DecompressPointer r1
    //     0x32bcb8: add             x1, x1, HEAP, lsl #32
    // 0x32bcbc: ldr             x16, [fp, #0x10]
    // 0x32bcc0: stp             x1, x16, [SP]
    // 0x32bcc4: ldr             x0, [fp, #0x10]
    // 0x32bcc8: ClosureCall
    //     0x32bcc8: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x32bccc: ldur            x2, [x0, #0x1f]
    //     0x32bcd0: blr             x2
    // 0x32bcd4: ldur            x0, [fp, #-0x18]
    // 0x32bcd8: LoadField: r1 = r0->field_b
    //     0x32bcd8: ldur            w1, [x0, #0xb]
    // 0x32bcdc: DecompressPointer r1
    //     0x32bcdc: add             x1, x1, HEAP, lsl #32
    // 0x32bce0: ldur            x2, [fp, #-0x10]
    // 0x32bce4: cmp             w1, w2
    // 0x32bce8: b.ne            #0x32bd24
    // 0x32bcec: ldur            x3, [fp, #-8]
    // 0x32bcf0: add             x4, x3, #1
    // 0x32bcf4: r3 = LoadInt32Instr(r1)
    //     0x32bcf4: sbfx            x3, x1, #1, #0x1f
    // 0x32bcf8: mov             x16, x2
    // 0x32bcfc: mov             x2, x3
    // 0x32bd00: mov             x3, x16
    // 0x32bd04: mov             x16, x0
    // 0x32bd08: mov             x0, x2
    // 0x32bd0c: mov             x2, x16
    // 0x32bd10: b               #0x32bc84
    // 0x32bd14: r0 = Null
    //     0x32bd14: mov             x0, NULL
    // 0x32bd18: LeaveFrame
    //     0x32bd18: mov             SP, fp
    //     0x32bd1c: ldp             fp, lr, [SP], #0x10
    // 0x32bd20: ret
    //     0x32bd20: ret             
    // 0x32bd24: r0 = ConcurrentModificationError()
    //     0x32bd24: bl              #0x186f0c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x32bd28: mov             x1, x0
    // 0x32bd2c: ldur            x0, [fp, #-0x18]
    // 0x32bd30: StoreField: r1->field_b = r0
    //     0x32bd30: stur            w0, [x1, #0xb]
    // 0x32bd34: mov             x0, x1
    // 0x32bd38: r0 = Throw()
    //     0x32bd38: bl              #0x3e41c8  ; ThrowStub
    // 0x32bd3c: brk             #0
    // 0x32bd40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x32bd40: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x32bd44: b               #0x32bc5c
    // 0x32bd48: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x32bd48: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x32bd4c: b               #0x32bc94
    // 0x32bd50: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x32bd50: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ _setChild(/* No info */) {
    // ** addr: 0x32d5b0, size: 0x12c
    // 0x32d5b0: EnterFrame
    //     0x32d5b0: stp             fp, lr, [SP, #-0x10]!
    //     0x32d5b4: mov             fp, SP
    // 0x32d5b8: AllocStack(0x20)
    //     0x32d5b8: sub             SP, SP, #0x20
    // 0x32d5bc: CheckStackOverflow
    //     0x32d5bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x32d5c0: cmp             SP, x16
    //     0x32d5c4: b.ls            #0x32d6d4
    // 0x32d5c8: ldr             x0, [fp, #0x18]
    // 0x32d5cc: r2 = Null
    //     0x32d5cc: mov             x2, NULL
    // 0x32d5d0: r1 = Null
    //     0x32d5d0: mov             x1, NULL
    // 0x32d5d4: r4 = 59
    //     0x32d5d4: movz            x4, #0x3b
    // 0x32d5d8: branchIfSmi(r0, 0x32d5e4)
    //     0x32d5d8: tbz             w0, #0, #0x32d5e4
    // 0x32d5dc: r4 = LoadClassIdInstr(r0)
    //     0x32d5dc: ldur            x4, [x0, #-1]
    //     0x32d5e0: ubfx            x4, x4, #0xc, #0x14
    // 0x32d5e4: sub             x4, x4, #0x1f0
    // 0x32d5e8: cmp             x4, #0x62
    // 0x32d5ec: b.ls            #0x32d600
    // 0x32d5f0: r8 = RenderBox?
    //     0x32d5f0: ldr             x8, [PP, #0x2df8]  ; [pp+0x2df8] Type: RenderBox?
    // 0x32d5f4: r3 = Null
    //     0x32d5f4: add             x3, PP, #0x13, lsl #12  ; [pp+0x13910] Null
    //     0x32d5f8: ldr             x3, [x3, #0x910]
    // 0x32d5fc: r0 = RenderBox?()
    //     0x32d5fc: bl              #0x1d8b14  ; IsType_RenderBox?_Stub
    // 0x32d600: ldr             x0, [fp, #0x10]
    // 0x32d604: r2 = Null
    //     0x32d604: mov             x2, NULL
    // 0x32d608: r1 = Null
    //     0x32d608: mov             x1, NULL
    // 0x32d60c: r4 = 59
    //     0x32d60c: movz            x4, #0x3b
    // 0x32d610: branchIfSmi(r0, 0x32d61c)
    //     0x32d610: tbz             w0, #0, #0x32d61c
    // 0x32d614: r4 = LoadClassIdInstr(r0)
    //     0x32d614: ldur            x4, [x0, #-1]
    //     0x32d618: ubfx            x4, x4, #0xc, #0x14
    // 0x32d61c: cmp             x4, #0x9f3
    // 0x32d620: b.eq            #0x32d638
    // 0x32d624: r8 = _DecorationSlot
    //     0x32d624: add             x8, PP, #0x13, lsl #12  ; [pp+0x138e8] Type: _DecorationSlot
    //     0x32d628: ldr             x8, [x8, #0x8e8]
    // 0x32d62c: r3 = Null
    //     0x32d62c: add             x3, PP, #0x13, lsl #12  ; [pp+0x13920] Null
    //     0x32d630: ldr             x3, [x3, #0x920]
    // 0x32d634: r0 = _DecorationSlot()
    //     0x32d634: bl              #0x1cf02c  ; IsType__DecorationSlot_Stub
    // 0x32d638: ldr             x0, [fp, #0x20]
    // 0x32d63c: LoadField: r1 = r0->field_5f
    //     0x32d63c: ldur            w1, [x0, #0x5f]
    // 0x32d640: DecompressPointer r1
    //     0x32d640: add             x1, x1, HEAP, lsl #32
    // 0x32d644: stur            x1, [fp, #-8]
    // 0x32d648: ldr             x16, [fp, #0x10]
    // 0x32d64c: stp             x16, x1, [SP]
    // 0x32d650: r0 = _getValueOrData()
    //     0x32d650: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x32d654: mov             x1, x0
    // 0x32d658: ldur            x0, [fp, #-8]
    // 0x32d65c: LoadField: r2 = r0->field_f
    //     0x32d65c: ldur            w2, [x0, #0xf]
    // 0x32d660: DecompressPointer r2
    //     0x32d660: add             x2, x2, HEAP, lsl #32
    // 0x32d664: cmp             w2, w1
    // 0x32d668: b.ne            #0x32d670
    // 0x32d66c: r1 = Null
    //     0x32d66c: mov             x1, NULL
    // 0x32d670: cmp             w1, NULL
    // 0x32d674: b.eq            #0x32d694
    // 0x32d678: ldr             x16, [fp, #0x20]
    // 0x32d67c: stp             x1, x16, [SP]
    // 0x32d680: r0 = dropChild()
    //     0x32d680: bl              #0x24d760  ; [package:flutter/src/rendering/object.dart] RenderObject::dropChild
    // 0x32d684: ldur            x16, [fp, #-8]
    // 0x32d688: ldr             lr, [fp, #0x10]
    // 0x32d68c: stp             lr, x16, [SP]
    // 0x32d690: r0 = remove()
    //     0x32d690: bl              #0x3dc32c  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::remove
    // 0x32d694: ldr             x0, [fp, #0x18]
    // 0x32d698: cmp             w0, NULL
    // 0x32d69c: b.eq            #0x32d6c4
    // 0x32d6a0: ldur            x16, [fp, #-8]
    // 0x32d6a4: ldr             lr, [fp, #0x10]
    // 0x32d6a8: stp             lr, x16, [SP, #8]
    // 0x32d6ac: str             x0, [SP]
    // 0x32d6b0: r0 = []=()
    //     0x32d6b0: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x32d6b4: ldr             x16, [fp, #0x20]
    // 0x32d6b8: ldr             lr, [fp, #0x18]
    // 0x32d6bc: stp             lr, x16, [SP]
    // 0x32d6c0: r0 = adoptChild()
    //     0x32d6c0: bl              #0x24d47c  ; [package:flutter/src/rendering/object.dart] RenderObject::adoptChild
    // 0x32d6c4: r0 = Null
    //     0x32d6c4: mov             x0, NULL
    // 0x32d6c8: LeaveFrame
    //     0x32d6c8: mov             SP, fp
    //     0x32d6cc: ldp             fp, lr, [SP], #0x10
    // 0x32d6d0: ret
    //     0x32d6d0: ret             
    // 0x32d6d4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x32d6d4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x32d6d8: b               #0x32d5c8
  }
  _ _moveChild(/* No info */) {
    // ** addr: 0x32ff5c, size: 0x170
    // 0x32ff5c: EnterFrame
    //     0x32ff5c: stp             fp, lr, [SP, #-0x10]!
    //     0x32ff60: mov             fp, SP
    // 0x32ff64: AllocStack(0x20)
    //     0x32ff64: sub             SP, SP, #0x20
    // 0x32ff68: CheckStackOverflow
    //     0x32ff68: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x32ff6c: cmp             SP, x16
    //     0x32ff70: b.ls            #0x3300c4
    // 0x32ff74: ldr             x0, [fp, #0x20]
    // 0x32ff78: r2 = Null
    //     0x32ff78: mov             x2, NULL
    // 0x32ff7c: r1 = Null
    //     0x32ff7c: mov             x1, NULL
    // 0x32ff80: r4 = 59
    //     0x32ff80: movz            x4, #0x3b
    // 0x32ff84: branchIfSmi(r0, 0x32ff90)
    //     0x32ff84: tbz             w0, #0, #0x32ff90
    // 0x32ff88: r4 = LoadClassIdInstr(r0)
    //     0x32ff88: ldur            x4, [x0, #-1]
    //     0x32ff8c: ubfx            x4, x4, #0xc, #0x14
    // 0x32ff90: sub             x4, x4, #0x1f0
    // 0x32ff94: cmp             x4, #0x62
    // 0x32ff98: b.ls            #0x32ffac
    // 0x32ff9c: r8 = RenderBox
    //     0x32ff9c: ldr             x8, [PP, #0x4ec8]  ; [pp+0x4ec8] Type: RenderBox
    // 0x32ffa0: r3 = Null
    //     0x32ffa0: add             x3, PP, #0x13, lsl #12  ; [pp+0x138d8] Null
    //     0x32ffa4: ldr             x3, [x3, #0x8d8]
    // 0x32ffa8: r0 = RenderBox()
    //     0x32ffa8: bl              #0x1ce268  ; IsType_RenderBox_Stub
    // 0x32ffac: ldr             x0, [fp, #0x18]
    // 0x32ffb0: r2 = Null
    //     0x32ffb0: mov             x2, NULL
    // 0x32ffb4: r1 = Null
    //     0x32ffb4: mov             x1, NULL
    // 0x32ffb8: r4 = 59
    //     0x32ffb8: movz            x4, #0x3b
    // 0x32ffbc: branchIfSmi(r0, 0x32ffc8)
    //     0x32ffbc: tbz             w0, #0, #0x32ffc8
    // 0x32ffc0: r4 = LoadClassIdInstr(r0)
    //     0x32ffc0: ldur            x4, [x0, #-1]
    //     0x32ffc4: ubfx            x4, x4, #0xc, #0x14
    // 0x32ffc8: cmp             x4, #0x9f3
    // 0x32ffcc: b.eq            #0x32ffe4
    // 0x32ffd0: r8 = _DecorationSlot
    //     0x32ffd0: add             x8, PP, #0x13, lsl #12  ; [pp+0x138e8] Type: _DecorationSlot
    //     0x32ffd4: ldr             x8, [x8, #0x8e8]
    // 0x32ffd8: r3 = Null
    //     0x32ffd8: add             x3, PP, #0x13, lsl #12  ; [pp+0x138f0] Null
    //     0x32ffdc: ldr             x3, [x3, #0x8f0]
    // 0x32ffe0: r0 = _DecorationSlot()
    //     0x32ffe0: bl              #0x1cf02c  ; IsType__DecorationSlot_Stub
    // 0x32ffe4: ldr             x0, [fp, #0x10]
    // 0x32ffe8: r2 = Null
    //     0x32ffe8: mov             x2, NULL
    // 0x32ffec: r1 = Null
    //     0x32ffec: mov             x1, NULL
    // 0x32fff0: r4 = 59
    //     0x32fff0: movz            x4, #0x3b
    // 0x32fff4: branchIfSmi(r0, 0x330000)
    //     0x32fff4: tbz             w0, #0, #0x330000
    // 0x32fff8: r4 = LoadClassIdInstr(r0)
    //     0x32fff8: ldur            x4, [x0, #-1]
    //     0x32fffc: ubfx            x4, x4, #0xc, #0x14
    // 0x330000: cmp             x4, #0x9f3
    // 0x330004: b.eq            #0x33001c
    // 0x330008: r8 = _DecorationSlot
    //     0x330008: add             x8, PP, #0x13, lsl #12  ; [pp+0x138e8] Type: _DecorationSlot
    //     0x33000c: ldr             x8, [x8, #0x8e8]
    // 0x330010: r3 = Null
    //     0x330010: add             x3, PP, #0x13, lsl #12  ; [pp+0x13900] Null
    //     0x330014: ldr             x3, [x3, #0x900]
    // 0x330018: r0 = _DecorationSlot()
    //     0x330018: bl              #0x1cf02c  ; IsType__DecorationSlot_Stub
    // 0x33001c: ldr             x0, [fp, #0x28]
    // 0x330020: LoadField: r1 = r0->field_5f
    //     0x330020: ldur            w1, [x0, #0x5f]
    // 0x330024: DecompressPointer r1
    //     0x330024: add             x1, x1, HEAP, lsl #32
    // 0x330028: stur            x1, [fp, #-8]
    // 0x33002c: ldr             x16, [fp, #0x10]
    // 0x330030: stp             x16, x1, [SP]
    // 0x330034: r0 = _getValueOrData()
    //     0x330034: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x330038: mov             x1, x0
    // 0x33003c: ldur            x0, [fp, #-8]
    // 0x330040: LoadField: r2 = r0->field_f
    //     0x330040: ldur            w2, [x0, #0xf]
    // 0x330044: DecompressPointer r2
    //     0x330044: add             x2, x2, HEAP, lsl #32
    // 0x330048: cmp             w2, w1
    // 0x33004c: b.ne            #0x330058
    // 0x330050: r0 = Null
    //     0x330050: mov             x0, NULL
    // 0x330054: b               #0x33005c
    // 0x330058: mov             x0, x1
    // 0x33005c: r1 = 59
    //     0x33005c: movz            x1, #0x3b
    // 0x330060: branchIfSmi(r0, 0x33006c)
    //     0x330060: tbz             w0, #0, #0x33006c
    // 0x330064: r1 = LoadClassIdInstr(r0)
    //     0x330064: ldur            x1, [x0, #-1]
    //     0x330068: ubfx            x1, x1, #0xc, #0x14
    // 0x33006c: ldr             x16, [fp, #0x20]
    // 0x330070: stp             x16, x0, [SP]
    // 0x330074: mov             x0, x1
    // 0x330078: mov             lr, x0
    // 0x33007c: ldr             lr, [x21, lr, lsl #3]
    // 0x330080: blr             lr
    // 0x330084: tbnz            w0, #4, #0x33009c
    // 0x330088: ldr             x16, [fp, #0x28]
    // 0x33008c: stp             NULL, x16, [SP, #8]
    // 0x330090: ldr             x16, [fp, #0x10]
    // 0x330094: str             x16, [SP]
    // 0x330098: r0 = _setChild()
    //     0x330098: bl              #0x32d5b0  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::_setChild
    // 0x33009c: ldr             x16, [fp, #0x28]
    // 0x3300a0: ldr             lr, [fp, #0x20]
    // 0x3300a4: stp             lr, x16, [SP, #8]
    // 0x3300a8: ldr             x16, [fp, #0x18]
    // 0x3300ac: str             x16, [SP]
    // 0x3300b0: r0 = _setChild()
    //     0x3300b0: bl              #0x32d5b0  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::_setChild
    // 0x3300b4: r0 = Null
    //     0x3300b4: mov             x0, NULL
    // 0x3300b8: LeaveFrame
    //     0x3300b8: mov             SP, fp
    //     0x3300bc: ldp             fp, lr, [SP], #0x10
    // 0x3300c0: ret
    //     0x3300c0: ret             
    // 0x3300c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3300c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3300c8: b               #0x32ff74
  }
  _ attach(/* No info */) {
    // ** addr: 0x339ab8, size: 0x15c
    // 0x339ab8: EnterFrame
    //     0x339ab8: stp             fp, lr, [SP, #-0x10]!
    //     0x339abc: mov             fp, SP
    // 0x339ac0: AllocStack(0x38)
    //     0x339ac0: sub             SP, SP, #0x38
    // 0x339ac4: CheckStackOverflow
    //     0x339ac4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x339ac8: cmp             SP, x16
    //     0x339acc: b.ls            #0x339c00
    // 0x339ad0: ldr             x16, [fp, #0x18]
    // 0x339ad4: ldr             lr, [fp, #0x10]
    // 0x339ad8: stp             lr, x16, [SP]
    // 0x339adc: r0 = attach()
    //     0x339adc: bl              #0x33b398  ; [package:flutter/src/rendering/object.dart] RenderObject::attach
    // 0x339ae0: ldr             x16, [fp, #0x18]
    // 0x339ae4: str             x16, [SP]
    // 0x339ae8: r0 = children()
    //     0x339ae8: bl              #0x1ddff0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x339aec: stur            x0, [fp, #-8]
    // 0x339af0: LoadField: r3 = r0->field_7
    //     0x339af0: ldur            w3, [x0, #7]
    // 0x339af4: DecompressPointer r3
    //     0x339af4: add             x3, x3, HEAP, lsl #32
    // 0x339af8: stur            x3, [fp, #-0x28]
    // 0x339afc: LoadField: r1 = r0->field_b
    //     0x339afc: ldur            w1, [x0, #0xb]
    // 0x339b00: DecompressPointer r1
    //     0x339b00: add             x1, x1, HEAP, lsl #32
    // 0x339b04: r4 = LoadInt32Instr(r1)
    //     0x339b04: sbfx            x4, x1, #1, #0x1f
    // 0x339b08: stur            x4, [fp, #-0x20]
    // 0x339b0c: r2 = 0
    //     0x339b0c: movz            x2, #0
    // 0x339b10: CheckStackOverflow
    //     0x339b10: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x339b14: cmp             SP, x16
    //     0x339b18: b.ls            #0x339c08
    // 0x339b1c: LoadField: r1 = r0->field_b
    //     0x339b1c: ldur            w1, [x0, #0xb]
    // 0x339b20: DecompressPointer r1
    //     0x339b20: add             x1, x1, HEAP, lsl #32
    // 0x339b24: r5 = LoadInt32Instr(r1)
    //     0x339b24: sbfx            x5, x1, #1, #0x1f
    // 0x339b28: cmp             x4, x5
    // 0x339b2c: b.ne            #0x339bec
    // 0x339b30: mov             x6, x0
    // 0x339b34: cmp             x2, x5
    // 0x339b38: b.lt            #0x339b4c
    // 0x339b3c: r0 = Null
    //     0x339b3c: mov             x0, NULL
    // 0x339b40: LeaveFrame
    //     0x339b40: mov             SP, fp
    //     0x339b44: ldp             fp, lr, [SP], #0x10
    // 0x339b48: ret
    //     0x339b48: ret             
    // 0x339b4c: mov             x0, x5
    // 0x339b50: mov             x1, x2
    // 0x339b54: cmp             x1, x0
    // 0x339b58: b.hs            #0x339c10
    // 0x339b5c: LoadField: r0 = r6->field_f
    //     0x339b5c: ldur            w0, [x6, #0xf]
    // 0x339b60: DecompressPointer r0
    //     0x339b60: add             x0, x0, HEAP, lsl #32
    // 0x339b64: ArrayLoad: r5 = r0[r2]  ; Unknown_4
    //     0x339b64: add             x16, x0, x2, lsl #2
    //     0x339b68: ldur            w5, [x16, #0xf]
    // 0x339b6c: DecompressPointer r5
    //     0x339b6c: add             x5, x5, HEAP, lsl #32
    // 0x339b70: stur            x5, [fp, #-0x18]
    // 0x339b74: add             x7, x2, #1
    // 0x339b78: stur            x7, [fp, #-0x10]
    // 0x339b7c: cmp             w5, NULL
    // 0x339b80: b.ne            #0x339bb4
    // 0x339b84: mov             x0, x5
    // 0x339b88: mov             x2, x3
    // 0x339b8c: r1 = Null
    //     0x339b8c: mov             x1, NULL
    // 0x339b90: cmp             w2, NULL
    // 0x339b94: b.eq            #0x339bb4
    // 0x339b98: LoadField: r4 = r2->field_17
    //     0x339b98: ldur            w4, [x2, #0x17]
    // 0x339b9c: DecompressPointer r4
    //     0x339b9c: add             x4, x4, HEAP, lsl #32
    // 0x339ba0: r8 = X0
    //     0x339ba0: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x339ba4: LoadField: r9 = r4->field_7
    //     0x339ba4: ldur            x9, [x4, #7]
    // 0x339ba8: r3 = Null
    //     0x339ba8: add             x3, PP, #0x14, lsl #12  ; [pp+0x143f0] Null
    //     0x339bac: ldr             x3, [x3, #0x3f0]
    // 0x339bb0: blr             x9
    // 0x339bb4: ldur            x0, [fp, #-0x18]
    // 0x339bb8: r1 = LoadClassIdInstr(r0)
    //     0x339bb8: ldur            x1, [x0, #-1]
    //     0x339bbc: ubfx            x1, x1, #0xc, #0x14
    // 0x339bc0: ldr             x16, [fp, #0x10]
    // 0x339bc4: stp             x16, x0, [SP]
    // 0x339bc8: mov             x0, x1
    // 0x339bcc: r0 = GDT[cid_x0 + 0x9f9]()
    //     0x339bcc: add             lr, x0, #0x9f9
    //     0x339bd0: ldr             lr, [x21, lr, lsl #3]
    //     0x339bd4: blr             lr
    // 0x339bd8: ldur            x2, [fp, #-0x10]
    // 0x339bdc: ldur            x0, [fp, #-8]
    // 0x339be0: ldur            x3, [fp, #-0x28]
    // 0x339be4: ldur            x4, [fp, #-0x20]
    // 0x339be8: b               #0x339b10
    // 0x339bec: r0 = ConcurrentModificationError()
    //     0x339bec: bl              #0x186f0c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x339bf0: ldur            x6, [fp, #-8]
    // 0x339bf4: StoreField: r0->field_b = r6
    //     0x339bf4: stur            w6, [x0, #0xb]
    // 0x339bf8: r0 = Throw()
    //     0x339bf8: bl              #0x3e41c8  ; ThrowStub
    // 0x339bfc: brk             #0
    // 0x339c00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x339c00: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x339c04: b               #0x339ad0
    // 0x339c08: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x339c08: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x339c0c: b               #0x339b1c
    // 0x339c10: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x339c10: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ detach(/* No info */) {
    // ** addr: 0x33bd84, size: 0x154
    // 0x33bd84: EnterFrame
    //     0x33bd84: stp             fp, lr, [SP, #-0x10]!
    //     0x33bd88: mov             fp, SP
    // 0x33bd8c: AllocStack(0x30)
    //     0x33bd8c: sub             SP, SP, #0x30
    // 0x33bd90: CheckStackOverflow
    //     0x33bd90: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x33bd94: cmp             SP, x16
    //     0x33bd98: b.ls            #0x33bec4
    // 0x33bd9c: ldr             x16, [fp, #0x10]
    // 0x33bda0: str             x16, [SP]
    // 0x33bda4: r0 = detach()
    //     0x33bda4: bl              #0x33c818  ; [package:flutter/src/rendering/object.dart] RenderObject::detach
    // 0x33bda8: ldr             x16, [fp, #0x10]
    // 0x33bdac: str             x16, [SP]
    // 0x33bdb0: r0 = children()
    //     0x33bdb0: bl              #0x1ddff0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x33bdb4: stur            x0, [fp, #-8]
    // 0x33bdb8: LoadField: r3 = r0->field_7
    //     0x33bdb8: ldur            w3, [x0, #7]
    // 0x33bdbc: DecompressPointer r3
    //     0x33bdbc: add             x3, x3, HEAP, lsl #32
    // 0x33bdc0: stur            x3, [fp, #-0x28]
    // 0x33bdc4: LoadField: r1 = r0->field_b
    //     0x33bdc4: ldur            w1, [x0, #0xb]
    // 0x33bdc8: DecompressPointer r1
    //     0x33bdc8: add             x1, x1, HEAP, lsl #32
    // 0x33bdcc: r4 = LoadInt32Instr(r1)
    //     0x33bdcc: sbfx            x4, x1, #1, #0x1f
    // 0x33bdd0: stur            x4, [fp, #-0x20]
    // 0x33bdd4: r2 = 0
    //     0x33bdd4: movz            x2, #0
    // 0x33bdd8: CheckStackOverflow
    //     0x33bdd8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x33bddc: cmp             SP, x16
    //     0x33bde0: b.ls            #0x33becc
    // 0x33bde4: LoadField: r1 = r0->field_b
    //     0x33bde4: ldur            w1, [x0, #0xb]
    // 0x33bde8: DecompressPointer r1
    //     0x33bde8: add             x1, x1, HEAP, lsl #32
    // 0x33bdec: r5 = LoadInt32Instr(r1)
    //     0x33bdec: sbfx            x5, x1, #1, #0x1f
    // 0x33bdf0: cmp             x4, x5
    // 0x33bdf4: b.ne            #0x33beb0
    // 0x33bdf8: mov             x6, x0
    // 0x33bdfc: cmp             x2, x5
    // 0x33be00: b.lt            #0x33be14
    // 0x33be04: r0 = Null
    //     0x33be04: mov             x0, NULL
    // 0x33be08: LeaveFrame
    //     0x33be08: mov             SP, fp
    //     0x33be0c: ldp             fp, lr, [SP], #0x10
    // 0x33be10: ret
    //     0x33be10: ret             
    // 0x33be14: mov             x0, x5
    // 0x33be18: mov             x1, x2
    // 0x33be1c: cmp             x1, x0
    // 0x33be20: b.hs            #0x33bed4
    // 0x33be24: LoadField: r0 = r6->field_f
    //     0x33be24: ldur            w0, [x6, #0xf]
    // 0x33be28: DecompressPointer r0
    //     0x33be28: add             x0, x0, HEAP, lsl #32
    // 0x33be2c: ArrayLoad: r5 = r0[r2]  ; Unknown_4
    //     0x33be2c: add             x16, x0, x2, lsl #2
    //     0x33be30: ldur            w5, [x16, #0xf]
    // 0x33be34: DecompressPointer r5
    //     0x33be34: add             x5, x5, HEAP, lsl #32
    // 0x33be38: stur            x5, [fp, #-0x18]
    // 0x33be3c: add             x7, x2, #1
    // 0x33be40: stur            x7, [fp, #-0x10]
    // 0x33be44: cmp             w5, NULL
    // 0x33be48: b.ne            #0x33be7c
    // 0x33be4c: mov             x0, x5
    // 0x33be50: mov             x2, x3
    // 0x33be54: r1 = Null
    //     0x33be54: mov             x1, NULL
    // 0x33be58: cmp             w2, NULL
    // 0x33be5c: b.eq            #0x33be7c
    // 0x33be60: LoadField: r4 = r2->field_17
    //     0x33be60: ldur            w4, [x2, #0x17]
    // 0x33be64: DecompressPointer r4
    //     0x33be64: add             x4, x4, HEAP, lsl #32
    // 0x33be68: r8 = X0
    //     0x33be68: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x33be6c: LoadField: r9 = r4->field_7
    //     0x33be6c: ldur            x9, [x4, #7]
    // 0x33be70: r3 = Null
    //     0x33be70: add             x3, PP, #0x14, lsl #12  ; [pp+0x143e0] Null
    //     0x33be74: ldr             x3, [x3, #0x3e0]
    // 0x33be78: blr             x9
    // 0x33be7c: ldur            x0, [fp, #-0x18]
    // 0x33be80: r1 = LoadClassIdInstr(r0)
    //     0x33be80: ldur            x1, [x0, #-1]
    //     0x33be84: ubfx            x1, x1, #0xc, #0x14
    // 0x33be88: str             x0, [SP]
    // 0x33be8c: mov             x0, x1
    // 0x33be90: r0 = GDT[cid_x0 + 0x98d]()
    //     0x33be90: add             lr, x0, #0x98d
    //     0x33be94: ldr             lr, [x21, lr, lsl #3]
    //     0x33be98: blr             lr
    // 0x33be9c: ldur            x2, [fp, #-0x10]
    // 0x33bea0: ldur            x0, [fp, #-8]
    // 0x33bea4: ldur            x3, [fp, #-0x28]
    // 0x33bea8: ldur            x4, [fp, #-0x20]
    // 0x33beac: b               #0x33bdd8
    // 0x33beb0: r0 = ConcurrentModificationError()
    //     0x33beb0: bl              #0x186f0c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x33beb4: ldur            x6, [fp, #-8]
    // 0x33beb8: StoreField: r0->field_b = r6
    //     0x33beb8: stur            w6, [x0, #0xb]
    // 0x33bebc: r0 = Throw()
    //     0x33bebc: bl              #0x3e41c8  ; ThrowStub
    // 0x33bec0: brk             #0
    // 0x33bec4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x33bec4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x33bec8: b               #0x33bd9c
    // 0x33becc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x33becc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x33bed0: b               #0x33bde4
    // 0x33bed4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x33bed4: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
}

// class id: 522, size: 0x84, field offset: 0x64
class _RenderDecoration extends __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin {

  _ computeMinIntrinsicWidth(/* No info */) {
    // ** addr: 0x1ceda4, size: 0x248
    // 0x1ceda4: EnterFrame
    //     0x1ceda4: stp             fp, lr, [SP, #-0x10]!
    //     0x1ceda8: mov             fp, SP
    // 0x1cedac: AllocStack(0x28)
    //     0x1cedac: sub             SP, SP, #0x28
    // 0x1cedb0: CheckStackOverflow
    //     0x1cedb0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cedb4: cmp             SP, x16
    //     0x1cedb8: b.ls            #0x1cefd4
    // 0x1cedbc: ldr             x16, [fp, #0x18]
    // 0x1cedc0: r30 = Instance__DecorationSlot
    //     0x1cedc0: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x1cedc4: ldr             lr, [lr, #0x388]
    // 0x1cedc8: stp             lr, x16, [SP]
    // 0x1cedcc: r0 = childForSlot()
    //     0x1cedcc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cedd0: mov             x1, x0
    // 0x1cedd4: ldr             x0, [fp, #0x10]
    // 0x1cedd8: LoadField: d0 = r0->field_7
    //     0x1cedd8: ldur            d0, [x0, #7]
    // 0x1ceddc: stur            d0, [fp, #-8]
    // 0x1cede0: str             x1, [SP, #8]
    // 0x1cede4: str             d0, [SP]
    // 0x1cede8: r0 = _minWidth()
    //     0x1cede8: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1cedec: ldr             x0, [fp, #0x18]
    // 0x1cedf0: LoadField: r1 = r0->field_63
    //     0x1cedf0: ldur            w1, [x0, #0x63]
    // 0x1cedf4: DecompressPointer r1
    //     0x1cedf4: add             x1, x1, HEAP, lsl #32
    // 0x1cedf8: LoadField: r2 = r1->field_7
    //     0x1cedf8: ldur            w2, [x1, #7]
    // 0x1cedfc: DecompressPointer r2
    //     0x1cedfc: add             x2, x2, HEAP, lsl #32
    // 0x1cee00: LoadField: d1 = r2->field_7
    //     0x1cee00: ldur            d1, [x2, #7]
    // 0x1cee04: fadd            d2, d0, d1
    // 0x1cee08: stur            d2, [fp, #-0x10]
    // 0x1cee0c: r16 = Instance__DecorationSlot
    //     0x1cee0c: add             x16, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1cee10: ldr             x16, [x16, #0x398]
    // 0x1cee14: stp             x16, x0, [SP]
    // 0x1cee18: r0 = childForSlot()
    //     0x1cee18: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cee1c: str             x0, [SP, #8]
    // 0x1cee20: ldur            d0, [fp, #-8]
    // 0x1cee24: str             d0, [SP]
    // 0x1cee28: r0 = _minWidth()
    //     0x1cee28: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1cee2c: mov             v1.16b, v0.16b
    // 0x1cee30: ldur            d0, [fp, #-0x10]
    // 0x1cee34: fadd            d2, d0, d1
    // 0x1cee38: stur            d2, [fp, #-0x18]
    // 0x1cee3c: ldr             x16, [fp, #0x18]
    // 0x1cee40: r30 = Instance__DecorationSlot
    //     0x1cee40: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x1cee44: ldr             lr, [lr, #0x3a8]
    // 0x1cee48: stp             lr, x16, [SP]
    // 0x1cee4c: r0 = childForSlot()
    //     0x1cee4c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cee50: str             x0, [SP, #8]
    // 0x1cee54: ldur            d0, [fp, #-8]
    // 0x1cee58: str             d0, [SP]
    // 0x1cee5c: r0 = _minWidth()
    //     0x1cee5c: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1cee60: mov             v1.16b, v0.16b
    // 0x1cee64: ldur            d0, [fp, #-0x18]
    // 0x1cee68: fadd            d2, d0, d1
    // 0x1cee6c: stur            d2, [fp, #-0x10]
    // 0x1cee70: ldr             x16, [fp, #0x18]
    // 0x1cee74: r30 = Instance__DecorationSlot
    //     0x1cee74: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x1cee78: ldr             lr, [lr, #0x390]
    // 0x1cee7c: stp             lr, x16, [SP]
    // 0x1cee80: r0 = childForSlot()
    //     0x1cee80: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cee84: str             x0, [SP, #8]
    // 0x1cee88: ldur            d0, [fp, #-8]
    // 0x1cee8c: str             d0, [SP]
    // 0x1cee90: r0 = _minWidth()
    //     0x1cee90: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1cee94: stur            d0, [fp, #-0x18]
    // 0x1cee98: ldr             x16, [fp, #0x18]
    // 0x1cee9c: r30 = Instance__DecorationSlot
    //     0x1cee9c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x1ceea0: ldr             lr, [lr, #0x3c0]
    // 0x1ceea4: stp             lr, x16, [SP]
    // 0x1ceea8: r0 = childForSlot()
    //     0x1ceea8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1ceeac: str             x0, [SP, #8]
    // 0x1ceeb0: ldur            d0, [fp, #-8]
    // 0x1ceeb4: str             d0, [SP]
    // 0x1ceeb8: r0 = _minWidth()
    //     0x1ceeb8: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1ceebc: mov             v1.16b, v0.16b
    // 0x1ceec0: ldur            d0, [fp, #-0x18]
    // 0x1ceec4: fcmp            d0, d1
    // 0x1ceec8: b.le            #0x1ceed4
    // 0x1ceecc: mov             v2.16b, v0.16b
    // 0x1ceed0: b               #0x1cef10
    // 0x1ceed4: fcmp            d1, d0
    // 0x1ceed8: b.le            #0x1ceee4
    // 0x1ceedc: mov             v2.16b, v1.16b
    // 0x1ceee0: b               #0x1cef10
    // 0x1ceee4: d2 = 0.000000
    //     0x1ceee4: eor             v2.16b, v2.16b, v2.16b
    // 0x1ceee8: d2 = 0.000000
    //     0x1ceee8: eor             v2.16b, v2.16b, v2.16b
    // 0x1ceeec: fcmp            d0, d2
    // 0x1ceef0: b.ne            #0x1ceefc
    // 0x1ceef4: fadd            d2, d0, d1
    // 0x1ceef8: b               #0x1cef10
    // 0x1ceefc: fcmp            d1, d1
    // 0x1cef00: b.vc            #0x1cef0c
    // 0x1cef04: mov             v2.16b, v1.16b
    // 0x1cef08: b               #0x1cef10
    // 0x1cef0c: mov             v2.16b, v0.16b
    // 0x1cef10: ldr             x0, [fp, #0x18]
    // 0x1cef14: ldur            d1, [fp, #-0x10]
    // 0x1cef18: ldur            d0, [fp, #-8]
    // 0x1cef1c: fadd            d3, d1, d2
    // 0x1cef20: stur            d3, [fp, #-0x18]
    // 0x1cef24: r16 = Instance__DecorationSlot
    //     0x1cef24: add             x16, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x1cef28: ldr             x16, [x16, #0x3b0]
    // 0x1cef2c: stp             x16, x0, [SP]
    // 0x1cef30: r0 = childForSlot()
    //     0x1cef30: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cef34: str             x0, [SP, #8]
    // 0x1cef38: ldur            d0, [fp, #-8]
    // 0x1cef3c: str             d0, [SP]
    // 0x1cef40: r0 = _minWidth()
    //     0x1cef40: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1cef44: mov             v1.16b, v0.16b
    // 0x1cef48: ldur            d0, [fp, #-0x18]
    // 0x1cef4c: fadd            d2, d0, d1
    // 0x1cef50: stur            d2, [fp, #-0x10]
    // 0x1cef54: ldr             x16, [fp, #0x18]
    // 0x1cef58: r30 = Instance__DecorationSlot
    //     0x1cef58: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x1cef5c: ldr             lr, [lr, #0x3a0]
    // 0x1cef60: stp             lr, x16, [SP]
    // 0x1cef64: r0 = childForSlot()
    //     0x1cef64: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cef68: str             x0, [SP, #8]
    // 0x1cef6c: ldur            d0, [fp, #-8]
    // 0x1cef70: str             d0, [SP]
    // 0x1cef74: r0 = _minWidth()
    //     0x1cef74: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1cef78: mov             v1.16b, v0.16b
    // 0x1cef7c: ldur            d0, [fp, #-0x10]
    // 0x1cef80: fadd            d2, d0, d1
    // 0x1cef84: ldr             x1, [fp, #0x18]
    // 0x1cef88: LoadField: r2 = r1->field_63
    //     0x1cef88: ldur            w2, [x1, #0x63]
    // 0x1cef8c: DecompressPointer r2
    //     0x1cef8c: add             x2, x2, HEAP, lsl #32
    // 0x1cef90: LoadField: r1 = r2->field_7
    //     0x1cef90: ldur            w1, [x2, #7]
    // 0x1cef94: DecompressPointer r1
    //     0x1cef94: add             x1, x1, HEAP, lsl #32
    // 0x1cef98: LoadField: d0 = r1->field_17
    //     0x1cef98: ldur            d0, [x1, #0x17]
    // 0x1cef9c: fadd            d1, d2, d0
    // 0x1cefa0: r0 = inline_Allocate_Double()
    //     0x1cefa0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1cefa4: add             x0, x0, #0x10
    //     0x1cefa8: cmp             x1, x0
    //     0x1cefac: b.ls            #0x1cefdc
    //     0x1cefb0: str             x0, [THR, #0x50]  ; THR::top
    //     0x1cefb4: sub             x0, x0, #0xf
    //     0x1cefb8: movz            x1, #0xd148
    //     0x1cefbc: movk            x1, #0x3, lsl #16
    //     0x1cefc0: stur            x1, [x0, #-1]
    // 0x1cefc4: StoreField: r0->field_7 = d1
    //     0x1cefc4: stur            d1, [x0, #7]
    // 0x1cefc8: LeaveFrame
    //     0x1cefc8: mov             SP, fp
    //     0x1cefcc: ldp             fp, lr, [SP], #0x10
    // 0x1cefd0: ret
    //     0x1cefd0: ret             
    // 0x1cefd4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cefd4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cefd8: b               #0x1cedbc
    // 0x1cefdc: SaveReg d1
    //     0x1cefdc: str             q1, [SP, #-0x10]!
    // 0x1cefe0: r0 = AllocateDouble()
    //     0x1cefe0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1cefe4: RestoreReg d1
    //     0x1cefe4: ldr             q1, [SP], #0x10
    // 0x1cefe8: b               #0x1cefc4
  }
  get _ suffixIcon(/* No info */) {
    // ** addr: 0x1cefec, size: 0x40
    // 0x1cefec: EnterFrame
    //     0x1cefec: stp             fp, lr, [SP, #-0x10]!
    //     0x1ceff0: mov             fp, SP
    // 0x1ceff4: AllocStack(0x10)
    //     0x1ceff4: sub             SP, SP, #0x10
    // 0x1ceff8: CheckStackOverflow
    //     0x1ceff8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1ceffc: cmp             SP, x16
    //     0x1cf000: b.ls            #0x1cf024
    // 0x1cf004: ldr             x16, [fp, #0x10]
    // 0x1cf008: r30 = Instance__DecorationSlot
    //     0x1cf008: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x1cf00c: ldr             lr, [lr, #0x3a0]
    // 0x1cf010: stp             lr, x16, [SP]
    // 0x1cf014: r0 = childForSlot()
    //     0x1cf014: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cf018: LeaveFrame
    //     0x1cf018: mov             SP, fp
    //     0x1cf01c: ldp             fp, lr, [SP], #0x10
    // 0x1cf020: ret
    //     0x1cf020: ret             
    // 0x1cf024: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf024: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf028: b               #0x1cf004
  }
  get _ suffix(/* No info */) {
    // ** addr: 0x1cf04c, size: 0x40
    // 0x1cf04c: EnterFrame
    //     0x1cf04c: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf050: mov             fp, SP
    // 0x1cf054: AllocStack(0x10)
    //     0x1cf054: sub             SP, SP, #0x10
    // 0x1cf058: CheckStackOverflow
    //     0x1cf058: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf05c: cmp             SP, x16
    //     0x1cf060: b.ls            #0x1cf084
    // 0x1cf064: ldr             x16, [fp, #0x10]
    // 0x1cf068: r30 = Instance__DecorationSlot
    //     0x1cf068: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x1cf06c: ldr             lr, [lr, #0x3b0]
    // 0x1cf070: stp             lr, x16, [SP]
    // 0x1cf074: r0 = childForSlot()
    //     0x1cf074: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cf078: LeaveFrame
    //     0x1cf078: mov             SP, fp
    //     0x1cf07c: ldp             fp, lr, [SP], #0x10
    // 0x1cf080: ret
    //     0x1cf080: ret             
    // 0x1cf084: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf084: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf088: b               #0x1cf064
  }
  get _ hint(/* No info */) {
    // ** addr: 0x1cf08c, size: 0x40
    // 0x1cf08c: EnterFrame
    //     0x1cf08c: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf090: mov             fp, SP
    // 0x1cf094: AllocStack(0x10)
    //     0x1cf094: sub             SP, SP, #0x10
    // 0x1cf098: CheckStackOverflow
    //     0x1cf098: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf09c: cmp             SP, x16
    //     0x1cf0a0: b.ls            #0x1cf0c4
    // 0x1cf0a4: ldr             x16, [fp, #0x10]
    // 0x1cf0a8: r30 = Instance__DecorationSlot
    //     0x1cf0a8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x1cf0ac: ldr             lr, [lr, #0x3c0]
    // 0x1cf0b0: stp             lr, x16, [SP]
    // 0x1cf0b4: r0 = childForSlot()
    //     0x1cf0b4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cf0b8: LeaveFrame
    //     0x1cf0b8: mov             SP, fp
    //     0x1cf0bc: ldp             fp, lr, [SP], #0x10
    // 0x1cf0c0: ret
    //     0x1cf0c0: ret             
    // 0x1cf0c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf0c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf0c8: b               #0x1cf0a4
  }
  get _ input(/* No info */) {
    // ** addr: 0x1cf0cc, size: 0x40
    // 0x1cf0cc: EnterFrame
    //     0x1cf0cc: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf0d0: mov             fp, SP
    // 0x1cf0d4: AllocStack(0x10)
    //     0x1cf0d4: sub             SP, SP, #0x10
    // 0x1cf0d8: CheckStackOverflow
    //     0x1cf0d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf0dc: cmp             SP, x16
    //     0x1cf0e0: b.ls            #0x1cf104
    // 0x1cf0e4: ldr             x16, [fp, #0x10]
    // 0x1cf0e8: r30 = Instance__DecorationSlot
    //     0x1cf0e8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x1cf0ec: ldr             lr, [lr, #0x390]
    // 0x1cf0f0: stp             lr, x16, [SP]
    // 0x1cf0f4: r0 = childForSlot()
    //     0x1cf0f4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cf0f8: LeaveFrame
    //     0x1cf0f8: mov             SP, fp
    //     0x1cf0fc: ldp             fp, lr, [SP], #0x10
    // 0x1cf100: ret
    //     0x1cf100: ret             
    // 0x1cf104: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf104: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf108: b               #0x1cf0e4
  }
  get _ prefix(/* No info */) {
    // ** addr: 0x1cf10c, size: 0x40
    // 0x1cf10c: EnterFrame
    //     0x1cf10c: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf110: mov             fp, SP
    // 0x1cf114: AllocStack(0x10)
    //     0x1cf114: sub             SP, SP, #0x10
    // 0x1cf118: CheckStackOverflow
    //     0x1cf118: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf11c: cmp             SP, x16
    //     0x1cf120: b.ls            #0x1cf144
    // 0x1cf124: ldr             x16, [fp, #0x10]
    // 0x1cf128: r30 = Instance__DecorationSlot
    //     0x1cf128: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x1cf12c: ldr             lr, [lr, #0x3a8]
    // 0x1cf130: stp             lr, x16, [SP]
    // 0x1cf134: r0 = childForSlot()
    //     0x1cf134: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cf138: LeaveFrame
    //     0x1cf138: mov             SP, fp
    //     0x1cf13c: ldp             fp, lr, [SP], #0x10
    // 0x1cf140: ret
    //     0x1cf140: ret             
    // 0x1cf144: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf144: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf148: b               #0x1cf124
  }
  get _ prefixIcon(/* No info */) {
    // ** addr: 0x1cf14c, size: 0x40
    // 0x1cf14c: EnterFrame
    //     0x1cf14c: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf150: mov             fp, SP
    // 0x1cf154: AllocStack(0x10)
    //     0x1cf154: sub             SP, SP, #0x10
    // 0x1cf158: CheckStackOverflow
    //     0x1cf158: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf15c: cmp             SP, x16
    //     0x1cf160: b.ls            #0x1cf184
    // 0x1cf164: ldr             x16, [fp, #0x10]
    // 0x1cf168: r30 = Instance__DecorationSlot
    //     0x1cf168: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1cf16c: ldr             lr, [lr, #0x398]
    // 0x1cf170: stp             lr, x16, [SP]
    // 0x1cf174: r0 = childForSlot()
    //     0x1cf174: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cf178: LeaveFrame
    //     0x1cf178: mov             SP, fp
    //     0x1cf17c: ldp             fp, lr, [SP], #0x10
    // 0x1cf180: ret
    //     0x1cf180: ret             
    // 0x1cf184: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf184: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf188: b               #0x1cf164
  }
  get _ icon(/* No info */) {
    // ** addr: 0x1cf18c, size: 0x40
    // 0x1cf18c: EnterFrame
    //     0x1cf18c: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf190: mov             fp, SP
    // 0x1cf194: AllocStack(0x10)
    //     0x1cf194: sub             SP, SP, #0x10
    // 0x1cf198: CheckStackOverflow
    //     0x1cf198: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf19c: cmp             SP, x16
    //     0x1cf1a0: b.ls            #0x1cf1c4
    // 0x1cf1a4: ldr             x16, [fp, #0x10]
    // 0x1cf1a8: r30 = Instance__DecorationSlot
    //     0x1cf1a8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x1cf1ac: ldr             lr, [lr, #0x388]
    // 0x1cf1b0: stp             lr, x16, [SP]
    // 0x1cf1b4: r0 = childForSlot()
    //     0x1cf1b4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1cf1b8: LeaveFrame
    //     0x1cf1b8: mov             SP, fp
    //     0x1cf1bc: ldp             fp, lr, [SP], #0x10
    // 0x1cf1c0: ret
    //     0x1cf1c0: ret             
    // 0x1cf1c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf1c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf1c8: b               #0x1cf1a4
  }
  [closure] double computeMinIntrinsicWidth(dynamic, double) {
    // ** addr: 0x1cf1cc, size: 0x4c
    // 0x1cf1cc: EnterFrame
    //     0x1cf1cc: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf1d0: mov             fp, SP
    // 0x1cf1d4: AllocStack(0x10)
    //     0x1cf1d4: sub             SP, SP, #0x10
    // 0x1cf1d8: SetupParameters()
    //     0x1cf1d8: ldr             x0, [fp, #0x18]
    //     0x1cf1dc: ldur            w1, [x0, #0x17]
    //     0x1cf1e0: add             x1, x1, HEAP, lsl #32
    // 0x1cf1e4: CheckStackOverflow
    //     0x1cf1e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf1e8: cmp             SP, x16
    //     0x1cf1ec: b.ls            #0x1cf210
    // 0x1cf1f0: LoadField: r0 = r1->field_f
    //     0x1cf1f0: ldur            w0, [x1, #0xf]
    // 0x1cf1f4: DecompressPointer r0
    //     0x1cf1f4: add             x0, x0, HEAP, lsl #32
    // 0x1cf1f8: ldr             x16, [fp, #0x10]
    // 0x1cf1fc: stp             x16, x0, [SP]
    // 0x1cf200: r0 = computeMinIntrinsicWidth()
    //     0x1cf200: bl              #0x1ceda4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicWidth
    // 0x1cf204: LeaveFrame
    //     0x1cf204: mov             SP, fp
    //     0x1cf208: ldp             fp, lr, [SP], #0x10
    // 0x1cf20c: ret
    //     0x1cf20c: ret             
    // 0x1cf210: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf210: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf214: b               #0x1cf1f0
  }
  static _ _minWidth(/* No info */) {
    // ** addr: 0x1cf218, size: 0x54
    // 0x1cf218: EnterFrame
    //     0x1cf218: stp             fp, lr, [SP, #-0x10]!
    //     0x1cf21c: mov             fp, SP
    // 0x1cf220: AllocStack(0x10)
    //     0x1cf220: sub             SP, SP, #0x10
    // 0x1cf224: CheckStackOverflow
    //     0x1cf224: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1cf228: cmp             SP, x16
    //     0x1cf22c: b.ls            #0x1cf264
    // 0x1cf230: ldr             x0, [fp, #0x18]
    // 0x1cf234: cmp             w0, NULL
    // 0x1cf238: b.ne            #0x1cf248
    // 0x1cf23c: d0 = 0.000000
    //     0x1cf23c: eor             v0.16b, v0.16b, v0.16b
    // 0x1cf240: d0 = 0.000000
    //     0x1cf240: eor             v0.16b, v0.16b, v0.16b
    // 0x1cf244: b               #0x1cf258
    // 0x1cf248: ldr             d0, [fp, #0x10]
    // 0x1cf24c: str             x0, [SP, #8]
    // 0x1cf250: str             d0, [SP]
    // 0x1cf254: r0 = getMinIntrinsicWidth()
    //     0x1cf254: bl              #0x1ce28c  ; [package:flutter/src/rendering/box.dart] RenderBox::getMinIntrinsicWidth
    // 0x1cf258: LeaveFrame
    //     0x1cf258: mov             SP, fp
    //     0x1cf25c: ldp             fp, lr, [SP], #0x10
    // 0x1cf260: ret
    //     0x1cf260: ret             
    // 0x1cf264: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1cf264: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1cf268: b               #0x1cf230
  }
  dynamic computeMaxIntrinsicHeight(dynamic) {
    // ** addr: 0x1d4c00, size: 0x18
    // 0x1d4c00: r4 = 0
    //     0x1d4c00: movz            x4, #0
    // 0x1d4c04: r1 = Function 'computeMaxIntrinsicHeight':.
    //     0x1d4c04: add             x17, PP, #0x14, lsl #12  ; [pp+0x14dc0] AnonymousClosure: (0x1d4c18), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMaxIntrinsicHeight (0x1e7004)
    //     0x1d4c08: ldr             x1, [x17, #0xdc0]
    // 0x1d4c0c: r24 = BuildNonGenericMethodExtractorStub
    //     0x1d4c0c: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x1d4c10: LoadField: r0 = r24->field_17
    //     0x1d4c10: ldur            x0, [x24, #0x17]
    // 0x1d4c14: br              x0
  }
  [closure] double computeMaxIntrinsicHeight(dynamic, double) {
    // ** addr: 0x1d4c18, size: 0x4c
    // 0x1d4c18: EnterFrame
    //     0x1d4c18: stp             fp, lr, [SP, #-0x10]!
    //     0x1d4c1c: mov             fp, SP
    // 0x1d4c20: AllocStack(0x10)
    //     0x1d4c20: sub             SP, SP, #0x10
    // 0x1d4c24: SetupParameters()
    //     0x1d4c24: ldr             x0, [fp, #0x18]
    //     0x1d4c28: ldur            w1, [x0, #0x17]
    //     0x1d4c2c: add             x1, x1, HEAP, lsl #32
    // 0x1d4c30: CheckStackOverflow
    //     0x1d4c30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d4c34: cmp             SP, x16
    //     0x1d4c38: b.ls            #0x1d4c5c
    // 0x1d4c3c: LoadField: r0 = r1->field_f
    //     0x1d4c3c: ldur            w0, [x1, #0xf]
    // 0x1d4c40: DecompressPointer r0
    //     0x1d4c40: add             x0, x0, HEAP, lsl #32
    // 0x1d4c44: ldr             x16, [fp, #0x10]
    // 0x1d4c48: stp             x16, x0, [SP]
    // 0x1d4c4c: r0 = computeMinIntrinsicHeight()
    //     0x1d4c4c: bl              #0x1d7c4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight
    // 0x1d4c50: LeaveFrame
    //     0x1d4c50: mov             SP, fp
    //     0x1d4c54: ldp             fp, lr, [SP], #0x10
    // 0x1d4c58: ret
    //     0x1d4c58: ret             
    // 0x1d4c5c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d4c5c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d4c60: b               #0x1d4c3c
  }
  _ computeMinIntrinsicHeight(/* No info */) {
    // ** addr: 0x1d7c4c, size: 0x8f8
    // 0x1d7c4c: EnterFrame
    //     0x1d7c4c: stp             fp, lr, [SP, #-0x10]!
    //     0x1d7c50: mov             fp, SP
    // 0x1d7c54: AllocStack(0x80)
    //     0x1d7c54: sub             SP, SP, #0x80
    // 0x1d7c58: CheckStackOverflow
    //     0x1d7c58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d7c5c: cmp             SP, x16
    //     0x1d7c60: b.ls            #0x1d847c
    // 0x1d7c64: ldr             x16, [fp, #0x18]
    // 0x1d7c68: r30 = Instance__DecorationSlot
    //     0x1d7c68: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x1d7c6c: ldr             lr, [lr, #0x388]
    // 0x1d7c70: stp             lr, x16, [SP]
    // 0x1d7c74: r0 = childForSlot()
    //     0x1d7c74: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7c78: mov             x1, x0
    // 0x1d7c7c: ldr             x0, [fp, #0x10]
    // 0x1d7c80: LoadField: d0 = r0->field_7
    //     0x1d7c80: ldur            d0, [x0, #7]
    // 0x1d7c84: stur            d0, [fp, #-0x20]
    // 0x1d7c88: str             x1, [SP, #8]
    // 0x1d7c8c: str             d0, [SP]
    // 0x1d7c90: r0 = _minHeight()
    //     0x1d7c90: bl              #0x1d8ac0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x1d7c94: stur            d0, [fp, #-0x28]
    // 0x1d7c98: ldr             x16, [fp, #0x18]
    // 0x1d7c9c: r30 = Instance__DecorationSlot
    //     0x1d7c9c: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x1d7ca0: ldr             lr, [lr, #0x388]
    // 0x1d7ca4: stp             lr, x16, [SP]
    // 0x1d7ca8: r0 = childForSlot()
    //     0x1d7ca8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7cac: str             x0, [SP, #8]
    // 0x1d7cb0: ldur            d0, [fp, #-0x28]
    // 0x1d7cb4: str             d0, [SP]
    // 0x1d7cb8: r0 = _minWidth()
    //     0x1d7cb8: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1d7cbc: mov             v1.16b, v0.16b
    // 0x1d7cc0: ldur            d0, [fp, #-0x20]
    // 0x1d7cc4: fsub            d2, d0, d1
    // 0x1d7cc8: d0 = 0.000000
    //     0x1d7cc8: eor             v0.16b, v0.16b, v0.16b
    // 0x1d7ccc: d0 = 0.000000
    //     0x1d7ccc: eor             v0.16b, v0.16b, v0.16b
    // 0x1d7cd0: fcmp            d2, d0
    // 0x1d7cd4: b.le            #0x1d7ce0
    // 0x1d7cd8: mov             v1.16b, v2.16b
    // 0x1d7cdc: b               #0x1d7d08
    // 0x1d7ce0: fcmp            d0, d2
    // 0x1d7ce4: b.le            #0x1d7cf4
    // 0x1d7ce8: d1 = 0.000000
    //     0x1d7ce8: eor             v1.16b, v1.16b, v1.16b
    // 0x1d7cec: d1 = 0.000000
    //     0x1d7cec: eor             v1.16b, v1.16b, v1.16b
    // 0x1d7cf0: b               #0x1d7d08
    // 0x1d7cf4: fcmp            d2, d0
    // 0x1d7cf8: b.ne            #0x1d7d04
    // 0x1d7cfc: fadd            d1, d2, d0
    // 0x1d7d00: b               #0x1d7d08
    // 0x1d7d04: mov             v1.16b, v2.16b
    // 0x1d7d08: ldr             x0, [fp, #0x18]
    // 0x1d7d0c: stur            d1, [fp, #-0x20]
    // 0x1d7d10: r16 = Instance__DecorationSlot
    //     0x1d7d10: add             x16, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1d7d14: ldr             x16, [x16, #0x398]
    // 0x1d7d18: stp             x16, x0, [SP]
    // 0x1d7d1c: r0 = childForSlot()
    //     0x1d7d1c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7d20: str             x0, [SP, #8]
    // 0x1d7d24: ldur            d0, [fp, #-0x20]
    // 0x1d7d28: str             d0, [SP]
    // 0x1d7d2c: r0 = _minHeight()
    //     0x1d7d2c: bl              #0x1d8ac0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x1d7d30: stur            d0, [fp, #-0x30]
    // 0x1d7d34: ldr             x16, [fp, #0x18]
    // 0x1d7d38: r30 = Instance__DecorationSlot
    //     0x1d7d38: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1d7d3c: ldr             lr, [lr, #0x398]
    // 0x1d7d40: stp             lr, x16, [SP]
    // 0x1d7d44: r0 = childForSlot()
    //     0x1d7d44: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7d48: str             x0, [SP, #8]
    // 0x1d7d4c: ldur            d0, [fp, #-0x30]
    // 0x1d7d50: str             d0, [SP]
    // 0x1d7d54: r0 = _minWidth()
    //     0x1d7d54: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1d7d58: stur            d0, [fp, #-0x38]
    // 0x1d7d5c: ldr             x16, [fp, #0x18]
    // 0x1d7d60: r30 = Instance__DecorationSlot
    //     0x1d7d60: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x1d7d64: ldr             lr, [lr, #0x3a0]
    // 0x1d7d68: stp             lr, x16, [SP]
    // 0x1d7d6c: r0 = childForSlot()
    //     0x1d7d6c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7d70: str             x0, [SP, #8]
    // 0x1d7d74: ldur            d0, [fp, #-0x20]
    // 0x1d7d78: str             d0, [SP]
    // 0x1d7d7c: r0 = _minHeight()
    //     0x1d7d7c: bl              #0x1d8ac0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x1d7d80: stur            d0, [fp, #-0x40]
    // 0x1d7d84: ldr             x16, [fp, #0x18]
    // 0x1d7d88: r30 = Instance__DecorationSlot
    //     0x1d7d88: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x1d7d8c: ldr             lr, [lr, #0x3a0]
    // 0x1d7d90: stp             lr, x16, [SP]
    // 0x1d7d94: r0 = childForSlot()
    //     0x1d7d94: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7d98: str             x0, [SP, #8]
    // 0x1d7d9c: ldur            d0, [fp, #-0x40]
    // 0x1d7da0: str             d0, [SP]
    // 0x1d7da4: r0 = _minWidth()
    //     0x1d7da4: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1d7da8: ldr             x0, [fp, #0x18]
    // 0x1d7dac: stur            d0, [fp, #-0x48]
    // 0x1d7db0: LoadField: r1 = r0->field_63
    //     0x1d7db0: ldur            w1, [x0, #0x63]
    // 0x1d7db4: DecompressPointer r1
    //     0x1d7db4: add             x1, x1, HEAP, lsl #32
    // 0x1d7db8: LoadField: r2 = r1->field_7
    //     0x1d7db8: ldur            w2, [x1, #7]
    // 0x1d7dbc: DecompressPointer r2
    //     0x1d7dbc: add             x2, x2, HEAP, lsl #32
    // 0x1d7dc0: LoadField: d1 = r2->field_7
    //     0x1d7dc0: ldur            d1, [x2, #7]
    // 0x1d7dc4: LoadField: d2 = r2->field_17
    //     0x1d7dc4: ldur            d2, [x2, #0x17]
    // 0x1d7dc8: fadd            d3, d1, d2
    // 0x1d7dcc: d1 = 0.000000
    //     0x1d7dcc: eor             v1.16b, v1.16b, v1.16b
    // 0x1d7dd0: d1 = 0.000000
    //     0x1d7dd0: eor             v1.16b, v1.16b, v1.16b
    // 0x1d7dd4: fadd            d2, d3, d1
    // 0x1d7dd8: fadd            d3, d2, d1
    // 0x1d7ddc: ldur            d2, [fp, #-0x20]
    // 0x1d7de0: fsub            d4, d2, d3
    // 0x1d7de4: fcmp            d4, d1
    // 0x1d7de8: b.le            #0x1d7df4
    // 0x1d7dec: mov             v2.16b, v4.16b
    // 0x1d7df0: b               #0x1d7e1c
    // 0x1d7df4: fcmp            d1, d4
    // 0x1d7df8: b.le            #0x1d7e08
    // 0x1d7dfc: d2 = 0.000000
    //     0x1d7dfc: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7e00: d2 = 0.000000
    //     0x1d7e00: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7e04: b               #0x1d7e1c
    // 0x1d7e08: fcmp            d4, d1
    // 0x1d7e0c: b.ne            #0x1d7e18
    // 0x1d7e10: fadd            d2, d4, d1
    // 0x1d7e14: b               #0x1d7e1c
    // 0x1d7e18: mov             v2.16b, v4.16b
    // 0x1d7e1c: stur            d2, [fp, #-0x20]
    // 0x1d7e20: r16 = Instance__DecorationSlot
    //     0x1d7e20: add             x16, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x1d7e24: ldr             x16, [x16, #0x3d0]
    // 0x1d7e28: stp             x16, x0, [SP]
    // 0x1d7e2c: r0 = childForSlot()
    //     0x1d7e2c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7e30: str             x0, [SP, #8]
    // 0x1d7e34: ldur            d0, [fp, #-0x20]
    // 0x1d7e38: str             d0, [SP]
    // 0x1d7e3c: r0 = _minHeight()
    //     0x1d7e3c: bl              #0x1d8ac0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x1d7e40: stur            d0, [fp, #-0x50]
    // 0x1d7e44: ldr             x16, [fp, #0x18]
    // 0x1d7e48: r30 = Instance__DecorationSlot
    //     0x1d7e48: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x1d7e4c: ldr             lr, [lr, #0x3d0]
    // 0x1d7e50: stp             lr, x16, [SP]
    // 0x1d7e54: r0 = childForSlot()
    //     0x1d7e54: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7e58: str             x0, [SP, #8]
    // 0x1d7e5c: ldur            d0, [fp, #-0x50]
    // 0x1d7e60: str             d0, [SP]
    // 0x1d7e64: r0 = _minWidth()
    //     0x1d7e64: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1d7e68: mov             v1.16b, v0.16b
    // 0x1d7e6c: ldur            d0, [fp, #-0x20]
    // 0x1d7e70: fsub            d2, d0, d1
    // 0x1d7e74: d1 = 0.000000
    //     0x1d7e74: eor             v1.16b, v1.16b, v1.16b
    // 0x1d7e78: d1 = 0.000000
    //     0x1d7e78: eor             v1.16b, v1.16b, v1.16b
    // 0x1d7e7c: fcmp            d2, d1
    // 0x1d7e80: b.le            #0x1d7e8c
    // 0x1d7e84: mov             v3.16b, v2.16b
    // 0x1d7e88: b               #0x1d7eb4
    // 0x1d7e8c: fcmp            d1, d2
    // 0x1d7e90: b.le            #0x1d7ea0
    // 0x1d7e94: d3 = 0.000000
    //     0x1d7e94: eor             v3.16b, v3.16b, v3.16b
    // 0x1d7e98: d3 = 0.000000
    //     0x1d7e98: eor             v3.16b, v3.16b, v3.16b
    // 0x1d7e9c: b               #0x1d7eb4
    // 0x1d7ea0: fcmp            d2, d1
    // 0x1d7ea4: b.ne            #0x1d7eb0
    // 0x1d7ea8: fadd            d3, d2, d1
    // 0x1d7eac: b               #0x1d7eb4
    // 0x1d7eb0: mov             v3.16b, v2.16b
    // 0x1d7eb4: ldur            d2, [fp, #-0x50]
    // 0x1d7eb8: stur            d3, [fp, #-0x58]
    // 0x1d7ebc: ldr             x16, [fp, #0x18]
    // 0x1d7ec0: r30 = Instance__DecorationSlot
    //     0x1d7ec0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x1d7ec4: ldr             lr, [lr, #0x3c8]
    // 0x1d7ec8: stp             lr, x16, [SP]
    // 0x1d7ecc: r0 = childForSlot()
    //     0x1d7ecc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7ed0: str             x0, [SP, #8]
    // 0x1d7ed4: ldur            d0, [fp, #-0x58]
    // 0x1d7ed8: str             d0, [SP]
    // 0x1d7edc: r0 = _minHeight()
    //     0x1d7edc: bl              #0x1d8ac0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x1d7ee0: mov             v1.16b, v0.16b
    // 0x1d7ee4: ldur            d0, [fp, #-0x50]
    // 0x1d7ee8: fcmp            d0, d1
    // 0x1d7eec: b.le            #0x1d7efc
    // 0x1d7ef0: d2 = 0.000000
    //     0x1d7ef0: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7ef4: d2 = 0.000000
    //     0x1d7ef4: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7ef8: b               #0x1d7f3c
    // 0x1d7efc: fcmp            d1, d0
    // 0x1d7f00: b.le            #0x1d7f14
    // 0x1d7f04: mov             v0.16b, v1.16b
    // 0x1d7f08: d2 = 0.000000
    //     0x1d7f08: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7f0c: d2 = 0.000000
    //     0x1d7f0c: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7f10: b               #0x1d7f3c
    // 0x1d7f14: d2 = 0.000000
    //     0x1d7f14: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7f18: d2 = 0.000000
    //     0x1d7f18: eor             v2.16b, v2.16b, v2.16b
    // 0x1d7f1c: fcmp            d0, d2
    // 0x1d7f20: b.ne            #0x1d7f30
    // 0x1d7f24: fadd            d3, d0, d1
    // 0x1d7f28: mov             v0.16b, v3.16b
    // 0x1d7f2c: b               #0x1d7f3c
    // 0x1d7f30: fcmp            d1, d1
    // 0x1d7f34: b.vc            #0x1d7f3c
    // 0x1d7f38: mov             v0.16b, v1.16b
    // 0x1d7f3c: fcmp            d0, d2
    // 0x1d7f40: b.le            #0x1d7f58
    // 0x1d7f44: d1 = 8.000000
    //     0x1d7f44: fmov            d1, #8.00000000
    // 0x1d7f48: d1 = 8.000000
    //     0x1d7f48: fmov            d1, #8.00000000
    // 0x1d7f4c: fadd            d3, d0, d1
    // 0x1d7f50: mov             v4.16b, v3.16b
    // 0x1d7f54: b               #0x1d7f5c
    // 0x1d7f58: mov             v4.16b, v0.16b
    // 0x1d7f5c: ldur            d3, [fp, #-0x38]
    // 0x1d7f60: ldur            d1, [fp, #-0x48]
    // 0x1d7f64: ldur            d0, [fp, #-0x20]
    // 0x1d7f68: stur            d4, [fp, #-0x50]
    // 0x1d7f6c: ldr             x16, [fp, #0x18]
    // 0x1d7f70: r30 = Instance__DecorationSlot
    //     0x1d7f70: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x1d7f74: ldr             lr, [lr, #0x3a8]
    // 0x1d7f78: stp             lr, x16, [SP]
    // 0x1d7f7c: r0 = childForSlot()
    //     0x1d7f7c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7f80: str             x0, [SP, #8]
    // 0x1d7f84: ldur            d0, [fp, #-0x20]
    // 0x1d7f88: str             d0, [SP]
    // 0x1d7f8c: r0 = _minHeight()
    //     0x1d7f8c: bl              #0x1d8ac0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x1d7f90: stur            d0, [fp, #-0x58]
    // 0x1d7f94: ldr             x16, [fp, #0x18]
    // 0x1d7f98: r30 = Instance__DecorationSlot
    //     0x1d7f98: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x1d7f9c: ldr             lr, [lr, #0x3a8]
    // 0x1d7fa0: stp             lr, x16, [SP]
    // 0x1d7fa4: r0 = childForSlot()
    //     0x1d7fa4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7fa8: str             x0, [SP, #8]
    // 0x1d7fac: ldur            d0, [fp, #-0x58]
    // 0x1d7fb0: str             d0, [SP]
    // 0x1d7fb4: r0 = _minWidth()
    //     0x1d7fb4: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1d7fb8: stur            d0, [fp, #-0x60]
    // 0x1d7fbc: ldr             x16, [fp, #0x18]
    // 0x1d7fc0: r30 = Instance__DecorationSlot
    //     0x1d7fc0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x1d7fc4: ldr             lr, [lr, #0x3b0]
    // 0x1d7fc8: stp             lr, x16, [SP]
    // 0x1d7fcc: r0 = childForSlot()
    //     0x1d7fcc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7fd0: str             x0, [SP, #8]
    // 0x1d7fd4: ldur            d0, [fp, #-0x20]
    // 0x1d7fd8: str             d0, [SP]
    // 0x1d7fdc: r0 = _minHeight()
    //     0x1d7fdc: bl              #0x1d8ac0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x1d7fe0: stur            d0, [fp, #-0x68]
    // 0x1d7fe4: ldr             x16, [fp, #0x18]
    // 0x1d7fe8: r30 = Instance__DecorationSlot
    //     0x1d7fe8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x1d7fec: ldr             lr, [lr, #0x3b0]
    // 0x1d7ff0: stp             lr, x16, [SP]
    // 0x1d7ff4: r0 = childForSlot()
    //     0x1d7ff4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d7ff8: str             x0, [SP, #8]
    // 0x1d7ffc: ldur            d0, [fp, #-0x68]
    // 0x1d8000: str             d0, [SP]
    // 0x1d8004: r0 = _minWidth()
    //     0x1d8004: bl              #0x1cf218  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x1d8008: mov             v2.16b, v0.16b
    // 0x1d800c: ldur            d1, [fp, #-0x60]
    // 0x1d8010: ldur            d0, [fp, #-0x20]
    // 0x1d8014: fsub            d3, d0, d1
    // 0x1d8018: fsub            d0, d3, d2
    // 0x1d801c: ldur            d1, [fp, #-0x38]
    // 0x1d8020: fsub            d2, d0, d1
    // 0x1d8024: ldur            d0, [fp, #-0x48]
    // 0x1d8028: fsub            d1, d2, d0
    // 0x1d802c: d0 = 0.000000
    //     0x1d802c: eor             v0.16b, v0.16b, v0.16b
    // 0x1d8030: d0 = 0.000000
    //     0x1d8030: eor             v0.16b, v0.16b, v0.16b
    // 0x1d8034: fcmp            d1, d0
    // 0x1d8038: b.le            #0x1d8044
    // 0x1d803c: mov             v3.16b, v1.16b
    // 0x1d8040: b               #0x1d8070
    // 0x1d8044: fcmp            d0, d1
    // 0x1d8048: b.le            #0x1d8058
    // 0x1d804c: d3 = 0.000000
    //     0x1d804c: eor             v3.16b, v3.16b, v3.16b
    // 0x1d8050: d3 = 0.000000
    //     0x1d8050: eor             v3.16b, v3.16b, v3.16b
    // 0x1d8054: b               #0x1d8070
    // 0x1d8058: fcmp            d1, d0
    // 0x1d805c: b.ne            #0x1d806c
    // 0x1d8060: fadd            d2, d1, d0
    // 0x1d8064: mov             v3.16b, v2.16b
    // 0x1d8068: b               #0x1d8070
    // 0x1d806c: mov             v3.16b, v1.16b
    // 0x1d8070: ldr             x0, [fp, #0x18]
    // 0x1d8074: ldur            d2, [fp, #-0x58]
    // 0x1d8078: ldur            d1, [fp, #-0x68]
    // 0x1d807c: stur            d3, [fp, #-0x20]
    // 0x1d8080: r16 = Instance__DecorationSlot
    //     0x1d8080: add             x16, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x1d8084: ldr             x16, [x16, #0x390]
    // 0x1d8088: stp             x16, x0, [SP]
    // 0x1d808c: r0 = childForSlot()
    //     0x1d808c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d8090: stur            x0, [fp, #-8]
    // 0x1d8094: ldr             x16, [fp, #0x18]
    // 0x1d8098: r30 = Instance__DecorationSlot
    //     0x1d8098: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x1d809c: ldr             lr, [lr, #0x3c0]
    // 0x1d80a0: stp             lr, x16, [SP]
    // 0x1d80a4: r0 = childForSlot()
    //     0x1d80a4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d80a8: r1 = Null
    //     0x1d80a8: mov             x1, NULL
    // 0x1d80ac: r2 = 4
    //     0x1d80ac: movz            x2, #0x4
    // 0x1d80b0: stur            x0, [fp, #-0x10]
    // 0x1d80b4: r0 = AllocateArray()
    //     0x1d80b4: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x1d80b8: mov             x2, x0
    // 0x1d80bc: ldur            x0, [fp, #-8]
    // 0x1d80c0: stur            x2, [fp, #-0x18]
    // 0x1d80c4: StoreField: r2->field_f = r0
    //     0x1d80c4: stur            w0, [x2, #0xf]
    // 0x1d80c8: ldur            x0, [fp, #-0x10]
    // 0x1d80cc: StoreField: r2->field_13 = r0
    //     0x1d80cc: stur            w0, [x2, #0x13]
    // 0x1d80d0: r1 = <RenderBox?>
    //     0x1d80d0: add             x1, PP, #0x14, lsl #12  ; [pp+0x14dc8] TypeArguments: <RenderBox?>
    //     0x1d80d4: ldr             x1, [x1, #0xdc8]
    // 0x1d80d8: r0 = AllocateGrowableArray()
    //     0x1d80d8: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x1d80dc: mov             x1, x0
    // 0x1d80e0: ldur            x0, [fp, #-0x18]
    // 0x1d80e4: StoreField: r1->field_f = r0
    //     0x1d80e4: stur            w0, [x1, #0xf]
    // 0x1d80e8: r0 = 4
    //     0x1d80e8: movz            x0, #0x4
    // 0x1d80ec: StoreField: r1->field_b = r0
    //     0x1d80ec: stur            w0, [x1, #0xb]
    // 0x1d80f0: ldr             x16, [fp, #0x18]
    // 0x1d80f4: str             x16, [SP, #0x10]
    // 0x1d80f8: ldur            d0, [fp, #-0x20]
    // 0x1d80fc: str             d0, [SP, #8]
    // 0x1d8100: str             x1, [SP]
    // 0x1d8104: r0 = _lineHeight()
    //     0x1d8104: bl              #0x1d8824  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_lineHeight
    // 0x1d8108: r0 = inline_Allocate_Double()
    //     0x1d8108: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d810c: add             x0, x0, #0x10
    //     0x1d8110: cmp             x1, x0
    //     0x1d8114: b.ls            #0x1d8484
    //     0x1d8118: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d811c: sub             x0, x0, #0xf
    //     0x1d8120: movz            x1, #0xd148
    //     0x1d8124: movk            x1, #0x3, lsl #16
    //     0x1d8128: stur            x1, [x0, #-1]
    // 0x1d812c: StoreField: r0->field_7 = d0
    //     0x1d812c: stur            d0, [x0, #7]
    // 0x1d8130: stur            x0, [fp, #-8]
    // 0x1d8134: r1 = Null
    //     0x1d8134: mov             x1, NULL
    // 0x1d8138: r2 = 6
    //     0x1d8138: movz            x2, #0x6
    // 0x1d813c: r0 = AllocateArray()
    //     0x1d813c: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x1d8140: mov             x2, x0
    // 0x1d8144: ldur            x0, [fp, #-8]
    // 0x1d8148: stur            x2, [fp, #-0x10]
    // 0x1d814c: StoreField: r2->field_f = r0
    //     0x1d814c: stur            w0, [x2, #0xf]
    // 0x1d8150: ldur            d0, [fp, #-0x58]
    // 0x1d8154: r0 = inline_Allocate_Double()
    //     0x1d8154: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d8158: add             x0, x0, #0x10
    //     0x1d815c: cmp             x1, x0
    //     0x1d8160: b.ls            #0x1d8494
    //     0x1d8164: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d8168: sub             x0, x0, #0xf
    //     0x1d816c: movz            x1, #0xd148
    //     0x1d8170: movk            x1, #0x3, lsl #16
    //     0x1d8174: stur            x1, [x0, #-1]
    // 0x1d8178: StoreField: r0->field_7 = d0
    //     0x1d8178: stur            d0, [x0, #7]
    // 0x1d817c: StoreField: r2->field_13 = r0
    //     0x1d817c: stur            w0, [x2, #0x13]
    // 0x1d8180: ldur            d0, [fp, #-0x68]
    // 0x1d8184: r0 = inline_Allocate_Double()
    //     0x1d8184: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d8188: add             x0, x0, #0x10
    //     0x1d818c: cmp             x1, x0
    //     0x1d8190: b.ls            #0x1d84ac
    //     0x1d8194: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d8198: sub             x0, x0, #0xf
    //     0x1d819c: movz            x1, #0xd148
    //     0x1d81a0: movk            x1, #0x3, lsl #16
    //     0x1d81a4: stur            x1, [x0, #-1]
    // 0x1d81a8: StoreField: r0->field_7 = d0
    //     0x1d81a8: stur            d0, [x0, #7]
    // 0x1d81ac: StoreField: r2->field_17 = r0
    //     0x1d81ac: stur            w0, [x2, #0x17]
    // 0x1d81b0: r1 = <double>
    //     0x1d81b0: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x1d81b4: r0 = AllocateGrowableArray()
    //     0x1d81b4: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x1d81b8: mov             x1, x0
    // 0x1d81bc: ldur            x0, [fp, #-0x10]
    // 0x1d81c0: StoreField: r1->field_f = r0
    //     0x1d81c0: stur            w0, [x1, #0xf]
    // 0x1d81c4: r0 = 6
    //     0x1d81c4: movz            x0, #0x6
    // 0x1d81c8: StoreField: r1->field_b = r0
    //     0x1d81c8: stur            w0, [x1, #0xb]
    // 0x1d81cc: r16 = Closure: (double, double) => double from Function 'max': static.
    //     0x1d81cc: add             x16, PP, #0x14, lsl #12  ; [pp+0x14dd0] Closure: (double, double) => double from Function 'max': static. (0x7f7674dd310c)
    //     0x1d81d0: ldr             x16, [x16, #0xdd0]
    // 0x1d81d4: stp             x16, x1, [SP]
    // 0x1d81d8: r0 = reduce()
    //     0x1d81d8: bl              #0x1d86b8  ; [dart:collection] ListBase::reduce
    // 0x1d81dc: mov             x1, x0
    // 0x1d81e0: ldr             x0, [fp, #0x18]
    // 0x1d81e4: stur            x1, [fp, #-8]
    // 0x1d81e8: LoadField: r2 = r0->field_63
    //     0x1d81e8: ldur            w2, [x0, #0x63]
    // 0x1d81ec: DecompressPointer r2
    //     0x1d81ec: add             x2, x2, HEAP, lsl #32
    // 0x1d81f0: LoadField: r3 = r2->field_33
    //     0x1d81f0: ldur            w3, [x2, #0x33]
    // 0x1d81f4: DecompressPointer r3
    //     0x1d81f4: add             x3, x3, HEAP, lsl #32
    // 0x1d81f8: str             x3, [SP]
    // 0x1d81fc: r0 = baseSizeAdjustment()
    //     0x1d81fc: bl              #0x1d8650  ; [package:flutter/src/material/theme_data.dart] VisualDensity::baseSizeAdjustment
    // 0x1d8200: mov             x1, x0
    // 0x1d8204: ldr             x0, [fp, #0x18]
    // 0x1d8208: stur            x1, [fp, #-0x10]
    // 0x1d820c: LoadField: r2 = r0->field_63
    //     0x1d820c: ldur            w2, [x0, #0x63]
    // 0x1d8210: DecompressPointer r2
    //     0x1d8210: add             x2, x2, HEAP, lsl #32
    // 0x1d8214: LoadField: r3 = r2->field_7
    //     0x1d8214: ldur            w3, [x2, #7]
    // 0x1d8218: DecompressPointer r3
    //     0x1d8218: add             x3, x3, HEAP, lsl #32
    // 0x1d821c: LoadField: d0 = r3->field_f
    //     0x1d821c: ldur            d0, [x3, #0xf]
    // 0x1d8220: stur            d0, [fp, #-0x20]
    // 0x1d8224: r16 = Instance__DecorationSlot
    //     0x1d8224: add             x16, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1d8228: ldr             x16, [x16, #0x3b8]
    // 0x1d822c: stp             x16, x0, [SP]
    // 0x1d8230: r0 = childForSlot()
    //     0x1d8230: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d8234: cmp             w0, NULL
    // 0x1d8238: b.ne            #0x1d824c
    // 0x1d823c: ldr             x0, [fp, #0x18]
    // 0x1d8240: d4 = 0.000000
    //     0x1d8240: eor             v4.16b, v4.16b, v4.16b
    // 0x1d8244: d4 = 0.000000
    //     0x1d8244: eor             v4.16b, v4.16b, v4.16b
    // 0x1d8248: b               #0x1d8260
    // 0x1d824c: ldr             x0, [fp, #0x18]
    // 0x1d8250: LoadField: r1 = r0->field_63
    //     0x1d8250: ldur            w1, [x0, #0x63]
    // 0x1d8254: DecompressPointer r1
    //     0x1d8254: add             x1, x1, HEAP, lsl #32
    // 0x1d8258: LoadField: d0 = r1->field_f
    //     0x1d8258: ldur            d0, [x1, #0xf]
    // 0x1d825c: mov             v4.16b, v0.16b
    // 0x1d8260: ldur            d3, [fp, #-0x28]
    // 0x1d8264: ldur            d2, [fp, #-0x30]
    // 0x1d8268: ldur            d1, [fp, #-0x40]
    // 0x1d826c: ldur            x2, [fp, #-8]
    // 0x1d8270: ldur            x1, [fp, #-0x10]
    // 0x1d8274: ldur            d0, [fp, #-0x20]
    // 0x1d8278: r3 = 8
    //     0x1d8278: movz            x3, #0x8
    // 0x1d827c: fadd            d5, d0, d4
    // 0x1d8280: LoadField: d0 = r2->field_7
    //     0x1d8280: ldur            d0, [x2, #7]
    // 0x1d8284: fadd            d4, d5, d0
    // 0x1d8288: LoadField: r2 = r0->field_63
    //     0x1d8288: ldur            w2, [x0, #0x63]
    // 0x1d828c: DecompressPointer r2
    //     0x1d828c: add             x2, x2, HEAP, lsl #32
    // 0x1d8290: LoadField: r4 = r2->field_7
    //     0x1d8290: ldur            w4, [x2, #7]
    // 0x1d8294: DecompressPointer r4
    //     0x1d8294: add             x4, x4, HEAP, lsl #32
    // 0x1d8298: LoadField: d0 = r4->field_1f
    //     0x1d8298: ldur            d0, [x4, #0x1f]
    // 0x1d829c: fadd            d5, d4, d0
    // 0x1d82a0: LoadField: d0 = r1->field_f
    //     0x1d82a0: ldur            d0, [x1, #0xf]
    // 0x1d82a4: fadd            d4, d5, d0
    // 0x1d82a8: stur            d4, [fp, #-0x20]
    // 0x1d82ac: r4 = inline_Allocate_Double()
    //     0x1d82ac: ldp             x4, x1, [THR, #0x50]  ; THR::top
    //     0x1d82b0: add             x4, x4, #0x10
    //     0x1d82b4: cmp             x1, x4
    //     0x1d82b8: b.ls            #0x1d84c4
    //     0x1d82bc: str             x4, [THR, #0x50]  ; THR::top
    //     0x1d82c0: sub             x4, x4, #0xf
    //     0x1d82c4: movz            x1, #0xd148
    //     0x1d82c8: movk            x1, #0x3, lsl #16
    //     0x1d82cc: stur            x1, [x4, #-1]
    // 0x1d82d0: StoreField: r4->field_7 = d3
    //     0x1d82d0: stur            d3, [x4, #7]
    // 0x1d82d4: mov             x2, x3
    // 0x1d82d8: stur            x4, [fp, #-8]
    // 0x1d82dc: r1 = Null
    //     0x1d82dc: mov             x1, NULL
    // 0x1d82e0: r0 = AllocateArray()
    //     0x1d82e0: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x1d82e4: mov             x2, x0
    // 0x1d82e8: ldur            x0, [fp, #-8]
    // 0x1d82ec: stur            x2, [fp, #-0x10]
    // 0x1d82f0: StoreField: r2->field_f = r0
    //     0x1d82f0: stur            w0, [x2, #0xf]
    // 0x1d82f4: ldur            d0, [fp, #-0x20]
    // 0x1d82f8: r0 = inline_Allocate_Double()
    //     0x1d82f8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d82fc: add             x0, x0, #0x10
    //     0x1d8300: cmp             x1, x0
    //     0x1d8304: b.ls            #0x1d84e8
    //     0x1d8308: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d830c: sub             x0, x0, #0xf
    //     0x1d8310: movz            x1, #0xd148
    //     0x1d8314: movk            x1, #0x3, lsl #16
    //     0x1d8318: stur            x1, [x0, #-1]
    // 0x1d831c: StoreField: r0->field_7 = d0
    //     0x1d831c: stur            d0, [x0, #7]
    // 0x1d8320: StoreField: r2->field_13 = r0
    //     0x1d8320: stur            w0, [x2, #0x13]
    // 0x1d8324: ldur            d0, [fp, #-0x30]
    // 0x1d8328: r0 = inline_Allocate_Double()
    //     0x1d8328: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d832c: add             x0, x0, #0x10
    //     0x1d8330: cmp             x1, x0
    //     0x1d8334: b.ls            #0x1d8500
    //     0x1d8338: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d833c: sub             x0, x0, #0xf
    //     0x1d8340: movz            x1, #0xd148
    //     0x1d8344: movk            x1, #0x3, lsl #16
    //     0x1d8348: stur            x1, [x0, #-1]
    // 0x1d834c: StoreField: r0->field_7 = d0
    //     0x1d834c: stur            d0, [x0, #7]
    // 0x1d8350: StoreField: r2->field_17 = r0
    //     0x1d8350: stur            w0, [x2, #0x17]
    // 0x1d8354: ldur            d0, [fp, #-0x40]
    // 0x1d8358: r0 = inline_Allocate_Double()
    //     0x1d8358: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d835c: add             x0, x0, #0x10
    //     0x1d8360: cmp             x1, x0
    //     0x1d8364: b.ls            #0x1d8518
    //     0x1d8368: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d836c: sub             x0, x0, #0xf
    //     0x1d8370: movz            x1, #0xd148
    //     0x1d8374: movk            x1, #0x3, lsl #16
    //     0x1d8378: stur            x1, [x0, #-1]
    // 0x1d837c: StoreField: r0->field_7 = d0
    //     0x1d837c: stur            d0, [x0, #7]
    // 0x1d8380: StoreField: r2->field_1b = r0
    //     0x1d8380: stur            w0, [x2, #0x1b]
    // 0x1d8384: r1 = <double>
    //     0x1d8384: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x1d8388: r0 = AllocateGrowableArray()
    //     0x1d8388: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x1d838c: mov             x1, x0
    // 0x1d8390: ldur            x0, [fp, #-0x10]
    // 0x1d8394: StoreField: r1->field_f = r0
    //     0x1d8394: stur            w0, [x1, #0xf]
    // 0x1d8398: r0 = 8
    //     0x1d8398: movz            x0, #0x8
    // 0x1d839c: StoreField: r1->field_b = r0
    //     0x1d839c: stur            w0, [x1, #0xb]
    // 0x1d83a0: r16 = Closure: (double, double) => double from Function 'max': static.
    //     0x1d83a0: add             x16, PP, #0x14, lsl #12  ; [pp+0x14dd0] Closure: (double, double) => double from Function 'max': static. (0x7f7674dd310c)
    //     0x1d83a4: ldr             x16, [x16, #0xdd0]
    // 0x1d83a8: stp             x16, x1, [SP]
    // 0x1d83ac: r0 = reduce()
    //     0x1d83ac: bl              #0x1d86b8  ; [dart:collection] ListBase::reduce
    // 0x1d83b0: ldr             x1, [fp, #0x18]
    // 0x1d83b4: LoadField: r2 = r1->field_63
    //     0x1d83b4: ldur            w2, [x1, #0x63]
    // 0x1d83b8: DecompressPointer r2
    //     0x1d83b8: add             x2, x2, HEAP, lsl #32
    // 0x1d83bc: LoadField: r1 = r2->field_2f
    //     0x1d83bc: ldur            w1, [x2, #0x2f]
    // 0x1d83c0: DecompressPointer r1
    //     0x1d83c0: add             x1, x1, HEAP, lsl #32
    // 0x1d83c4: cmp             w1, NULL
    // 0x1d83c8: b.eq            #0x1d8530
    // 0x1d83cc: tbnz            w1, #4, #0x1d83dc
    // 0x1d83d0: d0 = 0.000000
    //     0x1d83d0: eor             v0.16b, v0.16b, v0.16b
    // 0x1d83d4: d0 = 0.000000
    //     0x1d83d4: eor             v0.16b, v0.16b, v0.16b
    // 0x1d83d8: b               #0x1d83e4
    // 0x1d83dc: d0 = 48.000000
    //     0x1d83dc: ldr             d0, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x1d83e0: d0 = 48.000000
    //     0x1d83e0: ldr             d0, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x1d83e4: LoadField: d1 = r0->field_7
    //     0x1d83e4: ldur            d1, [x0, #7]
    // 0x1d83e8: fcmp            d1, d0
    // 0x1d83ec: b.le            #0x1d83fc
    // 0x1d83f0: LoadField: d2 = r0->field_7
    //     0x1d83f0: ldur            d2, [x0, #7]
    // 0x1d83f4: mov             v1.16b, v2.16b
    // 0x1d83f8: b               #0x1d8440
    // 0x1d83fc: fcmp            d0, d1
    // 0x1d8400: b.le            #0x1d840c
    // 0x1d8404: mov             v1.16b, v0.16b
    // 0x1d8408: b               #0x1d8440
    // 0x1d840c: d2 = 0.000000
    //     0x1d840c: eor             v2.16b, v2.16b, v2.16b
    // 0x1d8410: d2 = 0.000000
    //     0x1d8410: eor             v2.16b, v2.16b, v2.16b
    // 0x1d8414: fcmp            d1, d2
    // 0x1d8418: b.ne            #0x1d8428
    // 0x1d841c: fadd            d2, d1, d0
    // 0x1d8420: mov             v1.16b, v2.16b
    // 0x1d8424: b               #0x1d8440
    // 0x1d8428: fcmp            d0, d0
    // 0x1d842c: b.vc            #0x1d8438
    // 0x1d8430: mov             v1.16b, v0.16b
    // 0x1d8434: b               #0x1d8440
    // 0x1d8438: LoadField: d0 = r0->field_7
    //     0x1d8438: ldur            d0, [x0, #7]
    // 0x1d843c: mov             v1.16b, v0.16b
    // 0x1d8440: ldur            d0, [fp, #-0x50]
    // 0x1d8444: fadd            d2, d1, d0
    // 0x1d8448: r0 = inline_Allocate_Double()
    //     0x1d8448: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d844c: add             x0, x0, #0x10
    //     0x1d8450: cmp             x1, x0
    //     0x1d8454: b.ls            #0x1d8534
    //     0x1d8458: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d845c: sub             x0, x0, #0xf
    //     0x1d8460: movz            x1, #0xd148
    //     0x1d8464: movk            x1, #0x3, lsl #16
    //     0x1d8468: stur            x1, [x0, #-1]
    // 0x1d846c: StoreField: r0->field_7 = d2
    //     0x1d846c: stur            d2, [x0, #7]
    // 0x1d8470: LeaveFrame
    //     0x1d8470: mov             SP, fp
    //     0x1d8474: ldp             fp, lr, [SP], #0x10
    // 0x1d8478: ret
    //     0x1d8478: ret             
    // 0x1d847c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d847c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d8480: b               #0x1d7c64
    // 0x1d8484: SaveReg d0
    //     0x1d8484: str             q0, [SP, #-0x10]!
    // 0x1d8488: r0 = AllocateDouble()
    //     0x1d8488: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d848c: RestoreReg d0
    //     0x1d848c: ldr             q0, [SP], #0x10
    // 0x1d8490: b               #0x1d812c
    // 0x1d8494: SaveReg d0
    //     0x1d8494: str             q0, [SP, #-0x10]!
    // 0x1d8498: SaveReg r2
    //     0x1d8498: str             x2, [SP, #-8]!
    // 0x1d849c: r0 = AllocateDouble()
    //     0x1d849c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d84a0: RestoreReg r2
    //     0x1d84a0: ldr             x2, [SP], #8
    // 0x1d84a4: RestoreReg d0
    //     0x1d84a4: ldr             q0, [SP], #0x10
    // 0x1d84a8: b               #0x1d8178
    // 0x1d84ac: SaveReg d0
    //     0x1d84ac: str             q0, [SP, #-0x10]!
    // 0x1d84b0: SaveReg r2
    //     0x1d84b0: str             x2, [SP, #-8]!
    // 0x1d84b4: r0 = AllocateDouble()
    //     0x1d84b4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d84b8: RestoreReg r2
    //     0x1d84b8: ldr             x2, [SP], #8
    // 0x1d84bc: RestoreReg d0
    //     0x1d84bc: ldr             q0, [SP], #0x10
    // 0x1d84c0: b               #0x1d81a8
    // 0x1d84c4: stp             q3, q4, [SP, #-0x20]!
    // 0x1d84c8: stp             q1, q2, [SP, #-0x20]!
    // 0x1d84cc: stp             x0, x3, [SP, #-0x10]!
    // 0x1d84d0: r0 = AllocateDouble()
    //     0x1d84d0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d84d4: mov             x4, x0
    // 0x1d84d8: ldp             x0, x3, [SP], #0x10
    // 0x1d84dc: ldp             q1, q2, [SP], #0x20
    // 0x1d84e0: ldp             q3, q4, [SP], #0x20
    // 0x1d84e4: b               #0x1d82d0
    // 0x1d84e8: SaveReg d0
    //     0x1d84e8: str             q0, [SP, #-0x10]!
    // 0x1d84ec: SaveReg r2
    //     0x1d84ec: str             x2, [SP, #-8]!
    // 0x1d84f0: r0 = AllocateDouble()
    //     0x1d84f0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d84f4: RestoreReg r2
    //     0x1d84f4: ldr             x2, [SP], #8
    // 0x1d84f8: RestoreReg d0
    //     0x1d84f8: ldr             q0, [SP], #0x10
    // 0x1d84fc: b               #0x1d831c
    // 0x1d8500: SaveReg d0
    //     0x1d8500: str             q0, [SP, #-0x10]!
    // 0x1d8504: SaveReg r2
    //     0x1d8504: str             x2, [SP, #-8]!
    // 0x1d8508: r0 = AllocateDouble()
    //     0x1d8508: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d850c: RestoreReg r2
    //     0x1d850c: ldr             x2, [SP], #8
    // 0x1d8510: RestoreReg d0
    //     0x1d8510: ldr             q0, [SP], #0x10
    // 0x1d8514: b               #0x1d834c
    // 0x1d8518: SaveReg d0
    //     0x1d8518: str             q0, [SP, #-0x10]!
    // 0x1d851c: SaveReg r2
    //     0x1d851c: str             x2, [SP, #-8]!
    // 0x1d8520: r0 = AllocateDouble()
    //     0x1d8520: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d8524: RestoreReg r2
    //     0x1d8524: ldr             x2, [SP], #8
    // 0x1d8528: RestoreReg d0
    //     0x1d8528: ldr             q0, [SP], #0x10
    // 0x1d852c: b               #0x1d837c
    // 0x1d8530: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1d8530: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1d8534: SaveReg d2
    //     0x1d8534: str             q2, [SP, #-0x10]!
    // 0x1d8538: r0 = AllocateDouble()
    //     0x1d8538: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d853c: RestoreReg d2
    //     0x1d853c: ldr             q2, [SP], #0x10
    // 0x1d8540: b               #0x1d846c
  }
  get _ label(/* No info */) {
    // ** addr: 0x1d8544, size: 0x40
    // 0x1d8544: EnterFrame
    //     0x1d8544: stp             fp, lr, [SP, #-0x10]!
    //     0x1d8548: mov             fp, SP
    // 0x1d854c: AllocStack(0x10)
    //     0x1d854c: sub             SP, SP, #0x10
    // 0x1d8550: CheckStackOverflow
    //     0x1d8550: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d8554: cmp             SP, x16
    //     0x1d8558: b.ls            #0x1d857c
    // 0x1d855c: ldr             x16, [fp, #0x10]
    // 0x1d8560: r30 = Instance__DecorationSlot
    //     0x1d8560: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1d8564: ldr             lr, [lr, #0x3b8]
    // 0x1d8568: stp             lr, x16, [SP]
    // 0x1d856c: r0 = childForSlot()
    //     0x1d856c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d8570: LeaveFrame
    //     0x1d8570: mov             SP, fp
    //     0x1d8574: ldp             fp, lr, [SP], #0x10
    // 0x1d8578: ret
    //     0x1d8578: ret             
    // 0x1d857c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d857c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d8580: b               #0x1d855c
  }
  get _ helperError(/* No info */) {
    // ** addr: 0x1d8584, size: 0x40
    // 0x1d8584: EnterFrame
    //     0x1d8584: stp             fp, lr, [SP, #-0x10]!
    //     0x1d8588: mov             fp, SP
    // 0x1d858c: AllocStack(0x10)
    //     0x1d858c: sub             SP, SP, #0x10
    // 0x1d8590: CheckStackOverflow
    //     0x1d8590: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d8594: cmp             SP, x16
    //     0x1d8598: b.ls            #0x1d85bc
    // 0x1d859c: ldr             x16, [fp, #0x10]
    // 0x1d85a0: r30 = Instance__DecorationSlot
    //     0x1d85a0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x1d85a4: ldr             lr, [lr, #0x3c8]
    // 0x1d85a8: stp             lr, x16, [SP]
    // 0x1d85ac: r0 = childForSlot()
    //     0x1d85ac: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d85b0: LeaveFrame
    //     0x1d85b0: mov             SP, fp
    //     0x1d85b4: ldp             fp, lr, [SP], #0x10
    // 0x1d85b8: ret
    //     0x1d85b8: ret             
    // 0x1d85bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d85bc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d85c0: b               #0x1d859c
  }
  get _ counter(/* No info */) {
    // ** addr: 0x1d85c4, size: 0x40
    // 0x1d85c4: EnterFrame
    //     0x1d85c4: stp             fp, lr, [SP, #-0x10]!
    //     0x1d85c8: mov             fp, SP
    // 0x1d85cc: AllocStack(0x10)
    //     0x1d85cc: sub             SP, SP, #0x10
    // 0x1d85d0: CheckStackOverflow
    //     0x1d85d0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d85d4: cmp             SP, x16
    //     0x1d85d8: b.ls            #0x1d85fc
    // 0x1d85dc: ldr             x16, [fp, #0x10]
    // 0x1d85e0: r30 = Instance__DecorationSlot
    //     0x1d85e0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x1d85e4: ldr             lr, [lr, #0x3d0]
    // 0x1d85e8: stp             lr, x16, [SP]
    // 0x1d85ec: r0 = childForSlot()
    //     0x1d85ec: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1d85f0: LeaveFrame
    //     0x1d85f0: mov             SP, fp
    //     0x1d85f4: ldp             fp, lr, [SP], #0x10
    // 0x1d85f8: ret
    //     0x1d85f8: ret             
    // 0x1d85fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d85fc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d8600: b               #0x1d85dc
  }
  [closure] double computeMinIntrinsicHeight(dynamic, double) {
    // ** addr: 0x1d8604, size: 0x4c
    // 0x1d8604: EnterFrame
    //     0x1d8604: stp             fp, lr, [SP, #-0x10]!
    //     0x1d8608: mov             fp, SP
    // 0x1d860c: AllocStack(0x10)
    //     0x1d860c: sub             SP, SP, #0x10
    // 0x1d8610: SetupParameters()
    //     0x1d8610: ldr             x0, [fp, #0x18]
    //     0x1d8614: ldur            w1, [x0, #0x17]
    //     0x1d8618: add             x1, x1, HEAP, lsl #32
    // 0x1d861c: CheckStackOverflow
    //     0x1d861c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d8620: cmp             SP, x16
    //     0x1d8624: b.ls            #0x1d8648
    // 0x1d8628: LoadField: r0 = r1->field_f
    //     0x1d8628: ldur            w0, [x1, #0xf]
    // 0x1d862c: DecompressPointer r0
    //     0x1d862c: add             x0, x0, HEAP, lsl #32
    // 0x1d8630: ldr             x16, [fp, #0x10]
    // 0x1d8634: stp             x16, x0, [SP]
    // 0x1d8638: r0 = computeMinIntrinsicHeight()
    //     0x1d8638: bl              #0x1d7c4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight
    // 0x1d863c: LeaveFrame
    //     0x1d863c: mov             SP, fp
    //     0x1d8640: ldp             fp, lr, [SP], #0x10
    // 0x1d8644: ret
    //     0x1d8644: ret             
    // 0x1d8648: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d8648: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d864c: b               #0x1d8628
  }
  _ _lineHeight(/* No info */) {
    // ** addr: 0x1d8824, size: 0x29c
    // 0x1d8824: EnterFrame
    //     0x1d8824: stp             fp, lr, [SP, #-0x10]!
    //     0x1d8828: mov             fp, SP
    // 0x1d882c: AllocStack(0x40)
    //     0x1d882c: sub             SP, SP, #0x40
    // 0x1d8830: CheckStackOverflow
    //     0x1d8830: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d8834: cmp             SP, x16
    //     0x1d8838: b.ls            #0x1d8a8c
    // 0x1d883c: ldr             x0, [fp, #0x10]
    // 0x1d8840: LoadField: r3 = r0->field_7
    //     0x1d8840: ldur            w3, [x0, #7]
    // 0x1d8844: DecompressPointer r3
    //     0x1d8844: add             x3, x3, HEAP, lsl #32
    // 0x1d8848: stur            x3, [fp, #-0x28]
    // 0x1d884c: LoadField: r1 = r0->field_b
    //     0x1d884c: ldur            w1, [x0, #0xb]
    // 0x1d8850: DecompressPointer r1
    //     0x1d8850: add             x1, x1, HEAP, lsl #32
    // 0x1d8854: r4 = LoadInt32Instr(r1)
    //     0x1d8854: sbfx            x4, x1, #1, #0x1f
    // 0x1d8858: stur            x4, [fp, #-0x20]
    // 0x1d885c: r5 = 0.000000
    //     0x1d885c: ldr             x5, [PP, #0x5288]  ; [pp+0x5288] 0
    // 0x1d8860: r2 = 0
    //     0x1d8860: movz            x2, #0
    // 0x1d8864: ldr             d0, [fp, #0x18]
    // 0x1d8868: stur            x5, [fp, #-0x18]
    // 0x1d886c: CheckStackOverflow
    //     0x1d886c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d8870: cmp             SP, x16
    //     0x1d8874: b.ls            #0x1d8a94
    // 0x1d8878: LoadField: r1 = r0->field_b
    //     0x1d8878: ldur            w1, [x0, #0xb]
    // 0x1d887c: DecompressPointer r1
    //     0x1d887c: add             x1, x1, HEAP, lsl #32
    // 0x1d8880: r6 = LoadInt32Instr(r1)
    //     0x1d8880: sbfx            x6, x1, #1, #0x1f
    // 0x1d8884: cmp             x4, x6
    // 0x1d8888: b.ne            #0x1d8a78
    // 0x1d888c: mov             x7, x0
    // 0x1d8890: cmp             x2, x6
    // 0x1d8894: b.lt            #0x1d88a8
    // 0x1d8898: LoadField: d0 = r5->field_7
    //     0x1d8898: ldur            d0, [x5, #7]
    // 0x1d889c: LeaveFrame
    //     0x1d889c: mov             SP, fp
    //     0x1d88a0: ldp             fp, lr, [SP], #0x10
    // 0x1d88a4: ret
    //     0x1d88a4: ret             
    // 0x1d88a8: mov             x0, x6
    // 0x1d88ac: mov             x1, x2
    // 0x1d88b0: cmp             x1, x0
    // 0x1d88b4: b.hs            #0x1d8a9c
    // 0x1d88b8: LoadField: r0 = r7->field_f
    //     0x1d88b8: ldur            w0, [x7, #0xf]
    // 0x1d88bc: DecompressPointer r0
    //     0x1d88bc: add             x0, x0, HEAP, lsl #32
    // 0x1d88c0: ArrayLoad: r6 = r0[r2]  ; Unknown_4
    //     0x1d88c0: add             x16, x0, x2, lsl #2
    //     0x1d88c4: ldur            w6, [x16, #0xf]
    // 0x1d88c8: DecompressPointer r6
    //     0x1d88c8: add             x6, x6, HEAP, lsl #32
    // 0x1d88cc: stur            x6, [fp, #-0x10]
    // 0x1d88d0: add             x8, x2, #1
    // 0x1d88d4: stur            x8, [fp, #-8]
    // 0x1d88d8: cmp             w6, NULL
    // 0x1d88dc: b.ne            #0x1d8910
    // 0x1d88e0: mov             x0, x6
    // 0x1d88e4: mov             x2, x3
    // 0x1d88e8: r1 = Null
    //     0x1d88e8: mov             x1, NULL
    // 0x1d88ec: cmp             w2, NULL
    // 0x1d88f0: b.eq            #0x1d8910
    // 0x1d88f4: LoadField: r4 = r2->field_17
    //     0x1d88f4: ldur            w4, [x2, #0x17]
    // 0x1d88f8: DecompressPointer r4
    //     0x1d88f8: add             x4, x4, HEAP, lsl #32
    // 0x1d88fc: r8 = X0
    //     0x1d88fc: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x1d8900: LoadField: r9 = r4->field_7
    //     0x1d8900: ldur            x9, [x4, #7]
    // 0x1d8904: r3 = Null
    //     0x1d8904: add             x3, PP, #0x14, lsl #12  ; [pp+0x14e00] Null
    //     0x1d8908: ldr             x3, [x3, #0xe00]
    // 0x1d890c: blr             x9
    // 0x1d8910: ldur            x0, [fp, #-0x10]
    // 0x1d8914: cmp             w0, NULL
    // 0x1d8918: b.ne            #0x1d8924
    // 0x1d891c: ldur            x5, [fp, #-0x18]
    // 0x1d8920: b               #0x1d8a64
    // 0x1d8924: ldr             d0, [fp, #0x18]
    // 0x1d8928: str             x0, [SP, #8]
    // 0x1d892c: str             d0, [SP]
    // 0x1d8930: r0 = getMinIntrinsicHeight()
    //     0x1d8930: bl              #0x1d73d0  ; [package:flutter/src/rendering/box.dart] RenderBox::getMinIntrinsicHeight
    // 0x1d8934: stur            d0, [fp, #-0x30]
    // 0x1d8938: r0 = inline_Allocate_Double()
    //     0x1d8938: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d893c: add             x0, x0, #0x10
    //     0x1d8940: cmp             x1, x0
    //     0x1d8944: b.ls            #0x1d8aa0
    //     0x1d8948: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d894c: sub             x0, x0, #0xf
    //     0x1d8950: movz            x1, #0xd148
    //     0x1d8954: movk            x1, #0x3, lsl #16
    //     0x1d8958: stur            x1, [x0, #-1]
    // 0x1d895c: StoreField: r0->field_7 = d0
    //     0x1d895c: stur            d0, [x0, #7]
    // 0x1d8960: stur            x0, [fp, #-0x10]
    // 0x1d8964: ldur            x16, [fp, #-0x18]
    // 0x1d8968: stp             x16, x0, [SP]
    // 0x1d896c: r0 = >()
    //     0x1d896c: bl              #0x3e37d8  ; [dart:core] _Double::>
    // 0x1d8970: tbnz            w0, #4, #0x1d897c
    // 0x1d8974: ldur            x0, [fp, #-0x10]
    // 0x1d8978: b               #0x1d8a60
    // 0x1d897c: ldur            x16, [fp, #-0x10]
    // 0x1d8980: ldur            lr, [fp, #-0x18]
    // 0x1d8984: stp             lr, x16, [SP]
    // 0x1d8988: r0 = <()
    //     0x1d8988: bl              #0x3e3474  ; [dart:core] _Double::<
    // 0x1d898c: tbnz            w0, #4, #0x1d8998
    // 0x1d8990: ldur            x0, [fp, #-0x18]
    // 0x1d8994: b               #0x1d8a60
    // 0x1d8998: ldur            x1, [fp, #-0x18]
    // 0x1d899c: r0 = 59
    //     0x1d899c: movz            x0, #0x3b
    // 0x1d89a0: branchIfSmi(r1, 0x1d89ac)
    //     0x1d89a0: tbz             w1, #0, #0x1d89ac
    // 0x1d89a4: r0 = LoadClassIdInstr(r1)
    //     0x1d89a4: ldur            x0, [x1, #-1]
    //     0x1d89a8: ubfx            x0, x0, #0xc, #0x14
    // 0x1d89ac: cmp             x0, #0x3d
    // 0x1d89b0: b.ne            #0x1d8a18
    // 0x1d89b4: ldur            d0, [fp, #-0x30]
    // 0x1d89b8: d1 = 0.000000
    //     0x1d89b8: eor             v1.16b, v1.16b, v1.16b
    // 0x1d89bc: d1 = 0.000000
    //     0x1d89bc: eor             v1.16b, v1.16b, v1.16b
    // 0x1d89c0: fcmp            d0, d1
    // 0x1d89c4: b.ne            #0x1d89fc
    // 0x1d89c8: LoadField: d2 = r1->field_7
    //     0x1d89c8: ldur            d2, [x1, #7]
    // 0x1d89cc: fadd            d3, d0, d2
    // 0x1d89d0: r0 = inline_Allocate_Double()
    //     0x1d89d0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1d89d4: add             x0, x0, #0x10
    //     0x1d89d8: cmp             x1, x0
    //     0x1d89dc: b.ls            #0x1d8ab0
    //     0x1d89e0: str             x0, [THR, #0x50]  ; THR::top
    //     0x1d89e4: sub             x0, x0, #0xf
    //     0x1d89e8: movz            x1, #0xd148
    //     0x1d89ec: movk            x1, #0x3, lsl #16
    //     0x1d89f0: stur            x1, [x0, #-1]
    // 0x1d89f4: StoreField: r0->field_7 = d3
    //     0x1d89f4: stur            d3, [x0, #7]
    // 0x1d89f8: b               #0x1d8a60
    // 0x1d89fc: LoadField: d0 = r1->field_7
    //     0x1d89fc: ldur            d0, [x1, #7]
    // 0x1d8a00: fcmp            d0, d0
    // 0x1d8a04: b.vc            #0x1d8a10
    // 0x1d8a08: mov             x0, x1
    // 0x1d8a0c: b               #0x1d8a60
    // 0x1d8a10: ldur            x0, [fp, #-0x10]
    // 0x1d8a14: b               #0x1d8a60
    // 0x1d8a18: d1 = 0.000000
    //     0x1d8a18: eor             v1.16b, v1.16b, v1.16b
    // 0x1d8a1c: d1 = 0.000000
    //     0x1d8a1c: eor             v1.16b, v1.16b, v1.16b
    // 0x1d8a20: r0 = 59
    //     0x1d8a20: movz            x0, #0x3b
    // 0x1d8a24: branchIfSmi(r1, 0x1d8a30)
    //     0x1d8a24: tbz             w1, #0, #0x1d8a30
    // 0x1d8a28: r0 = LoadClassIdInstr(r1)
    //     0x1d8a28: ldur            x0, [x1, #-1]
    //     0x1d8a2c: ubfx            x0, x0, #0xc, #0x14
    // 0x1d8a30: stp             xzr, x1, [SP]
    // 0x1d8a34: mov             lr, x0
    // 0x1d8a38: ldr             lr, [x21, lr, lsl #3]
    // 0x1d8a3c: blr             lr
    // 0x1d8a40: tbnz            w0, #4, #0x1d8a5c
    // 0x1d8a44: ldur            x16, [fp, #-0x10]
    // 0x1d8a48: str             x16, [SP]
    // 0x1d8a4c: r0 = isNegative()
    //     0x1d8a4c: bl              #0x3e3414  ; [dart:core] _Double::isNegative
    // 0x1d8a50: tbnz            w0, #4, #0x1d8a5c
    // 0x1d8a54: ldur            x0, [fp, #-0x18]
    // 0x1d8a58: b               #0x1d8a60
    // 0x1d8a5c: ldur            x0, [fp, #-0x10]
    // 0x1d8a60: mov             x5, x0
    // 0x1d8a64: ldur            x2, [fp, #-8]
    // 0x1d8a68: ldr             x0, [fp, #0x10]
    // 0x1d8a6c: ldur            x3, [fp, #-0x28]
    // 0x1d8a70: ldur            x4, [fp, #-0x20]
    // 0x1d8a74: b               #0x1d8864
    // 0x1d8a78: r0 = ConcurrentModificationError()
    //     0x1d8a78: bl              #0x186f0c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x1d8a7c: ldr             x7, [fp, #0x10]
    // 0x1d8a80: StoreField: r0->field_b = r7
    //     0x1d8a80: stur            w7, [x0, #0xb]
    // 0x1d8a84: r0 = Throw()
    //     0x1d8a84: bl              #0x3e41c8  ; ThrowStub
    // 0x1d8a88: brk             #0
    // 0x1d8a8c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d8a8c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d8a90: b               #0x1d883c
    // 0x1d8a94: r0 = StackOverflowSharedWithFPURegs()
    //     0x1d8a94: bl              #0x3e5d54  ; StackOverflowSharedWithFPURegsStub
    // 0x1d8a98: b               #0x1d8878
    // 0x1d8a9c: r0 = RangeErrorSharedWithFPURegs()
    //     0x1d8a9c: bl              #0x3e61ac  ; RangeErrorSharedWithFPURegsStub
    // 0x1d8aa0: SaveReg d0
    //     0x1d8aa0: str             q0, [SP, #-0x10]!
    // 0x1d8aa4: r0 = AllocateDouble()
    //     0x1d8aa4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d8aa8: RestoreReg d0
    //     0x1d8aa8: ldr             q0, [SP], #0x10
    // 0x1d8aac: b               #0x1d895c
    // 0x1d8ab0: stp             q1, q3, [SP, #-0x20]!
    // 0x1d8ab4: r0 = AllocateDouble()
    //     0x1d8ab4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1d8ab8: ldp             q1, q3, [SP], #0x20
    // 0x1d8abc: b               #0x1d89f4
  }
  static _ _minHeight(/* No info */) {
    // ** addr: 0x1d8ac0, size: 0x54
    // 0x1d8ac0: EnterFrame
    //     0x1d8ac0: stp             fp, lr, [SP, #-0x10]!
    //     0x1d8ac4: mov             fp, SP
    // 0x1d8ac8: AllocStack(0x10)
    //     0x1d8ac8: sub             SP, SP, #0x10
    // 0x1d8acc: CheckStackOverflow
    //     0x1d8acc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1d8ad0: cmp             SP, x16
    //     0x1d8ad4: b.ls            #0x1d8b0c
    // 0x1d8ad8: ldr             x0, [fp, #0x18]
    // 0x1d8adc: cmp             w0, NULL
    // 0x1d8ae0: b.ne            #0x1d8af0
    // 0x1d8ae4: d0 = 0.000000
    //     0x1d8ae4: eor             v0.16b, v0.16b, v0.16b
    // 0x1d8ae8: d0 = 0.000000
    //     0x1d8ae8: eor             v0.16b, v0.16b, v0.16b
    // 0x1d8aec: b               #0x1d8b00
    // 0x1d8af0: ldr             d0, [fp, #0x10]
    // 0x1d8af4: str             x0, [SP, #8]
    // 0x1d8af8: str             d0, [SP]
    // 0x1d8afc: r0 = getMinIntrinsicHeight()
    //     0x1d8afc: bl              #0x1d73d0  ; [package:flutter/src/rendering/box.dart] RenderBox::getMinIntrinsicHeight
    // 0x1d8b00: LeaveFrame
    //     0x1d8b00: mov             SP, fp
    //     0x1d8b04: ldp             fp, lr, [SP], #0x10
    // 0x1d8b08: ret
    //     0x1d8b08: ret             
    // 0x1d8b0c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1d8b0c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1d8b10: b               #0x1d8ad8
  }
  _ hitTestChildren(/* No info */) {
    // ** addr: 0x1dddec, size: 0x204
    // 0x1dddec: EnterFrame
    //     0x1dddec: stp             fp, lr, [SP, #-0x10]!
    //     0x1dddf0: mov             fp, SP
    // 0x1dddf4: AllocStack(0x50)
    //     0x1dddf4: sub             SP, SP, #0x50
    // 0x1dddf8: CheckStackOverflow
    //     0x1dddf8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1dddfc: cmp             SP, x16
    //     0x1dde00: b.ls            #0x1ddfd8
    // 0x1dde04: ldr             x16, [fp, #0x20]
    // 0x1dde08: str             x16, [SP]
    // 0x1dde0c: r0 = children()
    //     0x1dde0c: bl              #0x1ddff0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x1dde10: stur            x0, [fp, #-8]
    // 0x1dde14: LoadField: r3 = r0->field_7
    //     0x1dde14: ldur            w3, [x0, #7]
    // 0x1dde18: DecompressPointer r3
    //     0x1dde18: add             x3, x3, HEAP, lsl #32
    // 0x1dde1c: stur            x3, [fp, #-0x28]
    // 0x1dde20: LoadField: r1 = r0->field_b
    //     0x1dde20: ldur            w1, [x0, #0xb]
    // 0x1dde24: DecompressPointer r1
    //     0x1dde24: add             x1, x1, HEAP, lsl #32
    // 0x1dde28: r4 = LoadInt32Instr(r1)
    //     0x1dde28: sbfx            x4, x1, #1, #0x1f
    // 0x1dde2c: stur            x4, [fp, #-0x20]
    // 0x1dde30: r2 = 0
    //     0x1dde30: movz            x2, #0
    // 0x1dde34: CheckStackOverflow
    //     0x1dde34: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1dde38: cmp             SP, x16
    //     0x1dde3c: b.ls            #0x1ddfe0
    // 0x1dde40: LoadField: r1 = r0->field_b
    //     0x1dde40: ldur            w1, [x0, #0xb]
    // 0x1dde44: DecompressPointer r1
    //     0x1dde44: add             x1, x1, HEAP, lsl #32
    // 0x1dde48: r5 = LoadInt32Instr(r1)
    //     0x1dde48: sbfx            x5, x1, #1, #0x1f
    // 0x1dde4c: cmp             x4, x5
    // 0x1dde50: b.ne            #0x1ddfc4
    // 0x1dde54: mov             x6, x0
    // 0x1dde58: cmp             x2, x5
    // 0x1dde5c: b.lt            #0x1dde70
    // 0x1dde60: r0 = false
    //     0x1dde60: add             x0, NULL, #0x30  ; false
    // 0x1dde64: LeaveFrame
    //     0x1dde64: mov             SP, fp
    //     0x1dde68: ldp             fp, lr, [SP], #0x10
    // 0x1dde6c: ret
    //     0x1dde6c: ret             
    // 0x1dde70: mov             x0, x5
    // 0x1dde74: mov             x1, x2
    // 0x1dde78: cmp             x1, x0
    // 0x1dde7c: b.hs            #0x1ddfe8
    // 0x1dde80: LoadField: r0 = r6->field_f
    //     0x1dde80: ldur            w0, [x6, #0xf]
    // 0x1dde84: DecompressPointer r0
    //     0x1dde84: add             x0, x0, HEAP, lsl #32
    // 0x1dde88: ArrayLoad: r5 = r0[r2]  ; Unknown_4
    //     0x1dde88: add             x16, x0, x2, lsl #2
    //     0x1dde8c: ldur            w5, [x16, #0xf]
    // 0x1dde90: DecompressPointer r5
    //     0x1dde90: add             x5, x5, HEAP, lsl #32
    // 0x1dde94: stur            x5, [fp, #-0x18]
    // 0x1dde98: add             x7, x2, #1
    // 0x1dde9c: stur            x7, [fp, #-0x10]
    // 0x1ddea0: cmp             w5, NULL
    // 0x1ddea4: b.ne            #0x1dded8
    // 0x1ddea8: mov             x0, x5
    // 0x1ddeac: mov             x2, x3
    // 0x1ddeb0: r1 = Null
    //     0x1ddeb0: mov             x1, NULL
    // 0x1ddeb4: cmp             w2, NULL
    // 0x1ddeb8: b.eq            #0x1dded8
    // 0x1ddebc: LoadField: r4 = r2->field_17
    //     0x1ddebc: ldur            w4, [x2, #0x17]
    // 0x1ddec0: DecompressPointer r4
    //     0x1ddec0: add             x4, x4, HEAP, lsl #32
    // 0x1ddec4: r8 = X0
    //     0x1ddec4: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x1ddec8: LoadField: r9 = r4->field_7
    //     0x1ddec8: ldur            x9, [x4, #7]
    // 0x1ddecc: r3 = Null
    //     0x1ddecc: add             x3, PP, #0x14, lsl #12  ; [pp+0x14410] Null
    //     0x1dded0: ldr             x3, [x3, #0x410]
    // 0x1dded4: blr             x9
    // 0x1dded8: ldur            x3, [fp, #-0x18]
    // 0x1ddedc: LoadField: r4 = r3->field_7
    //     0x1ddedc: ldur            w4, [x3, #7]
    // 0x1ddee0: DecompressPointer r4
    //     0x1ddee0: add             x4, x4, HEAP, lsl #32
    // 0x1ddee4: stur            x4, [fp, #-0x30]
    // 0x1ddee8: cmp             w4, NULL
    // 0x1ddeec: b.eq            #0x1ddfec
    // 0x1ddef0: mov             x0, x4
    // 0x1ddef4: r2 = Null
    //     0x1ddef4: mov             x2, NULL
    // 0x1ddef8: r1 = Null
    //     0x1ddef8: mov             x1, NULL
    // 0x1ddefc: r4 = LoadClassIdInstr(r0)
    //     0x1ddefc: ldur            x4, [x0, #-1]
    //     0x1ddf00: ubfx            x4, x4, #0xc, #0x14
    // 0x1ddf04: sub             x4, x4, #0x25f
    // 0x1ddf08: cmp             x4, #9
    // 0x1ddf0c: b.ls            #0x1ddf24
    // 0x1ddf10: r8 = BoxParentData
    //     0x1ddf10: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1ddf14: ldr             x8, [x8, #0x50]
    // 0x1ddf18: r3 = Null
    //     0x1ddf18: add             x3, PP, #0x14, lsl #12  ; [pp+0x14420] Null
    //     0x1ddf1c: ldr             x3, [x3, #0x420]
    // 0x1ddf20: r0 = DefaultTypeTest()
    //     0x1ddf20: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1ddf24: ldur            x0, [fp, #-0x30]
    // 0x1ddf28: LoadField: r1 = r0->field_7
    //     0x1ddf28: ldur            w1, [x0, #7]
    // 0x1ddf2c: DecompressPointer r1
    //     0x1ddf2c: add             x1, x1, HEAP, lsl #32
    // 0x1ddf30: stur            x1, [fp, #-0x38]
    // 0x1ddf34: ldr             x16, [fp, #0x10]
    // 0x1ddf38: stp             x1, x16, [SP]
    // 0x1ddf3c: r0 = -()
    //     0x1ddf3c: bl              #0x193d48  ; [dart:ui] Offset::-
    // 0x1ddf40: stur            x0, [fp, #-0x30]
    // 0x1ddf44: ldur            x16, [fp, #-0x38]
    // 0x1ddf48: str             x16, [SP]
    // 0x1ddf4c: r0 = unary-()
    //     0x1ddf4c: bl              #0x1d935c  ; [dart:ui] Offset::unary-
    // 0x1ddf50: ldr             x16, [fp, #0x18]
    // 0x1ddf54: stp             x0, x16, [SP]
    // 0x1ddf58: r0 = pushOffset()
    //     0x1ddf58: bl              #0x1d9248  ; [package:flutter/src/gestures/hit_test.dart] HitTestResult::pushOffset
    // 0x1ddf5c: ldur            x0, [fp, #-0x18]
    // 0x1ddf60: r1 = LoadClassIdInstr(r0)
    //     0x1ddf60: ldur            x1, [x0, #-1]
    //     0x1ddf64: ubfx            x1, x1, #0xc, #0x14
    // 0x1ddf68: ldr             x16, [fp, #0x18]
    // 0x1ddf6c: stp             x16, x0, [SP, #8]
    // 0x1ddf70: ldur            x16, [fp, #-0x30]
    // 0x1ddf74: str             x16, [SP]
    // 0x1ddf78: mov             x0, x1
    // 0x1ddf7c: r0 = GDT[cid_x0 + -0x399]()
    //     0x1ddf7c: sub             lr, x0, #0x399
    //     0x1ddf80: ldr             lr, [x21, lr, lsl #3]
    //     0x1ddf84: blr             lr
    // 0x1ddf88: stur            x0, [fp, #-0x18]
    // 0x1ddf8c: ldr             x16, [fp, #0x18]
    // 0x1ddf90: str             x16, [SP]
    // 0x1ddf94: r0 = popTransform()
    //     0x1ddf94: bl              #0x1d91a4  ; [package:flutter/src/gestures/hit_test.dart] HitTestResult::popTransform
    // 0x1ddf98: ldur            x1, [fp, #-0x18]
    // 0x1ddf9c: tbnz            w1, #4, #0x1ddfb0
    // 0x1ddfa0: r0 = true
    //     0x1ddfa0: add             x0, NULL, #0x20  ; true
    // 0x1ddfa4: LeaveFrame
    //     0x1ddfa4: mov             SP, fp
    //     0x1ddfa8: ldp             fp, lr, [SP], #0x10
    // 0x1ddfac: ret
    //     0x1ddfac: ret             
    // 0x1ddfb0: ldur            x2, [fp, #-0x10]
    // 0x1ddfb4: ldur            x0, [fp, #-8]
    // 0x1ddfb8: ldur            x3, [fp, #-0x28]
    // 0x1ddfbc: ldur            x4, [fp, #-0x20]
    // 0x1ddfc0: b               #0x1dde34
    // 0x1ddfc4: r0 = ConcurrentModificationError()
    //     0x1ddfc4: bl              #0x186f0c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x1ddfc8: ldur            x6, [fp, #-8]
    // 0x1ddfcc: StoreField: r0->field_b = r6
    //     0x1ddfcc: stur            w6, [x0, #0xb]
    // 0x1ddfd0: r0 = Throw()
    //     0x1ddfd0: bl              #0x3e41c8  ; ThrowStub
    // 0x1ddfd4: brk             #0
    // 0x1ddfd8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1ddfd8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1ddfdc: b               #0x1dde04
    // 0x1ddfe0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1ddfe0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1ddfe4: b               #0x1dde40
    // 0x1ddfe8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1ddfe8: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1ddfec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1ddfec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ children(/* No info */) {
    // ** addr: 0x1ddff0, size: 0x960
    // 0x1ddff0: EnterFrame
    //     0x1ddff0: stp             fp, lr, [SP, #-0x10]!
    //     0x1ddff4: mov             fp, SP
    // 0x1ddff8: AllocStack(0x28)
    //     0x1ddff8: sub             SP, SP, #0x28
    // 0x1ddffc: CheckStackOverflow
    //     0x1ddffc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1de000: cmp             SP, x16
    //     0x1de004: b.ls            #0x1de8f0
    // 0x1de008: r16 = <RenderBox>
    //     0x1de008: add             x16, PP, #9, lsl #12  ; [pp+0x9f78] TypeArguments: <RenderBox>
    //     0x1de00c: ldr             x16, [x16, #0xf78]
    // 0x1de010: stp             xzr, x16, [SP]
    // 0x1de014: r0 = _GrowableList()
    //     0x1de014: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x1de018: stur            x0, [fp, #-8]
    // 0x1de01c: ldr             x16, [fp, #0x10]
    // 0x1de020: r30 = Instance__DecorationSlot
    //     0x1de020: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x1de024: ldr             lr, [lr, #0x388]
    // 0x1de028: stp             lr, x16, [SP]
    // 0x1de02c: r0 = childForSlot()
    //     0x1de02c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de030: cmp             w0, NULL
    // 0x1de034: b.eq            #0x1de0e4
    // 0x1de038: ldur            x0, [fp, #-8]
    // 0x1de03c: ldr             x16, [fp, #0x10]
    // 0x1de040: str             x16, [SP]
    // 0x1de044: r0 = icon()
    //     0x1de044: bl              #0x1cf18c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::icon
    // 0x1de048: stur            x0, [fp, #-0x18]
    // 0x1de04c: cmp             w0, NULL
    // 0x1de050: b.eq            #0x1de8f8
    // 0x1de054: ldur            x1, [fp, #-8]
    // 0x1de058: LoadField: r2 = r1->field_b
    //     0x1de058: ldur            w2, [x1, #0xb]
    // 0x1de05c: DecompressPointer r2
    //     0x1de05c: add             x2, x2, HEAP, lsl #32
    // 0x1de060: LoadField: r3 = r1->field_f
    //     0x1de060: ldur            w3, [x1, #0xf]
    // 0x1de064: DecompressPointer r3
    //     0x1de064: add             x3, x3, HEAP, lsl #32
    // 0x1de068: LoadField: r4 = r3->field_b
    //     0x1de068: ldur            w4, [x3, #0xb]
    // 0x1de06c: DecompressPointer r4
    //     0x1de06c: add             x4, x4, HEAP, lsl #32
    // 0x1de070: r3 = LoadInt32Instr(r2)
    //     0x1de070: sbfx            x3, x2, #1, #0x1f
    // 0x1de074: stur            x3, [fp, #-0x10]
    // 0x1de078: r2 = LoadInt32Instr(r4)
    //     0x1de078: sbfx            x2, x4, #1, #0x1f
    // 0x1de07c: cmp             x3, x2
    // 0x1de080: b.ne            #0x1de08c
    // 0x1de084: str             x1, [SP]
    // 0x1de088: r0 = _growToNextCapacity()
    //     0x1de088: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de08c: ldur            x2, [fp, #-8]
    // 0x1de090: ldur            x3, [fp, #-0x10]
    // 0x1de094: add             x0, x3, #1
    // 0x1de098: lsl             x1, x0, #1
    // 0x1de09c: StoreField: r2->field_b = r1
    //     0x1de09c: stur            w1, [x2, #0xb]
    // 0x1de0a0: mov             x1, x3
    // 0x1de0a4: cmp             x1, x0
    // 0x1de0a8: b.hs            #0x1de8fc
    // 0x1de0ac: LoadField: r1 = r2->field_f
    //     0x1de0ac: ldur            w1, [x2, #0xf]
    // 0x1de0b0: DecompressPointer r1
    //     0x1de0b0: add             x1, x1, HEAP, lsl #32
    // 0x1de0b4: ldur            x0, [fp, #-0x18]
    // 0x1de0b8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de0b8: add             x25, x1, x3, lsl #2
    //     0x1de0bc: add             x25, x25, #0xf
    //     0x1de0c0: str             w0, [x25]
    //     0x1de0c4: tbz             w0, #0, #0x1de0e0
    //     0x1de0c8: ldurb           w16, [x1, #-1]
    //     0x1de0cc: ldurb           w17, [x0, #-1]
    //     0x1de0d0: and             x16, x17, x16, lsr #2
    //     0x1de0d4: tst             x16, HEAP, lsr #32
    //     0x1de0d8: b.eq            #0x1de0e0
    //     0x1de0dc: bl              #0x3e41ec
    // 0x1de0e0: b               #0x1de0e8
    // 0x1de0e4: ldur            x2, [fp, #-8]
    // 0x1de0e8: ldr             x16, [fp, #0x10]
    // 0x1de0ec: r30 = Instance__DecorationSlot
    //     0x1de0ec: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x1de0f0: ldr             lr, [lr, #0x390]
    // 0x1de0f4: stp             lr, x16, [SP]
    // 0x1de0f8: r0 = childForSlot()
    //     0x1de0f8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de0fc: cmp             w0, NULL
    // 0x1de100: b.eq            #0x1de1b0
    // 0x1de104: ldur            x0, [fp, #-8]
    // 0x1de108: ldr             x16, [fp, #0x10]
    // 0x1de10c: str             x16, [SP]
    // 0x1de110: r0 = input()
    //     0x1de110: bl              #0x1cf0cc  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::input
    // 0x1de114: stur            x0, [fp, #-0x18]
    // 0x1de118: cmp             w0, NULL
    // 0x1de11c: b.eq            #0x1de900
    // 0x1de120: ldur            x1, [fp, #-8]
    // 0x1de124: LoadField: r2 = r1->field_b
    //     0x1de124: ldur            w2, [x1, #0xb]
    // 0x1de128: DecompressPointer r2
    //     0x1de128: add             x2, x2, HEAP, lsl #32
    // 0x1de12c: LoadField: r3 = r1->field_f
    //     0x1de12c: ldur            w3, [x1, #0xf]
    // 0x1de130: DecompressPointer r3
    //     0x1de130: add             x3, x3, HEAP, lsl #32
    // 0x1de134: LoadField: r4 = r3->field_b
    //     0x1de134: ldur            w4, [x3, #0xb]
    // 0x1de138: DecompressPointer r4
    //     0x1de138: add             x4, x4, HEAP, lsl #32
    // 0x1de13c: r3 = LoadInt32Instr(r2)
    //     0x1de13c: sbfx            x3, x2, #1, #0x1f
    // 0x1de140: stur            x3, [fp, #-0x10]
    // 0x1de144: r2 = LoadInt32Instr(r4)
    //     0x1de144: sbfx            x2, x4, #1, #0x1f
    // 0x1de148: cmp             x3, x2
    // 0x1de14c: b.ne            #0x1de158
    // 0x1de150: str             x1, [SP]
    // 0x1de154: r0 = _growToNextCapacity()
    //     0x1de154: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de158: ldur            x2, [fp, #-8]
    // 0x1de15c: ldur            x3, [fp, #-0x10]
    // 0x1de160: add             x0, x3, #1
    // 0x1de164: lsl             x1, x0, #1
    // 0x1de168: StoreField: r2->field_b = r1
    //     0x1de168: stur            w1, [x2, #0xb]
    // 0x1de16c: mov             x1, x3
    // 0x1de170: cmp             x1, x0
    // 0x1de174: b.hs            #0x1de904
    // 0x1de178: LoadField: r1 = r2->field_f
    //     0x1de178: ldur            w1, [x2, #0xf]
    // 0x1de17c: DecompressPointer r1
    //     0x1de17c: add             x1, x1, HEAP, lsl #32
    // 0x1de180: ldur            x0, [fp, #-0x18]
    // 0x1de184: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de184: add             x25, x1, x3, lsl #2
    //     0x1de188: add             x25, x25, #0xf
    //     0x1de18c: str             w0, [x25]
    //     0x1de190: tbz             w0, #0, #0x1de1ac
    //     0x1de194: ldurb           w16, [x1, #-1]
    //     0x1de198: ldurb           w17, [x0, #-1]
    //     0x1de19c: and             x16, x17, x16, lsr #2
    //     0x1de1a0: tst             x16, HEAP, lsr #32
    //     0x1de1a4: b.eq            #0x1de1ac
    //     0x1de1a8: bl              #0x3e41ec
    // 0x1de1ac: b               #0x1de1b4
    // 0x1de1b0: ldur            x2, [fp, #-8]
    // 0x1de1b4: ldr             x16, [fp, #0x10]
    // 0x1de1b8: r30 = Instance__DecorationSlot
    //     0x1de1b8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1de1bc: ldr             lr, [lr, #0x398]
    // 0x1de1c0: stp             lr, x16, [SP]
    // 0x1de1c4: r0 = childForSlot()
    //     0x1de1c4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de1c8: cmp             w0, NULL
    // 0x1de1cc: b.eq            #0x1de27c
    // 0x1de1d0: ldur            x0, [fp, #-8]
    // 0x1de1d4: ldr             x16, [fp, #0x10]
    // 0x1de1d8: str             x16, [SP]
    // 0x1de1dc: r0 = prefixIcon()
    //     0x1de1dc: bl              #0x1cf14c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::prefixIcon
    // 0x1de1e0: stur            x0, [fp, #-0x18]
    // 0x1de1e4: cmp             w0, NULL
    // 0x1de1e8: b.eq            #0x1de908
    // 0x1de1ec: ldur            x1, [fp, #-8]
    // 0x1de1f0: LoadField: r2 = r1->field_b
    //     0x1de1f0: ldur            w2, [x1, #0xb]
    // 0x1de1f4: DecompressPointer r2
    //     0x1de1f4: add             x2, x2, HEAP, lsl #32
    // 0x1de1f8: LoadField: r3 = r1->field_f
    //     0x1de1f8: ldur            w3, [x1, #0xf]
    // 0x1de1fc: DecompressPointer r3
    //     0x1de1fc: add             x3, x3, HEAP, lsl #32
    // 0x1de200: LoadField: r4 = r3->field_b
    //     0x1de200: ldur            w4, [x3, #0xb]
    // 0x1de204: DecompressPointer r4
    //     0x1de204: add             x4, x4, HEAP, lsl #32
    // 0x1de208: r3 = LoadInt32Instr(r2)
    //     0x1de208: sbfx            x3, x2, #1, #0x1f
    // 0x1de20c: stur            x3, [fp, #-0x10]
    // 0x1de210: r2 = LoadInt32Instr(r4)
    //     0x1de210: sbfx            x2, x4, #1, #0x1f
    // 0x1de214: cmp             x3, x2
    // 0x1de218: b.ne            #0x1de224
    // 0x1de21c: str             x1, [SP]
    // 0x1de220: r0 = _growToNextCapacity()
    //     0x1de220: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de224: ldur            x2, [fp, #-8]
    // 0x1de228: ldur            x3, [fp, #-0x10]
    // 0x1de22c: add             x0, x3, #1
    // 0x1de230: lsl             x1, x0, #1
    // 0x1de234: StoreField: r2->field_b = r1
    //     0x1de234: stur            w1, [x2, #0xb]
    // 0x1de238: mov             x1, x3
    // 0x1de23c: cmp             x1, x0
    // 0x1de240: b.hs            #0x1de90c
    // 0x1de244: LoadField: r1 = r2->field_f
    //     0x1de244: ldur            w1, [x2, #0xf]
    // 0x1de248: DecompressPointer r1
    //     0x1de248: add             x1, x1, HEAP, lsl #32
    // 0x1de24c: ldur            x0, [fp, #-0x18]
    // 0x1de250: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de250: add             x25, x1, x3, lsl #2
    //     0x1de254: add             x25, x25, #0xf
    //     0x1de258: str             w0, [x25]
    //     0x1de25c: tbz             w0, #0, #0x1de278
    //     0x1de260: ldurb           w16, [x1, #-1]
    //     0x1de264: ldurb           w17, [x0, #-1]
    //     0x1de268: and             x16, x17, x16, lsr #2
    //     0x1de26c: tst             x16, HEAP, lsr #32
    //     0x1de270: b.eq            #0x1de278
    //     0x1de274: bl              #0x3e41ec
    // 0x1de278: b               #0x1de280
    // 0x1de27c: ldur            x2, [fp, #-8]
    // 0x1de280: ldr             x16, [fp, #0x10]
    // 0x1de284: r30 = Instance__DecorationSlot
    //     0x1de284: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x1de288: ldr             lr, [lr, #0x3a0]
    // 0x1de28c: stp             lr, x16, [SP]
    // 0x1de290: r0 = childForSlot()
    //     0x1de290: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de294: cmp             w0, NULL
    // 0x1de298: b.eq            #0x1de348
    // 0x1de29c: ldur            x0, [fp, #-8]
    // 0x1de2a0: ldr             x16, [fp, #0x10]
    // 0x1de2a4: str             x16, [SP]
    // 0x1de2a8: r0 = suffixIcon()
    //     0x1de2a8: bl              #0x1cefec  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::suffixIcon
    // 0x1de2ac: stur            x0, [fp, #-0x18]
    // 0x1de2b0: cmp             w0, NULL
    // 0x1de2b4: b.eq            #0x1de910
    // 0x1de2b8: ldur            x1, [fp, #-8]
    // 0x1de2bc: LoadField: r2 = r1->field_b
    //     0x1de2bc: ldur            w2, [x1, #0xb]
    // 0x1de2c0: DecompressPointer r2
    //     0x1de2c0: add             x2, x2, HEAP, lsl #32
    // 0x1de2c4: LoadField: r3 = r1->field_f
    //     0x1de2c4: ldur            w3, [x1, #0xf]
    // 0x1de2c8: DecompressPointer r3
    //     0x1de2c8: add             x3, x3, HEAP, lsl #32
    // 0x1de2cc: LoadField: r4 = r3->field_b
    //     0x1de2cc: ldur            w4, [x3, #0xb]
    // 0x1de2d0: DecompressPointer r4
    //     0x1de2d0: add             x4, x4, HEAP, lsl #32
    // 0x1de2d4: r3 = LoadInt32Instr(r2)
    //     0x1de2d4: sbfx            x3, x2, #1, #0x1f
    // 0x1de2d8: stur            x3, [fp, #-0x10]
    // 0x1de2dc: r2 = LoadInt32Instr(r4)
    //     0x1de2dc: sbfx            x2, x4, #1, #0x1f
    // 0x1de2e0: cmp             x3, x2
    // 0x1de2e4: b.ne            #0x1de2f0
    // 0x1de2e8: str             x1, [SP]
    // 0x1de2ec: r0 = _growToNextCapacity()
    //     0x1de2ec: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de2f0: ldur            x2, [fp, #-8]
    // 0x1de2f4: ldur            x3, [fp, #-0x10]
    // 0x1de2f8: add             x0, x3, #1
    // 0x1de2fc: lsl             x1, x0, #1
    // 0x1de300: StoreField: r2->field_b = r1
    //     0x1de300: stur            w1, [x2, #0xb]
    // 0x1de304: mov             x1, x3
    // 0x1de308: cmp             x1, x0
    // 0x1de30c: b.hs            #0x1de914
    // 0x1de310: LoadField: r1 = r2->field_f
    //     0x1de310: ldur            w1, [x2, #0xf]
    // 0x1de314: DecompressPointer r1
    //     0x1de314: add             x1, x1, HEAP, lsl #32
    // 0x1de318: ldur            x0, [fp, #-0x18]
    // 0x1de31c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de31c: add             x25, x1, x3, lsl #2
    //     0x1de320: add             x25, x25, #0xf
    //     0x1de324: str             w0, [x25]
    //     0x1de328: tbz             w0, #0, #0x1de344
    //     0x1de32c: ldurb           w16, [x1, #-1]
    //     0x1de330: ldurb           w17, [x0, #-1]
    //     0x1de334: and             x16, x17, x16, lsr #2
    //     0x1de338: tst             x16, HEAP, lsr #32
    //     0x1de33c: b.eq            #0x1de344
    //     0x1de340: bl              #0x3e41ec
    // 0x1de344: b               #0x1de34c
    // 0x1de348: ldur            x2, [fp, #-8]
    // 0x1de34c: ldr             x16, [fp, #0x10]
    // 0x1de350: r30 = Instance__DecorationSlot
    //     0x1de350: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x1de354: ldr             lr, [lr, #0x3a8]
    // 0x1de358: stp             lr, x16, [SP]
    // 0x1de35c: r0 = childForSlot()
    //     0x1de35c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de360: cmp             w0, NULL
    // 0x1de364: b.eq            #0x1de414
    // 0x1de368: ldur            x0, [fp, #-8]
    // 0x1de36c: ldr             x16, [fp, #0x10]
    // 0x1de370: str             x16, [SP]
    // 0x1de374: r0 = prefix()
    //     0x1de374: bl              #0x1cf10c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::prefix
    // 0x1de378: stur            x0, [fp, #-0x18]
    // 0x1de37c: cmp             w0, NULL
    // 0x1de380: b.eq            #0x1de918
    // 0x1de384: ldur            x1, [fp, #-8]
    // 0x1de388: LoadField: r2 = r1->field_b
    //     0x1de388: ldur            w2, [x1, #0xb]
    // 0x1de38c: DecompressPointer r2
    //     0x1de38c: add             x2, x2, HEAP, lsl #32
    // 0x1de390: LoadField: r3 = r1->field_f
    //     0x1de390: ldur            w3, [x1, #0xf]
    // 0x1de394: DecompressPointer r3
    //     0x1de394: add             x3, x3, HEAP, lsl #32
    // 0x1de398: LoadField: r4 = r3->field_b
    //     0x1de398: ldur            w4, [x3, #0xb]
    // 0x1de39c: DecompressPointer r4
    //     0x1de39c: add             x4, x4, HEAP, lsl #32
    // 0x1de3a0: r3 = LoadInt32Instr(r2)
    //     0x1de3a0: sbfx            x3, x2, #1, #0x1f
    // 0x1de3a4: stur            x3, [fp, #-0x10]
    // 0x1de3a8: r2 = LoadInt32Instr(r4)
    //     0x1de3a8: sbfx            x2, x4, #1, #0x1f
    // 0x1de3ac: cmp             x3, x2
    // 0x1de3b0: b.ne            #0x1de3bc
    // 0x1de3b4: str             x1, [SP]
    // 0x1de3b8: r0 = _growToNextCapacity()
    //     0x1de3b8: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de3bc: ldur            x2, [fp, #-8]
    // 0x1de3c0: ldur            x3, [fp, #-0x10]
    // 0x1de3c4: add             x0, x3, #1
    // 0x1de3c8: lsl             x1, x0, #1
    // 0x1de3cc: StoreField: r2->field_b = r1
    //     0x1de3cc: stur            w1, [x2, #0xb]
    // 0x1de3d0: mov             x1, x3
    // 0x1de3d4: cmp             x1, x0
    // 0x1de3d8: b.hs            #0x1de91c
    // 0x1de3dc: LoadField: r1 = r2->field_f
    //     0x1de3dc: ldur            w1, [x2, #0xf]
    // 0x1de3e0: DecompressPointer r1
    //     0x1de3e0: add             x1, x1, HEAP, lsl #32
    // 0x1de3e4: ldur            x0, [fp, #-0x18]
    // 0x1de3e8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de3e8: add             x25, x1, x3, lsl #2
    //     0x1de3ec: add             x25, x25, #0xf
    //     0x1de3f0: str             w0, [x25]
    //     0x1de3f4: tbz             w0, #0, #0x1de410
    //     0x1de3f8: ldurb           w16, [x1, #-1]
    //     0x1de3fc: ldurb           w17, [x0, #-1]
    //     0x1de400: and             x16, x17, x16, lsr #2
    //     0x1de404: tst             x16, HEAP, lsr #32
    //     0x1de408: b.eq            #0x1de410
    //     0x1de40c: bl              #0x3e41ec
    // 0x1de410: b               #0x1de418
    // 0x1de414: ldur            x2, [fp, #-8]
    // 0x1de418: ldr             x16, [fp, #0x10]
    // 0x1de41c: r30 = Instance__DecorationSlot
    //     0x1de41c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x1de420: ldr             lr, [lr, #0x3b0]
    // 0x1de424: stp             lr, x16, [SP]
    // 0x1de428: r0 = childForSlot()
    //     0x1de428: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de42c: cmp             w0, NULL
    // 0x1de430: b.eq            #0x1de4e0
    // 0x1de434: ldur            x0, [fp, #-8]
    // 0x1de438: ldr             x16, [fp, #0x10]
    // 0x1de43c: str             x16, [SP]
    // 0x1de440: r0 = suffix()
    //     0x1de440: bl              #0x1cf04c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::suffix
    // 0x1de444: stur            x0, [fp, #-0x18]
    // 0x1de448: cmp             w0, NULL
    // 0x1de44c: b.eq            #0x1de920
    // 0x1de450: ldur            x1, [fp, #-8]
    // 0x1de454: LoadField: r2 = r1->field_b
    //     0x1de454: ldur            w2, [x1, #0xb]
    // 0x1de458: DecompressPointer r2
    //     0x1de458: add             x2, x2, HEAP, lsl #32
    // 0x1de45c: LoadField: r3 = r1->field_f
    //     0x1de45c: ldur            w3, [x1, #0xf]
    // 0x1de460: DecompressPointer r3
    //     0x1de460: add             x3, x3, HEAP, lsl #32
    // 0x1de464: LoadField: r4 = r3->field_b
    //     0x1de464: ldur            w4, [x3, #0xb]
    // 0x1de468: DecompressPointer r4
    //     0x1de468: add             x4, x4, HEAP, lsl #32
    // 0x1de46c: r3 = LoadInt32Instr(r2)
    //     0x1de46c: sbfx            x3, x2, #1, #0x1f
    // 0x1de470: stur            x3, [fp, #-0x10]
    // 0x1de474: r2 = LoadInt32Instr(r4)
    //     0x1de474: sbfx            x2, x4, #1, #0x1f
    // 0x1de478: cmp             x3, x2
    // 0x1de47c: b.ne            #0x1de488
    // 0x1de480: str             x1, [SP]
    // 0x1de484: r0 = _growToNextCapacity()
    //     0x1de484: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de488: ldur            x2, [fp, #-8]
    // 0x1de48c: ldur            x3, [fp, #-0x10]
    // 0x1de490: add             x0, x3, #1
    // 0x1de494: lsl             x1, x0, #1
    // 0x1de498: StoreField: r2->field_b = r1
    //     0x1de498: stur            w1, [x2, #0xb]
    // 0x1de49c: mov             x1, x3
    // 0x1de4a0: cmp             x1, x0
    // 0x1de4a4: b.hs            #0x1de924
    // 0x1de4a8: LoadField: r1 = r2->field_f
    //     0x1de4a8: ldur            w1, [x2, #0xf]
    // 0x1de4ac: DecompressPointer r1
    //     0x1de4ac: add             x1, x1, HEAP, lsl #32
    // 0x1de4b0: ldur            x0, [fp, #-0x18]
    // 0x1de4b4: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de4b4: add             x25, x1, x3, lsl #2
    //     0x1de4b8: add             x25, x25, #0xf
    //     0x1de4bc: str             w0, [x25]
    //     0x1de4c0: tbz             w0, #0, #0x1de4dc
    //     0x1de4c4: ldurb           w16, [x1, #-1]
    //     0x1de4c8: ldurb           w17, [x0, #-1]
    //     0x1de4cc: and             x16, x17, x16, lsr #2
    //     0x1de4d0: tst             x16, HEAP, lsr #32
    //     0x1de4d4: b.eq            #0x1de4dc
    //     0x1de4d8: bl              #0x3e41ec
    // 0x1de4dc: b               #0x1de4e4
    // 0x1de4e0: ldur            x2, [fp, #-8]
    // 0x1de4e4: ldr             x16, [fp, #0x10]
    // 0x1de4e8: r30 = Instance__DecorationSlot
    //     0x1de4e8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1de4ec: ldr             lr, [lr, #0x3b8]
    // 0x1de4f0: stp             lr, x16, [SP]
    // 0x1de4f4: r0 = childForSlot()
    //     0x1de4f4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de4f8: cmp             w0, NULL
    // 0x1de4fc: b.eq            #0x1de5ac
    // 0x1de500: ldur            x0, [fp, #-8]
    // 0x1de504: ldr             x16, [fp, #0x10]
    // 0x1de508: str             x16, [SP]
    // 0x1de50c: r0 = label()
    //     0x1de50c: bl              #0x1d8544  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::label
    // 0x1de510: stur            x0, [fp, #-0x18]
    // 0x1de514: cmp             w0, NULL
    // 0x1de518: b.eq            #0x1de928
    // 0x1de51c: ldur            x1, [fp, #-8]
    // 0x1de520: LoadField: r2 = r1->field_b
    //     0x1de520: ldur            w2, [x1, #0xb]
    // 0x1de524: DecompressPointer r2
    //     0x1de524: add             x2, x2, HEAP, lsl #32
    // 0x1de528: LoadField: r3 = r1->field_f
    //     0x1de528: ldur            w3, [x1, #0xf]
    // 0x1de52c: DecompressPointer r3
    //     0x1de52c: add             x3, x3, HEAP, lsl #32
    // 0x1de530: LoadField: r4 = r3->field_b
    //     0x1de530: ldur            w4, [x3, #0xb]
    // 0x1de534: DecompressPointer r4
    //     0x1de534: add             x4, x4, HEAP, lsl #32
    // 0x1de538: r3 = LoadInt32Instr(r2)
    //     0x1de538: sbfx            x3, x2, #1, #0x1f
    // 0x1de53c: stur            x3, [fp, #-0x10]
    // 0x1de540: r2 = LoadInt32Instr(r4)
    //     0x1de540: sbfx            x2, x4, #1, #0x1f
    // 0x1de544: cmp             x3, x2
    // 0x1de548: b.ne            #0x1de554
    // 0x1de54c: str             x1, [SP]
    // 0x1de550: r0 = _growToNextCapacity()
    //     0x1de550: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de554: ldur            x2, [fp, #-8]
    // 0x1de558: ldur            x3, [fp, #-0x10]
    // 0x1de55c: add             x0, x3, #1
    // 0x1de560: lsl             x1, x0, #1
    // 0x1de564: StoreField: r2->field_b = r1
    //     0x1de564: stur            w1, [x2, #0xb]
    // 0x1de568: mov             x1, x3
    // 0x1de56c: cmp             x1, x0
    // 0x1de570: b.hs            #0x1de92c
    // 0x1de574: LoadField: r1 = r2->field_f
    //     0x1de574: ldur            w1, [x2, #0xf]
    // 0x1de578: DecompressPointer r1
    //     0x1de578: add             x1, x1, HEAP, lsl #32
    // 0x1de57c: ldur            x0, [fp, #-0x18]
    // 0x1de580: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de580: add             x25, x1, x3, lsl #2
    //     0x1de584: add             x25, x25, #0xf
    //     0x1de588: str             w0, [x25]
    //     0x1de58c: tbz             w0, #0, #0x1de5a8
    //     0x1de590: ldurb           w16, [x1, #-1]
    //     0x1de594: ldurb           w17, [x0, #-1]
    //     0x1de598: and             x16, x17, x16, lsr #2
    //     0x1de59c: tst             x16, HEAP, lsr #32
    //     0x1de5a0: b.eq            #0x1de5a8
    //     0x1de5a4: bl              #0x3e41ec
    // 0x1de5a8: b               #0x1de5b0
    // 0x1de5ac: ldur            x2, [fp, #-8]
    // 0x1de5b0: ldr             x16, [fp, #0x10]
    // 0x1de5b4: r30 = Instance__DecorationSlot
    //     0x1de5b4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x1de5b8: ldr             lr, [lr, #0x3c0]
    // 0x1de5bc: stp             lr, x16, [SP]
    // 0x1de5c0: r0 = childForSlot()
    //     0x1de5c0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de5c4: cmp             w0, NULL
    // 0x1de5c8: b.eq            #0x1de678
    // 0x1de5cc: ldur            x0, [fp, #-8]
    // 0x1de5d0: ldr             x16, [fp, #0x10]
    // 0x1de5d4: str             x16, [SP]
    // 0x1de5d8: r0 = hint()
    //     0x1de5d8: bl              #0x1cf08c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::hint
    // 0x1de5dc: stur            x0, [fp, #-0x18]
    // 0x1de5e0: cmp             w0, NULL
    // 0x1de5e4: b.eq            #0x1de930
    // 0x1de5e8: ldur            x1, [fp, #-8]
    // 0x1de5ec: LoadField: r2 = r1->field_b
    //     0x1de5ec: ldur            w2, [x1, #0xb]
    // 0x1de5f0: DecompressPointer r2
    //     0x1de5f0: add             x2, x2, HEAP, lsl #32
    // 0x1de5f4: LoadField: r3 = r1->field_f
    //     0x1de5f4: ldur            w3, [x1, #0xf]
    // 0x1de5f8: DecompressPointer r3
    //     0x1de5f8: add             x3, x3, HEAP, lsl #32
    // 0x1de5fc: LoadField: r4 = r3->field_b
    //     0x1de5fc: ldur            w4, [x3, #0xb]
    // 0x1de600: DecompressPointer r4
    //     0x1de600: add             x4, x4, HEAP, lsl #32
    // 0x1de604: r3 = LoadInt32Instr(r2)
    //     0x1de604: sbfx            x3, x2, #1, #0x1f
    // 0x1de608: stur            x3, [fp, #-0x10]
    // 0x1de60c: r2 = LoadInt32Instr(r4)
    //     0x1de60c: sbfx            x2, x4, #1, #0x1f
    // 0x1de610: cmp             x3, x2
    // 0x1de614: b.ne            #0x1de620
    // 0x1de618: str             x1, [SP]
    // 0x1de61c: r0 = _growToNextCapacity()
    //     0x1de61c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de620: ldur            x2, [fp, #-8]
    // 0x1de624: ldur            x3, [fp, #-0x10]
    // 0x1de628: add             x0, x3, #1
    // 0x1de62c: lsl             x1, x0, #1
    // 0x1de630: StoreField: r2->field_b = r1
    //     0x1de630: stur            w1, [x2, #0xb]
    // 0x1de634: mov             x1, x3
    // 0x1de638: cmp             x1, x0
    // 0x1de63c: b.hs            #0x1de934
    // 0x1de640: LoadField: r1 = r2->field_f
    //     0x1de640: ldur            w1, [x2, #0xf]
    // 0x1de644: DecompressPointer r1
    //     0x1de644: add             x1, x1, HEAP, lsl #32
    // 0x1de648: ldur            x0, [fp, #-0x18]
    // 0x1de64c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de64c: add             x25, x1, x3, lsl #2
    //     0x1de650: add             x25, x25, #0xf
    //     0x1de654: str             w0, [x25]
    //     0x1de658: tbz             w0, #0, #0x1de674
    //     0x1de65c: ldurb           w16, [x1, #-1]
    //     0x1de660: ldurb           w17, [x0, #-1]
    //     0x1de664: and             x16, x17, x16, lsr #2
    //     0x1de668: tst             x16, HEAP, lsr #32
    //     0x1de66c: b.eq            #0x1de674
    //     0x1de670: bl              #0x3e41ec
    // 0x1de674: b               #0x1de67c
    // 0x1de678: ldur            x2, [fp, #-8]
    // 0x1de67c: ldr             x16, [fp, #0x10]
    // 0x1de680: r30 = Instance__DecorationSlot
    //     0x1de680: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x1de684: ldr             lr, [lr, #0x3c8]
    // 0x1de688: stp             lr, x16, [SP]
    // 0x1de68c: r0 = childForSlot()
    //     0x1de68c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de690: cmp             w0, NULL
    // 0x1de694: b.eq            #0x1de744
    // 0x1de698: ldur            x0, [fp, #-8]
    // 0x1de69c: ldr             x16, [fp, #0x10]
    // 0x1de6a0: str             x16, [SP]
    // 0x1de6a4: r0 = helperError()
    //     0x1de6a4: bl              #0x1d8584  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::helperError
    // 0x1de6a8: stur            x0, [fp, #-0x18]
    // 0x1de6ac: cmp             w0, NULL
    // 0x1de6b0: b.eq            #0x1de938
    // 0x1de6b4: ldur            x1, [fp, #-8]
    // 0x1de6b8: LoadField: r2 = r1->field_b
    //     0x1de6b8: ldur            w2, [x1, #0xb]
    // 0x1de6bc: DecompressPointer r2
    //     0x1de6bc: add             x2, x2, HEAP, lsl #32
    // 0x1de6c0: LoadField: r3 = r1->field_f
    //     0x1de6c0: ldur            w3, [x1, #0xf]
    // 0x1de6c4: DecompressPointer r3
    //     0x1de6c4: add             x3, x3, HEAP, lsl #32
    // 0x1de6c8: LoadField: r4 = r3->field_b
    //     0x1de6c8: ldur            w4, [x3, #0xb]
    // 0x1de6cc: DecompressPointer r4
    //     0x1de6cc: add             x4, x4, HEAP, lsl #32
    // 0x1de6d0: r3 = LoadInt32Instr(r2)
    //     0x1de6d0: sbfx            x3, x2, #1, #0x1f
    // 0x1de6d4: stur            x3, [fp, #-0x10]
    // 0x1de6d8: r2 = LoadInt32Instr(r4)
    //     0x1de6d8: sbfx            x2, x4, #1, #0x1f
    // 0x1de6dc: cmp             x3, x2
    // 0x1de6e0: b.ne            #0x1de6ec
    // 0x1de6e4: str             x1, [SP]
    // 0x1de6e8: r0 = _growToNextCapacity()
    //     0x1de6e8: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de6ec: ldur            x2, [fp, #-8]
    // 0x1de6f0: ldur            x3, [fp, #-0x10]
    // 0x1de6f4: add             x0, x3, #1
    // 0x1de6f8: lsl             x1, x0, #1
    // 0x1de6fc: StoreField: r2->field_b = r1
    //     0x1de6fc: stur            w1, [x2, #0xb]
    // 0x1de700: mov             x1, x3
    // 0x1de704: cmp             x1, x0
    // 0x1de708: b.hs            #0x1de93c
    // 0x1de70c: LoadField: r1 = r2->field_f
    //     0x1de70c: ldur            w1, [x2, #0xf]
    // 0x1de710: DecompressPointer r1
    //     0x1de710: add             x1, x1, HEAP, lsl #32
    // 0x1de714: ldur            x0, [fp, #-0x18]
    // 0x1de718: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de718: add             x25, x1, x3, lsl #2
    //     0x1de71c: add             x25, x25, #0xf
    //     0x1de720: str             w0, [x25]
    //     0x1de724: tbz             w0, #0, #0x1de740
    //     0x1de728: ldurb           w16, [x1, #-1]
    //     0x1de72c: ldurb           w17, [x0, #-1]
    //     0x1de730: and             x16, x17, x16, lsr #2
    //     0x1de734: tst             x16, HEAP, lsr #32
    //     0x1de738: b.eq            #0x1de740
    //     0x1de73c: bl              #0x3e41ec
    // 0x1de740: b               #0x1de748
    // 0x1de744: ldur            x2, [fp, #-8]
    // 0x1de748: ldr             x16, [fp, #0x10]
    // 0x1de74c: r30 = Instance__DecorationSlot
    //     0x1de74c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x1de750: ldr             lr, [lr, #0x3d0]
    // 0x1de754: stp             lr, x16, [SP]
    // 0x1de758: r0 = childForSlot()
    //     0x1de758: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de75c: cmp             w0, NULL
    // 0x1de760: b.eq            #0x1de810
    // 0x1de764: ldur            x0, [fp, #-8]
    // 0x1de768: ldr             x16, [fp, #0x10]
    // 0x1de76c: str             x16, [SP]
    // 0x1de770: r0 = counter()
    //     0x1de770: bl              #0x1d85c4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::counter
    // 0x1de774: stur            x0, [fp, #-0x18]
    // 0x1de778: cmp             w0, NULL
    // 0x1de77c: b.eq            #0x1de940
    // 0x1de780: ldur            x1, [fp, #-8]
    // 0x1de784: LoadField: r2 = r1->field_b
    //     0x1de784: ldur            w2, [x1, #0xb]
    // 0x1de788: DecompressPointer r2
    //     0x1de788: add             x2, x2, HEAP, lsl #32
    // 0x1de78c: LoadField: r3 = r1->field_f
    //     0x1de78c: ldur            w3, [x1, #0xf]
    // 0x1de790: DecompressPointer r3
    //     0x1de790: add             x3, x3, HEAP, lsl #32
    // 0x1de794: LoadField: r4 = r3->field_b
    //     0x1de794: ldur            w4, [x3, #0xb]
    // 0x1de798: DecompressPointer r4
    //     0x1de798: add             x4, x4, HEAP, lsl #32
    // 0x1de79c: r3 = LoadInt32Instr(r2)
    //     0x1de79c: sbfx            x3, x2, #1, #0x1f
    // 0x1de7a0: stur            x3, [fp, #-0x10]
    // 0x1de7a4: r2 = LoadInt32Instr(r4)
    //     0x1de7a4: sbfx            x2, x4, #1, #0x1f
    // 0x1de7a8: cmp             x3, x2
    // 0x1de7ac: b.ne            #0x1de7b8
    // 0x1de7b0: str             x1, [SP]
    // 0x1de7b4: r0 = _growToNextCapacity()
    //     0x1de7b4: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de7b8: ldur            x2, [fp, #-8]
    // 0x1de7bc: ldur            x3, [fp, #-0x10]
    // 0x1de7c0: add             x0, x3, #1
    // 0x1de7c4: lsl             x1, x0, #1
    // 0x1de7c8: StoreField: r2->field_b = r1
    //     0x1de7c8: stur            w1, [x2, #0xb]
    // 0x1de7cc: mov             x1, x3
    // 0x1de7d0: cmp             x1, x0
    // 0x1de7d4: b.hs            #0x1de944
    // 0x1de7d8: LoadField: r1 = r2->field_f
    //     0x1de7d8: ldur            w1, [x2, #0xf]
    // 0x1de7dc: DecompressPointer r1
    //     0x1de7dc: add             x1, x1, HEAP, lsl #32
    // 0x1de7e0: ldur            x0, [fp, #-0x18]
    // 0x1de7e4: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de7e4: add             x25, x1, x3, lsl #2
    //     0x1de7e8: add             x25, x25, #0xf
    //     0x1de7ec: str             w0, [x25]
    //     0x1de7f0: tbz             w0, #0, #0x1de80c
    //     0x1de7f4: ldurb           w16, [x1, #-1]
    //     0x1de7f8: ldurb           w17, [x0, #-1]
    //     0x1de7fc: and             x16, x17, x16, lsr #2
    //     0x1de800: tst             x16, HEAP, lsr #32
    //     0x1de804: b.eq            #0x1de80c
    //     0x1de808: bl              #0x3e41ec
    // 0x1de80c: b               #0x1de814
    // 0x1de810: ldur            x2, [fp, #-8]
    // 0x1de814: ldr             x16, [fp, #0x10]
    // 0x1de818: r30 = Instance__DecorationSlot
    //     0x1de818: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x1de81c: ldr             lr, [lr, #0x3d8]
    // 0x1de820: stp             lr, x16, [SP]
    // 0x1de824: r0 = childForSlot()
    //     0x1de824: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de828: cmp             w0, NULL
    // 0x1de82c: b.eq            #0x1de8dc
    // 0x1de830: ldur            x0, [fp, #-8]
    // 0x1de834: ldr             x16, [fp, #0x10]
    // 0x1de838: str             x16, [SP]
    // 0x1de83c: r0 = container()
    //     0x1de83c: bl              #0x1de950  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::container
    // 0x1de840: stur            x0, [fp, #-0x18]
    // 0x1de844: cmp             w0, NULL
    // 0x1de848: b.eq            #0x1de948
    // 0x1de84c: ldur            x1, [fp, #-8]
    // 0x1de850: LoadField: r2 = r1->field_b
    //     0x1de850: ldur            w2, [x1, #0xb]
    // 0x1de854: DecompressPointer r2
    //     0x1de854: add             x2, x2, HEAP, lsl #32
    // 0x1de858: LoadField: r3 = r1->field_f
    //     0x1de858: ldur            w3, [x1, #0xf]
    // 0x1de85c: DecompressPointer r3
    //     0x1de85c: add             x3, x3, HEAP, lsl #32
    // 0x1de860: LoadField: r4 = r3->field_b
    //     0x1de860: ldur            w4, [x3, #0xb]
    // 0x1de864: DecompressPointer r4
    //     0x1de864: add             x4, x4, HEAP, lsl #32
    // 0x1de868: r3 = LoadInt32Instr(r2)
    //     0x1de868: sbfx            x3, x2, #1, #0x1f
    // 0x1de86c: stur            x3, [fp, #-0x10]
    // 0x1de870: r2 = LoadInt32Instr(r4)
    //     0x1de870: sbfx            x2, x4, #1, #0x1f
    // 0x1de874: cmp             x3, x2
    // 0x1de878: b.ne            #0x1de884
    // 0x1de87c: str             x1, [SP]
    // 0x1de880: r0 = _growToNextCapacity()
    //     0x1de880: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x1de884: ldur            x2, [fp, #-8]
    // 0x1de888: ldur            x3, [fp, #-0x10]
    // 0x1de88c: add             x0, x3, #1
    // 0x1de890: lsl             x4, x0, #1
    // 0x1de894: StoreField: r2->field_b = r4
    //     0x1de894: stur            w4, [x2, #0xb]
    // 0x1de898: mov             x1, x3
    // 0x1de89c: cmp             x1, x0
    // 0x1de8a0: b.hs            #0x1de94c
    // 0x1de8a4: LoadField: r1 = r2->field_f
    //     0x1de8a4: ldur            w1, [x2, #0xf]
    // 0x1de8a8: DecompressPointer r1
    //     0x1de8a8: add             x1, x1, HEAP, lsl #32
    // 0x1de8ac: ldur            x0, [fp, #-0x18]
    // 0x1de8b0: ArrayStore: r1[r3] = r0  ; List_4
    //     0x1de8b0: add             x25, x1, x3, lsl #2
    //     0x1de8b4: add             x25, x25, #0xf
    //     0x1de8b8: str             w0, [x25]
    //     0x1de8bc: tbz             w0, #0, #0x1de8d8
    //     0x1de8c0: ldurb           w16, [x1, #-1]
    //     0x1de8c4: ldurb           w17, [x0, #-1]
    //     0x1de8c8: and             x16, x17, x16, lsr #2
    //     0x1de8cc: tst             x16, HEAP, lsr #32
    //     0x1de8d0: b.eq            #0x1de8d8
    //     0x1de8d4: bl              #0x3e41ec
    // 0x1de8d8: b               #0x1de8e0
    // 0x1de8dc: ldur            x2, [fp, #-8]
    // 0x1de8e0: mov             x0, x2
    // 0x1de8e4: LeaveFrame
    //     0x1de8e4: mov             SP, fp
    //     0x1de8e8: ldp             fp, lr, [SP], #0x10
    // 0x1de8ec: ret
    //     0x1de8ec: ret             
    // 0x1de8f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1de8f0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1de8f4: b               #0x1de008
    // 0x1de8f8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de8f8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de8fc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de8fc: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de900: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de900: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de904: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de904: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de908: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de908: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de90c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de90c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de910: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de910: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de914: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de914: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de918: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de918: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de91c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de91c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de920: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de920: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de924: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de924: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de928: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de928: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de92c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de92c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de930: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de930: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de934: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de934: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de938: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de938: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de93c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de93c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de940: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de940: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de944: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de944: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x1de948: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1de948: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1de94c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1de94c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  get _ container(/* No info */) {
    // ** addr: 0x1de950, size: 0x40
    // 0x1de950: EnterFrame
    //     0x1de950: stp             fp, lr, [SP, #-0x10]!
    //     0x1de954: mov             fp, SP
    // 0x1de958: AllocStack(0x10)
    //     0x1de958: sub             SP, SP, #0x10
    // 0x1de95c: CheckStackOverflow
    //     0x1de95c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1de960: cmp             SP, x16
    //     0x1de964: b.ls            #0x1de988
    // 0x1de968: ldr             x16, [fp, #0x10]
    // 0x1de96c: r30 = Instance__DecorationSlot
    //     0x1de96c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x1de970: ldr             lr, [lr, #0x3d8]
    // 0x1de974: stp             lr, x16, [SP]
    // 0x1de978: r0 = childForSlot()
    //     0x1de978: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1de97c: LeaveFrame
    //     0x1de97c: mov             SP, fp
    //     0x1de980: ldp             fp, lr, [SP], #0x10
    // 0x1de984: ret
    //     0x1de984: ret             
    // 0x1de988: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1de988: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1de98c: b               #0x1de968
  }
  _ computeMaxIntrinsicWidth(/* No info */) {
    // ** addr: 0x1e50dc, size: 0x248
    // 0x1e50dc: EnterFrame
    //     0x1e50dc: stp             fp, lr, [SP, #-0x10]!
    //     0x1e50e0: mov             fp, SP
    // 0x1e50e4: AllocStack(0x28)
    //     0x1e50e4: sub             SP, SP, #0x28
    // 0x1e50e8: CheckStackOverflow
    //     0x1e50e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1e50ec: cmp             SP, x16
    //     0x1e50f0: b.ls            #0x1e530c
    // 0x1e50f4: ldr             x16, [fp, #0x18]
    // 0x1e50f8: r30 = Instance__DecorationSlot
    //     0x1e50f8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x1e50fc: ldr             lr, [lr, #0x388]
    // 0x1e5100: stp             lr, x16, [SP]
    // 0x1e5104: r0 = childForSlot()
    //     0x1e5104: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1e5108: mov             x1, x0
    // 0x1e510c: ldr             x0, [fp, #0x10]
    // 0x1e5110: LoadField: d0 = r0->field_7
    //     0x1e5110: ldur            d0, [x0, #7]
    // 0x1e5114: stur            d0, [fp, #-8]
    // 0x1e5118: str             x1, [SP, #8]
    // 0x1e511c: str             d0, [SP]
    // 0x1e5120: r0 = _maxWidth()
    //     0x1e5120: bl              #0x1e5370  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x1e5124: ldr             x0, [fp, #0x18]
    // 0x1e5128: LoadField: r1 = r0->field_63
    //     0x1e5128: ldur            w1, [x0, #0x63]
    // 0x1e512c: DecompressPointer r1
    //     0x1e512c: add             x1, x1, HEAP, lsl #32
    // 0x1e5130: LoadField: r2 = r1->field_7
    //     0x1e5130: ldur            w2, [x1, #7]
    // 0x1e5134: DecompressPointer r2
    //     0x1e5134: add             x2, x2, HEAP, lsl #32
    // 0x1e5138: LoadField: d1 = r2->field_7
    //     0x1e5138: ldur            d1, [x2, #7]
    // 0x1e513c: fadd            d2, d0, d1
    // 0x1e5140: stur            d2, [fp, #-0x10]
    // 0x1e5144: r16 = Instance__DecorationSlot
    //     0x1e5144: add             x16, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1e5148: ldr             x16, [x16, #0x398]
    // 0x1e514c: stp             x16, x0, [SP]
    // 0x1e5150: r0 = childForSlot()
    //     0x1e5150: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1e5154: str             x0, [SP, #8]
    // 0x1e5158: ldur            d0, [fp, #-8]
    // 0x1e515c: str             d0, [SP]
    // 0x1e5160: r0 = _maxWidth()
    //     0x1e5160: bl              #0x1e5370  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x1e5164: mov             v1.16b, v0.16b
    // 0x1e5168: ldur            d0, [fp, #-0x10]
    // 0x1e516c: fadd            d2, d0, d1
    // 0x1e5170: stur            d2, [fp, #-0x18]
    // 0x1e5174: ldr             x16, [fp, #0x18]
    // 0x1e5178: r30 = Instance__DecorationSlot
    //     0x1e5178: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x1e517c: ldr             lr, [lr, #0x3a8]
    // 0x1e5180: stp             lr, x16, [SP]
    // 0x1e5184: r0 = childForSlot()
    //     0x1e5184: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1e5188: str             x0, [SP, #8]
    // 0x1e518c: ldur            d0, [fp, #-8]
    // 0x1e5190: str             d0, [SP]
    // 0x1e5194: r0 = _maxWidth()
    //     0x1e5194: bl              #0x1e5370  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x1e5198: mov             v1.16b, v0.16b
    // 0x1e519c: ldur            d0, [fp, #-0x18]
    // 0x1e51a0: fadd            d2, d0, d1
    // 0x1e51a4: stur            d2, [fp, #-0x10]
    // 0x1e51a8: ldr             x16, [fp, #0x18]
    // 0x1e51ac: r30 = Instance__DecorationSlot
    //     0x1e51ac: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x1e51b0: ldr             lr, [lr, #0x390]
    // 0x1e51b4: stp             lr, x16, [SP]
    // 0x1e51b8: r0 = childForSlot()
    //     0x1e51b8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1e51bc: str             x0, [SP, #8]
    // 0x1e51c0: ldur            d0, [fp, #-8]
    // 0x1e51c4: str             d0, [SP]
    // 0x1e51c8: r0 = _maxWidth()
    //     0x1e51c8: bl              #0x1e5370  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x1e51cc: stur            d0, [fp, #-0x18]
    // 0x1e51d0: ldr             x16, [fp, #0x18]
    // 0x1e51d4: r30 = Instance__DecorationSlot
    //     0x1e51d4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x1e51d8: ldr             lr, [lr, #0x3c0]
    // 0x1e51dc: stp             lr, x16, [SP]
    // 0x1e51e0: r0 = childForSlot()
    //     0x1e51e0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1e51e4: str             x0, [SP, #8]
    // 0x1e51e8: ldur            d0, [fp, #-8]
    // 0x1e51ec: str             d0, [SP]
    // 0x1e51f0: r0 = _maxWidth()
    //     0x1e51f0: bl              #0x1e5370  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x1e51f4: mov             v1.16b, v0.16b
    // 0x1e51f8: ldur            d0, [fp, #-0x18]
    // 0x1e51fc: fcmp            d0, d1
    // 0x1e5200: b.le            #0x1e520c
    // 0x1e5204: mov             v2.16b, v0.16b
    // 0x1e5208: b               #0x1e5248
    // 0x1e520c: fcmp            d1, d0
    // 0x1e5210: b.le            #0x1e521c
    // 0x1e5214: mov             v2.16b, v1.16b
    // 0x1e5218: b               #0x1e5248
    // 0x1e521c: d2 = 0.000000
    //     0x1e521c: eor             v2.16b, v2.16b, v2.16b
    // 0x1e5220: d2 = 0.000000
    //     0x1e5220: eor             v2.16b, v2.16b, v2.16b
    // 0x1e5224: fcmp            d0, d2
    // 0x1e5228: b.ne            #0x1e5234
    // 0x1e522c: fadd            d2, d0, d1
    // 0x1e5230: b               #0x1e5248
    // 0x1e5234: fcmp            d1, d1
    // 0x1e5238: b.vc            #0x1e5244
    // 0x1e523c: mov             v2.16b, v1.16b
    // 0x1e5240: b               #0x1e5248
    // 0x1e5244: mov             v2.16b, v0.16b
    // 0x1e5248: ldr             x0, [fp, #0x18]
    // 0x1e524c: ldur            d1, [fp, #-0x10]
    // 0x1e5250: ldur            d0, [fp, #-8]
    // 0x1e5254: fadd            d3, d1, d2
    // 0x1e5258: stur            d3, [fp, #-0x18]
    // 0x1e525c: r16 = Instance__DecorationSlot
    //     0x1e525c: add             x16, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x1e5260: ldr             x16, [x16, #0x3b0]
    // 0x1e5264: stp             x16, x0, [SP]
    // 0x1e5268: r0 = childForSlot()
    //     0x1e5268: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1e526c: str             x0, [SP, #8]
    // 0x1e5270: ldur            d0, [fp, #-8]
    // 0x1e5274: str             d0, [SP]
    // 0x1e5278: r0 = _maxWidth()
    //     0x1e5278: bl              #0x1e5370  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x1e527c: mov             v1.16b, v0.16b
    // 0x1e5280: ldur            d0, [fp, #-0x18]
    // 0x1e5284: fadd            d2, d0, d1
    // 0x1e5288: stur            d2, [fp, #-0x10]
    // 0x1e528c: ldr             x16, [fp, #0x18]
    // 0x1e5290: r30 = Instance__DecorationSlot
    //     0x1e5290: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x1e5294: ldr             lr, [lr, #0x3a0]
    // 0x1e5298: stp             lr, x16, [SP]
    // 0x1e529c: r0 = childForSlot()
    //     0x1e529c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1e52a0: str             x0, [SP, #8]
    // 0x1e52a4: ldur            d0, [fp, #-8]
    // 0x1e52a8: str             d0, [SP]
    // 0x1e52ac: r0 = _maxWidth()
    //     0x1e52ac: bl              #0x1e5370  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x1e52b0: mov             v1.16b, v0.16b
    // 0x1e52b4: ldur            d0, [fp, #-0x10]
    // 0x1e52b8: fadd            d2, d0, d1
    // 0x1e52bc: ldr             x1, [fp, #0x18]
    // 0x1e52c0: LoadField: r2 = r1->field_63
    //     0x1e52c0: ldur            w2, [x1, #0x63]
    // 0x1e52c4: DecompressPointer r2
    //     0x1e52c4: add             x2, x2, HEAP, lsl #32
    // 0x1e52c8: LoadField: r1 = r2->field_7
    //     0x1e52c8: ldur            w1, [x2, #7]
    // 0x1e52cc: DecompressPointer r1
    //     0x1e52cc: add             x1, x1, HEAP, lsl #32
    // 0x1e52d0: LoadField: d0 = r1->field_17
    //     0x1e52d0: ldur            d0, [x1, #0x17]
    // 0x1e52d4: fadd            d1, d2, d0
    // 0x1e52d8: r0 = inline_Allocate_Double()
    //     0x1e52d8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x1e52dc: add             x0, x0, #0x10
    //     0x1e52e0: cmp             x1, x0
    //     0x1e52e4: b.ls            #0x1e5314
    //     0x1e52e8: str             x0, [THR, #0x50]  ; THR::top
    //     0x1e52ec: sub             x0, x0, #0xf
    //     0x1e52f0: movz            x1, #0xd148
    //     0x1e52f4: movk            x1, #0x3, lsl #16
    //     0x1e52f8: stur            x1, [x0, #-1]
    // 0x1e52fc: StoreField: r0->field_7 = d1
    //     0x1e52fc: stur            d1, [x0, #7]
    // 0x1e5300: LeaveFrame
    //     0x1e5300: mov             SP, fp
    //     0x1e5304: ldp             fp, lr, [SP], #0x10
    // 0x1e5308: ret
    //     0x1e5308: ret             
    // 0x1e530c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1e530c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1e5310: b               #0x1e50f4
    // 0x1e5314: SaveReg d1
    //     0x1e5314: str             q1, [SP, #-0x10]!
    // 0x1e5318: r0 = AllocateDouble()
    //     0x1e5318: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1e531c: RestoreReg d1
    //     0x1e531c: ldr             q1, [SP], #0x10
    // 0x1e5320: b               #0x1e52fc
  }
  [closure] double computeMaxIntrinsicWidth(dynamic, double) {
    // ** addr: 0x1e5324, size: 0x4c
    // 0x1e5324: EnterFrame
    //     0x1e5324: stp             fp, lr, [SP, #-0x10]!
    //     0x1e5328: mov             fp, SP
    // 0x1e532c: AllocStack(0x10)
    //     0x1e532c: sub             SP, SP, #0x10
    // 0x1e5330: SetupParameters()
    //     0x1e5330: ldr             x0, [fp, #0x18]
    //     0x1e5334: ldur            w1, [x0, #0x17]
    //     0x1e5338: add             x1, x1, HEAP, lsl #32
    // 0x1e533c: CheckStackOverflow
    //     0x1e533c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1e5340: cmp             SP, x16
    //     0x1e5344: b.ls            #0x1e5368
    // 0x1e5348: LoadField: r0 = r1->field_f
    //     0x1e5348: ldur            w0, [x1, #0xf]
    // 0x1e534c: DecompressPointer r0
    //     0x1e534c: add             x0, x0, HEAP, lsl #32
    // 0x1e5350: ldr             x16, [fp, #0x10]
    // 0x1e5354: stp             x16, x0, [SP]
    // 0x1e5358: r0 = computeMaxIntrinsicWidth()
    //     0x1e5358: bl              #0x1e50dc  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMaxIntrinsicWidth
    // 0x1e535c: LeaveFrame
    //     0x1e535c: mov             SP, fp
    //     0x1e5360: ldp             fp, lr, [SP], #0x10
    // 0x1e5364: ret
    //     0x1e5364: ret             
    // 0x1e5368: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1e5368: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1e536c: b               #0x1e5348
  }
  static _ _maxWidth(/* No info */) {
    // ** addr: 0x1e5370, size: 0x54
    // 0x1e5370: EnterFrame
    //     0x1e5370: stp             fp, lr, [SP, #-0x10]!
    //     0x1e5374: mov             fp, SP
    // 0x1e5378: AllocStack(0x10)
    //     0x1e5378: sub             SP, SP, #0x10
    // 0x1e537c: CheckStackOverflow
    //     0x1e537c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1e5380: cmp             SP, x16
    //     0x1e5384: b.ls            #0x1e53bc
    // 0x1e5388: ldr             x0, [fp, #0x18]
    // 0x1e538c: cmp             w0, NULL
    // 0x1e5390: b.ne            #0x1e53a0
    // 0x1e5394: d0 = 0.000000
    //     0x1e5394: eor             v0.16b, v0.16b, v0.16b
    // 0x1e5398: d0 = 0.000000
    //     0x1e5398: eor             v0.16b, v0.16b, v0.16b
    // 0x1e539c: b               #0x1e53b0
    // 0x1e53a0: ldr             d0, [fp, #0x10]
    // 0x1e53a4: str             x0, [SP, #8]
    // 0x1e53a8: str             d0, [SP]
    // 0x1e53ac: r0 = getMaxIntrinsicWidth()
    //     0x1e53ac: bl              #0x1d30a0  ; [package:flutter/src/rendering/box.dart] RenderBox::getMaxIntrinsicWidth
    // 0x1e53b0: LeaveFrame
    //     0x1e53b0: mov             SP, fp
    //     0x1e53b4: ldp             fp, lr, [SP], #0x10
    // 0x1e53b8: ret
    //     0x1e53b8: ret             
    // 0x1e53bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1e53bc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1e53c0: b               #0x1e5388
  }
  dynamic computeMaxIntrinsicWidth(dynamic) {
    // ** addr: 0x1e6600, size: 0x18
    // 0x1e6600: r4 = 0
    //     0x1e6600: movz            x4, #0
    // 0x1e6604: r1 = Function 'computeMaxIntrinsicWidth':.
    //     0x1e6604: add             x17, PP, #0x15, lsl #12  ; [pp+0x15670] AnonymousClosure: (0x1e5324), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMaxIntrinsicWidth (0x1e50dc)
    //     0x1e6608: ldr             x1, [x17, #0x670]
    // 0x1e660c: r24 = BuildNonGenericMethodExtractorStub
    //     0x1e660c: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x1e6610: LoadField: r0 = r24->field_17
    //     0x1e6610: ldur            x0, [x24, #0x17]
    // 0x1e6614: br              x0
  }
  _ computeMaxIntrinsicHeight(/* No info */) {
    // ** addr: 0x1e7004, size: 0x3c
    // 0x1e7004: EnterFrame
    //     0x1e7004: stp             fp, lr, [SP, #-0x10]!
    //     0x1e7008: mov             fp, SP
    // 0x1e700c: AllocStack(0x10)
    //     0x1e700c: sub             SP, SP, #0x10
    // 0x1e7010: CheckStackOverflow
    //     0x1e7010: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1e7014: cmp             SP, x16
    //     0x1e7018: b.ls            #0x1e7038
    // 0x1e701c: ldr             x16, [fp, #0x18]
    // 0x1e7020: ldr             lr, [fp, #0x10]
    // 0x1e7024: stp             lr, x16, [SP]
    // 0x1e7028: r0 = computeMinIntrinsicHeight()
    //     0x1e7028: bl              #0x1d7c4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight
    // 0x1e702c: LeaveFrame
    //     0x1e702c: mov             SP, fp
    //     0x1e7030: ldp             fp, lr, [SP], #0x10
    // 0x1e7034: ret
    //     0x1e7034: ret             
    // 0x1e7038: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1e7038: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1e703c: b               #0x1e701c
  }
  dynamic computeMinIntrinsicHeight(dynamic) {
    // ** addr: 0x1e77b0, size: 0x18
    // 0x1e77b0: r4 = 0
    //     0x1e77b0: movz            x4, #0
    // 0x1e77b4: r1 = Function 'computeMinIntrinsicHeight':.
    //     0x1e77b4: add             x17, PP, #0x15, lsl #12  ; [pp+0x15668] AnonymousClosure: (0x1d8604), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight (0x1d7c4c)
    //     0x1e77b8: ldr             x1, [x17, #0x668]
    // 0x1e77bc: r24 = BuildNonGenericMethodExtractorStub
    //     0x1e77bc: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x1e77c0: LoadField: r0 = r24->field_17
    //     0x1e77c0: ldur            x0, [x24, #0x17]
    // 0x1e77c4: br              x0
  }
  dynamic computeMinIntrinsicWidth(dynamic) {
    // ** addr: 0x1e7af4, size: 0x18
    // 0x1e7af4: r4 = 0
    //     0x1e7af4: movz            x4, #0
    // 0x1e7af8: r1 = Function 'computeMinIntrinsicWidth':.
    //     0x1e7af8: add             x17, PP, #0x15, lsl #12  ; [pp+0x15678] AnonymousClosure: (0x1cf1cc), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicWidth (0x1ceda4)
    //     0x1e7afc: ldr             x1, [x17, #0x678]
    // 0x1e7b00: r24 = BuildNonGenericMethodExtractorStub
    //     0x1e7b00: ldr             x24, [PP, #0x6698]  ; [pp+0x6698] Stub: BuildNonGenericMethodExtractor (0x3e6608)
    // 0x1e7b04: LoadField: r0 = r24->field_17
    //     0x1e7b04: ldur            x0, [x24, #0x17]
    // 0x1e7b08: br              x0
  }
  _ paint(/* No info */) {
    // ** addr: 0x1f93ac, size: 0xcd0
    // 0x1f93ac: EnterFrame
    //     0x1f93ac: stp             fp, lr, [SP, #-0x10]!
    //     0x1f93b0: mov             fp, SP
    // 0x1f93b4: AllocStack(0x78)
    //     0x1f93b4: sub             SP, SP, #0x78
    // 0x1f93b8: CheckStackOverflow
    //     0x1f93b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1f93bc: cmp             SP, x16
    //     0x1f93c0: b.ls            #0x1f9f7c
    // 0x1f93c4: ldr             x16, [fp, #0x20]
    // 0x1f93c8: r30 = Instance__DecorationSlot
    //     0x1f93c8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x1f93cc: ldr             lr, [lr, #0x3d8]
    // 0x1f93d0: stp             lr, x16, [SP]
    // 0x1f93d4: r0 = childForSlot()
    //     0x1f93d4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f93d8: mov             x3, x0
    // 0x1f93dc: stur            x3, [fp, #-0x10]
    // 0x1f93e0: cmp             w3, NULL
    // 0x1f93e4: b.eq            #0x1f945c
    // 0x1f93e8: LoadField: r4 = r3->field_7
    //     0x1f93e8: ldur            w4, [x3, #7]
    // 0x1f93ec: DecompressPointer r4
    //     0x1f93ec: add             x4, x4, HEAP, lsl #32
    // 0x1f93f0: stur            x4, [fp, #-8]
    // 0x1f93f4: cmp             w4, NULL
    // 0x1f93f8: b.eq            #0x1f9f84
    // 0x1f93fc: mov             x0, x4
    // 0x1f9400: r2 = Null
    //     0x1f9400: mov             x2, NULL
    // 0x1f9404: r1 = Null
    //     0x1f9404: mov             x1, NULL
    // 0x1f9408: r4 = LoadClassIdInstr(r0)
    //     0x1f9408: ldur            x4, [x0, #-1]
    //     0x1f940c: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9410: sub             x4, x4, #0x25f
    // 0x1f9414: cmp             x4, #9
    // 0x1f9418: b.ls            #0x1f9430
    // 0x1f941c: r8 = BoxParentData
    //     0x1f941c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9420: ldr             x8, [x8, #0x50]
    // 0x1f9424: r3 = Null
    //     0x1f9424: add             x3, PP, #0x14, lsl #12  ; [pp+0x14430] Null
    //     0x1f9428: ldr             x3, [x3, #0x430]
    // 0x1f942c: r0 = DefaultTypeTest()
    //     0x1f942c: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9430: ldur            x0, [fp, #-8]
    // 0x1f9434: LoadField: r1 = r0->field_7
    //     0x1f9434: ldur            w1, [x0, #7]
    // 0x1f9438: DecompressPointer r1
    //     0x1f9438: add             x1, x1, HEAP, lsl #32
    // 0x1f943c: ldr             x16, [fp, #0x10]
    // 0x1f9440: stp             x16, x1, [SP]
    // 0x1f9444: r0 = +()
    //     0x1f9444: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9448: ldr             x16, [fp, #0x18]
    // 0x1f944c: ldur            lr, [fp, #-0x10]
    // 0x1f9450: stp             lr, x16, [SP, #8]
    // 0x1f9454: str             x0, [SP]
    // 0x1f9458: r0 = paintChild()
    //     0x1f9458: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f945c: ldr             x16, [fp, #0x20]
    // 0x1f9460: r30 = Instance__DecorationSlot
    //     0x1f9460: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1f9464: ldr             lr, [lr, #0x3b8]
    // 0x1f9468: stp             lr, x16, [SP]
    // 0x1f946c: r0 = childForSlot()
    //     0x1f946c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9470: cmp             w0, NULL
    // 0x1f9474: b.eq            #0x1f9a00
    // 0x1f9478: ldr             x0, [fp, #0x20]
    // 0x1f947c: r16 = Instance__DecorationSlot
    //     0x1f947c: add             x16, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1f9480: ldr             x16, [x16, #0x3b8]
    // 0x1f9484: stp             x16, x0, [SP]
    // 0x1f9488: r0 = childForSlot()
    //     0x1f9488: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f948c: cmp             w0, NULL
    // 0x1f9490: b.eq            #0x1f9f88
    // 0x1f9494: LoadField: r3 = r0->field_7
    //     0x1f9494: ldur            w3, [x0, #7]
    // 0x1f9498: DecompressPointer r3
    //     0x1f9498: add             x3, x3, HEAP, lsl #32
    // 0x1f949c: stur            x3, [fp, #-8]
    // 0x1f94a0: cmp             w3, NULL
    // 0x1f94a4: b.eq            #0x1f9f8c
    // 0x1f94a8: mov             x0, x3
    // 0x1f94ac: r2 = Null
    //     0x1f94ac: mov             x2, NULL
    // 0x1f94b0: r1 = Null
    //     0x1f94b0: mov             x1, NULL
    // 0x1f94b4: r4 = LoadClassIdInstr(r0)
    //     0x1f94b4: ldur            x4, [x0, #-1]
    //     0x1f94b8: ubfx            x4, x4, #0xc, #0x14
    // 0x1f94bc: sub             x4, x4, #0x25f
    // 0x1f94c0: cmp             x4, #9
    // 0x1f94c4: b.ls            #0x1f94dc
    // 0x1f94c8: r8 = BoxParentData
    //     0x1f94c8: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f94cc: ldr             x8, [x8, #0x50]
    // 0x1f94d0: r3 = Null
    //     0x1f94d0: add             x3, PP, #0x14, lsl #12  ; [pp+0x14440] Null
    //     0x1f94d4: ldr             x3, [x3, #0x440]
    // 0x1f94d8: r0 = DefaultTypeTest()
    //     0x1f94d8: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f94dc: ldur            x0, [fp, #-8]
    // 0x1f94e0: LoadField: r1 = r0->field_7
    //     0x1f94e0: ldur            w1, [x0, #7]
    // 0x1f94e4: DecompressPointer r1
    //     0x1f94e4: add             x1, x1, HEAP, lsl #32
    // 0x1f94e8: stur            x1, [fp, #-0x10]
    // 0x1f94ec: ldr             x16, [fp, #0x20]
    // 0x1f94f0: r30 = Instance__DecorationSlot
    //     0x1f94f0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1f94f4: ldr             lr, [lr, #0x3b8]
    // 0x1f94f8: stp             lr, x16, [SP]
    // 0x1f94fc: r0 = childForSlot()
    //     0x1f94fc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9500: str             x0, [SP]
    // 0x1f9504: r0 = _boxSize()
    //     0x1f9504: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x1f9508: LoadField: d0 = r0->field_f
    //     0x1f9508: ldur            d0, [x0, #0xf]
    // 0x1f950c: stur            d0, [fp, #-0x30]
    // 0x1f9510: ldr             x16, [fp, #0x20]
    // 0x1f9514: r30 = Instance__DecorationSlot
    //     0x1f9514: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1f9518: ldr             lr, [lr, #0x3b8]
    // 0x1f951c: stp             lr, x16, [SP]
    // 0x1f9520: r0 = childForSlot()
    //     0x1f9520: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9524: str             x0, [SP]
    // 0x1f9528: r0 = _boxSize()
    //     0x1f9528: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x1f952c: LoadField: d0 = r0->field_7
    //     0x1f952c: ldur            d0, [x0, #7]
    // 0x1f9530: d1 = 0.750000
    //     0x1f9530: fmov            d1, #0.75000000
    // 0x1f9534: d1 = 0.750000
    //     0x1f9534: fmov            d1, #0.75000000
    // 0x1f9538: fmul            d2, d0, d1
    // 0x1f953c: ldr             x1, [fp, #0x20]
    // 0x1f9540: stur            d2, [fp, #-0x48]
    // 0x1f9544: LoadField: r0 = r1->field_63
    //     0x1f9544: ldur            w0, [x1, #0x63]
    // 0x1f9548: DecompressPointer r0
    //     0x1f9548: add             x0, x0, HEAP, lsl #32
    // 0x1f954c: LoadField: r2 = r0->field_23
    //     0x1f954c: ldur            w2, [x0, #0x23]
    // 0x1f9550: DecompressPointer r2
    //     0x1f9550: add             x2, x2, HEAP, lsl #32
    // 0x1f9554: LoadField: r3 = r2->field_7
    //     0x1f9554: ldur            w3, [x2, #7]
    // 0x1f9558: DecompressPointer r3
    //     0x1f9558: add             x3, x3, HEAP, lsl #32
    // 0x1f955c: LoadField: d0 = r3->field_b
    //     0x1f955c: ldur            d0, [x3, #0xb]
    // 0x1f9560: stur            d0, [fp, #-0x40]
    // 0x1f9564: LoadField: d3 = r0->field_17
    //     0x1f9564: ldur            d3, [x0, #0x17]
    // 0x1f9568: stur            d3, [fp, #-0x38]
    // 0x1f956c: r0 = LoadClassIdInstr(r2)
    //     0x1f956c: ldur            x0, [x2, #-1]
    //     0x1f9570: ubfx            x0, x0, #0xc, #0x14
    // 0x1f9574: str             x2, [SP]
    // 0x1f9578: r0 = GDT[cid_x0 + -0x1000]()
    //     0x1f9578: sub             lr, x0, #1, lsl #12
    //     0x1f957c: ldr             lr, [x21, lr, lsl #3]
    //     0x1f9580: blr             lr
    // 0x1f9584: stur            x0, [fp, #-0x18]
    // 0x1f9588: tbnz            w0, #4, #0x1f95c4
    // 0x1f958c: ldur            d1, [fp, #-0x40]
    // 0x1f9590: ldur            d2, [fp, #-0x30]
    // 0x1f9594: d0 = 0.750000
    //     0x1f9594: fmov            d0, #0.75000000
    // 0x1f9598: d0 = 0.750000
    //     0x1f9598: fmov            d0, #0.75000000
    // 0x1f959c: d3 = 2.000000
    //     0x1f959c: fmov            d3, #2.00000000
    // 0x1f95a0: d3 = 2.000000
    //     0x1f95a0: fmov            d3, #2.00000000
    // 0x1f95a4: fneg            d4, d2
    // 0x1f95a8: fmul            d2, d4, d0
    // 0x1f95ac: fdiv            d0, d2, d3
    // 0x1f95b0: fdiv            d2, d1, d3
    // 0x1f95b4: fadd            d1, d0, d2
    // 0x1f95b8: mov             v2.16b, v1.16b
    // 0x1f95bc: ldr             x1, [fp, #0x20]
    // 0x1f95c0: b               #0x1f95e8
    // 0x1f95c4: ldr             x1, [fp, #0x20]
    // 0x1f95c8: d3 = 2.000000
    //     0x1f95c8: fmov            d3, #2.00000000
    // 0x1f95cc: d3 = 2.000000
    //     0x1f95cc: fmov            d3, #2.00000000
    // 0x1f95d0: LoadField: r2 = r1->field_63
    //     0x1f95d0: ldur            w2, [x1, #0x63]
    // 0x1f95d4: DecompressPointer r2
    //     0x1f95d4: add             x2, x2, HEAP, lsl #32
    // 0x1f95d8: LoadField: r3 = r2->field_7
    //     0x1f95d8: ldur            w3, [x2, #7]
    // 0x1f95dc: DecompressPointer r3
    //     0x1f95dc: add             x3, x3, HEAP, lsl #32
    // 0x1f95e0: LoadField: d0 = r3->field_f
    //     0x1f95e0: ldur            d0, [x3, #0xf]
    // 0x1f95e4: mov             v2.16b, v0.16b
    // 0x1f95e8: ldur            x2, [fp, #-0x10]
    // 0x1f95ec: ldur            d0, [fp, #-0x48]
    // 0x1f95f0: ldur            d1, [fp, #-0x38]
    // 0x1f95f4: stur            d2, [fp, #-0x30]
    // 0x1f95f8: r3 = inline_Allocate_Double()
    //     0x1f95f8: ldp             x3, x4, [THR, #0x50]  ; THR::top
    //     0x1f95fc: add             x3, x3, #0x10
    //     0x1f9600: cmp             x4, x3
    //     0x1f9604: b.ls            #0x1f9f90
    //     0x1f9608: str             x3, [THR, #0x50]  ; THR::top
    //     0x1f960c: sub             x3, x3, #0xf
    //     0x1f9610: movz            x4, #0xd148
    //     0x1f9614: movk            x4, #0x3, lsl #16
    //     0x1f9618: stur            x4, [x3, #-1]
    // 0x1f961c: StoreField: r3->field_7 = d1
    //     0x1f961c: stur            d1, [x3, #7]
    // 0x1f9620: stur            x3, [fp, #-8]
    // 0x1f9624: r16 = 1.000000
    //     0x1f9624: ldr             x16, [PP, #0x5298]  ; [pp+0x5298] 1
    // 0x1f9628: r30 = 0.750000
    //     0x1f9628: add             lr, PP, #0x11, lsl #12  ; [pp+0x119c8] 0.75
    //     0x1f962c: ldr             lr, [lr, #0x9c8]
    // 0x1f9630: stp             lr, x16, [SP, #8]
    // 0x1f9634: str             x3, [SP]
    // 0x1f9638: r0 = lerpDouble()
    //     0x1f9638: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x1f963c: stur            x0, [fp, #-0x20]
    // 0x1f9640: ldr             x16, [fp, #0x20]
    // 0x1f9644: r30 = Instance__DecorationSlot
    //     0x1f9644: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x1f9648: ldr             lr, [lr, #0x3d8]
    // 0x1f964c: stp             lr, x16, [SP]
    // 0x1f9650: r0 = childForSlot()
    //     0x1f9650: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9654: cmp             w0, NULL
    // 0x1f9658: b.eq            #0x1f9fbc
    // 0x1f965c: LoadField: r3 = r0->field_7
    //     0x1f965c: ldur            w3, [x0, #7]
    // 0x1f9660: DecompressPointer r3
    //     0x1f9660: add             x3, x3, HEAP, lsl #32
    // 0x1f9664: stur            x3, [fp, #-0x28]
    // 0x1f9668: cmp             w3, NULL
    // 0x1f966c: b.eq            #0x1f9fc0
    // 0x1f9670: mov             x0, x3
    // 0x1f9674: r2 = Null
    //     0x1f9674: mov             x2, NULL
    // 0x1f9678: r1 = Null
    //     0x1f9678: mov             x1, NULL
    // 0x1f967c: r4 = LoadClassIdInstr(r0)
    //     0x1f967c: ldur            x4, [x0, #-1]
    //     0x1f9680: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9684: sub             x4, x4, #0x25f
    // 0x1f9688: cmp             x4, #9
    // 0x1f968c: b.ls            #0x1f96a4
    // 0x1f9690: r8 = BoxParentData
    //     0x1f9690: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9694: ldr             x8, [x8, #0x50]
    // 0x1f9698: r3 = Null
    //     0x1f9698: add             x3, PP, #0x14, lsl #12  ; [pp+0x14450] Null
    //     0x1f969c: ldr             x3, [x3, #0x450]
    // 0x1f96a0: r0 = DefaultTypeTest()
    //     0x1f96a0: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f96a4: ldur            x0, [fp, #-0x28]
    // 0x1f96a8: LoadField: r1 = r0->field_7
    //     0x1f96a8: ldur            w1, [x0, #7]
    // 0x1f96ac: DecompressPointer r1
    //     0x1f96ac: add             x1, x1, HEAP, lsl #32
    // 0x1f96b0: LoadField: d0 = r1->field_7
    //     0x1f96b0: ldur            d0, [x1, #7]
    // 0x1f96b4: stur            d0, [fp, #-0x38]
    // 0x1f96b8: ldr             x16, [fp, #0x20]
    // 0x1f96bc: r30 = Instance__DecorationSlot
    //     0x1f96bc: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x1f96c0: ldr             lr, [lr, #0x3d8]
    // 0x1f96c4: stp             lr, x16, [SP]
    // 0x1f96c8: r0 = childForSlot()
    //     0x1f96c8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f96cc: str             x0, [SP]
    // 0x1f96d0: r0 = _boxSize()
    //     0x1f96d0: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x1f96d4: LoadField: d0 = r0->field_7
    //     0x1f96d4: ldur            d0, [x0, #7]
    // 0x1f96d8: d1 = 2.000000
    //     0x1f96d8: fmov            d1, #2.00000000
    // 0x1f96dc: d1 = 2.000000
    //     0x1f96dc: fmov            d1, #2.00000000
    // 0x1f96e0: fdiv            d2, d0, d1
    // 0x1f96e4: ldur            d0, [fp, #-0x38]
    // 0x1f96e8: fadd            d3, d0, d2
    // 0x1f96ec: ldur            d0, [fp, #-0x48]
    // 0x1f96f0: fdiv            d2, d0, d1
    // 0x1f96f4: fsub            d0, d3, d2
    // 0x1f96f8: ldur            x0, [fp, #-0x10]
    // 0x1f96fc: stur            d0, [fp, #-0x40]
    // 0x1f9700: LoadField: d1 = r0->field_7
    //     0x1f9700: ldur            d1, [x0, #7]
    // 0x1f9704: stur            d1, [fp, #-0x38]
    // 0x1f9708: ldr             x16, [fp, #0x20]
    // 0x1f970c: r30 = Instance__DecorationSlot
    //     0x1f970c: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1f9710: ldr             lr, [lr, #0x398]
    // 0x1f9714: stp             lr, x16, [SP]
    // 0x1f9718: r0 = childForSlot()
    //     0x1f9718: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f971c: cmp             w0, NULL
    // 0x1f9720: b.eq            #0x1f97a0
    // 0x1f9724: ldur            x0, [fp, #-0x18]
    // 0x1f9728: tbnz            w0, #4, #0x1f9798
    // 0x1f972c: ldr             x0, [fp, #0x20]
    // 0x1f9730: LoadField: r1 = r0->field_7b
    //     0x1f9730: ldur            w1, [x0, #0x7b]
    // 0x1f9734: DecompressPointer r1
    //     0x1f9734: add             x1, x1, HEAP, lsl #32
    // 0x1f9738: tbnz            w1, #4, #0x1f9780
    // 0x1f973c: r16 = Instance__DecorationSlot
    //     0x1f973c: add             x16, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1f9740: ldr             x16, [x16, #0x398]
    // 0x1f9744: stp             x16, x0, [SP]
    // 0x1f9748: r0 = childForSlot()
    //     0x1f9748: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f974c: str             x0, [SP]
    // 0x1f9750: r0 = _boxSize()
    //     0x1f9750: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x1f9754: LoadField: d0 = r0->field_7
    //     0x1f9754: ldur            d0, [x0, #7]
    // 0x1f9758: fneg            d1, d0
    // 0x1f975c: stur            d1, [fp, #-0x48]
    // 0x1f9760: ldr             x16, [fp, #0x20]
    // 0x1f9764: str             x16, [SP]
    // 0x1f9768: r0 = contentPadding()
    //     0x1f9768: bl              #0x1fa07c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::contentPadding
    // 0x1f976c: LoadField: d0 = r0->field_7
    //     0x1f976c: ldur            d0, [x0, #7]
    // 0x1f9770: ldur            d1, [fp, #-0x48]
    // 0x1f9774: fadd            d2, d1, d0
    // 0x1f9778: mov             v1.16b, v2.16b
    // 0x1f977c: b               #0x1f9788
    // 0x1f9780: d1 = 0.000000
    //     0x1f9780: eor             v1.16b, v1.16b, v1.16b
    // 0x1f9784: d1 = 0.000000
    //     0x1f9784: eor             v1.16b, v1.16b, v1.16b
    // 0x1f9788: ldur            d0, [fp, #-0x38]
    // 0x1f978c: fadd            d2, d0, d1
    // 0x1f9790: mov             v3.16b, v2.16b
    // 0x1f9794: b               #0x1f97a8
    // 0x1f9798: ldur            d0, [fp, #-0x38]
    // 0x1f979c: b               #0x1f97a4
    // 0x1f97a0: ldur            d0, [fp, #-0x38]
    // 0x1f97a4: mov             v3.16b, v0.16b
    // 0x1f97a8: ldr             x0, [fp, #0x20]
    // 0x1f97ac: ldur            x1, [fp, #-0x10]
    // 0x1f97b0: ldur            d2, [fp, #-0x30]
    // 0x1f97b4: ldur            x2, [fp, #-0x20]
    // 0x1f97b8: ldur            d1, [fp, #-0x40]
    // 0x1f97bc: r3 = inline_Allocate_Double()
    //     0x1f97bc: ldp             x3, x4, [THR, #0x50]  ; THR::top
    //     0x1f97c0: add             x3, x3, #0x10
    //     0x1f97c4: cmp             x4, x3
    //     0x1f97c8: b.ls            #0x1f9fc4
    //     0x1f97cc: str             x3, [THR, #0x50]  ; THR::top
    //     0x1f97d0: sub             x3, x3, #0xf
    //     0x1f97d4: movz            x4, #0xd148
    //     0x1f97d8: movk            x4, #0x3, lsl #16
    //     0x1f97dc: stur            x4, [x3, #-1]
    // 0x1f97e0: StoreField: r3->field_7 = d1
    //     0x1f97e0: stur            d1, [x3, #7]
    // 0x1f97e4: r4 = inline_Allocate_Double()
    //     0x1f97e4: ldp             x4, x5, [THR, #0x50]  ; THR::top
    //     0x1f97e8: add             x4, x4, #0x10
    //     0x1f97ec: cmp             x5, x4
    //     0x1f97f0: b.ls            #0x1f9ff0
    //     0x1f97f4: str             x4, [THR, #0x50]  ; THR::top
    //     0x1f97f8: sub             x4, x4, #0xf
    //     0x1f97fc: movz            x5, #0xd148
    //     0x1f9800: movk            x5, #0x3, lsl #16
    //     0x1f9804: stur            x5, [x4, #-1]
    // 0x1f9808: StoreField: r4->field_7 = d3
    //     0x1f9808: stur            d3, [x4, #7]
    // 0x1f980c: stp             x3, x4, [SP, #8]
    // 0x1f9810: r16 = 0.000000
    //     0x1f9810: ldr             x16, [PP, #0x5288]  ; [pp+0x5288] 0
    // 0x1f9814: str             x16, [SP]
    // 0x1f9818: r0 = lerpDouble()
    //     0x1f9818: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x1f981c: ldur            d0, [fp, #-0x38]
    // 0x1f9820: r1 = inline_Allocate_Double()
    //     0x1f9820: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x1f9824: add             x1, x1, #0x10
    //     0x1f9828: cmp             x2, x1
    //     0x1f982c: b.ls            #0x1fa01c
    //     0x1f9830: str             x1, [THR, #0x50]  ; THR::top
    //     0x1f9834: sub             x1, x1, #0xf
    //     0x1f9838: movz            x2, #0xd148
    //     0x1f983c: movk            x2, #0x3, lsl #16
    //     0x1f9840: stur            x2, [x1, #-1]
    // 0x1f9844: StoreField: r1->field_7 = d0
    //     0x1f9844: stur            d0, [x1, #7]
    // 0x1f9848: stp             x0, x1, [SP, #8]
    // 0x1f984c: ldur            x16, [fp, #-8]
    // 0x1f9850: str             x16, [SP]
    // 0x1f9854: r0 = lerpDouble()
    //     0x1f9854: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x1f9858: mov             x1, x0
    // 0x1f985c: ldur            x0, [fp, #-0x10]
    // 0x1f9860: stur            x1, [fp, #-0x18]
    // 0x1f9864: LoadField: d0 = r0->field_f
    //     0x1f9864: ldur            d0, [x0, #0xf]
    // 0x1f9868: ldur            d1, [fp, #-0x30]
    // 0x1f986c: stur            d0, [fp, #-0x38]
    // 0x1f9870: fsub            d2, d1, d0
    // 0x1f9874: r0 = inline_Allocate_Double()
    //     0x1f9874: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x1f9878: add             x0, x0, #0x10
    //     0x1f987c: cmp             x2, x0
    //     0x1f9880: b.ls            #0x1fa038
    //     0x1f9884: str             x0, [THR, #0x50]  ; THR::top
    //     0x1f9888: sub             x0, x0, #0xf
    //     0x1f988c: movz            x2, #0xd148
    //     0x1f9890: movk            x2, #0x3, lsl #16
    //     0x1f9894: stur            x2, [x0, #-1]
    // 0x1f9898: StoreField: r0->field_7 = d2
    //     0x1f9898: stur            d2, [x0, #7]
    // 0x1f989c: r16 = 0.000000
    //     0x1f989c: ldr             x16, [PP, #0x5288]  ; [pp+0x5288] 0
    // 0x1f98a0: stp             x0, x16, [SP, #8]
    // 0x1f98a4: ldur            x16, [fp, #-8]
    // 0x1f98a8: str             x16, [SP]
    // 0x1f98ac: r0 = lerpDouble()
    //     0x1f98ac: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x1f98b0: stur            x0, [fp, #-8]
    // 0x1f98b4: r0 = Matrix4()
    //     0x1f98b4: bl              #0x1dbda0  ; AllocateMatrix4Stub -> Matrix4 (size=0xc)
    // 0x1f98b8: r4 = 32
    //     0x1f98b8: movz            x4, #0x20
    // 0x1f98bc: stur            x0, [fp, #-0x10]
    // 0x1f98c0: r0 = AllocateFloat64Array()
    //     0x1f98c0: bl              #0x3e520c  ; AllocateFloat64ArrayStub
    // 0x1f98c4: mov             x1, x0
    // 0x1f98c8: ldur            x0, [fp, #-0x10]
    // 0x1f98cc: StoreField: r0->field_7 = r1
    //     0x1f98cc: stur            w1, [x0, #7]
    // 0x1f98d0: str             x0, [SP]
    // 0x1f98d4: r0 = setIdentity()
    //     0x1f98d4: bl              #0x1dd044  ; [package:vector_math/vector_math_64.dart] Matrix4::setIdentity
    // 0x1f98d8: ldur            x0, [fp, #-8]
    // 0x1f98dc: LoadField: d0 = r0->field_7
    //     0x1f98dc: ldur            d0, [x0, #7]
    // 0x1f98e0: ldur            d1, [fp, #-0x38]
    // 0x1f98e4: fadd            d2, d1, d0
    // 0x1f98e8: ldur            x0, [fp, #-0x18]
    // 0x1f98ec: LoadField: d0 = r0->field_7
    //     0x1f98ec: ldur            d0, [x0, #7]
    // 0x1f98f0: ldur            x16, [fp, #-0x10]
    // 0x1f98f4: str             x16, [SP, #0x10]
    // 0x1f98f8: str             d0, [SP, #8]
    // 0x1f98fc: str             d2, [SP]
    // 0x1f9900: r0 = translate()
    //     0x1f9900: bl              #0x1dcc34  ; [package:vector_math/vector_math_64.dart] Matrix4::translate
    // 0x1f9904: ldur            x0, [fp, #-0x20]
    // 0x1f9908: LoadField: d0 = r0->field_7
    //     0x1f9908: ldur            d0, [x0, #7]
    // 0x1f990c: ldur            x16, [fp, #-0x10]
    // 0x1f9910: str             x16, [SP, #8]
    // 0x1f9914: str             d0, [SP]
    // 0x1f9918: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x1f9918: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x1f991c: r0 = scale()
    //     0x1f991c: bl              #0x1da9f4  ; [package:vector_math/vector_math_64.dart] Matrix4::scale
    // 0x1f9920: ldur            x0, [fp, #-0x10]
    // 0x1f9924: ldr             x1, [fp, #0x20]
    // 0x1f9928: StoreField: r1->field_7f = r0
    //     0x1f9928: stur            w0, [x1, #0x7f]
    //     0x1f992c: ldurb           w16, [x1, #-1]
    //     0x1f9930: ldurb           w17, [x0, #-1]
    //     0x1f9934: and             x16, x17, x16, lsr #2
    //     0x1f9938: tst             x16, HEAP, lsr #32
    //     0x1f993c: b.eq            #0x1f9944
    //     0x1f9940: bl              #0x3e4608
    // 0x1f9944: LoadField: r0 = r1->field_37
    //     0x1f9944: ldur            w0, [x1, #0x37]
    // 0x1f9948: DecompressPointer r0
    //     0x1f9948: add             x0, x0, HEAP, lsl #32
    // 0x1f994c: r16 = Sentinel
    //     0x1f994c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x1f9950: cmp             w0, w16
    // 0x1f9954: b.eq            #0x1fa050
    // 0x1f9958: stur            x0, [fp, #-8]
    // 0x1f995c: r1 = 1
    //     0x1f995c: movz            x1, #0x1
    // 0x1f9960: r0 = AllocateContext()
    //     0x1f9960: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1f9964: mov             x4, x0
    // 0x1f9968: ldr             x3, [fp, #0x20]
    // 0x1f996c: stur            x4, [fp, #-0x28]
    // 0x1f9970: StoreField: r4->field_f = r3
    //     0x1f9970: stur            w3, [x4, #0xf]
    // 0x1f9974: LoadField: r5 = r3->field_2f
    //     0x1f9974: ldur            w5, [x3, #0x2f]
    // 0x1f9978: DecompressPointer r5
    //     0x1f9978: add             x5, x5, HEAP, lsl #32
    // 0x1f997c: stur            x5, [fp, #-0x20]
    // 0x1f9980: LoadField: r6 = r5->field_b
    //     0x1f9980: ldur            w6, [x5, #0xb]
    // 0x1f9984: DecompressPointer r6
    //     0x1f9984: add             x6, x6, HEAP, lsl #32
    // 0x1f9988: mov             x0, x6
    // 0x1f998c: stur            x6, [fp, #-0x18]
    // 0x1f9990: r2 = Null
    //     0x1f9990: mov             x2, NULL
    // 0x1f9994: r1 = Null
    //     0x1f9994: mov             x1, NULL
    // 0x1f9998: r4 = LoadClassIdInstr(r0)
    //     0x1f9998: ldur            x4, [x0, #-1]
    //     0x1f999c: ubfx            x4, x4, #0xc, #0x14
    // 0x1f99a0: cmp             x4, #0x1da
    // 0x1f99a4: b.eq            #0x1f99bc
    // 0x1f99a8: r8 = TransformLayer?
    //     0x1f99a8: add             x8, PP, #0xf, lsl #12  ; [pp+0xf168] Type: TransformLayer?
    //     0x1f99ac: ldr             x8, [x8, #0x168]
    // 0x1f99b0: r3 = Null
    //     0x1f99b0: add             x3, PP, #0x14, lsl #12  ; [pp+0x14460] Null
    //     0x1f99b4: ldr             x3, [x3, #0x460]
    // 0x1f99b8: r0 = DefaultNullableTypeTest()
    //     0x1f99b8: bl              #0x3e3e40  ; DefaultNullableTypeTestStub
    // 0x1f99bc: ldur            x2, [fp, #-0x28]
    // 0x1f99c0: r1 = Function '_paintLabel@73019562':.
    //     0x1f99c0: add             x1, PP, #0x14, lsl #12  ; [pp+0x14470] AnonymousClosure: (0x1fa384), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_paintLabel (0x1fa3d8)
    //     0x1f99c4: ldr             x1, [x1, #0x470]
    // 0x1f99c8: r0 = AllocateClosure()
    //     0x1f99c8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1f99cc: ldr             x16, [fp, #0x18]
    // 0x1f99d0: ldur            lr, [fp, #-8]
    // 0x1f99d4: stp             lr, x16, [SP, #0x20]
    // 0x1f99d8: ldr             x16, [fp, #0x10]
    // 0x1f99dc: ldur            lr, [fp, #-0x10]
    // 0x1f99e0: stp             lr, x16, [SP, #0x10]
    // 0x1f99e4: ldur            x16, [fp, #-0x18]
    // 0x1f99e8: stp             x16, x0, [SP]
    // 0x1f99ec: r0 = pushTransform()
    //     0x1f99ec: bl              #0x1f42f0  ; [package:flutter/src/rendering/object.dart] PaintingContext::pushTransform
    // 0x1f99f0: ldur            x16, [fp, #-0x20]
    // 0x1f99f4: stp             x0, x16, [SP]
    // 0x1f99f8: r0 = layer=()
    //     0x1f99f8: bl              #0x1e84b0  ; [package:flutter/src/rendering/layer.dart] LayerHandle::layer=
    // 0x1f99fc: b               #0x1f9a14
    // 0x1f9a00: ldr             x0, [fp, #0x20]
    // 0x1f9a04: LoadField: r1 = r0->field_2f
    //     0x1f9a04: ldur            w1, [x0, #0x2f]
    // 0x1f9a08: DecompressPointer r1
    //     0x1f9a08: add             x1, x1, HEAP, lsl #32
    // 0x1f9a0c: stp             NULL, x1, [SP]
    // 0x1f9a10: r0 = layer=()
    //     0x1f9a10: bl              #0x1e84b0  ; [package:flutter/src/rendering/layer.dart] LayerHandle::layer=
    // 0x1f9a14: ldr             x16, [fp, #0x20]
    // 0x1f9a18: r30 = Instance__DecorationSlot
    //     0x1f9a18: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x1f9a1c: ldr             lr, [lr, #0x388]
    // 0x1f9a20: stp             lr, x16, [SP]
    // 0x1f9a24: r0 = childForSlot()
    //     0x1f9a24: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9a28: mov             x3, x0
    // 0x1f9a2c: stur            x3, [fp, #-0x10]
    // 0x1f9a30: cmp             w3, NULL
    // 0x1f9a34: b.eq            #0x1f9aac
    // 0x1f9a38: LoadField: r4 = r3->field_7
    //     0x1f9a38: ldur            w4, [x3, #7]
    // 0x1f9a3c: DecompressPointer r4
    //     0x1f9a3c: add             x4, x4, HEAP, lsl #32
    // 0x1f9a40: stur            x4, [fp, #-8]
    // 0x1f9a44: cmp             w4, NULL
    // 0x1f9a48: b.eq            #0x1fa058
    // 0x1f9a4c: mov             x0, x4
    // 0x1f9a50: r2 = Null
    //     0x1f9a50: mov             x2, NULL
    // 0x1f9a54: r1 = Null
    //     0x1f9a54: mov             x1, NULL
    // 0x1f9a58: r4 = LoadClassIdInstr(r0)
    //     0x1f9a58: ldur            x4, [x0, #-1]
    //     0x1f9a5c: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9a60: sub             x4, x4, #0x25f
    // 0x1f9a64: cmp             x4, #9
    // 0x1f9a68: b.ls            #0x1f9a80
    // 0x1f9a6c: r8 = BoxParentData
    //     0x1f9a6c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9a70: ldr             x8, [x8, #0x50]
    // 0x1f9a74: r3 = Null
    //     0x1f9a74: add             x3, PP, #0x14, lsl #12  ; [pp+0x14478] Null
    //     0x1f9a78: ldr             x3, [x3, #0x478]
    // 0x1f9a7c: r0 = DefaultTypeTest()
    //     0x1f9a7c: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9a80: ldur            x0, [fp, #-8]
    // 0x1f9a84: LoadField: r1 = r0->field_7
    //     0x1f9a84: ldur            w1, [x0, #7]
    // 0x1f9a88: DecompressPointer r1
    //     0x1f9a88: add             x1, x1, HEAP, lsl #32
    // 0x1f9a8c: ldr             x16, [fp, #0x10]
    // 0x1f9a90: stp             x16, x1, [SP]
    // 0x1f9a94: r0 = +()
    //     0x1f9a94: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9a98: ldr             x16, [fp, #0x18]
    // 0x1f9a9c: ldur            lr, [fp, #-0x10]
    // 0x1f9aa0: stp             lr, x16, [SP, #8]
    // 0x1f9aa4: str             x0, [SP]
    // 0x1f9aa8: r0 = paintChild()
    //     0x1f9aa8: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9aac: ldr             x16, [fp, #0x20]
    // 0x1f9ab0: r30 = Instance__DecorationSlot
    //     0x1f9ab0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x1f9ab4: ldr             lr, [lr, #0x3a8]
    // 0x1f9ab8: stp             lr, x16, [SP]
    // 0x1f9abc: r0 = childForSlot()
    //     0x1f9abc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9ac0: mov             x3, x0
    // 0x1f9ac4: stur            x3, [fp, #-0x10]
    // 0x1f9ac8: cmp             w3, NULL
    // 0x1f9acc: b.eq            #0x1f9b44
    // 0x1f9ad0: LoadField: r4 = r3->field_7
    //     0x1f9ad0: ldur            w4, [x3, #7]
    // 0x1f9ad4: DecompressPointer r4
    //     0x1f9ad4: add             x4, x4, HEAP, lsl #32
    // 0x1f9ad8: stur            x4, [fp, #-8]
    // 0x1f9adc: cmp             w4, NULL
    // 0x1f9ae0: b.eq            #0x1fa05c
    // 0x1f9ae4: mov             x0, x4
    // 0x1f9ae8: r2 = Null
    //     0x1f9ae8: mov             x2, NULL
    // 0x1f9aec: r1 = Null
    //     0x1f9aec: mov             x1, NULL
    // 0x1f9af0: r4 = LoadClassIdInstr(r0)
    //     0x1f9af0: ldur            x4, [x0, #-1]
    //     0x1f9af4: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9af8: sub             x4, x4, #0x25f
    // 0x1f9afc: cmp             x4, #9
    // 0x1f9b00: b.ls            #0x1f9b18
    // 0x1f9b04: r8 = BoxParentData
    //     0x1f9b04: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9b08: ldr             x8, [x8, #0x50]
    // 0x1f9b0c: r3 = Null
    //     0x1f9b0c: add             x3, PP, #0x14, lsl #12  ; [pp+0x14488] Null
    //     0x1f9b10: ldr             x3, [x3, #0x488]
    // 0x1f9b14: r0 = DefaultTypeTest()
    //     0x1f9b14: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9b18: ldur            x0, [fp, #-8]
    // 0x1f9b1c: LoadField: r1 = r0->field_7
    //     0x1f9b1c: ldur            w1, [x0, #7]
    // 0x1f9b20: DecompressPointer r1
    //     0x1f9b20: add             x1, x1, HEAP, lsl #32
    // 0x1f9b24: ldr             x16, [fp, #0x10]
    // 0x1f9b28: stp             x16, x1, [SP]
    // 0x1f9b2c: r0 = +()
    //     0x1f9b2c: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9b30: ldr             x16, [fp, #0x18]
    // 0x1f9b34: ldur            lr, [fp, #-0x10]
    // 0x1f9b38: stp             lr, x16, [SP, #8]
    // 0x1f9b3c: str             x0, [SP]
    // 0x1f9b40: r0 = paintChild()
    //     0x1f9b40: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9b44: ldr             x16, [fp, #0x20]
    // 0x1f9b48: r30 = Instance__DecorationSlot
    //     0x1f9b48: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x1f9b4c: ldr             lr, [lr, #0x3b0]
    // 0x1f9b50: stp             lr, x16, [SP]
    // 0x1f9b54: r0 = childForSlot()
    //     0x1f9b54: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9b58: mov             x3, x0
    // 0x1f9b5c: stur            x3, [fp, #-0x10]
    // 0x1f9b60: cmp             w3, NULL
    // 0x1f9b64: b.eq            #0x1f9bdc
    // 0x1f9b68: LoadField: r4 = r3->field_7
    //     0x1f9b68: ldur            w4, [x3, #7]
    // 0x1f9b6c: DecompressPointer r4
    //     0x1f9b6c: add             x4, x4, HEAP, lsl #32
    // 0x1f9b70: stur            x4, [fp, #-8]
    // 0x1f9b74: cmp             w4, NULL
    // 0x1f9b78: b.eq            #0x1fa060
    // 0x1f9b7c: mov             x0, x4
    // 0x1f9b80: r2 = Null
    //     0x1f9b80: mov             x2, NULL
    // 0x1f9b84: r1 = Null
    //     0x1f9b84: mov             x1, NULL
    // 0x1f9b88: r4 = LoadClassIdInstr(r0)
    //     0x1f9b88: ldur            x4, [x0, #-1]
    //     0x1f9b8c: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9b90: sub             x4, x4, #0x25f
    // 0x1f9b94: cmp             x4, #9
    // 0x1f9b98: b.ls            #0x1f9bb0
    // 0x1f9b9c: r8 = BoxParentData
    //     0x1f9b9c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9ba0: ldr             x8, [x8, #0x50]
    // 0x1f9ba4: r3 = Null
    //     0x1f9ba4: add             x3, PP, #0x14, lsl #12  ; [pp+0x14498] Null
    //     0x1f9ba8: ldr             x3, [x3, #0x498]
    // 0x1f9bac: r0 = DefaultTypeTest()
    //     0x1f9bac: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9bb0: ldur            x0, [fp, #-8]
    // 0x1f9bb4: LoadField: r1 = r0->field_7
    //     0x1f9bb4: ldur            w1, [x0, #7]
    // 0x1f9bb8: DecompressPointer r1
    //     0x1f9bb8: add             x1, x1, HEAP, lsl #32
    // 0x1f9bbc: ldr             x16, [fp, #0x10]
    // 0x1f9bc0: stp             x16, x1, [SP]
    // 0x1f9bc4: r0 = +()
    //     0x1f9bc4: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9bc8: ldr             x16, [fp, #0x18]
    // 0x1f9bcc: ldur            lr, [fp, #-0x10]
    // 0x1f9bd0: stp             lr, x16, [SP, #8]
    // 0x1f9bd4: str             x0, [SP]
    // 0x1f9bd8: r0 = paintChild()
    //     0x1f9bd8: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9bdc: ldr             x16, [fp, #0x20]
    // 0x1f9be0: r30 = Instance__DecorationSlot
    //     0x1f9be0: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x1f9be4: ldr             lr, [lr, #0x398]
    // 0x1f9be8: stp             lr, x16, [SP]
    // 0x1f9bec: r0 = childForSlot()
    //     0x1f9bec: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9bf0: mov             x3, x0
    // 0x1f9bf4: stur            x3, [fp, #-0x10]
    // 0x1f9bf8: cmp             w3, NULL
    // 0x1f9bfc: b.eq            #0x1f9c74
    // 0x1f9c00: LoadField: r4 = r3->field_7
    //     0x1f9c00: ldur            w4, [x3, #7]
    // 0x1f9c04: DecompressPointer r4
    //     0x1f9c04: add             x4, x4, HEAP, lsl #32
    // 0x1f9c08: stur            x4, [fp, #-8]
    // 0x1f9c0c: cmp             w4, NULL
    // 0x1f9c10: b.eq            #0x1fa064
    // 0x1f9c14: mov             x0, x4
    // 0x1f9c18: r2 = Null
    //     0x1f9c18: mov             x2, NULL
    // 0x1f9c1c: r1 = Null
    //     0x1f9c1c: mov             x1, NULL
    // 0x1f9c20: r4 = LoadClassIdInstr(r0)
    //     0x1f9c20: ldur            x4, [x0, #-1]
    //     0x1f9c24: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9c28: sub             x4, x4, #0x25f
    // 0x1f9c2c: cmp             x4, #9
    // 0x1f9c30: b.ls            #0x1f9c48
    // 0x1f9c34: r8 = BoxParentData
    //     0x1f9c34: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9c38: ldr             x8, [x8, #0x50]
    // 0x1f9c3c: r3 = Null
    //     0x1f9c3c: add             x3, PP, #0x14, lsl #12  ; [pp+0x144a8] Null
    //     0x1f9c40: ldr             x3, [x3, #0x4a8]
    // 0x1f9c44: r0 = DefaultTypeTest()
    //     0x1f9c44: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9c48: ldur            x0, [fp, #-8]
    // 0x1f9c4c: LoadField: r1 = r0->field_7
    //     0x1f9c4c: ldur            w1, [x0, #7]
    // 0x1f9c50: DecompressPointer r1
    //     0x1f9c50: add             x1, x1, HEAP, lsl #32
    // 0x1f9c54: ldr             x16, [fp, #0x10]
    // 0x1f9c58: stp             x16, x1, [SP]
    // 0x1f9c5c: r0 = +()
    //     0x1f9c5c: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9c60: ldr             x16, [fp, #0x18]
    // 0x1f9c64: ldur            lr, [fp, #-0x10]
    // 0x1f9c68: stp             lr, x16, [SP, #8]
    // 0x1f9c6c: str             x0, [SP]
    // 0x1f9c70: r0 = paintChild()
    //     0x1f9c70: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9c74: ldr             x16, [fp, #0x20]
    // 0x1f9c78: r30 = Instance__DecorationSlot
    //     0x1f9c78: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x1f9c7c: ldr             lr, [lr, #0x3a0]
    // 0x1f9c80: stp             lr, x16, [SP]
    // 0x1f9c84: r0 = childForSlot()
    //     0x1f9c84: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9c88: mov             x3, x0
    // 0x1f9c8c: stur            x3, [fp, #-0x10]
    // 0x1f9c90: cmp             w3, NULL
    // 0x1f9c94: b.eq            #0x1f9d0c
    // 0x1f9c98: LoadField: r4 = r3->field_7
    //     0x1f9c98: ldur            w4, [x3, #7]
    // 0x1f9c9c: DecompressPointer r4
    //     0x1f9c9c: add             x4, x4, HEAP, lsl #32
    // 0x1f9ca0: stur            x4, [fp, #-8]
    // 0x1f9ca4: cmp             w4, NULL
    // 0x1f9ca8: b.eq            #0x1fa068
    // 0x1f9cac: mov             x0, x4
    // 0x1f9cb0: r2 = Null
    //     0x1f9cb0: mov             x2, NULL
    // 0x1f9cb4: r1 = Null
    //     0x1f9cb4: mov             x1, NULL
    // 0x1f9cb8: r4 = LoadClassIdInstr(r0)
    //     0x1f9cb8: ldur            x4, [x0, #-1]
    //     0x1f9cbc: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9cc0: sub             x4, x4, #0x25f
    // 0x1f9cc4: cmp             x4, #9
    // 0x1f9cc8: b.ls            #0x1f9ce0
    // 0x1f9ccc: r8 = BoxParentData
    //     0x1f9ccc: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9cd0: ldr             x8, [x8, #0x50]
    // 0x1f9cd4: r3 = Null
    //     0x1f9cd4: add             x3, PP, #0x14, lsl #12  ; [pp+0x144b8] Null
    //     0x1f9cd8: ldr             x3, [x3, #0x4b8]
    // 0x1f9cdc: r0 = DefaultTypeTest()
    //     0x1f9cdc: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9ce0: ldur            x0, [fp, #-8]
    // 0x1f9ce4: LoadField: r1 = r0->field_7
    //     0x1f9ce4: ldur            w1, [x0, #7]
    // 0x1f9ce8: DecompressPointer r1
    //     0x1f9ce8: add             x1, x1, HEAP, lsl #32
    // 0x1f9cec: ldr             x16, [fp, #0x10]
    // 0x1f9cf0: stp             x16, x1, [SP]
    // 0x1f9cf4: r0 = +()
    //     0x1f9cf4: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9cf8: ldr             x16, [fp, #0x18]
    // 0x1f9cfc: ldur            lr, [fp, #-0x10]
    // 0x1f9d00: stp             lr, x16, [SP, #8]
    // 0x1f9d04: str             x0, [SP]
    // 0x1f9d08: r0 = paintChild()
    //     0x1f9d08: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9d0c: ldr             x16, [fp, #0x20]
    // 0x1f9d10: r30 = Instance__DecorationSlot
    //     0x1f9d10: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x1f9d14: ldr             lr, [lr, #0x3c0]
    // 0x1f9d18: stp             lr, x16, [SP]
    // 0x1f9d1c: r0 = childForSlot()
    //     0x1f9d1c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9d20: mov             x3, x0
    // 0x1f9d24: stur            x3, [fp, #-0x10]
    // 0x1f9d28: cmp             w3, NULL
    // 0x1f9d2c: b.eq            #0x1f9da4
    // 0x1f9d30: LoadField: r4 = r3->field_7
    //     0x1f9d30: ldur            w4, [x3, #7]
    // 0x1f9d34: DecompressPointer r4
    //     0x1f9d34: add             x4, x4, HEAP, lsl #32
    // 0x1f9d38: stur            x4, [fp, #-8]
    // 0x1f9d3c: cmp             w4, NULL
    // 0x1f9d40: b.eq            #0x1fa06c
    // 0x1f9d44: mov             x0, x4
    // 0x1f9d48: r2 = Null
    //     0x1f9d48: mov             x2, NULL
    // 0x1f9d4c: r1 = Null
    //     0x1f9d4c: mov             x1, NULL
    // 0x1f9d50: r4 = LoadClassIdInstr(r0)
    //     0x1f9d50: ldur            x4, [x0, #-1]
    //     0x1f9d54: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9d58: sub             x4, x4, #0x25f
    // 0x1f9d5c: cmp             x4, #9
    // 0x1f9d60: b.ls            #0x1f9d78
    // 0x1f9d64: r8 = BoxParentData
    //     0x1f9d64: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9d68: ldr             x8, [x8, #0x50]
    // 0x1f9d6c: r3 = Null
    //     0x1f9d6c: add             x3, PP, #0x14, lsl #12  ; [pp+0x144c8] Null
    //     0x1f9d70: ldr             x3, [x3, #0x4c8]
    // 0x1f9d74: r0 = DefaultTypeTest()
    //     0x1f9d74: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9d78: ldur            x0, [fp, #-8]
    // 0x1f9d7c: LoadField: r1 = r0->field_7
    //     0x1f9d7c: ldur            w1, [x0, #7]
    // 0x1f9d80: DecompressPointer r1
    //     0x1f9d80: add             x1, x1, HEAP, lsl #32
    // 0x1f9d84: ldr             x16, [fp, #0x10]
    // 0x1f9d88: stp             x16, x1, [SP]
    // 0x1f9d8c: r0 = +()
    //     0x1f9d8c: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9d90: ldr             x16, [fp, #0x18]
    // 0x1f9d94: ldur            lr, [fp, #-0x10]
    // 0x1f9d98: stp             lr, x16, [SP, #8]
    // 0x1f9d9c: str             x0, [SP]
    // 0x1f9da0: r0 = paintChild()
    //     0x1f9da0: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9da4: ldr             x16, [fp, #0x20]
    // 0x1f9da8: r30 = Instance__DecorationSlot
    //     0x1f9da8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x1f9dac: ldr             lr, [lr, #0x390]
    // 0x1f9db0: stp             lr, x16, [SP]
    // 0x1f9db4: r0 = childForSlot()
    //     0x1f9db4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9db8: mov             x3, x0
    // 0x1f9dbc: stur            x3, [fp, #-0x10]
    // 0x1f9dc0: cmp             w3, NULL
    // 0x1f9dc4: b.eq            #0x1f9e3c
    // 0x1f9dc8: LoadField: r4 = r3->field_7
    //     0x1f9dc8: ldur            w4, [x3, #7]
    // 0x1f9dcc: DecompressPointer r4
    //     0x1f9dcc: add             x4, x4, HEAP, lsl #32
    // 0x1f9dd0: stur            x4, [fp, #-8]
    // 0x1f9dd4: cmp             w4, NULL
    // 0x1f9dd8: b.eq            #0x1fa070
    // 0x1f9ddc: mov             x0, x4
    // 0x1f9de0: r2 = Null
    //     0x1f9de0: mov             x2, NULL
    // 0x1f9de4: r1 = Null
    //     0x1f9de4: mov             x1, NULL
    // 0x1f9de8: r4 = LoadClassIdInstr(r0)
    //     0x1f9de8: ldur            x4, [x0, #-1]
    //     0x1f9dec: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9df0: sub             x4, x4, #0x25f
    // 0x1f9df4: cmp             x4, #9
    // 0x1f9df8: b.ls            #0x1f9e10
    // 0x1f9dfc: r8 = BoxParentData
    //     0x1f9dfc: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9e00: ldr             x8, [x8, #0x50]
    // 0x1f9e04: r3 = Null
    //     0x1f9e04: add             x3, PP, #0x14, lsl #12  ; [pp+0x144d8] Null
    //     0x1f9e08: ldr             x3, [x3, #0x4d8]
    // 0x1f9e0c: r0 = DefaultTypeTest()
    //     0x1f9e0c: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9e10: ldur            x0, [fp, #-8]
    // 0x1f9e14: LoadField: r1 = r0->field_7
    //     0x1f9e14: ldur            w1, [x0, #7]
    // 0x1f9e18: DecompressPointer r1
    //     0x1f9e18: add             x1, x1, HEAP, lsl #32
    // 0x1f9e1c: ldr             x16, [fp, #0x10]
    // 0x1f9e20: stp             x16, x1, [SP]
    // 0x1f9e24: r0 = +()
    //     0x1f9e24: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9e28: ldr             x16, [fp, #0x18]
    // 0x1f9e2c: ldur            lr, [fp, #-0x10]
    // 0x1f9e30: stp             lr, x16, [SP, #8]
    // 0x1f9e34: str             x0, [SP]
    // 0x1f9e38: r0 = paintChild()
    //     0x1f9e38: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9e3c: ldr             x16, [fp, #0x20]
    // 0x1f9e40: r30 = Instance__DecorationSlot
    //     0x1f9e40: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x1f9e44: ldr             lr, [lr, #0x3c8]
    // 0x1f9e48: stp             lr, x16, [SP]
    // 0x1f9e4c: r0 = childForSlot()
    //     0x1f9e4c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9e50: mov             x3, x0
    // 0x1f9e54: stur            x3, [fp, #-0x10]
    // 0x1f9e58: cmp             w3, NULL
    // 0x1f9e5c: b.eq            #0x1f9ed4
    // 0x1f9e60: LoadField: r4 = r3->field_7
    //     0x1f9e60: ldur            w4, [x3, #7]
    // 0x1f9e64: DecompressPointer r4
    //     0x1f9e64: add             x4, x4, HEAP, lsl #32
    // 0x1f9e68: stur            x4, [fp, #-8]
    // 0x1f9e6c: cmp             w4, NULL
    // 0x1f9e70: b.eq            #0x1fa074
    // 0x1f9e74: mov             x0, x4
    // 0x1f9e78: r2 = Null
    //     0x1f9e78: mov             x2, NULL
    // 0x1f9e7c: r1 = Null
    //     0x1f9e7c: mov             x1, NULL
    // 0x1f9e80: r4 = LoadClassIdInstr(r0)
    //     0x1f9e80: ldur            x4, [x0, #-1]
    //     0x1f9e84: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9e88: sub             x4, x4, #0x25f
    // 0x1f9e8c: cmp             x4, #9
    // 0x1f9e90: b.ls            #0x1f9ea8
    // 0x1f9e94: r8 = BoxParentData
    //     0x1f9e94: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9e98: ldr             x8, [x8, #0x50]
    // 0x1f9e9c: r3 = Null
    //     0x1f9e9c: add             x3, PP, #0x14, lsl #12  ; [pp+0x144e8] Null
    //     0x1f9ea0: ldr             x3, [x3, #0x4e8]
    // 0x1f9ea4: r0 = DefaultTypeTest()
    //     0x1f9ea4: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9ea8: ldur            x0, [fp, #-8]
    // 0x1f9eac: LoadField: r1 = r0->field_7
    //     0x1f9eac: ldur            w1, [x0, #7]
    // 0x1f9eb0: DecompressPointer r1
    //     0x1f9eb0: add             x1, x1, HEAP, lsl #32
    // 0x1f9eb4: ldr             x16, [fp, #0x10]
    // 0x1f9eb8: stp             x16, x1, [SP]
    // 0x1f9ebc: r0 = +()
    //     0x1f9ebc: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9ec0: ldr             x16, [fp, #0x18]
    // 0x1f9ec4: ldur            lr, [fp, #-0x10]
    // 0x1f9ec8: stp             lr, x16, [SP, #8]
    // 0x1f9ecc: str             x0, [SP]
    // 0x1f9ed0: r0 = paintChild()
    //     0x1f9ed0: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9ed4: ldr             x16, [fp, #0x20]
    // 0x1f9ed8: r30 = Instance__DecorationSlot
    //     0x1f9ed8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x1f9edc: ldr             lr, [lr, #0x3d0]
    // 0x1f9ee0: stp             lr, x16, [SP]
    // 0x1f9ee4: r0 = childForSlot()
    //     0x1f9ee4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1f9ee8: mov             x3, x0
    // 0x1f9eec: stur            x3, [fp, #-0x10]
    // 0x1f9ef0: cmp             w3, NULL
    // 0x1f9ef4: b.eq            #0x1f9f6c
    // 0x1f9ef8: LoadField: r4 = r3->field_7
    //     0x1f9ef8: ldur            w4, [x3, #7]
    // 0x1f9efc: DecompressPointer r4
    //     0x1f9efc: add             x4, x4, HEAP, lsl #32
    // 0x1f9f00: stur            x4, [fp, #-8]
    // 0x1f9f04: cmp             w4, NULL
    // 0x1f9f08: b.eq            #0x1fa078
    // 0x1f9f0c: mov             x0, x4
    // 0x1f9f10: r2 = Null
    //     0x1f9f10: mov             x2, NULL
    // 0x1f9f14: r1 = Null
    //     0x1f9f14: mov             x1, NULL
    // 0x1f9f18: r4 = LoadClassIdInstr(r0)
    //     0x1f9f18: ldur            x4, [x0, #-1]
    //     0x1f9f1c: ubfx            x4, x4, #0xc, #0x14
    // 0x1f9f20: sub             x4, x4, #0x25f
    // 0x1f9f24: cmp             x4, #9
    // 0x1f9f28: b.ls            #0x1f9f40
    // 0x1f9f2c: r8 = BoxParentData
    //     0x1f9f2c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x1f9f30: ldr             x8, [x8, #0x50]
    // 0x1f9f34: r3 = Null
    //     0x1f9f34: add             x3, PP, #0x14, lsl #12  ; [pp+0x144f8] Null
    //     0x1f9f38: ldr             x3, [x3, #0x4f8]
    // 0x1f9f3c: r0 = DefaultTypeTest()
    //     0x1f9f3c: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x1f9f40: ldur            x0, [fp, #-8]
    // 0x1f9f44: LoadField: r1 = r0->field_7
    //     0x1f9f44: ldur            w1, [x0, #7]
    // 0x1f9f48: DecompressPointer r1
    //     0x1f9f48: add             x1, x1, HEAP, lsl #32
    // 0x1f9f4c: ldr             x16, [fp, #0x10]
    // 0x1f9f50: stp             x16, x1, [SP]
    // 0x1f9f54: r0 = +()
    //     0x1f9f54: bl              #0x193ed0  ; [dart:ui] Offset::+
    // 0x1f9f58: ldr             x16, [fp, #0x18]
    // 0x1f9f5c: ldur            lr, [fp, #-0x10]
    // 0x1f9f60: stp             lr, x16, [SP, #8]
    // 0x1f9f64: str             x0, [SP]
    // 0x1f9f68: r0 = paintChild()
    //     0x1f9f68: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1f9f6c: r0 = Null
    //     0x1f9f6c: mov             x0, NULL
    // 0x1f9f70: LeaveFrame
    //     0x1f9f70: mov             SP, fp
    //     0x1f9f74: ldp             fp, lr, [SP], #0x10
    // 0x1f9f78: ret
    //     0x1f9f78: ret             
    // 0x1f9f7c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1f9f7c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1f9f80: b               #0x1f93c4
    // 0x1f9f84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1f9f84: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1f9f88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1f9f88: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1f9f8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1f9f8c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1f9f90: stp             q2, q3, [SP, #-0x20]!
    // 0x1f9f94: stp             q0, q1, [SP, #-0x20]!
    // 0x1f9f98: stp             x1, x2, [SP, #-0x10]!
    // 0x1f9f9c: SaveReg r0
    //     0x1f9f9c: str             x0, [SP, #-8]!
    // 0x1f9fa0: r0 = AllocateDouble()
    //     0x1f9fa0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1f9fa4: mov             x3, x0
    // 0x1f9fa8: RestoreReg r0
    //     0x1f9fa8: ldr             x0, [SP], #8
    // 0x1f9fac: ldp             x1, x2, [SP], #0x10
    // 0x1f9fb0: ldp             q0, q1, [SP], #0x20
    // 0x1f9fb4: ldp             q2, q3, [SP], #0x20
    // 0x1f9fb8: b               #0x1f961c
    // 0x1f9fbc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1f9fbc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1f9fc0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1f9fc0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1f9fc4: stp             q2, q3, [SP, #-0x20]!
    // 0x1f9fc8: stp             q0, q1, [SP, #-0x20]!
    // 0x1f9fcc: stp             x1, x2, [SP, #-0x10]!
    // 0x1f9fd0: SaveReg r0
    //     0x1f9fd0: str             x0, [SP, #-8]!
    // 0x1f9fd4: r0 = AllocateDouble()
    //     0x1f9fd4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1f9fd8: mov             x3, x0
    // 0x1f9fdc: RestoreReg r0
    //     0x1f9fdc: ldr             x0, [SP], #8
    // 0x1f9fe0: ldp             x1, x2, [SP], #0x10
    // 0x1f9fe4: ldp             q0, q1, [SP], #0x20
    // 0x1f9fe8: ldp             q2, q3, [SP], #0x20
    // 0x1f9fec: b               #0x1f97e0
    // 0x1f9ff0: stp             q2, q3, [SP, #-0x20]!
    // 0x1f9ff4: SaveReg d0
    //     0x1f9ff4: str             q0, [SP, #-0x10]!
    // 0x1f9ff8: stp             x2, x3, [SP, #-0x10]!
    // 0x1f9ffc: stp             x0, x1, [SP, #-0x10]!
    // 0x1fa000: r0 = AllocateDouble()
    //     0x1fa000: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1fa004: mov             x4, x0
    // 0x1fa008: ldp             x0, x1, [SP], #0x10
    // 0x1fa00c: ldp             x2, x3, [SP], #0x10
    // 0x1fa010: RestoreReg d0
    //     0x1fa010: ldr             q0, [SP], #0x10
    // 0x1fa014: ldp             q2, q3, [SP], #0x20
    // 0x1fa018: b               #0x1f9808
    // 0x1fa01c: SaveReg d0
    //     0x1fa01c: str             q0, [SP, #-0x10]!
    // 0x1fa020: SaveReg r0
    //     0x1fa020: str             x0, [SP, #-8]!
    // 0x1fa024: r0 = AllocateDouble()
    //     0x1fa024: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1fa028: mov             x1, x0
    // 0x1fa02c: RestoreReg r0
    //     0x1fa02c: ldr             x0, [SP], #8
    // 0x1fa030: RestoreReg d0
    //     0x1fa030: ldr             q0, [SP], #0x10
    // 0x1fa034: b               #0x1f9844
    // 0x1fa038: stp             q0, q2, [SP, #-0x20]!
    // 0x1fa03c: SaveReg r1
    //     0x1fa03c: str             x1, [SP, #-8]!
    // 0x1fa040: r0 = AllocateDouble()
    //     0x1fa040: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x1fa044: RestoreReg r1
    //     0x1fa044: ldr             x1, [SP], #8
    // 0x1fa048: ldp             q0, q2, [SP], #0x20
    // 0x1fa04c: b               #0x1f9898
    // 0x1fa050: r9 = _needsCompositing
    //     0x1fa050: ldr             x9, [PP, #0x3800]  ; [pp+0x3800] Field <RenderObject._needsCompositing@293266271>: late (offset: 0x38)
    // 0x1fa054: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x1fa054: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x1fa058: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa058: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa05c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa05c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa060: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa060: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa064: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa064: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa068: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa068: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa06c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa06c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa070: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa070: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa074: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa074: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1fa078: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa078: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ contentPadding(/* No info */) {
    // ** addr: 0x1fa07c, size: 0x18
    // 0x1fa07c: ldr             x1, [SP]
    // 0x1fa080: LoadField: r2 = r1->field_63
    //     0x1fa080: ldur            w2, [x1, #0x63]
    // 0x1fa084: DecompressPointer r2
    //     0x1fa084: add             x2, x2, HEAP, lsl #32
    // 0x1fa088: LoadField: r0 = r2->field_7
    //     0x1fa088: ldur            w0, [x2, #7]
    // 0x1fa08c: DecompressPointer r0
    //     0x1fa08c: add             x0, x0, HEAP, lsl #32
    // 0x1fa090: ret
    //     0x1fa090: ret             
  }
  static _ _boxSize(/* No info */) {
    // ** addr: 0x1fa33c, size: 0x48
    // 0x1fa33c: EnterFrame
    //     0x1fa33c: stp             fp, lr, [SP, #-0x10]!
    //     0x1fa340: mov             fp, SP
    // 0x1fa344: AllocStack(0x8)
    //     0x1fa344: sub             SP, SP, #8
    // 0x1fa348: CheckStackOverflow
    //     0x1fa348: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1fa34c: cmp             SP, x16
    //     0x1fa350: b.ls            #0x1fa37c
    // 0x1fa354: ldr             x0, [fp, #0x10]
    // 0x1fa358: cmp             w0, NULL
    // 0x1fa35c: b.ne            #0x1fa368
    // 0x1fa360: r0 = Instance_Size
    //     0x1fa360: ldr             x0, [PP, #0x2df0]  ; [pp+0x2df0] Obj!Size@47d451
    // 0x1fa364: b               #0x1fa370
    // 0x1fa368: str             x0, [SP]
    // 0x1fa36c: r0 = size()
    //     0x1fa36c: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x1fa370: LeaveFrame
    //     0x1fa370: mov             SP, fp
    //     0x1fa374: ldp             fp, lr, [SP], #0x10
    // 0x1fa378: ret
    //     0x1fa378: ret             
    // 0x1fa37c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1fa37c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1fa380: b               #0x1fa354
  }
  [closure] void _paintLabel(dynamic, PaintingContext, Offset) {
    // ** addr: 0x1fa384, size: 0x54
    // 0x1fa384: EnterFrame
    //     0x1fa384: stp             fp, lr, [SP, #-0x10]!
    //     0x1fa388: mov             fp, SP
    // 0x1fa38c: AllocStack(0x18)
    //     0x1fa38c: sub             SP, SP, #0x18
    // 0x1fa390: SetupParameters()
    //     0x1fa390: ldr             x0, [fp, #0x20]
    //     0x1fa394: ldur            w1, [x0, #0x17]
    //     0x1fa398: add             x1, x1, HEAP, lsl #32
    // 0x1fa39c: CheckStackOverflow
    //     0x1fa39c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1fa3a0: cmp             SP, x16
    //     0x1fa3a4: b.ls            #0x1fa3d0
    // 0x1fa3a8: LoadField: r0 = r1->field_f
    //     0x1fa3a8: ldur            w0, [x1, #0xf]
    // 0x1fa3ac: DecompressPointer r0
    //     0x1fa3ac: add             x0, x0, HEAP, lsl #32
    // 0x1fa3b0: ldr             x16, [fp, #0x18]
    // 0x1fa3b4: stp             x16, x0, [SP, #8]
    // 0x1fa3b8: ldr             x16, [fp, #0x10]
    // 0x1fa3bc: str             x16, [SP]
    // 0x1fa3c0: r0 = _paintLabel()
    //     0x1fa3c0: bl              #0x1fa3d8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_paintLabel
    // 0x1fa3c4: LeaveFrame
    //     0x1fa3c4: mov             SP, fp
    //     0x1fa3c8: ldp             fp, lr, [SP], #0x10
    // 0x1fa3cc: ret
    //     0x1fa3cc: ret             
    // 0x1fa3d0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1fa3d0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1fa3d4: b               #0x1fa3a8
  }
  _ _paintLabel(/* No info */) {
    // ** addr: 0x1fa3d8, size: 0x64
    // 0x1fa3d8: EnterFrame
    //     0x1fa3d8: stp             fp, lr, [SP, #-0x10]!
    //     0x1fa3dc: mov             fp, SP
    // 0x1fa3e0: AllocStack(0x18)
    //     0x1fa3e0: sub             SP, SP, #0x18
    // 0x1fa3e4: CheckStackOverflow
    //     0x1fa3e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1fa3e8: cmp             SP, x16
    //     0x1fa3ec: b.ls            #0x1fa430
    // 0x1fa3f0: ldr             x16, [fp, #0x20]
    // 0x1fa3f4: r30 = Instance__DecorationSlot
    //     0x1fa3f4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x1fa3f8: ldr             lr, [lr, #0x3b8]
    // 0x1fa3fc: stp             lr, x16, [SP]
    // 0x1fa400: r0 = childForSlot()
    //     0x1fa400: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x1fa404: cmp             w0, NULL
    // 0x1fa408: b.eq            #0x1fa438
    // 0x1fa40c: ldr             x16, [fp, #0x18]
    // 0x1fa410: stp             x0, x16, [SP, #8]
    // 0x1fa414: ldr             x16, [fp, #0x10]
    // 0x1fa418: str             x16, [SP]
    // 0x1fa41c: r0 = paintChild()
    //     0x1fa41c: bl              #0x1e8278  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x1fa420: r0 = Null
    //     0x1fa420: mov             x0, NULL
    // 0x1fa424: LeaveFrame
    //     0x1fa424: mov             SP, fp
    //     0x1fa428: ldp             fp, lr, [SP], #0x10
    // 0x1fa42c: ret
    //     0x1fa42c: ret             
    // 0x1fa430: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1fa430: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1fa434: b               #0x1fa3f0
    // 0x1fa438: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1fa438: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ applyPaintTransform(/* No info */) {
    // ** addr: 0x200964, size: 0x144
    // 0x200964: EnterFrame
    //     0x200964: stp             fp, lr, [SP, #-0x10]!
    //     0x200968: mov             fp, SP
    // 0x20096c: AllocStack(0x28)
    //     0x20096c: sub             SP, SP, #0x28
    // 0x200970: CheckStackOverflow
    //     0x200970: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x200974: cmp             SP, x16
    //     0x200978: b.ls            #0x200a94
    // 0x20097c: ldr             x16, [fp, #0x20]
    // 0x200980: r30 = Instance__DecorationSlot
    //     0x200980: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x200984: ldr             lr, [lr, #0x3b8]
    // 0x200988: stp             lr, x16, [SP]
    // 0x20098c: r0 = childForSlot()
    //     0x20098c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x200990: mov             x1, x0
    // 0x200994: ldr             x0, [fp, #0x18]
    // 0x200998: cmp             w0, w1
    // 0x20099c: b.ne            #0x200a6c
    // 0x2009a0: ldr             x1, [fp, #0x20]
    // 0x2009a4: LoadField: r2 = r1->field_7f
    //     0x2009a4: ldur            w2, [x1, #0x7f]
    // 0x2009a8: DecompressPointer r2
    //     0x2009a8: add             x2, x2, HEAP, lsl #32
    // 0x2009ac: cmp             w2, NULL
    // 0x2009b0: b.eq            #0x200a6c
    // 0x2009b4: r16 = Instance__DecorationSlot
    //     0x2009b4: add             x16, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x2009b8: ldr             x16, [x16, #0x3b8]
    // 0x2009bc: stp             x16, x1, [SP]
    // 0x2009c0: r0 = childForSlot()
    //     0x2009c0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2009c4: cmp             w0, NULL
    // 0x2009c8: b.eq            #0x200a9c
    // 0x2009cc: LoadField: r3 = r0->field_7
    //     0x2009cc: ldur            w3, [x0, #7]
    // 0x2009d0: DecompressPointer r3
    //     0x2009d0: add             x3, x3, HEAP, lsl #32
    // 0x2009d4: stur            x3, [fp, #-8]
    // 0x2009d8: cmp             w3, NULL
    // 0x2009dc: b.eq            #0x200aa0
    // 0x2009e0: mov             x0, x3
    // 0x2009e4: r2 = Null
    //     0x2009e4: mov             x2, NULL
    // 0x2009e8: r1 = Null
    //     0x2009e8: mov             x1, NULL
    // 0x2009ec: r4 = LoadClassIdInstr(r0)
    //     0x2009ec: ldur            x4, [x0, #-1]
    //     0x2009f0: ubfx            x4, x4, #0xc, #0x14
    // 0x2009f4: sub             x4, x4, #0x25f
    // 0x2009f8: cmp             x4, #9
    // 0x2009fc: b.ls            #0x200a14
    // 0x200a00: r8 = BoxParentData
    //     0x200a00: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x200a04: ldr             x8, [x8, #0x50]
    // 0x200a08: r3 = Null
    //     0x200a08: add             x3, PP, #0x14, lsl #12  ; [pp+0x14400] Null
    //     0x200a0c: ldr             x3, [x3, #0x400]
    // 0x200a10: r0 = DefaultTypeTest()
    //     0x200a10: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x200a14: ldur            x0, [fp, #-8]
    // 0x200a18: LoadField: r1 = r0->field_7
    //     0x200a18: ldur            w1, [x0, #7]
    // 0x200a1c: DecompressPointer r1
    //     0x200a1c: add             x1, x1, HEAP, lsl #32
    // 0x200a20: ldr             x0, [fp, #0x20]
    // 0x200a24: stur            x1, [fp, #-0x10]
    // 0x200a28: LoadField: r2 = r0->field_7f
    //     0x200a28: ldur            w2, [x0, #0x7f]
    // 0x200a2c: DecompressPointer r2
    //     0x200a2c: add             x2, x2, HEAP, lsl #32
    // 0x200a30: cmp             w2, NULL
    // 0x200a34: b.eq            #0x200aa4
    // 0x200a38: ldr             x16, [fp, #0x10]
    // 0x200a3c: stp             x2, x16, [SP]
    // 0x200a40: r0 = multiply()
    //     0x200a40: bl              #0x1dc77c  ; [package:vector_math/vector_math_64.dart] Matrix4::multiply
    // 0x200a44: ldur            x0, [fp, #-0x10]
    // 0x200a48: LoadField: d0 = r0->field_7
    //     0x200a48: ldur            d0, [x0, #7]
    // 0x200a4c: fneg            d1, d0
    // 0x200a50: LoadField: d0 = r0->field_f
    //     0x200a50: ldur            d0, [x0, #0xf]
    // 0x200a54: fneg            d2, d0
    // 0x200a58: ldr             x16, [fp, #0x10]
    // 0x200a5c: str             x16, [SP, #0x10]
    // 0x200a60: str             d1, [SP, #8]
    // 0x200a64: str             d2, [SP]
    // 0x200a68: r0 = translate()
    //     0x200a68: bl              #0x1dcc34  ; [package:vector_math/vector_math_64.dart] Matrix4::translate
    // 0x200a6c: ldr             x16, [fp, #0x20]
    // 0x200a70: ldr             lr, [fp, #0x18]
    // 0x200a74: stp             lr, x16, [SP, #8]
    // 0x200a78: ldr             x16, [fp, #0x10]
    // 0x200a7c: str             x16, [SP]
    // 0x200a80: r0 = applyPaintTransform()
    //     0x200a80: bl              #0x200f00  ; [package:flutter/src/rendering/box.dart] RenderBox::applyPaintTransform
    // 0x200a84: r0 = Null
    //     0x200a84: mov             x0, NULL
    // 0x200a88: LeaveFrame
    //     0x200a88: mov             SP, fp
    //     0x200a8c: ldp             fp, lr, [SP], #0x10
    // 0x200a90: ret
    //     0x200a90: ret             
    // 0x200a94: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x200a94: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x200a98: b               #0x20097c
    // 0x200a9c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x200a9c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x200aa0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x200aa0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x200aa4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x200aa4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ performLayout(/* No info */) {
    // ** addr: 0x20ebbc, size: 0xfc4
    // 0x20ebbc: EnterFrame
    //     0x20ebbc: stp             fp, lr, [SP, #-0x10]!
    //     0x20ebc0: mov             fp, SP
    // 0x20ebc4: AllocStack(0x88)
    //     0x20ebc4: sub             SP, SP, #0x88
    // 0x20ebc8: CheckStackOverflow
    //     0x20ebc8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x20ebcc: cmp             SP, x16
    //     0x20ebd0: b.ls            #0x20f99c
    // 0x20ebd4: ldr             x0, [fp, #0x10]
    // 0x20ebd8: LoadField: r1 = r0->field_27
    //     0x20ebd8: ldur            w1, [x0, #0x27]
    // 0x20ebdc: DecompressPointer r1
    //     0x20ebdc: add             x1, x1, HEAP, lsl #32
    // 0x20ebe0: stur            x1, [fp, #-8]
    // 0x20ebe4: cmp             w1, NULL
    // 0x20ebe8: b.eq            #0x20f980
    // 0x20ebec: StoreField: r0->field_7f = rNULL
    //     0x20ebec: stur            NULL, [x0, #0x7f]
    // 0x20ebf0: stp             x1, x0, [SP]
    // 0x20ebf4: r0 = _layout()
    //     0x20ebf4: bl              #0x20fcb8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layout
    // 0x20ebf8: stur            x0, [fp, #-0x10]
    // 0x20ebfc: r1 = 3
    //     0x20ebfc: movz            x1, #0x3
    // 0x20ec00: r0 = AllocateContext()
    //     0x20ec00: bl              #0x3e4e00  ; AllocateContextStub
    // 0x20ec04: mov             x1, x0
    // 0x20ec08: ldur            x0, [fp, #-0x10]
    // 0x20ec0c: stur            x1, [fp, #-0x18]
    // 0x20ec10: StoreField: r1->field_f = r0
    //     0x20ec10: stur            w0, [x1, #0xf]
    // 0x20ec14: ldur            x2, [fp, #-8]
    // 0x20ec18: LoadField: d0 = r2->field_f
    //     0x20ec18: ldur            d0, [x2, #0xf]
    // 0x20ec1c: stur            d0, [fp, #-0x58]
    // 0x20ec20: LoadField: d1 = r0->field_23
    //     0x20ec20: ldur            d1, [x0, #0x23]
    // 0x20ec24: stur            d1, [fp, #-0x50]
    // 0x20ec28: LoadField: d2 = r0->field_2b
    //     0x20ec28: ldur            d2, [x0, #0x2b]
    // 0x20ec2c: stur            d2, [fp, #-0x48]
    // 0x20ec30: fadd            d3, d1, d2
    // 0x20ec34: stur            d3, [fp, #-0x40]
    // 0x20ec38: ldr             x16, [fp, #0x10]
    // 0x20ec3c: r30 = Instance__DecorationSlot
    //     0x20ec3c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x20ec40: ldr             lr, [lr, #0x3d8]
    // 0x20ec44: stp             lr, x16, [SP]
    // 0x20ec48: r0 = childForSlot()
    //     0x20ec48: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ec4c: stur            x0, [fp, #-0x20]
    // 0x20ec50: cmp             w0, NULL
    // 0x20ec54: b.eq            #0x20ed80
    // 0x20ec58: ldur            d0, [fp, #-0x58]
    // 0x20ec5c: ldur            d1, [fp, #-0x50]
    // 0x20ec60: ldr             x16, [fp, #0x10]
    // 0x20ec64: r30 = Instance__DecorationSlot
    //     0x20ec64: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20ec68: ldr             lr, [lr, #0x388]
    // 0x20ec6c: stp             lr, x16, [SP]
    // 0x20ec70: r0 = childForSlot()
    //     0x20ec70: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ec74: str             x0, [SP]
    // 0x20ec78: r0 = _boxSize()
    //     0x20ec78: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20ec7c: LoadField: d0 = r0->field_7
    //     0x20ec7c: ldur            d0, [x0, #7]
    // 0x20ec80: ldur            d1, [fp, #-0x58]
    // 0x20ec84: fsub            d2, d1, d0
    // 0x20ec88: stur            d2, [fp, #-0x60]
    // 0x20ec8c: r0 = BoxConstraints()
    //     0x20ec8c: bl              #0x1d3e84  ; AllocateBoxConstraintsStub -> BoxConstraints (size=0x28)
    // 0x20ec90: ldur            d0, [fp, #-0x60]
    // 0x20ec94: StoreField: r0->field_7 = d0
    //     0x20ec94: stur            d0, [x0, #7]
    // 0x20ec98: StoreField: r0->field_f = d0
    //     0x20ec98: stur            d0, [x0, #0xf]
    // 0x20ec9c: ldur            d0, [fp, #-0x50]
    // 0x20eca0: StoreField: r0->field_17 = d0
    //     0x20eca0: stur            d0, [x0, #0x17]
    // 0x20eca4: StoreField: r0->field_1f = d0
    //     0x20eca4: stur            d0, [x0, #0x1f]
    // 0x20eca8: ldur            x1, [fp, #-0x20]
    // 0x20ecac: r2 = LoadClassIdInstr(r1)
    //     0x20ecac: ldur            x2, [x1, #-1]
    //     0x20ecb0: ubfx            x2, x2, #0xc, #0x14
    // 0x20ecb4: stp             x0, x1, [SP, #8]
    // 0x20ecb8: r16 = true
    //     0x20ecb8: add             x16, NULL, #0x20  ; true
    // 0x20ecbc: str             x16, [SP]
    // 0x20ecc0: mov             x0, x2
    // 0x20ecc4: r4 = const [0, 0x3, 0x3, 0x2, parentUsesSize, 0x2, null]
    //     0x20ecc4: add             x4, PP, #9, lsl #12  ; [pp+0x9f60] List(7) [0, 0x3, 0x3, 0x2, "parentUsesSize", 0x2, Null]
    //     0x20ecc8: ldr             x4, [x4, #0xf60]
    // 0x20eccc: r0 = GDT[cid_x0 + -0x4f8]()
    //     0x20eccc: sub             lr, x0, #0x4f8
    //     0x20ecd0: ldr             lr, [x21, lr, lsl #3]
    //     0x20ecd4: blr             lr
    // 0x20ecd8: ldr             x16, [fp, #0x10]
    // 0x20ecdc: r30 = Instance__DecorationSlot
    //     0x20ecdc: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20ece0: ldr             lr, [lr, #0x388]
    // 0x20ece4: stp             lr, x16, [SP]
    // 0x20ece8: r0 = childForSlot()
    //     0x20ece8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ecec: str             x0, [SP]
    // 0x20ecf0: r0 = _boxSize()
    //     0x20ecf0: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20ecf4: LoadField: d0 = r0->field_7
    //     0x20ecf4: ldur            d0, [x0, #7]
    // 0x20ecf8: ldur            x3, [fp, #-0x20]
    // 0x20ecfc: stur            d0, [fp, #-0x60]
    // 0x20ed00: LoadField: r4 = r3->field_7
    //     0x20ed00: ldur            w4, [x3, #7]
    // 0x20ed04: DecompressPointer r4
    //     0x20ed04: add             x4, x4, HEAP, lsl #32
    // 0x20ed08: stur            x4, [fp, #-0x28]
    // 0x20ed0c: cmp             w4, NULL
    // 0x20ed10: b.eq            #0x20f9a4
    // 0x20ed14: mov             x0, x4
    // 0x20ed18: r2 = Null
    //     0x20ed18: mov             x2, NULL
    // 0x20ed1c: r1 = Null
    //     0x20ed1c: mov             x1, NULL
    // 0x20ed20: r4 = LoadClassIdInstr(r0)
    //     0x20ed20: ldur            x4, [x0, #-1]
    //     0x20ed24: ubfx            x4, x4, #0xc, #0x14
    // 0x20ed28: sub             x4, x4, #0x25f
    // 0x20ed2c: cmp             x4, #9
    // 0x20ed30: b.ls            #0x20ed48
    // 0x20ed34: r8 = BoxParentData
    //     0x20ed34: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x20ed38: ldr             x8, [x8, #0x50]
    // 0x20ed3c: r3 = Null
    //     0x20ed3c: add             x3, PP, #0x14, lsl #12  ; [pp+0x14508] Null
    //     0x20ed40: ldr             x3, [x3, #0x508]
    // 0x20ed44: r0 = DefaultTypeTest()
    //     0x20ed44: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x20ed48: r0 = Offset()
    //     0x20ed48: bl              #0x193cb0  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x20ed4c: ldur            d0, [fp, #-0x60]
    // 0x20ed50: StoreField: r0->field_7 = d0
    //     0x20ed50: stur            d0, [x0, #7]
    // 0x20ed54: d0 = 0.000000
    //     0x20ed54: eor             v0.16b, v0.16b, v0.16b
    // 0x20ed58: d0 = 0.000000
    //     0x20ed58: eor             v0.16b, v0.16b, v0.16b
    // 0x20ed5c: StoreField: r0->field_f = d0
    //     0x20ed5c: stur            d0, [x0, #0xf]
    // 0x20ed60: ldur            x1, [fp, #-0x28]
    // 0x20ed64: StoreField: r1->field_7 = r0
    //     0x20ed64: stur            w0, [x1, #7]
    //     0x20ed68: ldurb           w16, [x1, #-1]
    //     0x20ed6c: ldurb           w17, [x0, #-1]
    //     0x20ed70: and             x16, x17, x16, lsr #2
    //     0x20ed74: tst             x16, HEAP, lsr #32
    //     0x20ed78: b.eq            #0x20ed80
    //     0x20ed7c: bl              #0x3e4608
    // 0x20ed80: ldr             x3, [fp, #0x10]
    // 0x20ed84: ldur            x0, [fp, #-0x18]
    // 0x20ed88: ldur            d1, [fp, #-0x58]
    // 0x20ed8c: ldur            d0, [fp, #-0x50]
    // 0x20ed90: r4 = Sentinel
    //     0x20ed90: ldr             x4, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x20ed94: StoreField: r0->field_13 = r4
    //     0x20ed94: stur            w4, [x0, #0x13]
    // 0x20ed98: mov             x2, x0
    // 0x20ed9c: r1 = Function 'centerLayout':.
    //     0x20ed9c: add             x1, PP, #0x14, lsl #12  ; [pp+0x14518] AnonymousClosure: (0x2122e8), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::performLayout (0x20ebbc)
    //     0x20eda0: ldr             x1, [x1, #0x518]
    // 0x20eda4: r0 = AllocateClosure()
    //     0x20eda4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x20eda8: mov             x3, x0
    // 0x20edac: ldur            x0, [fp, #-0x18]
    // 0x20edb0: r1 = Sentinel
    //     0x20edb0: ldr             x1, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x20edb4: stur            x3, [fp, #-0x28]
    // 0x20edb8: StoreField: r0->field_17 = r1
    //     0x20edb8: stur            w1, [x0, #0x17]
    // 0x20edbc: mov             x2, x0
    // 0x20edc0: r1 = Function 'baselineLayout':.
    //     0x20edc0: add             x1, PP, #0x14, lsl #12  ; [pp+0x14520] AnonymousClosure: (0x212134), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::performLayout (0x20ebbc)
    //     0x20edc4: ldr             x1, [x1, #0x520]
    // 0x20edc8: r0 = AllocateClosure()
    //     0x20edc8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x20edcc: mov             x2, x0
    // 0x20edd0: ldr             x1, [fp, #0x10]
    // 0x20edd4: stur            x2, [fp, #-0x30]
    // 0x20edd8: LoadField: r0 = r1->field_63
    //     0x20edd8: ldur            w0, [x1, #0x63]
    // 0x20eddc: DecompressPointer r0
    //     0x20eddc: add             x0, x0, HEAP, lsl #32
    // 0x20ede0: LoadField: r3 = r0->field_7
    //     0x20ede0: ldur            w3, [x0, #7]
    // 0x20ede4: DecompressPointer r3
    //     0x20ede4: add             x3, x3, HEAP, lsl #32
    // 0x20ede8: LoadField: d0 = r3->field_7
    //     0x20ede8: ldur            d0, [x3, #7]
    // 0x20edec: stur            d0, [fp, #-0x68]
    // 0x20edf0: LoadField: d1 = r3->field_17
    //     0x20edf0: ldur            d1, [x3, #0x17]
    // 0x20edf4: ldur            d2, [fp, #-0x58]
    // 0x20edf8: fsub            d3, d2, d1
    // 0x20edfc: ldur            d1, [fp, #-0x50]
    // 0x20ee00: stur            d3, [fp, #-0x60]
    // 0x20ee04: r0 = inline_Allocate_Double()
    //     0x20ee04: ldp             x0, x3, [THR, #0x50]  ; THR::top
    //     0x20ee08: add             x0, x0, #0x10
    //     0x20ee0c: cmp             x3, x0
    //     0x20ee10: b.ls            #0x20f9a8
    //     0x20ee14: str             x0, [THR, #0x50]  ; THR::top
    //     0x20ee18: sub             x0, x0, #0xf
    //     0x20ee1c: movz            x3, #0xd148
    //     0x20ee20: movk            x3, #0x3, lsl #16
    //     0x20ee24: stur            x3, [x0, #-1]
    // 0x20ee28: StoreField: r0->field_7 = d1
    //     0x20ee28: stur            d1, [x0, #7]
    // 0x20ee2c: ldur            x3, [fp, #-0x18]
    // 0x20ee30: StoreField: r3->field_13 = r0
    //     0x20ee30: stur            w0, [x3, #0x13]
    //     0x20ee34: ldurb           w16, [x3, #-1]
    //     0x20ee38: ldurb           w17, [x0, #-1]
    //     0x20ee3c: and             x16, x17, x16, lsr #2
    //     0x20ee40: tst             x16, HEAP, lsr #32
    //     0x20ee44: b.eq            #0x20ee4c
    //     0x20ee48: bl              #0x3e4648
    // 0x20ee4c: str             x1, [SP]
    // 0x20ee50: r0 = _isOutlineAligned()
    //     0x20ee50: bl              #0x20fc5c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_isOutlineAligned
    // 0x20ee54: tbnz            w0, #4, #0x20ee64
    // 0x20ee58: ldur            x1, [fp, #-0x10]
    // 0x20ee5c: LoadField: d0 = r1->field_13
    //     0x20ee5c: ldur            d0, [x1, #0x13]
    // 0x20ee60: b               #0x20ee6c
    // 0x20ee64: ldur            x1, [fp, #-0x10]
    // 0x20ee68: LoadField: d0 = r1->field_b
    //     0x20ee68: ldur            d0, [x1, #0xb]
    // 0x20ee6c: ldur            x2, [fp, #-0x18]
    // 0x20ee70: r0 = inline_Allocate_Double()
    //     0x20ee70: ldp             x0, x3, [THR, #0x50]  ; THR::top
    //     0x20ee74: add             x0, x0, #0x10
    //     0x20ee78: cmp             x3, x0
    //     0x20ee7c: b.ls            #0x20f9c8
    //     0x20ee80: str             x0, [THR, #0x50]  ; THR::top
    //     0x20ee84: sub             x0, x0, #0xf
    //     0x20ee88: movz            x3, #0xd148
    //     0x20ee8c: movk            x3, #0x3, lsl #16
    //     0x20ee90: stur            x3, [x0, #-1]
    // 0x20ee94: StoreField: r0->field_7 = d0
    //     0x20ee94: stur            d0, [x0, #7]
    // 0x20ee98: StoreField: r2->field_17 = r0
    //     0x20ee98: stur            w0, [x2, #0x17]
    //     0x20ee9c: ldurb           w16, [x2, #-1]
    //     0x20eea0: ldurb           w17, [x0, #-1]
    //     0x20eea4: and             x16, x17, x16, lsr #2
    //     0x20eea8: tst             x16, HEAP, lsr #32
    //     0x20eeac: b.eq            #0x20eeb4
    //     0x20eeb0: bl              #0x3e4628
    // 0x20eeb4: ldr             x16, [fp, #0x10]
    // 0x20eeb8: r30 = Instance__DecorationSlot
    //     0x20eeb8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20eebc: ldr             lr, [lr, #0x388]
    // 0x20eec0: stp             lr, x16, [SP]
    // 0x20eec4: r0 = childForSlot()
    //     0x20eec4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20eec8: cmp             w0, NULL
    // 0x20eecc: b.eq            #0x20ef0c
    // 0x20eed0: ldr             x16, [fp, #0x10]
    // 0x20eed4: r30 = Instance__DecorationSlot
    //     0x20eed4: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20eed8: ldr             lr, [lr, #0x388]
    // 0x20eedc: stp             lr, x16, [SP]
    // 0x20eee0: r0 = childForSlot()
    //     0x20eee0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20eee4: cmp             w0, NULL
    // 0x20eee8: b.eq            #0x20f9e0
    // 0x20eeec: ldur            x16, [fp, #-0x28]
    // 0x20eef0: stp             x0, x16, [SP, #8]
    // 0x20eef4: r16 = 0.000000
    //     0x20eef4: ldr             x16, [PP, #0x5288]  ; [pp+0x5288] 0
    // 0x20eef8: str             x16, [SP]
    // 0x20eefc: ldur            x0, [fp, #-0x28]
    // 0x20ef00: ClosureCall
    //     0x20ef00: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20ef04: ldur            x2, [x0, #0x1f]
    //     0x20ef08: blr             x2
    // 0x20ef0c: ldur            d0, [fp, #-0x68]
    // 0x20ef10: ldr             x16, [fp, #0x10]
    // 0x20ef14: r30 = Instance__DecorationSlot
    //     0x20ef14: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20ef18: ldr             lr, [lr, #0x388]
    // 0x20ef1c: stp             lr, x16, [SP]
    // 0x20ef20: r0 = childForSlot()
    //     0x20ef20: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ef24: str             x0, [SP]
    // 0x20ef28: r0 = _boxSize()
    //     0x20ef28: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20ef2c: LoadField: d0 = r0->field_7
    //     0x20ef2c: ldur            d0, [x0, #7]
    // 0x20ef30: ldur            d1, [fp, #-0x68]
    // 0x20ef34: fadd            d2, d1, d0
    // 0x20ef38: stur            d2, [fp, #-0x50]
    // 0x20ef3c: ldr             x16, [fp, #0x10]
    // 0x20ef40: r30 = Instance__DecorationSlot
    //     0x20ef40: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x20ef44: ldr             lr, [lr, #0x398]
    // 0x20ef48: stp             lr, x16, [SP]
    // 0x20ef4c: r0 = childForSlot()
    //     0x20ef4c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ef50: cmp             w0, NULL
    // 0x20ef54: b.eq            #0x20eff4
    // 0x20ef58: ldr             x0, [fp, #0x10]
    // 0x20ef5c: ldur            d0, [fp, #-0x50]
    // 0x20ef60: LoadField: r1 = r0->field_63
    //     0x20ef60: ldur            w1, [x0, #0x63]
    // 0x20ef64: DecompressPointer r1
    //     0x20ef64: add             x1, x1, HEAP, lsl #32
    // 0x20ef68: LoadField: r2 = r1->field_7
    //     0x20ef68: ldur            w2, [x1, #7]
    // 0x20ef6c: DecompressPointer r2
    //     0x20ef6c: add             x2, x2, HEAP, lsl #32
    // 0x20ef70: LoadField: d1 = r2->field_7
    //     0x20ef70: ldur            d1, [x2, #7]
    // 0x20ef74: fsub            d2, d0, d1
    // 0x20ef78: stur            d2, [fp, #-0x70]
    // 0x20ef7c: r16 = Instance__DecorationSlot
    //     0x20ef7c: add             x16, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x20ef80: ldr             x16, [x16, #0x398]
    // 0x20ef84: stp             x16, x0, [SP]
    // 0x20ef88: r0 = childForSlot()
    //     0x20ef88: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ef8c: cmp             w0, NULL
    // 0x20ef90: b.eq            #0x20f9e4
    // 0x20ef94: ldur            d0, [fp, #-0x70]
    // 0x20ef98: r1 = inline_Allocate_Double()
    //     0x20ef98: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20ef9c: add             x1, x1, #0x10
    //     0x20efa0: cmp             x2, x1
    //     0x20efa4: b.ls            #0x20f9e8
    //     0x20efa8: str             x1, [THR, #0x50]  ; THR::top
    //     0x20efac: sub             x1, x1, #0xf
    //     0x20efb0: movz            x2, #0xd148
    //     0x20efb4: movk            x2, #0x3, lsl #16
    //     0x20efb8: stur            x2, [x1, #-1]
    // 0x20efbc: StoreField: r1->field_7 = d0
    //     0x20efbc: stur            d0, [x1, #7]
    // 0x20efc0: stur            x1, [fp, #-0x38]
    // 0x20efc4: ldur            x16, [fp, #-0x28]
    // 0x20efc8: stp             x0, x16, [SP, #8]
    // 0x20efcc: str             x1, [SP]
    // 0x20efd0: ldur            x0, [fp, #-0x28]
    // 0x20efd4: ClosureCall
    //     0x20efd4: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20efd8: ldur            x2, [x0, #0x1f]
    //     0x20efdc: blr             x2
    // 0x20efe0: ldur            x16, [fp, #-0x38]
    // 0x20efe4: stp             x0, x16, [SP]
    // 0x20efe8: r0 = +()
    //     0x20efe8: bl              #0x3e32a4  ; [dart:core] _Double::+
    // 0x20efec: LoadField: d0 = r0->field_7
    //     0x20efec: ldur            d0, [x0, #7]
    // 0x20eff0: b               #0x20eff8
    // 0x20eff4: ldur            d0, [fp, #-0x50]
    // 0x20eff8: stur            d0, [fp, #-0x50]
    // 0x20effc: ldr             x16, [fp, #0x10]
    // 0x20f000: r30 = Instance__DecorationSlot
    //     0x20f000: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x20f004: ldr             lr, [lr, #0x3b8]
    // 0x20f008: stp             lr, x16, [SP]
    // 0x20f00c: r0 = childForSlot()
    //     0x20f00c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f010: cmp             w0, NULL
    // 0x20f014: b.eq            #0x20f080
    // 0x20f018: ldur            d0, [fp, #-0x50]
    // 0x20f01c: ldr             x16, [fp, #0x10]
    // 0x20f020: r30 = Instance__DecorationSlot
    //     0x20f020: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x20f024: ldr             lr, [lr, #0x3b8]
    // 0x20f028: stp             lr, x16, [SP]
    // 0x20f02c: r0 = childForSlot()
    //     0x20f02c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f030: cmp             w0, NULL
    // 0x20f034: b.eq            #0x20fa04
    // 0x20f038: ldur            d0, [fp, #-0x50]
    // 0x20f03c: r1 = inline_Allocate_Double()
    //     0x20f03c: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20f040: add             x1, x1, #0x10
    //     0x20f044: cmp             x2, x1
    //     0x20f048: b.ls            #0x20fa08
    //     0x20f04c: str             x1, [THR, #0x50]  ; THR::top
    //     0x20f050: sub             x1, x1, #0xf
    //     0x20f054: movz            x2, #0xd148
    //     0x20f058: movk            x2, #0x3, lsl #16
    //     0x20f05c: stur            x2, [x1, #-1]
    // 0x20f060: StoreField: r1->field_7 = d0
    //     0x20f060: stur            d0, [x1, #7]
    // 0x20f064: ldur            x16, [fp, #-0x28]
    // 0x20f068: stp             x0, x16, [SP, #8]
    // 0x20f06c: str             x1, [SP]
    // 0x20f070: ldur            x0, [fp, #-0x28]
    // 0x20f074: ClosureCall
    //     0x20f074: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f078: ldur            x2, [x0, #0x1f]
    //     0x20f07c: blr             x2
    // 0x20f080: ldr             x16, [fp, #0x10]
    // 0x20f084: r30 = Instance__DecorationSlot
    //     0x20f084: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x20f088: ldr             lr, [lr, #0x3a8]
    // 0x20f08c: stp             lr, x16, [SP]
    // 0x20f090: r0 = childForSlot()
    //     0x20f090: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f094: cmp             w0, NULL
    // 0x20f098: b.eq            #0x20f11c
    // 0x20f09c: ldur            d0, [fp, #-0x50]
    // 0x20f0a0: ldr             x16, [fp, #0x10]
    // 0x20f0a4: r30 = Instance__DecorationSlot
    //     0x20f0a4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x20f0a8: ldr             lr, [lr, #0x3a8]
    // 0x20f0ac: stp             lr, x16, [SP]
    // 0x20f0b0: r0 = childForSlot()
    //     0x20f0b0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f0b4: cmp             w0, NULL
    // 0x20f0b8: b.eq            #0x20fa24
    // 0x20f0bc: ldur            d0, [fp, #-0x50]
    // 0x20f0c0: r1 = inline_Allocate_Double()
    //     0x20f0c0: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20f0c4: add             x1, x1, #0x10
    //     0x20f0c8: cmp             x2, x1
    //     0x20f0cc: b.ls            #0x20fa28
    //     0x20f0d0: str             x1, [THR, #0x50]  ; THR::top
    //     0x20f0d4: sub             x1, x1, #0xf
    //     0x20f0d8: movz            x2, #0xd148
    //     0x20f0dc: movk            x2, #0x3, lsl #16
    //     0x20f0e0: stur            x2, [x1, #-1]
    // 0x20f0e4: StoreField: r1->field_7 = d0
    //     0x20f0e4: stur            d0, [x1, #7]
    // 0x20f0e8: stur            x1, [fp, #-0x38]
    // 0x20f0ec: ldur            x16, [fp, #-0x30]
    // 0x20f0f0: stp             x0, x16, [SP, #8]
    // 0x20f0f4: str             x1, [SP]
    // 0x20f0f8: ldur            x0, [fp, #-0x30]
    // 0x20f0fc: ClosureCall
    //     0x20f0fc: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f100: ldur            x2, [x0, #0x1f]
    //     0x20f104: blr             x2
    // 0x20f108: ldur            x16, [fp, #-0x38]
    // 0x20f10c: stp             x0, x16, [SP]
    // 0x20f110: r0 = +()
    //     0x20f110: bl              #0x3e32a4  ; [dart:core] _Double::+
    // 0x20f114: LoadField: d0 = r0->field_7
    //     0x20f114: ldur            d0, [x0, #7]
    // 0x20f118: b               #0x20f120
    // 0x20f11c: ldur            d0, [fp, #-0x50]
    // 0x20f120: stur            d0, [fp, #-0x50]
    // 0x20f124: ldr             x16, [fp, #0x10]
    // 0x20f128: r30 = Instance__DecorationSlot
    //     0x20f128: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x20f12c: ldr             lr, [lr, #0x390]
    // 0x20f130: stp             lr, x16, [SP]
    // 0x20f134: r0 = childForSlot()
    //     0x20f134: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f138: cmp             w0, NULL
    // 0x20f13c: b.eq            #0x20f1a8
    // 0x20f140: ldur            d0, [fp, #-0x50]
    // 0x20f144: ldr             x16, [fp, #0x10]
    // 0x20f148: r30 = Instance__DecorationSlot
    //     0x20f148: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x20f14c: ldr             lr, [lr, #0x390]
    // 0x20f150: stp             lr, x16, [SP]
    // 0x20f154: r0 = childForSlot()
    //     0x20f154: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f158: cmp             w0, NULL
    // 0x20f15c: b.eq            #0x20fa44
    // 0x20f160: ldur            d0, [fp, #-0x50]
    // 0x20f164: r1 = inline_Allocate_Double()
    //     0x20f164: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20f168: add             x1, x1, #0x10
    //     0x20f16c: cmp             x2, x1
    //     0x20f170: b.ls            #0x20fa48
    //     0x20f174: str             x1, [THR, #0x50]  ; THR::top
    //     0x20f178: sub             x1, x1, #0xf
    //     0x20f17c: movz            x2, #0xd148
    //     0x20f180: movk            x2, #0x3, lsl #16
    //     0x20f184: stur            x2, [x1, #-1]
    // 0x20f188: StoreField: r1->field_7 = d0
    //     0x20f188: stur            d0, [x1, #7]
    // 0x20f18c: ldur            x16, [fp, #-0x30]
    // 0x20f190: stp             x0, x16, [SP, #8]
    // 0x20f194: str             x1, [SP]
    // 0x20f198: ldur            x0, [fp, #-0x30]
    // 0x20f19c: ClosureCall
    //     0x20f19c: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f1a0: ldur            x2, [x0, #0x1f]
    //     0x20f1a4: blr             x2
    // 0x20f1a8: ldr             x16, [fp, #0x10]
    // 0x20f1ac: r30 = Instance__DecorationSlot
    //     0x20f1ac: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x20f1b0: ldr             lr, [lr, #0x3c0]
    // 0x20f1b4: stp             lr, x16, [SP]
    // 0x20f1b8: r0 = childForSlot()
    //     0x20f1b8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f1bc: cmp             w0, NULL
    // 0x20f1c0: b.eq            #0x20f22c
    // 0x20f1c4: ldur            d0, [fp, #-0x50]
    // 0x20f1c8: ldr             x16, [fp, #0x10]
    // 0x20f1cc: r30 = Instance__DecorationSlot
    //     0x20f1cc: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x20f1d0: ldr             lr, [lr, #0x3c0]
    // 0x20f1d4: stp             lr, x16, [SP]
    // 0x20f1d8: r0 = childForSlot()
    //     0x20f1d8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f1dc: cmp             w0, NULL
    // 0x20f1e0: b.eq            #0x20fa64
    // 0x20f1e4: ldur            d0, [fp, #-0x50]
    // 0x20f1e8: r1 = inline_Allocate_Double()
    //     0x20f1e8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20f1ec: add             x1, x1, #0x10
    //     0x20f1f0: cmp             x2, x1
    //     0x20f1f4: b.ls            #0x20fa68
    //     0x20f1f8: str             x1, [THR, #0x50]  ; THR::top
    //     0x20f1fc: sub             x1, x1, #0xf
    //     0x20f200: movz            x2, #0xd148
    //     0x20f204: movk            x2, #0x3, lsl #16
    //     0x20f208: stur            x2, [x1, #-1]
    // 0x20f20c: StoreField: r1->field_7 = d0
    //     0x20f20c: stur            d0, [x1, #7]
    // 0x20f210: ldur            x16, [fp, #-0x30]
    // 0x20f214: stp             x0, x16, [SP, #8]
    // 0x20f218: str             x1, [SP]
    // 0x20f21c: ldur            x0, [fp, #-0x30]
    // 0x20f220: ClosureCall
    //     0x20f220: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f224: ldur            x2, [x0, #0x1f]
    //     0x20f228: blr             x2
    // 0x20f22c: ldr             x16, [fp, #0x10]
    // 0x20f230: r30 = Instance__DecorationSlot
    //     0x20f230: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x20f234: ldr             lr, [lr, #0x3a0]
    // 0x20f238: stp             lr, x16, [SP]
    // 0x20f23c: r0 = childForSlot()
    //     0x20f23c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f240: cmp             w0, NULL
    // 0x20f244: b.eq            #0x20f33c
    // 0x20f248: ldr             x0, [fp, #0x10]
    // 0x20f24c: ldur            d0, [fp, #-0x60]
    // 0x20f250: LoadField: r1 = r0->field_63
    //     0x20f250: ldur            w1, [x0, #0x63]
    // 0x20f254: DecompressPointer r1
    //     0x20f254: add             x1, x1, HEAP, lsl #32
    // 0x20f258: LoadField: r2 = r1->field_7
    //     0x20f258: ldur            w2, [x1, #7]
    // 0x20f25c: DecompressPointer r2
    //     0x20f25c: add             x2, x2, HEAP, lsl #32
    // 0x20f260: LoadField: d1 = r2->field_17
    //     0x20f260: ldur            d1, [x2, #0x17]
    // 0x20f264: fadd            d2, d0, d1
    // 0x20f268: stur            d2, [fp, #-0x50]
    // 0x20f26c: r16 = Instance__DecorationSlot
    //     0x20f26c: add             x16, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x20f270: ldr             x16, [x16, #0x3a0]
    // 0x20f274: stp             x16, x0, [SP]
    // 0x20f278: r0 = childForSlot()
    //     0x20f278: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f27c: stur            x0, [fp, #-0x38]
    // 0x20f280: cmp             w0, NULL
    // 0x20f284: b.eq            #0x20fa84
    // 0x20f288: ldr             x16, [fp, #0x10]
    // 0x20f28c: r30 = Instance__DecorationSlot
    //     0x20f28c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x20f290: ldr             lr, [lr, #0x3a0]
    // 0x20f294: stp             lr, x16, [SP]
    // 0x20f298: r0 = childForSlot()
    //     0x20f298: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f29c: cmp             w0, NULL
    // 0x20f2a0: b.eq            #0x20fa88
    // 0x20f2a4: str             x0, [SP]
    // 0x20f2a8: r0 = size()
    //     0x20f2a8: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x20f2ac: LoadField: d0 = r0->field_7
    //     0x20f2ac: ldur            d0, [x0, #7]
    // 0x20f2b0: ldur            d1, [fp, #-0x50]
    // 0x20f2b4: fsub            d2, d1, d0
    // 0x20f2b8: r0 = inline_Allocate_Double()
    //     0x20f2b8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20f2bc: add             x0, x0, #0x10
    //     0x20f2c0: cmp             x1, x0
    //     0x20f2c4: b.ls            #0x20fa8c
    //     0x20f2c8: str             x0, [THR, #0x50]  ; THR::top
    //     0x20f2cc: sub             x0, x0, #0xf
    //     0x20f2d0: movz            x1, #0xd148
    //     0x20f2d4: movk            x1, #0x3, lsl #16
    //     0x20f2d8: stur            x1, [x0, #-1]
    // 0x20f2dc: StoreField: r0->field_7 = d2
    //     0x20f2dc: stur            d2, [x0, #7]
    // 0x20f2e0: ldur            x16, [fp, #-0x28]
    // 0x20f2e4: ldur            lr, [fp, #-0x38]
    // 0x20f2e8: stp             lr, x16, [SP, #8]
    // 0x20f2ec: str             x0, [SP]
    // 0x20f2f0: ldur            x0, [fp, #-0x28]
    // 0x20f2f4: ClosureCall
    //     0x20f2f4: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f2f8: ldur            x2, [x0, #0x1f]
    //     0x20f2fc: blr             x2
    // 0x20f300: ldur            d0, [fp, #-0x50]
    // 0x20f304: r1 = inline_Allocate_Double()
    //     0x20f304: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20f308: add             x1, x1, #0x10
    //     0x20f30c: cmp             x2, x1
    //     0x20f310: b.ls            #0x20fa9c
    //     0x20f314: str             x1, [THR, #0x50]  ; THR::top
    //     0x20f318: sub             x1, x1, #0xf
    //     0x20f31c: movz            x2, #0xd148
    //     0x20f320: movk            x2, #0x3, lsl #16
    //     0x20f324: stur            x2, [x1, #-1]
    // 0x20f328: StoreField: r1->field_7 = d0
    //     0x20f328: stur            d0, [x1, #7]
    // 0x20f32c: stp             x0, x1, [SP]
    // 0x20f330: r0 = -()
    //     0x20f330: bl              #0x3cae2c  ; [dart:core] _Double::-
    // 0x20f334: LoadField: d0 = r0->field_7
    //     0x20f334: ldur            d0, [x0, #7]
    // 0x20f338: b               #0x20f340
    // 0x20f33c: ldur            d0, [fp, #-0x60]
    // 0x20f340: stur            d0, [fp, #-0x50]
    // 0x20f344: ldr             x16, [fp, #0x10]
    // 0x20f348: r30 = Instance__DecorationSlot
    //     0x20f348: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x20f34c: ldr             lr, [lr, #0x3b0]
    // 0x20f350: stp             lr, x16, [SP]
    // 0x20f354: r0 = childForSlot()
    //     0x20f354: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f358: cmp             w0, NULL
    // 0x20f35c: b.eq            #0x20f430
    // 0x20f360: ldur            d0, [fp, #-0x50]
    // 0x20f364: ldr             x16, [fp, #0x10]
    // 0x20f368: r30 = Instance__DecorationSlot
    //     0x20f368: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x20f36c: ldr             lr, [lr, #0x3b0]
    // 0x20f370: stp             lr, x16, [SP]
    // 0x20f374: r0 = childForSlot()
    //     0x20f374: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f378: stur            x0, [fp, #-0x28]
    // 0x20f37c: cmp             w0, NULL
    // 0x20f380: b.eq            #0x20fab8
    // 0x20f384: ldr             x16, [fp, #0x10]
    // 0x20f388: r30 = Instance__DecorationSlot
    //     0x20f388: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x20f38c: ldr             lr, [lr, #0x3b0]
    // 0x20f390: stp             lr, x16, [SP]
    // 0x20f394: r0 = childForSlot()
    //     0x20f394: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f398: cmp             w0, NULL
    // 0x20f39c: b.eq            #0x20fabc
    // 0x20f3a0: str             x0, [SP]
    // 0x20f3a4: r0 = size()
    //     0x20f3a4: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x20f3a8: LoadField: d0 = r0->field_7
    //     0x20f3a8: ldur            d0, [x0, #7]
    // 0x20f3ac: ldur            d1, [fp, #-0x50]
    // 0x20f3b0: fsub            d2, d1, d0
    // 0x20f3b4: r0 = inline_Allocate_Double()
    //     0x20f3b4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20f3b8: add             x0, x0, #0x10
    //     0x20f3bc: cmp             x1, x0
    //     0x20f3c0: b.ls            #0x20fac0
    //     0x20f3c4: str             x0, [THR, #0x50]  ; THR::top
    //     0x20f3c8: sub             x0, x0, #0xf
    //     0x20f3cc: movz            x1, #0xd148
    //     0x20f3d0: movk            x1, #0x3, lsl #16
    //     0x20f3d4: stur            x1, [x0, #-1]
    // 0x20f3d8: StoreField: r0->field_7 = d2
    //     0x20f3d8: stur            d2, [x0, #7]
    // 0x20f3dc: ldur            x16, [fp, #-0x30]
    // 0x20f3e0: ldur            lr, [fp, #-0x28]
    // 0x20f3e4: stp             lr, x16, [SP, #8]
    // 0x20f3e8: str             x0, [SP]
    // 0x20f3ec: ldur            x0, [fp, #-0x30]
    // 0x20f3f0: ClosureCall
    //     0x20f3f0: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f3f4: ldur            x2, [x0, #0x1f]
    //     0x20f3f8: blr             x2
    // 0x20f3fc: ldur            d0, [fp, #-0x50]
    // 0x20f400: r1 = inline_Allocate_Double()
    //     0x20f400: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20f404: add             x1, x1, #0x10
    //     0x20f408: cmp             x2, x1
    //     0x20f40c: b.ls            #0x20fad0
    //     0x20f410: str             x1, [THR, #0x50]  ; THR::top
    //     0x20f414: sub             x1, x1, #0xf
    //     0x20f418: movz            x2, #0xd148
    //     0x20f41c: movk            x2, #0x3, lsl #16
    //     0x20f420: stur            x2, [x1, #-1]
    // 0x20f424: StoreField: r1->field_7 = d0
    //     0x20f424: stur            d0, [x1, #7]
    // 0x20f428: stp             x0, x1, [SP]
    // 0x20f42c: r0 = -()
    //     0x20f42c: bl              #0x3cae2c  ; [dart:core] _Double::-
    // 0x20f430: ldr             x16, [fp, #0x10]
    // 0x20f434: r30 = Instance__DecorationSlot
    //     0x20f434: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x20f438: ldr             lr, [lr, #0x3c8]
    // 0x20f43c: stp             lr, x16, [SP]
    // 0x20f440: r0 = childForSlot()
    //     0x20f440: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f444: cmp             w0, NULL
    // 0x20f448: b.ne            #0x20f468
    // 0x20f44c: ldr             x16, [fp, #0x10]
    // 0x20f450: r30 = Instance__DecorationSlot
    //     0x20f450: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x20f454: ldr             lr, [lr, #0x3d0]
    // 0x20f458: stp             lr, x16, [SP]
    // 0x20f45c: r0 = childForSlot()
    //     0x20f45c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f460: cmp             w0, NULL
    // 0x20f464: b.eq            #0x20f668
    // 0x20f468: ldur            x2, [fp, #-0x18]
    // 0x20f46c: ldur            x1, [fp, #-0x10]
    // 0x20f470: ldur            d0, [fp, #-0x48]
    // 0x20f474: r0 = inline_Allocate_Double()
    //     0x20f474: ldp             x0, x3, [THR, #0x50]  ; THR::top
    //     0x20f478: add             x0, x0, #0x10
    //     0x20f47c: cmp             x3, x0
    //     0x20f480: b.ls            #0x20faec
    //     0x20f484: str             x0, [THR, #0x50]  ; THR::top
    //     0x20f488: sub             x0, x0, #0xf
    //     0x20f48c: movz            x3, #0xd148
    //     0x20f490: movk            x3, #0x3, lsl #16
    //     0x20f494: stur            x3, [x0, #-1]
    // 0x20f498: StoreField: r0->field_7 = d0
    //     0x20f498: stur            d0, [x0, #7]
    // 0x20f49c: StoreField: r2->field_13 = r0
    //     0x20f49c: stur            w0, [x2, #0x13]
    //     0x20f4a0: ldurb           w16, [x2, #-1]
    //     0x20f4a4: ldurb           w17, [x0, #-1]
    //     0x20f4a8: and             x16, x17, x16, lsr #2
    //     0x20f4ac: tst             x16, HEAP, lsr #32
    //     0x20f4b0: b.eq            #0x20f4b8
    //     0x20f4b4: bl              #0x3e4628
    // 0x20f4b8: LoadField: d0 = r1->field_1b
    //     0x20f4b8: ldur            d0, [x1, #0x1b]
    // 0x20f4bc: r0 = inline_Allocate_Double()
    //     0x20f4bc: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20f4c0: add             x0, x0, #0x10
    //     0x20f4c4: cmp             x1, x0
    //     0x20f4c8: b.ls            #0x20fb04
    //     0x20f4cc: str             x0, [THR, #0x50]  ; THR::top
    //     0x20f4d0: sub             x0, x0, #0xf
    //     0x20f4d4: movz            x1, #0xd148
    //     0x20f4d8: movk            x1, #0x3, lsl #16
    //     0x20f4dc: stur            x1, [x0, #-1]
    // 0x20f4e0: StoreField: r0->field_7 = d0
    //     0x20f4e0: stur            d0, [x0, #7]
    // 0x20f4e4: StoreField: r2->field_17 = r0
    //     0x20f4e4: stur            w0, [x2, #0x17]
    //     0x20f4e8: ldurb           w16, [x2, #-1]
    //     0x20f4ec: ldurb           w17, [x0, #-1]
    //     0x20f4f0: and             x16, x17, x16, lsr #2
    //     0x20f4f4: tst             x16, HEAP, lsr #32
    //     0x20f4f8: b.eq            #0x20f500
    //     0x20f4fc: bl              #0x3e4628
    // 0x20f500: ldr             x16, [fp, #0x10]
    // 0x20f504: r30 = Instance__DecorationSlot
    //     0x20f504: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x20f508: ldr             lr, [lr, #0x3c8]
    // 0x20f50c: stp             lr, x16, [SP]
    // 0x20f510: r0 = childForSlot()
    //     0x20f510: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f514: cmp             w0, NULL
    // 0x20f518: b.eq            #0x20f5b0
    // 0x20f51c: ldur            d0, [fp, #-0x68]
    // 0x20f520: ldr             x16, [fp, #0x10]
    // 0x20f524: r30 = Instance__DecorationSlot
    //     0x20f524: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x20f528: ldr             lr, [lr, #0x3c8]
    // 0x20f52c: stp             lr, x16, [SP]
    // 0x20f530: r0 = childForSlot()
    //     0x20f530: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f534: stur            x0, [fp, #-0x10]
    // 0x20f538: cmp             w0, NULL
    // 0x20f53c: b.eq            #0x20fb1c
    // 0x20f540: ldr             x16, [fp, #0x10]
    // 0x20f544: r30 = Instance__DecorationSlot
    //     0x20f544: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20f548: ldr             lr, [lr, #0x388]
    // 0x20f54c: stp             lr, x16, [SP]
    // 0x20f550: r0 = childForSlot()
    //     0x20f550: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f554: str             x0, [SP]
    // 0x20f558: r0 = _boxSize()
    //     0x20f558: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20f55c: LoadField: d0 = r0->field_7
    //     0x20f55c: ldur            d0, [x0, #7]
    // 0x20f560: ldur            d1, [fp, #-0x68]
    // 0x20f564: fadd            d2, d1, d0
    // 0x20f568: r0 = inline_Allocate_Double()
    //     0x20f568: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20f56c: add             x0, x0, #0x10
    //     0x20f570: cmp             x1, x0
    //     0x20f574: b.ls            #0x20fb20
    //     0x20f578: str             x0, [THR, #0x50]  ; THR::top
    //     0x20f57c: sub             x0, x0, #0xf
    //     0x20f580: movz            x1, #0xd148
    //     0x20f584: movk            x1, #0x3, lsl #16
    //     0x20f588: stur            x1, [x0, #-1]
    // 0x20f58c: StoreField: r0->field_7 = d2
    //     0x20f58c: stur            d2, [x0, #7]
    // 0x20f590: ldur            x16, [fp, #-0x30]
    // 0x20f594: ldur            lr, [fp, #-0x10]
    // 0x20f598: stp             lr, x16, [SP, #8]
    // 0x20f59c: str             x0, [SP]
    // 0x20f5a0: ldur            x0, [fp, #-0x30]
    // 0x20f5a4: ClosureCall
    //     0x20f5a4: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f5a8: ldur            x2, [x0, #0x1f]
    //     0x20f5ac: blr             x2
    // 0x20f5b0: ldr             x16, [fp, #0x10]
    // 0x20f5b4: r30 = Instance__DecorationSlot
    //     0x20f5b4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x20f5b8: ldr             lr, [lr, #0x3d0]
    // 0x20f5bc: stp             lr, x16, [SP]
    // 0x20f5c0: r0 = childForSlot()
    //     0x20f5c0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f5c4: cmp             w0, NULL
    // 0x20f5c8: b.eq            #0x20f668
    // 0x20f5cc: ldur            d0, [fp, #-0x60]
    // 0x20f5d0: ldr             x16, [fp, #0x10]
    // 0x20f5d4: r30 = Instance__DecorationSlot
    //     0x20f5d4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x20f5d8: ldr             lr, [lr, #0x3d0]
    // 0x20f5dc: stp             lr, x16, [SP]
    // 0x20f5e0: r0 = childForSlot()
    //     0x20f5e0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f5e4: stur            x0, [fp, #-0x10]
    // 0x20f5e8: cmp             w0, NULL
    // 0x20f5ec: b.eq            #0x20fb30
    // 0x20f5f0: ldr             x16, [fp, #0x10]
    // 0x20f5f4: r30 = Instance__DecorationSlot
    //     0x20f5f4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x20f5f8: ldr             lr, [lr, #0x3d0]
    // 0x20f5fc: stp             lr, x16, [SP]
    // 0x20f600: r0 = childForSlot()
    //     0x20f600: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f604: cmp             w0, NULL
    // 0x20f608: b.eq            #0x20fb34
    // 0x20f60c: str             x0, [SP]
    // 0x20f610: r0 = size()
    //     0x20f610: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x20f614: LoadField: d0 = r0->field_7
    //     0x20f614: ldur            d0, [x0, #7]
    // 0x20f618: ldur            d1, [fp, #-0x60]
    // 0x20f61c: fsub            d2, d1, d0
    // 0x20f620: r0 = inline_Allocate_Double()
    //     0x20f620: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20f624: add             x0, x0, #0x10
    //     0x20f628: cmp             x1, x0
    //     0x20f62c: b.ls            #0x20fb38
    //     0x20f630: str             x0, [THR, #0x50]  ; THR::top
    //     0x20f634: sub             x0, x0, #0xf
    //     0x20f638: movz            x1, #0xd148
    //     0x20f63c: movk            x1, #0x3, lsl #16
    //     0x20f640: stur            x1, [x0, #-1]
    // 0x20f644: StoreField: r0->field_7 = d2
    //     0x20f644: stur            d2, [x0, #7]
    // 0x20f648: ldur            x16, [fp, #-0x30]
    // 0x20f64c: ldur            lr, [fp, #-0x10]
    // 0x20f650: stp             lr, x16, [SP, #8]
    // 0x20f654: str             x0, [SP]
    // 0x20f658: ldur            x0, [fp, #-0x30]
    // 0x20f65c: ClosureCall
    //     0x20f65c: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x20f660: ldur            x2, [x0, #0x1f]
    //     0x20f664: blr             x2
    // 0x20f668: ldr             x16, [fp, #0x10]
    // 0x20f66c: r30 = Instance__DecorationSlot
    //     0x20f66c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x20f670: ldr             lr, [lr, #0x3b8]
    // 0x20f674: stp             lr, x16, [SP]
    // 0x20f678: r0 = childForSlot()
    //     0x20f678: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f67c: cmp             w0, NULL
    // 0x20f680: b.eq            #0x20f8ec
    // 0x20f684: ldr             x16, [fp, #0x10]
    // 0x20f688: r30 = Instance__DecorationSlot
    //     0x20f688: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x20f68c: ldr             lr, [lr, #0x3b8]
    // 0x20f690: stp             lr, x16, [SP]
    // 0x20f694: r0 = childForSlot()
    //     0x20f694: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f698: cmp             w0, NULL
    // 0x20f69c: b.eq            #0x20fb48
    // 0x20f6a0: LoadField: r3 = r0->field_7
    //     0x20f6a0: ldur            w3, [x0, #7]
    // 0x20f6a4: DecompressPointer r3
    //     0x20f6a4: add             x3, x3, HEAP, lsl #32
    // 0x20f6a8: stur            x3, [fp, #-0x10]
    // 0x20f6ac: cmp             w3, NULL
    // 0x20f6b0: b.eq            #0x20fb4c
    // 0x20f6b4: mov             x0, x3
    // 0x20f6b8: r2 = Null
    //     0x20f6b8: mov             x2, NULL
    // 0x20f6bc: r1 = Null
    //     0x20f6bc: mov             x1, NULL
    // 0x20f6c0: r4 = LoadClassIdInstr(r0)
    //     0x20f6c0: ldur            x4, [x0, #-1]
    //     0x20f6c4: ubfx            x4, x4, #0xc, #0x14
    // 0x20f6c8: sub             x4, x4, #0x25f
    // 0x20f6cc: cmp             x4, #9
    // 0x20f6d0: b.ls            #0x20f6e8
    // 0x20f6d4: r8 = BoxParentData
    //     0x20f6d4: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x20f6d8: ldr             x8, [x8, #0x50]
    // 0x20f6dc: r3 = Null
    //     0x20f6dc: add             x3, PP, #0x14, lsl #12  ; [pp+0x14528] Null
    //     0x20f6e0: ldr             x3, [x3, #0x528]
    // 0x20f6e4: r0 = DefaultTypeTest()
    //     0x20f6e4: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x20f6e8: ldur            x0, [fp, #-0x10]
    // 0x20f6ec: LoadField: r1 = r0->field_7
    //     0x20f6ec: ldur            w1, [x0, #7]
    // 0x20f6f0: DecompressPointer r1
    //     0x20f6f0: add             x1, x1, HEAP, lsl #32
    // 0x20f6f4: LoadField: d0 = r1->field_7
    //     0x20f6f4: ldur            d0, [x1, #7]
    // 0x20f6f8: stur            d0, [fp, #-0x48]
    // 0x20f6fc: ldr             x16, [fp, #0x10]
    // 0x20f700: r30 = Instance__DecorationSlot
    //     0x20f700: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x20f704: ldr             lr, [lr, #0x3b8]
    // 0x20f708: stp             lr, x16, [SP]
    // 0x20f70c: r0 = childForSlot()
    //     0x20f70c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f710: str             x0, [SP]
    // 0x20f714: r0 = _boxSize()
    //     0x20f714: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20f718: LoadField: d0 = r0->field_7
    //     0x20f718: ldur            d0, [x0, #7]
    // 0x20f71c: d1 = 0.750000
    //     0x20f71c: fmov            d1, #0.75000000
    // 0x20f720: d1 = 0.750000
    //     0x20f720: fmov            d1, #0.75000000
    // 0x20f724: fmul            d2, d0, d1
    // 0x20f728: stur            d2, [fp, #-0x50]
    // 0x20f72c: ldr             x16, [fp, #0x10]
    // 0x20f730: r30 = Instance__DecorationSlot
    //     0x20f730: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x20f734: ldr             lr, [lr, #0x398]
    // 0x20f738: stp             lr, x16, [SP]
    // 0x20f73c: r0 = childForSlot()
    //     0x20f73c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f740: cmp             w0, NULL
    // 0x20f744: b.eq            #0x20f79c
    // 0x20f748: ldr             x0, [fp, #0x10]
    // 0x20f74c: LoadField: r1 = r0->field_7b
    //     0x20f74c: ldur            w1, [x0, #0x7b]
    // 0x20f750: DecompressPointer r1
    //     0x20f750: add             x1, x1, HEAP, lsl #32
    // 0x20f754: tbnz            w1, #4, #0x20f78c
    // 0x20f758: ldur            d0, [fp, #-0x68]
    // 0x20f75c: r16 = Instance__DecorationSlot
    //     0x20f75c: add             x16, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x20f760: ldr             x16, [x16, #0x398]
    // 0x20f764: stp             x16, x0, [SP]
    // 0x20f768: r0 = childForSlot()
    //     0x20f768: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f76c: str             x0, [SP]
    // 0x20f770: r0 = _boxSize()
    //     0x20f770: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20f774: LoadField: d0 = r0->field_7
    //     0x20f774: ldur            d0, [x0, #7]
    // 0x20f778: fneg            d1, d0
    // 0x20f77c: ldur            d0, [fp, #-0x68]
    // 0x20f780: fadd            d2, d1, d0
    // 0x20f784: mov             v0.16b, v2.16b
    // 0x20f788: b               #0x20f794
    // 0x20f78c: d0 = 0.000000
    //     0x20f78c: eor             v0.16b, v0.16b, v0.16b
    // 0x20f790: d0 = 0.000000
    //     0x20f790: eor             v0.16b, v0.16b, v0.16b
    // 0x20f794: mov             v2.16b, v0.16b
    // 0x20f798: b               #0x20f7a4
    // 0x20f79c: d2 = 0.000000
    //     0x20f79c: eor             v2.16b, v2.16b, v2.16b
    // 0x20f7a0: d2 = 0.000000
    //     0x20f7a0: eor             v2.16b, v2.16b, v2.16b
    // 0x20f7a4: ldr             x0, [fp, #0x10]
    // 0x20f7a8: ldur            d0, [fp, #-0x50]
    // 0x20f7ac: ldur            d1, [fp, #-0x48]
    // 0x20f7b0: stur            d2, [fp, #-0x60]
    // 0x20f7b4: LoadField: r1 = r0->field_63
    //     0x20f7b4: ldur            w1, [x0, #0x63]
    // 0x20f7b8: DecompressPointer r1
    //     0x20f7b8: add             x1, x1, HEAP, lsl #32
    // 0x20f7bc: LoadField: r2 = r1->field_27
    //     0x20f7bc: ldur            w2, [x1, #0x27]
    // 0x20f7c0: DecompressPointer r2
    //     0x20f7c0: add             x2, x2, HEAP, lsl #32
    // 0x20f7c4: stur            x2, [fp, #-0x10]
    // 0x20f7c8: r16 = Instance__DecorationSlot
    //     0x20f7c8: add             x16, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20f7cc: ldr             x16, [x16, #0x388]
    // 0x20f7d0: stp             x16, x0, [SP]
    // 0x20f7d4: r0 = childForSlot()
    //     0x20f7d4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f7d8: str             x0, [SP]
    // 0x20f7dc: r0 = _boxSize()
    //     0x20f7dc: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20f7e0: LoadField: d0 = r0->field_7
    //     0x20f7e0: ldur            d0, [x0, #7]
    // 0x20f7e4: ldur            d1, [fp, #-0x48]
    // 0x20f7e8: fsub            d2, d1, d0
    // 0x20f7ec: ldur            d0, [fp, #-0x60]
    // 0x20f7f0: fadd            d1, d2, d0
    // 0x20f7f4: stur            d1, [fp, #-0x48]
    // 0x20f7f8: ldur            x16, [fp, #-0x20]
    // 0x20f7fc: str             x16, [SP]
    // 0x20f800: r0 = _boxSize()
    //     0x20f800: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20f804: LoadField: d0 = r0->field_7
    //     0x20f804: ldur            d0, [x0, #7]
    // 0x20f808: d1 = 2.000000
    //     0x20f808: fmov            d1, #2.00000000
    // 0x20f80c: d1 = 2.000000
    //     0x20f80c: fmov            d1, #2.00000000
    // 0x20f810: fdiv            d2, d0, d1
    // 0x20f814: ldur            d0, [fp, #-0x50]
    // 0x20f818: fdiv            d3, d0, d1
    // 0x20f81c: fsub            d0, d2, d3
    // 0x20f820: ldur            d1, [fp, #-0x48]
    // 0x20f824: r0 = inline_Allocate_Double()
    //     0x20f824: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20f828: add             x0, x0, #0x10
    //     0x20f82c: cmp             x1, x0
    //     0x20f830: b.ls            #0x20fb50
    //     0x20f834: str             x0, [THR, #0x50]  ; THR::top
    //     0x20f838: sub             x0, x0, #0xf
    //     0x20f83c: movz            x1, #0xd148
    //     0x20f840: movk            x1, #0x3, lsl #16
    //     0x20f844: stur            x1, [x0, #-1]
    // 0x20f848: StoreField: r0->field_7 = d1
    //     0x20f848: stur            d1, [x0, #7]
    // 0x20f84c: r1 = inline_Allocate_Double()
    //     0x20f84c: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x20f850: add             x1, x1, #0x10
    //     0x20f854: cmp             x2, x1
    //     0x20f858: b.ls            #0x20fb60
    //     0x20f85c: str             x1, [THR, #0x50]  ; THR::top
    //     0x20f860: sub             x1, x1, #0xf
    //     0x20f864: movz            x2, #0xd148
    //     0x20f868: movk            x2, #0x3, lsl #16
    //     0x20f86c: stur            x2, [x1, #-1]
    // 0x20f870: StoreField: r1->field_7 = d0
    //     0x20f870: stur            d0, [x1, #7]
    // 0x20f874: stp             x1, x0, [SP, #8]
    // 0x20f878: r16 = 0.000000
    //     0x20f878: ldr             x16, [PP, #0x5288]  ; [pp+0x5288] 0
    // 0x20f87c: str             x16, [SP]
    // 0x20f880: r0 = lerpDouble()
    //     0x20f880: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x20f884: ldur            x16, [fp, #-0x10]
    // 0x20f888: stp             x0, x16, [SP]
    // 0x20f88c: r0 = start=()
    //     0x20f88c: bl              #0x20fbd0  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::start=
    // 0x20f890: ldr             x0, [fp, #0x10]
    // 0x20f894: LoadField: r1 = r0->field_63
    //     0x20f894: ldur            w1, [x0, #0x63]
    // 0x20f898: DecompressPointer r1
    //     0x20f898: add             x1, x1, HEAP, lsl #32
    // 0x20f89c: LoadField: r2 = r1->field_27
    //     0x20f89c: ldur            w2, [x1, #0x27]
    // 0x20f8a0: DecompressPointer r2
    //     0x20f8a0: add             x2, x2, HEAP, lsl #32
    // 0x20f8a4: stur            x2, [fp, #-0x10]
    // 0x20f8a8: r16 = Instance__DecorationSlot
    //     0x20f8a8: add             x16, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x20f8ac: ldr             x16, [x16, #0x3b8]
    // 0x20f8b0: stp             x16, x0, [SP]
    // 0x20f8b4: r0 = childForSlot()
    //     0x20f8b4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20f8b8: cmp             w0, NULL
    // 0x20f8bc: b.eq            #0x20fb7c
    // 0x20f8c0: str             x0, [SP]
    // 0x20f8c4: r0 = size()
    //     0x20f8c4: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x20f8c8: LoadField: d0 = r0->field_7
    //     0x20f8c8: ldur            d0, [x0, #7]
    // 0x20f8cc: d1 = 0.750000
    //     0x20f8cc: fmov            d1, #0.75000000
    // 0x20f8d0: d1 = 0.750000
    //     0x20f8d0: fmov            d1, #0.75000000
    // 0x20f8d4: fmul            d2, d0, d1
    // 0x20f8d8: ldur            x16, [fp, #-0x10]
    // 0x20f8dc: str             x16, [SP, #8]
    // 0x20f8e0: str             d2, [SP]
    // 0x20f8e4: r0 = extent=()
    //     0x20f8e4: bl              #0x20fb80  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::extent=
    // 0x20f8e8: b               #0x20f924
    // 0x20f8ec: ldr             x0, [fp, #0x10]
    // 0x20f8f0: LoadField: r1 = r0->field_63
    //     0x20f8f0: ldur            w1, [x0, #0x63]
    // 0x20f8f4: DecompressPointer r1
    //     0x20f8f4: add             x1, x1, HEAP, lsl #32
    // 0x20f8f8: LoadField: r2 = r1->field_27
    //     0x20f8f8: ldur            w2, [x1, #0x27]
    // 0x20f8fc: DecompressPointer r2
    //     0x20f8fc: add             x2, x2, HEAP, lsl #32
    // 0x20f900: stp             NULL, x2, [SP]
    // 0x20f904: r0 = start=()
    //     0x20f904: bl              #0x20fbd0  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::start=
    // 0x20f908: ldr             x0, [fp, #0x10]
    // 0x20f90c: LoadField: r1 = r0->field_63
    //     0x20f90c: ldur            w1, [x0, #0x63]
    // 0x20f910: DecompressPointer r1
    //     0x20f910: add             x1, x1, HEAP, lsl #32
    // 0x20f914: LoadField: r2 = r1->field_27
    //     0x20f914: ldur            w2, [x1, #0x27]
    // 0x20f918: DecompressPointer r2
    //     0x20f918: add             x2, x2, HEAP, lsl #32
    // 0x20f91c: stp             xzr, x2, [SP]
    // 0x20f920: r0 = extent=()
    //     0x20f920: bl              #0x20fb80  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::extent=
    // 0x20f924: ldr             x0, [fp, #0x10]
    // 0x20f928: ldur            d0, [fp, #-0x58]
    // 0x20f92c: ldur            d1, [fp, #-0x40]
    // 0x20f930: r0 = Size()
    //     0x20f930: bl              #0x193b3c  ; AllocateSizeStub -> Size (size=0x18)
    // 0x20f934: ldur            d0, [fp, #-0x58]
    // 0x20f938: StoreField: r0->field_7 = d0
    //     0x20f938: stur            d0, [x0, #7]
    // 0x20f93c: ldur            d0, [fp, #-0x40]
    // 0x20f940: StoreField: r0->field_f = d0
    //     0x20f940: stur            d0, [x0, #0xf]
    // 0x20f944: ldur            x16, [fp, #-8]
    // 0x20f948: stp             x0, x16, [SP]
    // 0x20f94c: r0 = constrain()
    //     0x20f94c: bl              #0x1e0a58  ; [package:flutter/src/rendering/box.dart] BoxConstraints::constrain
    // 0x20f950: ldr             x1, [fp, #0x10]
    // 0x20f954: StoreField: r1->field_57 = r0
    //     0x20f954: stur            w0, [x1, #0x57]
    //     0x20f958: ldurb           w16, [x1, #-1]
    //     0x20f95c: ldurb           w17, [x0, #-1]
    //     0x20f960: and             x16, x17, x16, lsr #2
    //     0x20f964: tst             x16, HEAP, lsr #32
    //     0x20f968: b.eq            #0x20f970
    //     0x20f96c: bl              #0x3e4608
    // 0x20f970: r0 = Null
    //     0x20f970: mov             x0, NULL
    // 0x20f974: LeaveFrame
    //     0x20f974: mov             SP, fp
    //     0x20f978: ldp             fp, lr, [SP], #0x10
    // 0x20f97c: ret
    //     0x20f97c: ret             
    // 0x20f980: r0 = StateError()
    //     0x20f980: bl              #0x187d8c  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0x20f984: mov             x1, x0
    // 0x20f988: r0 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x20f988: ldr             x0, [PP, #0x53e8]  ; [pp+0x53e8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x20f98c: StoreField: r1->field_b = r0
    //     0x20f98c: stur            w0, [x1, #0xb]
    // 0x20f990: mov             x0, x1
    // 0x20f994: r0 = Throw()
    //     0x20f994: bl              #0x3e41c8  ; ThrowStub
    // 0x20f998: brk             #0
    // 0x20f99c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x20f99c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x20f9a0: b               #0x20ebd4
    // 0x20f9a4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x20f9a4: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x20f9a8: stp             q2, q3, [SP, #-0x20]!
    // 0x20f9ac: stp             q0, q1, [SP, #-0x20]!
    // 0x20f9b0: stp             x1, x2, [SP, #-0x10]!
    // 0x20f9b4: r0 = AllocateDouble()
    //     0x20f9b4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20f9b8: ldp             x1, x2, [SP], #0x10
    // 0x20f9bc: ldp             q0, q1, [SP], #0x20
    // 0x20f9c0: ldp             q2, q3, [SP], #0x20
    // 0x20f9c4: b               #0x20ee28
    // 0x20f9c8: SaveReg d0
    //     0x20f9c8: str             q0, [SP, #-0x10]!
    // 0x20f9cc: stp             x1, x2, [SP, #-0x10]!
    // 0x20f9d0: r0 = AllocateDouble()
    //     0x20f9d0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20f9d4: ldp             x1, x2, [SP], #0x10
    // 0x20f9d8: RestoreReg d0
    //     0x20f9d8: ldr             q0, [SP], #0x10
    // 0x20f9dc: b               #0x20ee94
    // 0x20f9e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20f9e0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20f9e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20f9e4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20f9e8: SaveReg d0
    //     0x20f9e8: str             q0, [SP, #-0x10]!
    // 0x20f9ec: SaveReg r0
    //     0x20f9ec: str             x0, [SP, #-8]!
    // 0x20f9f0: r0 = AllocateDouble()
    //     0x20f9f0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20f9f4: mov             x1, x0
    // 0x20f9f8: RestoreReg r0
    //     0x20f9f8: ldr             x0, [SP], #8
    // 0x20f9fc: RestoreReg d0
    //     0x20f9fc: ldr             q0, [SP], #0x10
    // 0x20fa00: b               #0x20efbc
    // 0x20fa04: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fa04: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fa08: SaveReg d0
    //     0x20fa08: str             q0, [SP, #-0x10]!
    // 0x20fa0c: SaveReg r0
    //     0x20fa0c: str             x0, [SP, #-8]!
    // 0x20fa10: r0 = AllocateDouble()
    //     0x20fa10: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fa14: mov             x1, x0
    // 0x20fa18: RestoreReg r0
    //     0x20fa18: ldr             x0, [SP], #8
    // 0x20fa1c: RestoreReg d0
    //     0x20fa1c: ldr             q0, [SP], #0x10
    // 0x20fa20: b               #0x20f060
    // 0x20fa24: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fa24: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fa28: SaveReg d0
    //     0x20fa28: str             q0, [SP, #-0x10]!
    // 0x20fa2c: SaveReg r0
    //     0x20fa2c: str             x0, [SP, #-8]!
    // 0x20fa30: r0 = AllocateDouble()
    //     0x20fa30: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fa34: mov             x1, x0
    // 0x20fa38: RestoreReg r0
    //     0x20fa38: ldr             x0, [SP], #8
    // 0x20fa3c: RestoreReg d0
    //     0x20fa3c: ldr             q0, [SP], #0x10
    // 0x20fa40: b               #0x20f0e4
    // 0x20fa44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fa44: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fa48: SaveReg d0
    //     0x20fa48: str             q0, [SP, #-0x10]!
    // 0x20fa4c: SaveReg r0
    //     0x20fa4c: str             x0, [SP, #-8]!
    // 0x20fa50: r0 = AllocateDouble()
    //     0x20fa50: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fa54: mov             x1, x0
    // 0x20fa58: RestoreReg r0
    //     0x20fa58: ldr             x0, [SP], #8
    // 0x20fa5c: RestoreReg d0
    //     0x20fa5c: ldr             q0, [SP], #0x10
    // 0x20fa60: b               #0x20f188
    // 0x20fa64: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fa64: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fa68: SaveReg d0
    //     0x20fa68: str             q0, [SP, #-0x10]!
    // 0x20fa6c: SaveReg r0
    //     0x20fa6c: str             x0, [SP, #-8]!
    // 0x20fa70: r0 = AllocateDouble()
    //     0x20fa70: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fa74: mov             x1, x0
    // 0x20fa78: RestoreReg r0
    //     0x20fa78: ldr             x0, [SP], #8
    // 0x20fa7c: RestoreReg d0
    //     0x20fa7c: ldr             q0, [SP], #0x10
    // 0x20fa80: b               #0x20f20c
    // 0x20fa84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fa84: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fa88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fa88: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fa8c: stp             q1, q2, [SP, #-0x20]!
    // 0x20fa90: r0 = AllocateDouble()
    //     0x20fa90: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fa94: ldp             q1, q2, [SP], #0x20
    // 0x20fa98: b               #0x20f2dc
    // 0x20fa9c: SaveReg d0
    //     0x20fa9c: str             q0, [SP, #-0x10]!
    // 0x20faa0: SaveReg r0
    //     0x20faa0: str             x0, [SP, #-8]!
    // 0x20faa4: r0 = AllocateDouble()
    //     0x20faa4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20faa8: mov             x1, x0
    // 0x20faac: RestoreReg r0
    //     0x20faac: ldr             x0, [SP], #8
    // 0x20fab0: RestoreReg d0
    //     0x20fab0: ldr             q0, [SP], #0x10
    // 0x20fab4: b               #0x20f328
    // 0x20fab8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fab8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fabc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fabc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fac0: stp             q1, q2, [SP, #-0x20]!
    // 0x20fac4: r0 = AllocateDouble()
    //     0x20fac4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fac8: ldp             q1, q2, [SP], #0x20
    // 0x20facc: b               #0x20f3d8
    // 0x20fad0: SaveReg d0
    //     0x20fad0: str             q0, [SP, #-0x10]!
    // 0x20fad4: SaveReg r0
    //     0x20fad4: str             x0, [SP, #-8]!
    // 0x20fad8: r0 = AllocateDouble()
    //     0x20fad8: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fadc: mov             x1, x0
    // 0x20fae0: RestoreReg r0
    //     0x20fae0: ldr             x0, [SP], #8
    // 0x20fae4: RestoreReg d0
    //     0x20fae4: ldr             q0, [SP], #0x10
    // 0x20fae8: b               #0x20f424
    // 0x20faec: SaveReg d0
    //     0x20faec: str             q0, [SP, #-0x10]!
    // 0x20faf0: stp             x1, x2, [SP, #-0x10]!
    // 0x20faf4: r0 = AllocateDouble()
    //     0x20faf4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20faf8: ldp             x1, x2, [SP], #0x10
    // 0x20fafc: RestoreReg d0
    //     0x20fafc: ldr             q0, [SP], #0x10
    // 0x20fb00: b               #0x20f498
    // 0x20fb04: SaveReg d0
    //     0x20fb04: str             q0, [SP, #-0x10]!
    // 0x20fb08: SaveReg r2
    //     0x20fb08: str             x2, [SP, #-8]!
    // 0x20fb0c: r0 = AllocateDouble()
    //     0x20fb0c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fb10: RestoreReg r2
    //     0x20fb10: ldr             x2, [SP], #8
    // 0x20fb14: RestoreReg d0
    //     0x20fb14: ldr             q0, [SP], #0x10
    // 0x20fb18: b               #0x20f4e0
    // 0x20fb1c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fb1c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fb20: stp             q1, q2, [SP, #-0x20]!
    // 0x20fb24: r0 = AllocateDouble()
    //     0x20fb24: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fb28: ldp             q1, q2, [SP], #0x20
    // 0x20fb2c: b               #0x20f58c
    // 0x20fb30: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fb30: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fb34: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fb34: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fb38: SaveReg d2
    //     0x20fb38: str             q2, [SP, #-0x10]!
    // 0x20fb3c: r0 = AllocateDouble()
    //     0x20fb3c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fb40: RestoreReg d2
    //     0x20fb40: ldr             q2, [SP], #0x10
    // 0x20fb44: b               #0x20f644
    // 0x20fb48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fb48: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fb4c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fb4c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x20fb50: stp             q0, q1, [SP, #-0x20]!
    // 0x20fb54: r0 = AllocateDouble()
    //     0x20fb54: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fb58: ldp             q0, q1, [SP], #0x20
    // 0x20fb5c: b               #0x20f848
    // 0x20fb60: SaveReg d0
    //     0x20fb60: str             q0, [SP, #-0x10]!
    // 0x20fb64: SaveReg r0
    //     0x20fb64: str             x0, [SP, #-8]!
    // 0x20fb68: r0 = AllocateDouble()
    //     0x20fb68: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x20fb6c: mov             x1, x0
    // 0x20fb70: RestoreReg r0
    //     0x20fb70: ldr             x0, [SP], #8
    // 0x20fb74: RestoreReg d0
    //     0x20fb74: ldr             q0, [SP], #0x10
    // 0x20fb78: b               #0x20f870
    // 0x20fb7c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x20fb7c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _isOutlineAligned(/* No info */) {
    // ** addr: 0x20fc5c, size: 0x5c
    // 0x20fc5c: EnterFrame
    //     0x20fc5c: stp             fp, lr, [SP, #-0x10]!
    //     0x20fc60: mov             fp, SP
    // 0x20fc64: AllocStack(0x8)
    //     0x20fc64: sub             SP, SP, #8
    // 0x20fc68: CheckStackOverflow
    //     0x20fc68: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x20fc6c: cmp             SP, x16
    //     0x20fc70: b.ls            #0x20fcb0
    // 0x20fc74: ldr             x0, [fp, #0x10]
    // 0x20fc78: LoadField: r1 = r0->field_63
    //     0x20fc78: ldur            w1, [x0, #0x63]
    // 0x20fc7c: DecompressPointer r1
    //     0x20fc7c: add             x1, x1, HEAP, lsl #32
    // 0x20fc80: LoadField: r0 = r1->field_23
    //     0x20fc80: ldur            w0, [x1, #0x23]
    // 0x20fc84: DecompressPointer r0
    //     0x20fc84: add             x0, x0, HEAP, lsl #32
    // 0x20fc88: r1 = LoadClassIdInstr(r0)
    //     0x20fc88: ldur            x1, [x0, #-1]
    //     0x20fc8c: ubfx            x1, x1, #0xc, #0x14
    // 0x20fc90: str             x0, [SP]
    // 0x20fc94: mov             x0, x1
    // 0x20fc98: r0 = GDT[cid_x0 + -0x1000]()
    //     0x20fc98: sub             lr, x0, #1, lsl #12
    //     0x20fc9c: ldr             lr, [x21, lr, lsl #3]
    //     0x20fca0: blr             lr
    // 0x20fca4: LeaveFrame
    //     0x20fca4: mov             SP, fp
    //     0x20fca8: ldp             fp, lr, [SP], #0x10
    // 0x20fcac: ret
    //     0x20fcac: ret             
    // 0x20fcb0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x20fcb0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x20fcb4: b               #0x20fc74
  }
  _ _layout(/* No info */) {
    // ** addr: 0x20fcb8, size: 0x2204
    // 0x20fcb8: EnterFrame
    //     0x20fcb8: stp             fp, lr, [SP, #-0x10]!
    //     0x20fcbc: mov             fp, SP
    // 0x20fcc0: AllocStack(0xb0)
    //     0x20fcc0: sub             SP, SP, #0xb0
    // 0x20fcc4: CheckStackOverflow
    //     0x20fcc4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x20fcc8: cmp             SP, x16
    //     0x20fccc: b.ls            #0x211bb0
    // 0x20fcd0: r16 = <RenderBox?, double>
    //     0x20fcd0: add             x16, PP, #0x14, lsl #12  ; [pp+0x14560] TypeArguments: <RenderBox?, double>
    //     0x20fcd4: ldr             x16, [x16, #0x560]
    // 0x20fcd8: ldr             lr, [THR, #0x88]  ; THR::empty_array
    // 0x20fcdc: stp             lr, x16, [SP]
    // 0x20fce0: r0 = Map._fromLiteral()
    //     0x20fce0: bl              #0x18fe4c  ; [dart:core] Map::Map._fromLiteral
    // 0x20fce4: stur            x0, [fp, #-8]
    // 0x20fce8: ldr             x16, [fp, #0x10]
    // 0x20fcec: str             x16, [SP]
    // 0x20fcf0: r0 = loosen()
    //     0x20fcf0: bl              #0x1e135c  ; [package:flutter/src/rendering/box.dart] BoxConstraints::loosen
    // 0x20fcf4: stur            x0, [fp, #-0x10]
    // 0x20fcf8: ldr             x16, [fp, #0x18]
    // 0x20fcfc: r30 = Instance__DecorationSlot
    //     0x20fcfc: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20fd00: ldr             lr, [lr, #0x388]
    // 0x20fd04: stp             lr, x16, [SP]
    // 0x20fd08: r0 = childForSlot()
    //     0x20fd08: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20fd0c: stur            x0, [fp, #-0x18]
    // 0x20fd10: ldr             x16, [fp, #0x18]
    // 0x20fd14: r30 = Instance__DecorationSlot
    //     0x20fd14: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20fd18: ldr             lr, [lr, #0x388]
    // 0x20fd1c: stp             lr, x16, [SP]
    // 0x20fd20: r0 = childForSlot()
    //     0x20fd20: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20fd24: ldr             x16, [fp, #0x18]
    // 0x20fd28: stp             x0, x16, [SP, #8]
    // 0x20fd2c: ldur            x16, [fp, #-0x10]
    // 0x20fd30: str             x16, [SP]
    // 0x20fd34: r0 = _layoutLineBox()
    //     0x20fd34: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x20fd38: r0 = inline_Allocate_Double()
    //     0x20fd38: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20fd3c: add             x0, x0, #0x10
    //     0x20fd40: cmp             x1, x0
    //     0x20fd44: b.ls            #0x211bb8
    //     0x20fd48: str             x0, [THR, #0x50]  ; THR::top
    //     0x20fd4c: sub             x0, x0, #0xf
    //     0x20fd50: movz            x1, #0xd148
    //     0x20fd54: movk            x1, #0x3, lsl #16
    //     0x20fd58: stur            x1, [x0, #-1]
    // 0x20fd5c: StoreField: r0->field_7 = d0
    //     0x20fd5c: stur            d0, [x0, #7]
    // 0x20fd60: ldur            x16, [fp, #-8]
    // 0x20fd64: ldur            lr, [fp, #-0x18]
    // 0x20fd68: stp             lr, x16, [SP, #8]
    // 0x20fd6c: str             x0, [SP]
    // 0x20fd70: r0 = []=()
    //     0x20fd70: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x20fd74: ldur            x0, [fp, #-0x10]
    // 0x20fd78: LoadField: d0 = r0->field_f
    //     0x20fd78: ldur            d0, [x0, #0xf]
    // 0x20fd7c: stur            d0, [fp, #-0x38]
    // 0x20fd80: ldr             x16, [fp, #0x18]
    // 0x20fd84: r30 = Instance__DecorationSlot
    //     0x20fd84: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x20fd88: ldr             lr, [lr, #0x388]
    // 0x20fd8c: stp             lr, x16, [SP]
    // 0x20fd90: r0 = childForSlot()
    //     0x20fd90: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20fd94: str             x0, [SP]
    // 0x20fd98: r0 = _boxSize()
    //     0x20fd98: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x20fd9c: LoadField: d0 = r0->field_7
    //     0x20fd9c: ldur            d0, [x0, #7]
    // 0x20fda0: ldur            d1, [fp, #-0x38]
    // 0x20fda4: fsub            d2, d1, d0
    // 0x20fda8: r0 = inline_Allocate_Double()
    //     0x20fda8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20fdac: add             x0, x0, #0x10
    //     0x20fdb0: cmp             x1, x0
    //     0x20fdb4: b.ls            #0x211bc8
    //     0x20fdb8: str             x0, [THR, #0x50]  ; THR::top
    //     0x20fdbc: sub             x0, x0, #0xf
    //     0x20fdc0: movz            x1, #0xd148
    //     0x20fdc4: movk            x1, #0x3, lsl #16
    //     0x20fdc8: stur            x1, [x0, #-1]
    // 0x20fdcc: StoreField: r0->field_7 = d2
    //     0x20fdcc: stur            d2, [x0, #7]
    // 0x20fdd0: ldur            x16, [fp, #-0x10]
    // 0x20fdd4: stp             x0, x16, [SP]
    // 0x20fdd8: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x20fdd8: add             x4, PP, #0x12, lsl #12  ; [pp+0x12518] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x20fddc: ldr             x4, [x4, #0x518]
    // 0x20fde0: r0 = copyWith()
    //     0x20fde0: bl              #0x1e0bc0  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x20fde4: stur            x0, [fp, #-0x18]
    // 0x20fde8: ldr             x16, [fp, #0x18]
    // 0x20fdec: r30 = Instance__DecorationSlot
    //     0x20fdec: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x20fdf0: ldr             lr, [lr, #0x398]
    // 0x20fdf4: stp             lr, x16, [SP]
    // 0x20fdf8: r0 = childForSlot()
    //     0x20fdf8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20fdfc: stur            x0, [fp, #-0x20]
    // 0x20fe00: ldr             x16, [fp, #0x18]
    // 0x20fe04: r30 = Instance__DecorationSlot
    //     0x20fe04: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x20fe08: ldr             lr, [lr, #0x398]
    // 0x20fe0c: stp             lr, x16, [SP]
    // 0x20fe10: r0 = childForSlot()
    //     0x20fe10: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20fe14: ldr             x16, [fp, #0x18]
    // 0x20fe18: stp             x0, x16, [SP, #8]
    // 0x20fe1c: ldur            x16, [fp, #-0x18]
    // 0x20fe20: str             x16, [SP]
    // 0x20fe24: r0 = _layoutLineBox()
    //     0x20fe24: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x20fe28: r0 = inline_Allocate_Double()
    //     0x20fe28: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20fe2c: add             x0, x0, #0x10
    //     0x20fe30: cmp             x1, x0
    //     0x20fe34: b.ls            #0x211bd8
    //     0x20fe38: str             x0, [THR, #0x50]  ; THR::top
    //     0x20fe3c: sub             x0, x0, #0xf
    //     0x20fe40: movz            x1, #0xd148
    //     0x20fe44: movk            x1, #0x3, lsl #16
    //     0x20fe48: stur            x1, [x0, #-1]
    // 0x20fe4c: StoreField: r0->field_7 = d0
    //     0x20fe4c: stur            d0, [x0, #7]
    // 0x20fe50: ldur            x16, [fp, #-8]
    // 0x20fe54: ldur            lr, [fp, #-0x20]
    // 0x20fe58: stp             lr, x16, [SP, #8]
    // 0x20fe5c: str             x0, [SP]
    // 0x20fe60: r0 = []=()
    //     0x20fe60: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x20fe64: ldr             x16, [fp, #0x18]
    // 0x20fe68: r30 = Instance__DecorationSlot
    //     0x20fe68: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x20fe6c: ldr             lr, [lr, #0x3a0]
    // 0x20fe70: stp             lr, x16, [SP]
    // 0x20fe74: r0 = childForSlot()
    //     0x20fe74: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20fe78: stur            x0, [fp, #-0x20]
    // 0x20fe7c: ldr             x16, [fp, #0x18]
    // 0x20fe80: r30 = Instance__DecorationSlot
    //     0x20fe80: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x20fe84: ldr             lr, [lr, #0x3a0]
    // 0x20fe88: stp             lr, x16, [SP]
    // 0x20fe8c: r0 = childForSlot()
    //     0x20fe8c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20fe90: ldr             x16, [fp, #0x18]
    // 0x20fe94: stp             x0, x16, [SP, #8]
    // 0x20fe98: ldur            x16, [fp, #-0x18]
    // 0x20fe9c: str             x16, [SP]
    // 0x20fea0: r0 = _layoutLineBox()
    //     0x20fea0: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x20fea4: r0 = inline_Allocate_Double()
    //     0x20fea4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20fea8: add             x0, x0, #0x10
    //     0x20feac: cmp             x1, x0
    //     0x20feb0: b.ls            #0x211be8
    //     0x20feb4: str             x0, [THR, #0x50]  ; THR::top
    //     0x20feb8: sub             x0, x0, #0xf
    //     0x20febc: movz            x1, #0xd148
    //     0x20fec0: movk            x1, #0x3, lsl #16
    //     0x20fec4: stur            x1, [x0, #-1]
    // 0x20fec8: StoreField: r0->field_7 = d0
    //     0x20fec8: stur            d0, [x0, #7]
    // 0x20fecc: ldur            x16, [fp, #-8]
    // 0x20fed0: ldur            lr, [fp, #-0x20]
    // 0x20fed4: stp             lr, x16, [SP, #8]
    // 0x20fed8: str             x0, [SP]
    // 0x20fedc: r0 = []=()
    //     0x20fedc: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x20fee0: ldur            x0, [fp, #-0x18]
    // 0x20fee4: LoadField: d0 = r0->field_f
    //     0x20fee4: ldur            d0, [x0, #0xf]
    // 0x20fee8: ldr             x1, [fp, #0x18]
    // 0x20feec: LoadField: r2 = r1->field_63
    //     0x20feec: ldur            w2, [x1, #0x63]
    // 0x20fef0: DecompressPointer r2
    //     0x20fef0: add             x2, x2, HEAP, lsl #32
    // 0x20fef4: LoadField: r3 = r2->field_7
    //     0x20fef4: ldur            w3, [x2, #7]
    // 0x20fef8: DecompressPointer r3
    //     0x20fef8: add             x3, x3, HEAP, lsl #32
    // 0x20fefc: LoadField: d1 = r3->field_7
    //     0x20fefc: ldur            d1, [x3, #7]
    // 0x20ff00: LoadField: d2 = r3->field_17
    //     0x20ff00: ldur            d2, [x3, #0x17]
    // 0x20ff04: fadd            d3, d1, d2
    // 0x20ff08: d1 = 0.000000
    //     0x20ff08: eor             v1.16b, v1.16b, v1.16b
    // 0x20ff0c: d1 = 0.000000
    //     0x20ff0c: eor             v1.16b, v1.16b, v1.16b
    // 0x20ff10: fadd            d2, d3, d1
    // 0x20ff14: fadd            d3, d2, d1
    // 0x20ff18: fsub            d2, d0, d3
    // 0x20ff1c: fcmp            d1, d2
    // 0x20ff20: b.le            #0x20ff30
    // 0x20ff24: d0 = 0.000000
    //     0x20ff24: eor             v0.16b, v0.16b, v0.16b
    // 0x20ff28: d0 = 0.000000
    //     0x20ff28: eor             v0.16b, v0.16b, v0.16b
    // 0x20ff2c: b               #0x20ff68
    // 0x20ff30: fcmp            d2, d1
    // 0x20ff34: b.le            #0x20ff40
    // 0x20ff38: mov             v0.16b, v2.16b
    // 0x20ff3c: b               #0x20ff68
    // 0x20ff40: fcmp            d1, d1
    // 0x20ff44: b.ne            #0x20ff50
    // 0x20ff48: fadd            d0, d1, d2
    // 0x20ff4c: b               #0x20ff68
    // 0x20ff50: fcmp            d2, d2
    // 0x20ff54: b.vc            #0x20ff60
    // 0x20ff58: mov             v0.16b, v2.16b
    // 0x20ff5c: b               #0x20ff68
    // 0x20ff60: d0 = 0.000000
    //     0x20ff60: eor             v0.16b, v0.16b, v0.16b
    // 0x20ff64: d0 = 0.000000
    //     0x20ff64: eor             v0.16b, v0.16b, v0.16b
    // 0x20ff68: r2 = inline_Allocate_Double()
    //     0x20ff68: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x20ff6c: add             x2, x2, #0x10
    //     0x20ff70: cmp             x3, x2
    //     0x20ff74: b.ls            #0x211bf8
    //     0x20ff78: str             x2, [THR, #0x50]  ; THR::top
    //     0x20ff7c: sub             x2, x2, #0xf
    //     0x20ff80: movz            x3, #0xd148
    //     0x20ff84: movk            x3, #0x3, lsl #16
    //     0x20ff88: stur            x3, [x2, #-1]
    // 0x20ff8c: StoreField: r2->field_7 = d0
    //     0x20ff8c: stur            d0, [x2, #7]
    // 0x20ff90: stp             x2, x0, [SP]
    // 0x20ff94: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x20ff94: add             x4, PP, #0x12, lsl #12  ; [pp+0x12518] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x20ff98: ldr             x4, [x4, #0x518]
    // 0x20ff9c: r0 = copyWith()
    //     0x20ff9c: bl              #0x1e0bc0  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x20ffa0: stur            x0, [fp, #-0x18]
    // 0x20ffa4: ldr             x16, [fp, #0x18]
    // 0x20ffa8: r30 = Instance__DecorationSlot
    //     0x20ffa8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x20ffac: ldr             lr, [lr, #0x3a8]
    // 0x20ffb0: stp             lr, x16, [SP]
    // 0x20ffb4: r0 = childForSlot()
    //     0x20ffb4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ffb8: stur            x0, [fp, #-0x20]
    // 0x20ffbc: ldr             x16, [fp, #0x18]
    // 0x20ffc0: r30 = Instance__DecorationSlot
    //     0x20ffc0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x20ffc4: ldr             lr, [lr, #0x3a8]
    // 0x20ffc8: stp             lr, x16, [SP]
    // 0x20ffcc: r0 = childForSlot()
    //     0x20ffcc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x20ffd0: ldr             x16, [fp, #0x18]
    // 0x20ffd4: stp             x0, x16, [SP, #8]
    // 0x20ffd8: ldur            x16, [fp, #-0x18]
    // 0x20ffdc: str             x16, [SP]
    // 0x20ffe0: r0 = _layoutLineBox()
    //     0x20ffe0: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x20ffe4: r0 = inline_Allocate_Double()
    //     0x20ffe4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x20ffe8: add             x0, x0, #0x10
    //     0x20ffec: cmp             x1, x0
    //     0x20fff0: b.ls            #0x211c14
    //     0x20fff4: str             x0, [THR, #0x50]  ; THR::top
    //     0x20fff8: sub             x0, x0, #0xf
    //     0x20fffc: movz            x1, #0xd148
    //     0x210000: movk            x1, #0x3, lsl #16
    //     0x210004: stur            x1, [x0, #-1]
    // 0x210008: StoreField: r0->field_7 = d0
    //     0x210008: stur            d0, [x0, #7]
    // 0x21000c: ldur            x16, [fp, #-8]
    // 0x210010: ldur            lr, [fp, #-0x20]
    // 0x210014: stp             lr, x16, [SP, #8]
    // 0x210018: str             x0, [SP]
    // 0x21001c: r0 = []=()
    //     0x21001c: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x210020: ldr             x16, [fp, #0x18]
    // 0x210024: r30 = Instance__DecorationSlot
    //     0x210024: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x210028: ldr             lr, [lr, #0x3b0]
    // 0x21002c: stp             lr, x16, [SP]
    // 0x210030: r0 = childForSlot()
    //     0x210030: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210034: stur            x0, [fp, #-0x20]
    // 0x210038: ldr             x16, [fp, #0x18]
    // 0x21003c: r30 = Instance__DecorationSlot
    //     0x21003c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x210040: ldr             lr, [lr, #0x3b0]
    // 0x210044: stp             lr, x16, [SP]
    // 0x210048: r0 = childForSlot()
    //     0x210048: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x21004c: ldr             x16, [fp, #0x18]
    // 0x210050: stp             x0, x16, [SP, #8]
    // 0x210054: ldur            x16, [fp, #-0x18]
    // 0x210058: str             x16, [SP]
    // 0x21005c: r0 = _layoutLineBox()
    //     0x21005c: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x210060: r0 = inline_Allocate_Double()
    //     0x210060: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x210064: add             x0, x0, #0x10
    //     0x210068: cmp             x1, x0
    //     0x21006c: b.ls            #0x211c24
    //     0x210070: str             x0, [THR, #0x50]  ; THR::top
    //     0x210074: sub             x0, x0, #0xf
    //     0x210078: movz            x1, #0xd148
    //     0x21007c: movk            x1, #0x3, lsl #16
    //     0x210080: stur            x1, [x0, #-1]
    // 0x210084: StoreField: r0->field_7 = d0
    //     0x210084: stur            d0, [x0, #7]
    // 0x210088: ldur            x16, [fp, #-8]
    // 0x21008c: ldur            lr, [fp, #-0x20]
    // 0x210090: stp             lr, x16, [SP, #8]
    // 0x210094: str             x0, [SP]
    // 0x210098: r0 = []=()
    //     0x210098: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x21009c: ldr             x0, [fp, #0x18]
    // 0x2100a0: LoadField: r1 = r0->field_27
    //     0x2100a0: ldur            w1, [x0, #0x27]
    // 0x2100a4: DecompressPointer r1
    //     0x2100a4: add             x1, x1, HEAP, lsl #32
    // 0x2100a8: cmp             w1, NULL
    // 0x2100ac: b.eq            #0x211b80
    // 0x2100b0: r2 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x2100b0: ldr             x2, [PP, #0x53e8]  ; [pp+0x53e8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x2100b4: LoadField: d0 = r1->field_f
    //     0x2100b4: ldur            d0, [x1, #0xf]
    // 0x2100b8: stur            d0, [fp, #-0x38]
    // 0x2100bc: r16 = Instance__DecorationSlot
    //     0x2100bc: add             x16, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x2100c0: ldr             x16, [x16, #0x388]
    // 0x2100c4: stp             x16, x0, [SP]
    // 0x2100c8: r0 = childForSlot()
    //     0x2100c8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2100cc: str             x0, [SP]
    // 0x2100d0: r0 = _boxSize()
    //     0x2100d0: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x2100d4: LoadField: d0 = r0->field_7
    //     0x2100d4: ldur            d0, [x0, #7]
    // 0x2100d8: stur            d0, [fp, #-0x40]
    // 0x2100dc: ldr             x16, [fp, #0x18]
    // 0x2100e0: r30 = Instance__DecorationSlot
    //     0x2100e0: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x2100e4: ldr             lr, [lr, #0x398]
    // 0x2100e8: stp             lr, x16, [SP]
    // 0x2100ec: r0 = childForSlot()
    //     0x2100ec: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2100f0: cmp             w0, NULL
    // 0x2100f4: b.eq            #0x210104
    // 0x2100f8: ldr             x0, [fp, #0x18]
    // 0x2100fc: r1 = 0
    //     0x2100fc: movz            x1, #0
    // 0x210100: b               #0x210144
    // 0x210104: ldr             x0, [fp, #0x18]
    // 0x210108: LoadField: r1 = r0->field_63
    //     0x210108: ldur            w1, [x0, #0x63]
    // 0x21010c: DecompressPointer r1
    //     0x21010c: add             x1, x1, HEAP, lsl #32
    // 0x210110: LoadField: r2 = r1->field_7
    //     0x210110: ldur            w2, [x1, #7]
    // 0x210114: DecompressPointer r2
    //     0x210114: add             x2, x2, HEAP, lsl #32
    // 0x210118: LoadField: d0 = r2->field_7
    //     0x210118: ldur            d0, [x2, #7]
    // 0x21011c: r1 = inline_Allocate_Double()
    //     0x21011c: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x210120: add             x1, x1, #0x10
    //     0x210124: cmp             x2, x1
    //     0x210128: b.ls            #0x211c34
    //     0x21012c: str             x1, [THR, #0x50]  ; THR::top
    //     0x210130: sub             x1, x1, #0xf
    //     0x210134: movz            x2, #0xd148
    //     0x210138: movk            x2, #0x3, lsl #16
    //     0x21013c: stur            x2, [x1, #-1]
    // 0x210140: StoreField: r1->field_7 = d0
    //     0x210140: stur            d0, [x1, #7]
    // 0x210144: ldur            d0, [fp, #-0x40]
    // 0x210148: r2 = inline_Allocate_Double()
    //     0x210148: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x21014c: add             x2, x2, #0x10
    //     0x210150: cmp             x3, x2
    //     0x210154: b.ls            #0x211c50
    //     0x210158: str             x2, [THR, #0x50]  ; THR::top
    //     0x21015c: sub             x2, x2, #0xf
    //     0x210160: movz            x3, #0xd148
    //     0x210164: movk            x3, #0x3, lsl #16
    //     0x210168: stur            x3, [x2, #-1]
    // 0x21016c: StoreField: r2->field_7 = d0
    //     0x21016c: stur            d0, [x2, #7]
    // 0x210170: stp             x1, x2, [SP]
    // 0x210174: r0 = +()
    //     0x210174: bl              #0x3e32a4  ; [dart:core] _Double::+
    // 0x210178: stur            x0, [fp, #-0x20]
    // 0x21017c: ldr             x16, [fp, #0x18]
    // 0x210180: r30 = Instance__DecorationSlot
    //     0x210180: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x210184: ldr             lr, [lr, #0x398]
    // 0x210188: stp             lr, x16, [SP]
    // 0x21018c: r0 = childForSlot()
    //     0x21018c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210190: str             x0, [SP]
    // 0x210194: r0 = _boxSize()
    //     0x210194: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x210198: LoadField: d0 = r0->field_7
    //     0x210198: ldur            d0, [x0, #7]
    // 0x21019c: ldur            x0, [fp, #-0x20]
    // 0x2101a0: LoadField: d1 = r0->field_7
    //     0x2101a0: ldur            d1, [x0, #7]
    // 0x2101a4: fadd            d2, d1, d0
    // 0x2101a8: stur            d2, [fp, #-0x40]
    // 0x2101ac: ldr             x16, [fp, #0x18]
    // 0x2101b0: r30 = Instance__DecorationSlot
    //     0x2101b0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x2101b4: ldr             lr, [lr, #0x3a8]
    // 0x2101b8: stp             lr, x16, [SP]
    // 0x2101bc: r0 = childForSlot()
    //     0x2101bc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2101c0: str             x0, [SP]
    // 0x2101c4: r0 = _boxSize()
    //     0x2101c4: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x2101c8: LoadField: d0 = r0->field_7
    //     0x2101c8: ldur            d0, [x0, #7]
    // 0x2101cc: ldur            d1, [fp, #-0x40]
    // 0x2101d0: fadd            d2, d1, d0
    // 0x2101d4: stur            d2, [fp, #-0x48]
    // 0x2101d8: ldr             x16, [fp, #0x18]
    // 0x2101dc: r30 = Instance__DecorationSlot
    //     0x2101dc: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x2101e0: ldr             lr, [lr, #0x3b0]
    // 0x2101e4: stp             lr, x16, [SP]
    // 0x2101e8: r0 = childForSlot()
    //     0x2101e8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2101ec: str             x0, [SP]
    // 0x2101f0: r0 = _boxSize()
    //     0x2101f0: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x2101f4: LoadField: d0 = r0->field_7
    //     0x2101f4: ldur            d0, [x0, #7]
    // 0x2101f8: ldur            d1, [fp, #-0x48]
    // 0x2101fc: fadd            d2, d1, d0
    // 0x210200: stur            d2, [fp, #-0x40]
    // 0x210204: ldr             x16, [fp, #0x18]
    // 0x210208: r30 = Instance__DecorationSlot
    //     0x210208: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x21020c: ldr             lr, [lr, #0x3a0]
    // 0x210210: stp             lr, x16, [SP]
    // 0x210214: r0 = childForSlot()
    //     0x210214: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210218: str             x0, [SP]
    // 0x21021c: r0 = _boxSize()
    //     0x21021c: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x210220: LoadField: d0 = r0->field_7
    //     0x210220: ldur            d0, [x0, #7]
    // 0x210224: ldur            d1, [fp, #-0x40]
    // 0x210228: fadd            d2, d1, d0
    // 0x21022c: stur            d2, [fp, #-0x48]
    // 0x210230: ldr             x16, [fp, #0x18]
    // 0x210234: r30 = Instance__DecorationSlot
    //     0x210234: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x210238: ldr             lr, [lr, #0x3a0]
    // 0x21023c: stp             lr, x16, [SP]
    // 0x210240: r0 = childForSlot()
    //     0x210240: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210244: cmp             w0, NULL
    // 0x210248: b.eq            #0x210258
    // 0x21024c: ldr             x0, [fp, #0x18]
    // 0x210250: r1 = 0
    //     0x210250: movz            x1, #0
    // 0x210254: b               #0x210298
    // 0x210258: ldr             x0, [fp, #0x18]
    // 0x21025c: LoadField: r1 = r0->field_63
    //     0x21025c: ldur            w1, [x0, #0x63]
    // 0x210260: DecompressPointer r1
    //     0x210260: add             x1, x1, HEAP, lsl #32
    // 0x210264: LoadField: r2 = r1->field_7
    //     0x210264: ldur            w2, [x1, #7]
    // 0x210268: DecompressPointer r2
    //     0x210268: add             x2, x2, HEAP, lsl #32
    // 0x21026c: LoadField: d0 = r2->field_17
    //     0x21026c: ldur            d0, [x2, #0x17]
    // 0x210270: r1 = inline_Allocate_Double()
    //     0x210270: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x210274: add             x1, x1, #0x10
    //     0x210278: cmp             x2, x1
    //     0x21027c: b.ls            #0x211c6c
    //     0x210280: str             x1, [THR, #0x50]  ; THR::top
    //     0x210284: sub             x1, x1, #0xf
    //     0x210288: movz            x2, #0xd148
    //     0x21028c: movk            x2, #0x3, lsl #16
    //     0x210290: stur            x2, [x1, #-1]
    // 0x210294: StoreField: r1->field_7 = d0
    //     0x210294: stur            d0, [x1, #7]
    // 0x210298: ldur            d1, [fp, #-0x38]
    // 0x21029c: ldur            d0, [fp, #-0x48]
    // 0x2102a0: r2 = inline_Allocate_Double()
    //     0x2102a0: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x2102a4: add             x2, x2, #0x10
    //     0x2102a8: cmp             x3, x2
    //     0x2102ac: b.ls            #0x211c88
    //     0x2102b0: str             x2, [THR, #0x50]  ; THR::top
    //     0x2102b4: sub             x2, x2, #0xf
    //     0x2102b8: movz            x3, #0xd148
    //     0x2102bc: movk            x3, #0x3, lsl #16
    //     0x2102c0: stur            x3, [x2, #-1]
    // 0x2102c4: StoreField: r2->field_7 = d0
    //     0x2102c4: stur            d0, [x2, #7]
    // 0x2102c8: stp             x1, x2, [SP]
    // 0x2102cc: r0 = +()
    //     0x2102cc: bl              #0x3e32a4  ; [dart:core] _Double::+
    // 0x2102d0: LoadField: d0 = r0->field_7
    //     0x2102d0: ldur            d0, [x0, #7]
    // 0x2102d4: ldur            d1, [fp, #-0x38]
    // 0x2102d8: fsub            d2, d1, d0
    // 0x2102dc: d0 = 0.000000
    //     0x2102dc: eor             v0.16b, v0.16b, v0.16b
    // 0x2102e0: d0 = 0.000000
    //     0x2102e0: eor             v0.16b, v0.16b, v0.16b
    // 0x2102e4: fcmp            d0, d2
    // 0x2102e8: b.le            #0x2102f8
    // 0x2102ec: d1 = 0.000000
    //     0x2102ec: eor             v1.16b, v1.16b, v1.16b
    // 0x2102f0: d1 = 0.000000
    //     0x2102f0: eor             v1.16b, v1.16b, v1.16b
    // 0x2102f4: b               #0x210330
    // 0x2102f8: fcmp            d2, d0
    // 0x2102fc: b.le            #0x210308
    // 0x210300: mov             v1.16b, v2.16b
    // 0x210304: b               #0x210330
    // 0x210308: fcmp            d0, d0
    // 0x21030c: b.ne            #0x210318
    // 0x210310: fadd            d1, d0, d2
    // 0x210314: b               #0x210330
    // 0x210318: fcmp            d2, d2
    // 0x21031c: b.vc            #0x210328
    // 0x210320: mov             v1.16b, v2.16b
    // 0x210324: b               #0x210330
    // 0x210328: d1 = 0.000000
    //     0x210328: eor             v1.16b, v1.16b, v1.16b
    // 0x21032c: d1 = 0.000000
    //     0x21032c: eor             v1.16b, v1.16b, v1.16b
    // 0x210330: ldr             x0, [fp, #0x18]
    // 0x210334: stur            d1, [fp, #-0x38]
    // 0x210338: LoadField: r1 = r0->field_63
    //     0x210338: ldur            w1, [x0, #0x63]
    // 0x21033c: DecompressPointer r1
    //     0x21033c: add             x1, x1, HEAP, lsl #32
    // 0x210340: LoadField: d2 = r1->field_17
    //     0x210340: ldur            d2, [x1, #0x17]
    // 0x210344: r1 = inline_Allocate_Double()
    //     0x210344: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x210348: add             x1, x1, #0x10
    //     0x21034c: cmp             x2, x1
    //     0x210350: b.ls            #0x211ca4
    //     0x210354: str             x1, [THR, #0x50]  ; THR::top
    //     0x210358: sub             x1, x1, #0xf
    //     0x21035c: movz            x2, #0xd148
    //     0x210360: movk            x2, #0x3, lsl #16
    //     0x210364: stur            x2, [x1, #-1]
    // 0x210368: StoreField: r1->field_7 = d2
    //     0x210368: stur            d2, [x1, #7]
    // 0x21036c: r16 = 1.000000
    //     0x21036c: ldr             x16, [PP, #0x5298]  ; [pp+0x5298] 1
    // 0x210370: r30 = 1.333333
    //     0x210370: add             lr, PP, #0x14, lsl #12  ; [pp+0x14568] 1.3333333333333333
    //     0x210374: ldr             lr, [lr, #0x568]
    // 0x210378: stp             lr, x16, [SP, #8]
    // 0x21037c: str             x1, [SP]
    // 0x210380: r0 = lerpDouble()
    //     0x210380: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x210384: stur            x0, [fp, #-0x20]
    // 0x210388: ldr             x16, [fp, #0x18]
    // 0x21038c: r30 = Instance__DecorationSlot
    //     0x21038c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x210390: ldr             lr, [lr, #0x3a0]
    // 0x210394: stp             lr, x16, [SP]
    // 0x210398: r0 = childForSlot()
    //     0x210398: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x21039c: str             x0, [SP]
    // 0x2103a0: r0 = _boxSize()
    //     0x2103a0: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x2103a4: LoadField: d0 = r0->field_7
    //     0x2103a4: ldur            d0, [x0, #7]
    // 0x2103a8: ldr             x1, [fp, #0x18]
    // 0x2103ac: stur            d0, [fp, #-0x40]
    // 0x2103b0: LoadField: r0 = r1->field_63
    //     0x2103b0: ldur            w0, [x1, #0x63]
    // 0x2103b4: DecompressPointer r0
    //     0x2103b4: add             x0, x0, HEAP, lsl #32
    // 0x2103b8: LoadField: r2 = r0->field_23
    //     0x2103b8: ldur            w2, [x0, #0x23]
    // 0x2103bc: DecompressPointer r2
    //     0x2103bc: add             x2, x2, HEAP, lsl #32
    // 0x2103c0: r0 = LoadClassIdInstr(r2)
    //     0x2103c0: ldur            x0, [x2, #-1]
    //     0x2103c4: ubfx            x0, x0, #0xc, #0x14
    // 0x2103c8: str             x2, [SP]
    // 0x2103cc: r0 = GDT[cid_x0 + -0x1000]()
    //     0x2103cc: sub             lr, x0, #1, lsl #12
    //     0x2103d0: ldr             lr, [x21, lr, lsl #3]
    //     0x2103d4: blr             lr
    // 0x2103d8: tbnz            w0, #4, #0x210458
    // 0x2103dc: ldr             x0, [fp, #0x18]
    // 0x2103e0: ldur            d0, [fp, #-0x40]
    // 0x2103e4: LoadField: r1 = r0->field_63
    //     0x2103e4: ldur            w1, [x0, #0x63]
    // 0x2103e8: DecompressPointer r1
    //     0x2103e8: add             x1, x1, HEAP, lsl #32
    // 0x2103ec: LoadField: d1 = r1->field_17
    //     0x2103ec: ldur            d1, [x1, #0x17]
    // 0x2103f0: r1 = inline_Allocate_Double()
    //     0x2103f0: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x2103f4: add             x1, x1, #0x10
    //     0x2103f8: cmp             x2, x1
    //     0x2103fc: b.ls            #0x211cc8
    //     0x210400: str             x1, [THR, #0x50]  ; THR::top
    //     0x210404: sub             x1, x1, #0xf
    //     0x210408: movz            x2, #0xd148
    //     0x21040c: movk            x2, #0x3, lsl #16
    //     0x210410: stur            x2, [x1, #-1]
    // 0x210414: StoreField: r1->field_7 = d0
    //     0x210414: stur            d0, [x1, #7]
    // 0x210418: r2 = inline_Allocate_Double()
    //     0x210418: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x21041c: add             x2, x2, #0x10
    //     0x210420: cmp             x3, x2
    //     0x210424: b.ls            #0x211ce4
    //     0x210428: str             x2, [THR, #0x50]  ; THR::top
    //     0x21042c: sub             x2, x2, #0xf
    //     0x210430: movz            x3, #0xd148
    //     0x210434: movk            x3, #0x3, lsl #16
    //     0x210438: stur            x3, [x2, #-1]
    // 0x21043c: StoreField: r2->field_7 = d1
    //     0x21043c: stur            d1, [x2, #7]
    // 0x210440: r16 = 0.000000
    //     0x210440: ldr             x16, [PP, #0x5288]  ; [pp+0x5288] 0
    // 0x210444: stp             x16, x1, [SP, #8]
    // 0x210448: str             x2, [SP]
    // 0x21044c: r0 = lerpDouble()
    //     0x21044c: bl              #0x1fa094  ; [dart:ui] ::lerpDouble
    // 0x210450: LoadField: d0 = r0->field_7
    //     0x210450: ldur            d0, [x0, #7]
    // 0x210454: b               #0x21045c
    // 0x210458: ldur            d0, [fp, #-0x40]
    // 0x21045c: ldr             x0, [fp, #0x18]
    // 0x210460: stur            d0, [fp, #-0x48]
    // 0x210464: LoadField: r1 = r0->field_27
    //     0x210464: ldur            w1, [x0, #0x27]
    // 0x210468: DecompressPointer r1
    //     0x210468: add             x1, x1, HEAP, lsl #32
    // 0x21046c: cmp             w1, NULL
    // 0x210470: b.eq            #0x211b94
    // 0x210474: LoadField: d1 = r1->field_f
    //     0x210474: ldur            d1, [x1, #0xf]
    // 0x210478: stur            d1, [fp, #-0x40]
    // 0x21047c: r16 = Instance__DecorationSlot
    //     0x21047c: add             x16, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x210480: ldr             x16, [x16, #0x388]
    // 0x210484: stp             x16, x0, [SP]
    // 0x210488: r0 = childForSlot()
    //     0x210488: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x21048c: str             x0, [SP]
    // 0x210490: r0 = _boxSize()
    //     0x210490: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x210494: LoadField: d0 = r0->field_7
    //     0x210494: ldur            d0, [x0, #7]
    // 0x210498: ldr             x0, [fp, #0x18]
    // 0x21049c: LoadField: r1 = r0->field_63
    //     0x21049c: ldur            w1, [x0, #0x63]
    // 0x2104a0: DecompressPointer r1
    //     0x2104a0: add             x1, x1, HEAP, lsl #32
    // 0x2104a4: LoadField: r2 = r1->field_7
    //     0x2104a4: ldur            w2, [x1, #7]
    // 0x2104a8: DecompressPointer r2
    //     0x2104a8: add             x2, x2, HEAP, lsl #32
    // 0x2104ac: LoadField: d1 = r2->field_7
    //     0x2104ac: ldur            d1, [x2, #7]
    // 0x2104b0: fadd            d2, d0, d1
    // 0x2104b4: stur            d2, [fp, #-0x50]
    // 0x2104b8: r16 = Instance__DecorationSlot
    //     0x2104b8: add             x16, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x2104bc: ldr             x16, [x16, #0x398]
    // 0x2104c0: stp             x16, x0, [SP]
    // 0x2104c4: r0 = childForSlot()
    //     0x2104c4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2104c8: str             x0, [SP]
    // 0x2104cc: r0 = _boxSize()
    //     0x2104cc: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x2104d0: LoadField: d0 = r0->field_7
    //     0x2104d0: ldur            d0, [x0, #7]
    // 0x2104d4: ldur            d1, [fp, #-0x50]
    // 0x2104d8: fadd            d2, d1, d0
    // 0x2104dc: ldur            d0, [fp, #-0x48]
    // 0x2104e0: fadd            d1, d2, d0
    // 0x2104e4: ldr             x0, [fp, #0x18]
    // 0x2104e8: LoadField: r1 = r0->field_63
    //     0x2104e8: ldur            w1, [x0, #0x63]
    // 0x2104ec: DecompressPointer r1
    //     0x2104ec: add             x1, x1, HEAP, lsl #32
    // 0x2104f0: LoadField: r2 = r1->field_7
    //     0x2104f0: ldur            w2, [x1, #7]
    // 0x2104f4: DecompressPointer r2
    //     0x2104f4: add             x2, x2, HEAP, lsl #32
    // 0x2104f8: LoadField: d0 = r2->field_17
    //     0x2104f8: ldur            d0, [x2, #0x17]
    // 0x2104fc: fadd            d2, d1, d0
    // 0x210500: ldur            d0, [fp, #-0x40]
    // 0x210504: fsub            d1, d0, d2
    // 0x210508: d0 = 0.000000
    //     0x210508: eor             v0.16b, v0.16b, v0.16b
    // 0x21050c: d0 = 0.000000
    //     0x21050c: eor             v0.16b, v0.16b, v0.16b
    // 0x210510: fcmp            d0, d1
    // 0x210514: b.le            #0x210524
    // 0x210518: d2 = 0.000000
    //     0x210518: eor             v2.16b, v2.16b, v2.16b
    // 0x21051c: d2 = 0.000000
    //     0x21051c: eor             v2.16b, v2.16b, v2.16b
    // 0x210520: b               #0x21055c
    // 0x210524: fcmp            d1, d0
    // 0x210528: b.le            #0x210534
    // 0x21052c: mov             v2.16b, v1.16b
    // 0x210530: b               #0x21055c
    // 0x210534: fcmp            d0, d0
    // 0x210538: b.ne            #0x210544
    // 0x21053c: fadd            d2, d0, d1
    // 0x210540: b               #0x21055c
    // 0x210544: fcmp            d1, d1
    // 0x210548: b.vc            #0x210554
    // 0x21054c: mov             v2.16b, v1.16b
    // 0x210550: b               #0x21055c
    // 0x210554: d2 = 0.000000
    //     0x210554: eor             v2.16b, v2.16b, v2.16b
    // 0x210558: d2 = 0.000000
    //     0x210558: eor             v2.16b, v2.16b, v2.16b
    // 0x21055c: ldur            x2, [fp, #-0x18]
    // 0x210560: ldur            x1, [fp, #-0x20]
    // 0x210564: ldur            d1, [fp, #-0x38]
    // 0x210568: stur            d2, [fp, #-0x40]
    // 0x21056c: r16 = Instance__DecorationSlot
    //     0x21056c: add             x16, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x210570: ldr             x16, [x16, #0x3b8]
    // 0x210574: stp             x16, x0, [SP]
    // 0x210578: r0 = childForSlot()
    //     0x210578: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x21057c: stur            x0, [fp, #-0x28]
    // 0x210580: ldr             x16, [fp, #0x18]
    // 0x210584: r30 = Instance__DecorationSlot
    //     0x210584: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x210588: ldr             lr, [lr, #0x3b8]
    // 0x21058c: stp             lr, x16, [SP]
    // 0x210590: r0 = childForSlot()
    //     0x210590: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210594: mov             x1, x0
    // 0x210598: ldur            x0, [fp, #-0x20]
    // 0x21059c: stur            x1, [fp, #-0x30]
    // 0x2105a0: LoadField: d0 = r0->field_7
    //     0x2105a0: ldur            d0, [x0, #7]
    // 0x2105a4: ldur            d1, [fp, #-0x40]
    // 0x2105a8: fmul            d2, d1, d0
    // 0x2105ac: r0 = inline_Allocate_Double()
    //     0x2105ac: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x2105b0: add             x0, x0, #0x10
    //     0x2105b4: cmp             x2, x0
    //     0x2105b8: b.ls            #0x211d00
    //     0x2105bc: str             x0, [THR, #0x50]  ; THR::top
    //     0x2105c0: sub             x0, x0, #0xf
    //     0x2105c4: movz            x2, #0xd148
    //     0x2105c8: movk            x2, #0x3, lsl #16
    //     0x2105cc: stur            x2, [x0, #-1]
    // 0x2105d0: StoreField: r0->field_7 = d2
    //     0x2105d0: stur            d2, [x0, #7]
    // 0x2105d4: ldur            x16, [fp, #-0x10]
    // 0x2105d8: stp             x0, x16, [SP]
    // 0x2105dc: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x2105dc: add             x4, PP, #0x12, lsl #12  ; [pp+0x12518] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x2105e0: ldr             x4, [x4, #0x518]
    // 0x2105e4: r0 = copyWith()
    //     0x2105e4: bl              #0x1e0bc0  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x2105e8: ldr             x16, [fp, #0x18]
    // 0x2105ec: ldur            lr, [fp, #-0x30]
    // 0x2105f0: stp             lr, x16, [SP, #8]
    // 0x2105f4: str             x0, [SP]
    // 0x2105f8: r0 = _layoutLineBox()
    //     0x2105f8: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x2105fc: r0 = inline_Allocate_Double()
    //     0x2105fc: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x210600: add             x0, x0, #0x10
    //     0x210604: cmp             x1, x0
    //     0x210608: b.ls            #0x211d18
    //     0x21060c: str             x0, [THR, #0x50]  ; THR::top
    //     0x210610: sub             x0, x0, #0xf
    //     0x210614: movz            x1, #0xd148
    //     0x210618: movk            x1, #0x3, lsl #16
    //     0x21061c: stur            x1, [x0, #-1]
    // 0x210620: StoreField: r0->field_7 = d0
    //     0x210620: stur            d0, [x0, #7]
    // 0x210624: ldur            x16, [fp, #-8]
    // 0x210628: ldur            lr, [fp, #-0x28]
    // 0x21062c: stp             lr, x16, [SP, #8]
    // 0x210630: str             x0, [SP]
    // 0x210634: r0 = []=()
    //     0x210634: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x210638: ldr             x16, [fp, #0x18]
    // 0x21063c: r30 = Instance__DecorationSlot
    //     0x21063c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x210640: ldr             lr, [lr, #0x3c0]
    // 0x210644: stp             lr, x16, [SP]
    // 0x210648: r0 = childForSlot()
    //     0x210648: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x21064c: stur            x0, [fp, #-0x20]
    // 0x210650: ldr             x16, [fp, #0x18]
    // 0x210654: r30 = Instance__DecorationSlot
    //     0x210654: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x210658: ldr             lr, [lr, #0x3c0]
    // 0x21065c: stp             lr, x16, [SP]
    // 0x210660: r0 = childForSlot()
    //     0x210660: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210664: ldur            d0, [fp, #-0x38]
    // 0x210668: stur            x0, [fp, #-0x28]
    // 0x21066c: r1 = inline_Allocate_Double()
    //     0x21066c: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x210670: add             x1, x1, #0x10
    //     0x210674: cmp             x2, x1
    //     0x210678: b.ls            #0x211d28
    //     0x21067c: str             x1, [THR, #0x50]  ; THR::top
    //     0x210680: sub             x1, x1, #0xf
    //     0x210684: movz            x2, #0xd148
    //     0x210688: movk            x2, #0x3, lsl #16
    //     0x21068c: stur            x2, [x1, #-1]
    // 0x210690: StoreField: r1->field_7 = d0
    //     0x210690: stur            d0, [x1, #7]
    // 0x210694: r2 = inline_Allocate_Double()
    //     0x210694: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x210698: add             x2, x2, #0x10
    //     0x21069c: cmp             x3, x2
    //     0x2106a0: b.ls            #0x211d44
    //     0x2106a4: str             x2, [THR, #0x50]  ; THR::top
    //     0x2106a8: sub             x2, x2, #0xf
    //     0x2106ac: movz            x3, #0xd148
    //     0x2106b0: movk            x3, #0x3, lsl #16
    //     0x2106b4: stur            x3, [x2, #-1]
    // 0x2106b8: StoreField: r2->field_7 = d0
    //     0x2106b8: stur            d0, [x2, #7]
    // 0x2106bc: ldur            x16, [fp, #-0x10]
    // 0x2106c0: stp             x1, x16, [SP, #8]
    // 0x2106c4: str             x2, [SP]
    // 0x2106c8: r4 = const [0, 0x3, 0x3, 0x1, maxWidth, 0x2, minWidth, 0x1, null]
    //     0x2106c8: ldr             x4, [PP, #0x5360]  ; [pp+0x5360] List(9) [0, 0x3, 0x3, 0x1, "maxWidth", 0x2, "minWidth", 0x1, Null]
    // 0x2106cc: r0 = copyWith()
    //     0x2106cc: bl              #0x1e0bc0  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x2106d0: ldr             x16, [fp, #0x18]
    // 0x2106d4: ldur            lr, [fp, #-0x28]
    // 0x2106d8: stp             lr, x16, [SP, #8]
    // 0x2106dc: str             x0, [SP]
    // 0x2106e0: r0 = _layoutLineBox()
    //     0x2106e0: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x2106e4: r0 = inline_Allocate_Double()
    //     0x2106e4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x2106e8: add             x0, x0, #0x10
    //     0x2106ec: cmp             x1, x0
    //     0x2106f0: b.ls            #0x211d60
    //     0x2106f4: str             x0, [THR, #0x50]  ; THR::top
    //     0x2106f8: sub             x0, x0, #0xf
    //     0x2106fc: movz            x1, #0xd148
    //     0x210700: movk            x1, #0x3, lsl #16
    //     0x210704: stur            x1, [x0, #-1]
    // 0x210708: StoreField: r0->field_7 = d0
    //     0x210708: stur            d0, [x0, #7]
    // 0x21070c: ldur            x16, [fp, #-8]
    // 0x210710: ldur            lr, [fp, #-0x20]
    // 0x210714: stp             lr, x16, [SP, #8]
    // 0x210718: str             x0, [SP]
    // 0x21071c: r0 = []=()
    //     0x21071c: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x210720: ldr             x16, [fp, #0x18]
    // 0x210724: r30 = Instance__DecorationSlot
    //     0x210724: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x210728: ldr             lr, [lr, #0x3d0]
    // 0x21072c: stp             lr, x16, [SP]
    // 0x210730: r0 = childForSlot()
    //     0x210730: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210734: stur            x0, [fp, #-0x20]
    // 0x210738: ldr             x16, [fp, #0x18]
    // 0x21073c: r30 = Instance__DecorationSlot
    //     0x21073c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x210740: ldr             lr, [lr, #0x3d0]
    // 0x210744: stp             lr, x16, [SP]
    // 0x210748: r0 = childForSlot()
    //     0x210748: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x21074c: ldr             x16, [fp, #0x18]
    // 0x210750: stp             x0, x16, [SP, #8]
    // 0x210754: ldur            x16, [fp, #-0x18]
    // 0x210758: str             x16, [SP]
    // 0x21075c: r0 = _layoutLineBox()
    //     0x21075c: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x210760: r0 = inline_Allocate_Double()
    //     0x210760: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x210764: add             x0, x0, #0x10
    //     0x210768: cmp             x1, x0
    //     0x21076c: b.ls            #0x211d70
    //     0x210770: str             x0, [THR, #0x50]  ; THR::top
    //     0x210774: sub             x0, x0, #0xf
    //     0x210778: movz            x1, #0xd148
    //     0x21077c: movk            x1, #0x3, lsl #16
    //     0x210780: stur            x1, [x0, #-1]
    // 0x210784: StoreField: r0->field_7 = d0
    //     0x210784: stur            d0, [x0, #7]
    // 0x210788: ldur            x16, [fp, #-8]
    // 0x21078c: ldur            lr, [fp, #-0x20]
    // 0x210790: stp             lr, x16, [SP, #8]
    // 0x210794: str             x0, [SP]
    // 0x210798: r0 = []=()
    //     0x210798: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x21079c: ldr             x16, [fp, #0x18]
    // 0x2107a0: r30 = Instance__DecorationSlot
    //     0x2107a0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x2107a4: ldr             lr, [lr, #0x3c8]
    // 0x2107a8: stp             lr, x16, [SP]
    // 0x2107ac: r0 = childForSlot()
    //     0x2107ac: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2107b0: stur            x0, [fp, #-0x20]
    // 0x2107b4: ldr             x16, [fp, #0x18]
    // 0x2107b8: r30 = Instance__DecorationSlot
    //     0x2107b8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x2107bc: ldr             lr, [lr, #0x3c8]
    // 0x2107c0: stp             lr, x16, [SP]
    // 0x2107c4: r0 = childForSlot()
    //     0x2107c4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2107c8: mov             x1, x0
    // 0x2107cc: ldur            x0, [fp, #-0x18]
    // 0x2107d0: stur            x1, [fp, #-0x28]
    // 0x2107d4: LoadField: d0 = r0->field_f
    //     0x2107d4: ldur            d0, [x0, #0xf]
    // 0x2107d8: stur            d0, [fp, #-0x40]
    // 0x2107dc: ldr             x16, [fp, #0x18]
    // 0x2107e0: r30 = Instance__DecorationSlot
    //     0x2107e0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x2107e4: ldr             lr, [lr, #0x3d0]
    // 0x2107e8: stp             lr, x16, [SP]
    // 0x2107ec: r0 = childForSlot()
    //     0x2107ec: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2107f0: str             x0, [SP]
    // 0x2107f4: r0 = _boxSize()
    //     0x2107f4: bl              #0x1fa33c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x2107f8: LoadField: d0 = r0->field_7
    //     0x2107f8: ldur            d0, [x0, #7]
    // 0x2107fc: ldur            d1, [fp, #-0x40]
    // 0x210800: fsub            d2, d1, d0
    // 0x210804: d0 = 0.000000
    //     0x210804: eor             v0.16b, v0.16b, v0.16b
    // 0x210808: d0 = 0.000000
    //     0x210808: eor             v0.16b, v0.16b, v0.16b
    // 0x21080c: fcmp            d0, d2
    // 0x210810: b.le            #0x210820
    // 0x210814: d1 = 0.000000
    //     0x210814: eor             v1.16b, v1.16b, v1.16b
    // 0x210818: d1 = 0.000000
    //     0x210818: eor             v1.16b, v1.16b, v1.16b
    // 0x21081c: b               #0x210858
    // 0x210820: fcmp            d2, d0
    // 0x210824: b.le            #0x210830
    // 0x210828: mov             v1.16b, v2.16b
    // 0x21082c: b               #0x210858
    // 0x210830: fcmp            d0, d0
    // 0x210834: b.ne            #0x210840
    // 0x210838: fadd            d1, d0, d2
    // 0x21083c: b               #0x210858
    // 0x210840: fcmp            d2, d2
    // 0x210844: b.vc            #0x210850
    // 0x210848: mov             v1.16b, v2.16b
    // 0x21084c: b               #0x210858
    // 0x210850: d1 = 0.000000
    //     0x210850: eor             v1.16b, v1.16b, v1.16b
    // 0x210854: d1 = 0.000000
    //     0x210854: eor             v1.16b, v1.16b, v1.16b
    // 0x210858: r0 = inline_Allocate_Double()
    //     0x210858: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x21085c: add             x0, x0, #0x10
    //     0x210860: cmp             x1, x0
    //     0x210864: b.ls            #0x211d80
    //     0x210868: str             x0, [THR, #0x50]  ; THR::top
    //     0x21086c: sub             x0, x0, #0xf
    //     0x210870: movz            x1, #0xd148
    //     0x210874: movk            x1, #0x3, lsl #16
    //     0x210878: stur            x1, [x0, #-1]
    // 0x21087c: StoreField: r0->field_7 = d1
    //     0x21087c: stur            d1, [x0, #7]
    // 0x210880: ldur            x16, [fp, #-0x18]
    // 0x210884: stp             x0, x16, [SP]
    // 0x210888: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x210888: add             x4, PP, #0x12, lsl #12  ; [pp+0x12518] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x21088c: ldr             x4, [x4, #0x518]
    // 0x210890: r0 = copyWith()
    //     0x210890: bl              #0x1e0bc0  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x210894: ldr             x16, [fp, #0x18]
    // 0x210898: ldur            lr, [fp, #-0x28]
    // 0x21089c: stp             lr, x16, [SP, #8]
    // 0x2108a0: str             x0, [SP]
    // 0x2108a4: r0 = _layoutLineBox()
    //     0x2108a4: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x2108a8: r0 = inline_Allocate_Double()
    //     0x2108a8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x2108ac: add             x0, x0, #0x10
    //     0x2108b0: cmp             x1, x0
    //     0x2108b4: b.ls            #0x211d90
    //     0x2108b8: str             x0, [THR, #0x50]  ; THR::top
    //     0x2108bc: sub             x0, x0, #0xf
    //     0x2108c0: movz            x1, #0xd148
    //     0x2108c4: movk            x1, #0x3, lsl #16
    //     0x2108c8: stur            x1, [x0, #-1]
    // 0x2108cc: StoreField: r0->field_7 = d0
    //     0x2108cc: stur            d0, [x0, #7]
    // 0x2108d0: ldur            x16, [fp, #-8]
    // 0x2108d4: ldur            lr, [fp, #-0x20]
    // 0x2108d8: stp             lr, x16, [SP, #8]
    // 0x2108dc: str             x0, [SP]
    // 0x2108e0: r0 = []=()
    //     0x2108e0: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x2108e4: ldr             x16, [fp, #0x18]
    // 0x2108e8: r30 = Instance__DecorationSlot
    //     0x2108e8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x2108ec: ldr             lr, [lr, #0x3b8]
    // 0x2108f0: stp             lr, x16, [SP]
    // 0x2108f4: r0 = childForSlot()
    //     0x2108f4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2108f8: cmp             w0, NULL
    // 0x2108fc: b.ne            #0x210910
    // 0x210900: ldr             x1, [fp, #0x18]
    // 0x210904: d0 = 0.000000
    //     0x210904: eor             v0.16b, v0.16b, v0.16b
    // 0x210908: d0 = 0.000000
    //     0x210908: eor             v0.16b, v0.16b, v0.16b
    // 0x21090c: b               #0x210920
    // 0x210910: ldr             x1, [fp, #0x18]
    // 0x210914: LoadField: r0 = r1->field_63
    //     0x210914: ldur            w0, [x1, #0x63]
    // 0x210918: DecompressPointer r0
    //     0x210918: add             x0, x0, HEAP, lsl #32
    // 0x21091c: LoadField: d0 = r0->field_f
    //     0x21091c: ldur            d0, [x0, #0xf]
    // 0x210920: stur            d0, [fp, #-0x40]
    // 0x210924: LoadField: r0 = r1->field_63
    //     0x210924: ldur            w0, [x1, #0x63]
    // 0x210928: DecompressPointer r0
    //     0x210928: add             x0, x0, HEAP, lsl #32
    // 0x21092c: LoadField: r2 = r0->field_23
    //     0x21092c: ldur            w2, [x0, #0x23]
    // 0x210930: DecompressPointer r2
    //     0x210930: add             x2, x2, HEAP, lsl #32
    // 0x210934: r0 = LoadClassIdInstr(r2)
    //     0x210934: ldur            x0, [x2, #-1]
    //     0x210938: ubfx            x0, x0, #0xc, #0x14
    // 0x21093c: str             x2, [SP]
    // 0x210940: r0 = GDT[cid_x0 + -0x1000]()
    //     0x210940: sub             lr, x0, #1, lsl #12
    //     0x210944: ldr             lr, [x21, lr, lsl #3]
    //     0x210948: blr             lr
    // 0x21094c: tbnz            w0, #4, #0x2109e8
    // 0x210950: ldur            x0, [fp, #-8]
    // 0x210954: ldr             x16, [fp, #0x18]
    // 0x210958: r30 = Instance__DecorationSlot
    //     0x210958: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x21095c: ldr             lr, [lr, #0x3b8]
    // 0x210960: stp             lr, x16, [SP]
    // 0x210964: r0 = childForSlot()
    //     0x210964: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210968: ldur            x16, [fp, #-8]
    // 0x21096c: stp             x0, x16, [SP]
    // 0x210970: r0 = _getValueOrData()
    //     0x210970: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x210974: mov             x1, x0
    // 0x210978: ldur            x0, [fp, #-8]
    // 0x21097c: LoadField: r2 = r0->field_f
    //     0x21097c: ldur            w2, [x0, #0xf]
    // 0x210980: DecompressPointer r2
    //     0x210980: add             x2, x2, HEAP, lsl #32
    // 0x210984: cmp             w2, w1
    // 0x210988: b.ne            #0x210990
    // 0x21098c: r1 = Null
    //     0x21098c: mov             x1, NULL
    // 0x210990: ldur            d0, [fp, #-0x40]
    // 0x210994: d1 = 0.000000
    //     0x210994: eor             v1.16b, v1.16b, v1.16b
    // 0x210998: d1 = 0.000000
    //     0x210998: eor             v1.16b, v1.16b, v1.16b
    // 0x21099c: cmp             w1, NULL
    // 0x2109a0: b.eq            #0x211da0
    // 0x2109a4: LoadField: d2 = r1->field_7
    //     0x2109a4: ldur            d2, [x1, #7]
    // 0x2109a8: fsub            d3, d0, d2
    // 0x2109ac: fcmp            d3, d1
    // 0x2109b0: b.le            #0x2109bc
    // 0x2109b4: mov             v0.16b, v3.16b
    // 0x2109b8: b               #0x2109f8
    // 0x2109bc: fcmp            d1, d3
    // 0x2109c0: b.le            #0x2109d0
    // 0x2109c4: d0 = 0.000000
    //     0x2109c4: eor             v0.16b, v0.16b, v0.16b
    // 0x2109c8: d0 = 0.000000
    //     0x2109c8: eor             v0.16b, v0.16b, v0.16b
    // 0x2109cc: b               #0x2109f8
    // 0x2109d0: fcmp            d3, d1
    // 0x2109d4: b.ne            #0x2109e0
    // 0x2109d8: fadd            d0, d3, d1
    // 0x2109dc: b               #0x2109f8
    // 0x2109e0: mov             v0.16b, v3.16b
    // 0x2109e4: b               #0x2109f8
    // 0x2109e8: ldur            x0, [fp, #-8]
    // 0x2109ec: ldur            d0, [fp, #-0x40]
    // 0x2109f0: d1 = 0.000000
    //     0x2109f0: eor             v1.16b, v1.16b, v1.16b
    // 0x2109f4: d1 = 0.000000
    //     0x2109f4: eor             v1.16b, v1.16b, v1.16b
    // 0x2109f8: stur            d0, [fp, #-0x40]
    // 0x2109fc: ldr             x16, [fp, #0x18]
    // 0x210a00: r30 = Instance__DecorationSlot
    //     0x210a00: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x210a04: ldr             lr, [lr, #0x3d0]
    // 0x210a08: stp             lr, x16, [SP]
    // 0x210a0c: r0 = childForSlot()
    //     0x210a0c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210a10: cmp             w0, NULL
    // 0x210a14: b.ne            #0x210a30
    // 0x210a18: ldur            x0, [fp, #-8]
    // 0x210a1c: d1 = 0.000000
    //     0x210a1c: eor             v1.16b, v1.16b, v1.16b
    // 0x210a20: d1 = 0.000000
    //     0x210a20: eor             v1.16b, v1.16b, v1.16b
    // 0x210a24: d0 = 8.000000
    //     0x210a24: fmov            d0, #8.00000000
    // 0x210a28: d0 = 8.000000
    //     0x210a28: fmov            d0, #8.00000000
    // 0x210a2c: b               #0x210a8c
    // 0x210a30: ldur            x0, [fp, #-8]
    // 0x210a34: ldr             x16, [fp, #0x18]
    // 0x210a38: r30 = Instance__DecorationSlot
    //     0x210a38: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x210a3c: ldr             lr, [lr, #0x3d0]
    // 0x210a40: stp             lr, x16, [SP]
    // 0x210a44: r0 = childForSlot()
    //     0x210a44: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210a48: ldur            x16, [fp, #-8]
    // 0x210a4c: stp             x0, x16, [SP]
    // 0x210a50: r0 = _getValueOrData()
    //     0x210a50: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x210a54: mov             x1, x0
    // 0x210a58: ldur            x0, [fp, #-8]
    // 0x210a5c: LoadField: r2 = r0->field_f
    //     0x210a5c: ldur            w2, [x0, #0xf]
    // 0x210a60: DecompressPointer r2
    //     0x210a60: add             x2, x2, HEAP, lsl #32
    // 0x210a64: cmp             w2, w1
    // 0x210a68: b.ne            #0x210a70
    // 0x210a6c: r1 = Null
    //     0x210a6c: mov             x1, NULL
    // 0x210a70: d0 = 8.000000
    //     0x210a70: fmov            d0, #8.00000000
    // 0x210a74: d0 = 8.000000
    //     0x210a74: fmov            d0, #8.00000000
    // 0x210a78: cmp             w1, NULL
    // 0x210a7c: b.eq            #0x211da4
    // 0x210a80: LoadField: d1 = r1->field_7
    //     0x210a80: ldur            d1, [x1, #7]
    // 0x210a84: fadd            d2, d1, d0
    // 0x210a88: mov             v1.16b, v2.16b
    // 0x210a8c: stur            d1, [fp, #-0x48]
    // 0x210a90: ldr             x16, [fp, #0x18]
    // 0x210a94: r30 = Instance__DecorationSlot
    //     0x210a94: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x210a98: ldr             lr, [lr, #0x3c8]
    // 0x210a9c: stp             lr, x16, [SP]
    // 0x210aa0: r0 = childForSlot()
    //     0x210aa0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210aa4: cmp             w0, NULL
    // 0x210aa8: b.ne            #0x210abc
    // 0x210aac: r0 = false
    //     0x210aac: add             x0, NULL, #0x30  ; false
    // 0x210ab0: d1 = 0.000000
    //     0x210ab0: eor             v1.16b, v1.16b, v1.16b
    // 0x210ab4: d1 = 0.000000
    //     0x210ab4: eor             v1.16b, v1.16b, v1.16b
    // 0x210ab8: b               #0x210b04
    // 0x210abc: str             x0, [SP]
    // 0x210ac0: r0 = size()
    //     0x210ac0: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x210ac4: ldr             x16, [fp, #0x18]
    // 0x210ac8: r30 = Instance__DecorationSlot
    //     0x210ac8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x210acc: ldr             lr, [lr, #0x3c8]
    // 0x210ad0: stp             lr, x16, [SP]
    // 0x210ad4: r0 = childForSlot()
    //     0x210ad4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210ad8: cmp             w0, NULL
    // 0x210adc: b.eq            #0x211da8
    // 0x210ae0: str             x0, [SP]
    // 0x210ae4: r0 = size()
    //     0x210ae4: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x210ae8: LoadField: d0 = r0->field_f
    //     0x210ae8: ldur            d0, [x0, #0xf]
    // 0x210aec: d1 = 0.000000
    //     0x210aec: eor             v1.16b, v1.16b, v1.16b
    // 0x210af0: d1 = 0.000000
    //     0x210af0: eor             v1.16b, v1.16b, v1.16b
    // 0x210af4: fcmp            d0, d1
    // 0x210af8: r16 = true
    //     0x210af8: add             x16, NULL, #0x20  ; true
    // 0x210afc: r17 = false
    //     0x210afc: add             x17, NULL, #0x30  ; false
    // 0x210b00: csel            x0, x16, x17, gt
    // 0x210b04: stur            x0, [fp, #-0x18]
    // 0x210b08: tbz             w0, #4, #0x210b20
    // 0x210b0c: d2 = 0.000000
    //     0x210b0c: eor             v2.16b, v2.16b, v2.16b
    // 0x210b10: d2 = 0.000000
    //     0x210b10: eor             v2.16b, v2.16b, v2.16b
    // 0x210b14: d1 = 8.000000
    //     0x210b14: fmov            d1, #8.00000000
    // 0x210b18: d1 = 8.000000
    //     0x210b18: fmov            d1, #8.00000000
    // 0x210b1c: b               #0x210b54
    // 0x210b20: ldr             x16, [fp, #0x18]
    // 0x210b24: r30 = Instance__DecorationSlot
    //     0x210b24: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x210b28: ldr             lr, [lr, #0x3c8]
    // 0x210b2c: stp             lr, x16, [SP]
    // 0x210b30: r0 = childForSlot()
    //     0x210b30: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210b34: cmp             w0, NULL
    // 0x210b38: b.eq            #0x211dac
    // 0x210b3c: str             x0, [SP]
    // 0x210b40: r0 = size()
    //     0x210b40: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x210b44: LoadField: d0 = r0->field_f
    //     0x210b44: ldur            d0, [x0, #0xf]
    // 0x210b48: d1 = 8.000000
    //     0x210b48: fmov            d1, #8.00000000
    // 0x210b4c: d1 = 8.000000
    //     0x210b4c: fmov            d1, #8.00000000
    // 0x210b50: fadd            d2, d0, d1
    // 0x210b54: ldur            d0, [fp, #-0x48]
    // 0x210b58: stur            d2, [fp, #-0x50]
    // 0x210b5c: fcmp            d0, d2
    // 0x210b60: b.le            #0x210b74
    // 0x210b64: mov             v5.16b, v0.16b
    // 0x210b68: d3 = 0.000000
    //     0x210b68: eor             v3.16b, v3.16b, v3.16b
    // 0x210b6c: d3 = 0.000000
    //     0x210b6c: eor             v3.16b, v3.16b, v3.16b
    // 0x210b70: b               #0x210bbc
    // 0x210b74: fcmp            d2, d0
    // 0x210b78: b.le            #0x210b8c
    // 0x210b7c: mov             v5.16b, v2.16b
    // 0x210b80: d3 = 0.000000
    //     0x210b80: eor             v3.16b, v3.16b, v3.16b
    // 0x210b84: d3 = 0.000000
    //     0x210b84: eor             v3.16b, v3.16b, v3.16b
    // 0x210b88: b               #0x210bbc
    // 0x210b8c: d3 = 0.000000
    //     0x210b8c: eor             v3.16b, v3.16b, v3.16b
    // 0x210b90: d3 = 0.000000
    //     0x210b90: eor             v3.16b, v3.16b, v3.16b
    // 0x210b94: fcmp            d0, d3
    // 0x210b98: b.ne            #0x210ba8
    // 0x210b9c: fadd            d4, d0, d2
    // 0x210ba0: mov             v5.16b, v4.16b
    // 0x210ba4: b               #0x210bbc
    // 0x210ba8: fcmp            d2, d2
    // 0x210bac: b.vc            #0x210bb8
    // 0x210bb0: mov             v5.16b, v2.16b
    // 0x210bb4: b               #0x210bbc
    // 0x210bb8: mov             v5.16b, v0.16b
    // 0x210bbc: ldr             x0, [fp, #0x18]
    // 0x210bc0: ldur            d0, [fp, #-0x40]
    // 0x210bc4: ldur            d4, [fp, #-0x38]
    // 0x210bc8: stur            d5, [fp, #-0x48]
    // 0x210bcc: LoadField: r1 = r0->field_63
    //     0x210bcc: ldur            w1, [x0, #0x63]
    // 0x210bd0: DecompressPointer r1
    //     0x210bd0: add             x1, x1, HEAP, lsl #32
    // 0x210bd4: LoadField: r2 = r1->field_33
    //     0x210bd4: ldur            w2, [x1, #0x33]
    // 0x210bd8: DecompressPointer r2
    //     0x210bd8: add             x2, x2, HEAP, lsl #32
    // 0x210bdc: str             x2, [SP]
    // 0x210be0: r0 = baseSizeAdjustment()
    //     0x210be0: bl              #0x1d8650  ; [package:flutter/src/material/theme_data.dart] VisualDensity::baseSizeAdjustment
    // 0x210be4: stur            x0, [fp, #-0x20]
    // 0x210be8: ldr             x16, [fp, #0x18]
    // 0x210bec: r30 = Instance__DecorationSlot
    //     0x210bec: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x210bf0: ldr             lr, [lr, #0x390]
    // 0x210bf4: stp             lr, x16, [SP]
    // 0x210bf8: r0 = childForSlot()
    //     0x210bf8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210bfc: stur            x0, [fp, #-0x28]
    // 0x210c00: ldr             x16, [fp, #0x18]
    // 0x210c04: r30 = Instance__DecorationSlot
    //     0x210c04: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x210c08: ldr             lr, [lr, #0x390]
    // 0x210c0c: stp             lr, x16, [SP]
    // 0x210c10: r0 = childForSlot()
    //     0x210c10: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210c14: mov             x1, x0
    // 0x210c18: ldr             x0, [fp, #0x18]
    // 0x210c1c: stur            x1, [fp, #-0x30]
    // 0x210c20: LoadField: r2 = r0->field_63
    //     0x210c20: ldur            w2, [x0, #0x63]
    // 0x210c24: DecompressPointer r2
    //     0x210c24: add             x2, x2, HEAP, lsl #32
    // 0x210c28: LoadField: r3 = r2->field_7
    //     0x210c28: ldur            w3, [x2, #7]
    // 0x210c2c: DecompressPointer r3
    //     0x210c2c: add             x3, x3, HEAP, lsl #32
    // 0x210c30: LoadField: d0 = r3->field_f
    //     0x210c30: ldur            d0, [x3, #0xf]
    // 0x210c34: ldur            d1, [fp, #-0x40]
    // 0x210c38: fadd            d2, d0, d1
    // 0x210c3c: ldur            x2, [fp, #-0x20]
    // 0x210c40: LoadField: d0 = r2->field_f
    //     0x210c40: ldur            d0, [x2, #0xf]
    // 0x210c44: stur            d0, [fp, #-0x70]
    // 0x210c48: d3 = 2.000000
    //     0x210c48: fmov            d3, #2.00000000
    // 0x210c4c: d3 = 2.000000
    //     0x210c4c: fmov            d3, #2.00000000
    // 0x210c50: fdiv            d4, d0, d3
    // 0x210c54: stur            d4, [fp, #-0x68]
    // 0x210c58: fadd            d5, d2, d4
    // 0x210c5c: stur            d5, [fp, #-0x60]
    // 0x210c60: LoadField: d2 = r3->field_1f
    //     0x210c60: ldur            d2, [x3, #0x1f]
    // 0x210c64: ldur            d6, [fp, #-0x48]
    // 0x210c68: fadd            d7, d2, d6
    // 0x210c6c: fadd            d2, d7, d4
    // 0x210c70: stur            d2, [fp, #-0x58]
    // 0x210c74: r0 = EdgeInsets()
    //     0x210c74: bl              #0x1fde80  ; AllocateEdgeInsetsStub -> EdgeInsets (size=0x28)
    // 0x210c78: d0 = 0.000000
    //     0x210c78: eor             v0.16b, v0.16b, v0.16b
    // 0x210c7c: d0 = 0.000000
    //     0x210c7c: eor             v0.16b, v0.16b, v0.16b
    // 0x210c80: StoreField: r0->field_7 = d0
    //     0x210c80: stur            d0, [x0, #7]
    // 0x210c84: ldur            d1, [fp, #-0x60]
    // 0x210c88: StoreField: r0->field_f = d1
    //     0x210c88: stur            d1, [x0, #0xf]
    // 0x210c8c: StoreField: r0->field_17 = d0
    //     0x210c8c: stur            d0, [x0, #0x17]
    // 0x210c90: ldur            d1, [fp, #-0x58]
    // 0x210c94: StoreField: r0->field_1f = d1
    //     0x210c94: stur            d1, [x0, #0x1f]
    // 0x210c98: ldur            x16, [fp, #-0x10]
    // 0x210c9c: stp             x0, x16, [SP]
    // 0x210ca0: r0 = deflate()
    //     0x210ca0: bl              #0x1e1690  ; [package:flutter/src/rendering/box.dart] BoxConstraints::deflate
    // 0x210ca4: ldur            d0, [fp, #-0x38]
    // 0x210ca8: r1 = inline_Allocate_Double()
    //     0x210ca8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x210cac: add             x1, x1, #0x10
    //     0x210cb0: cmp             x2, x1
    //     0x210cb4: b.ls            #0x211db0
    //     0x210cb8: str             x1, [THR, #0x50]  ; THR::top
    //     0x210cbc: sub             x1, x1, #0xf
    //     0x210cc0: movz            x2, #0xd148
    //     0x210cc4: movk            x2, #0x3, lsl #16
    //     0x210cc8: stur            x2, [x1, #-1]
    // 0x210ccc: StoreField: r1->field_7 = d0
    //     0x210ccc: stur            d0, [x1, #7]
    // 0x210cd0: r2 = inline_Allocate_Double()
    //     0x210cd0: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x210cd4: add             x2, x2, #0x10
    //     0x210cd8: cmp             x3, x2
    //     0x210cdc: b.ls            #0x211dcc
    //     0x210ce0: str             x2, [THR, #0x50]  ; THR::top
    //     0x210ce4: sub             x2, x2, #0xf
    //     0x210ce8: movz            x3, #0xd148
    //     0x210cec: movk            x3, #0x3, lsl #16
    //     0x210cf0: stur            x3, [x2, #-1]
    // 0x210cf4: StoreField: r2->field_7 = d0
    //     0x210cf4: stur            d0, [x2, #7]
    // 0x210cf8: stp             x1, x0, [SP, #8]
    // 0x210cfc: str             x2, [SP]
    // 0x210d00: r4 = const [0, 0x3, 0x3, 0x1, maxWidth, 0x2, minWidth, 0x1, null]
    //     0x210d00: ldr             x4, [PP, #0x5360]  ; [pp+0x5360] List(9) [0, 0x3, 0x3, 0x1, "maxWidth", 0x2, "minWidth", 0x1, Null]
    // 0x210d04: r0 = copyWith()
    //     0x210d04: bl              #0x1e0bc0  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x210d08: ldr             x16, [fp, #0x18]
    // 0x210d0c: ldur            lr, [fp, #-0x30]
    // 0x210d10: stp             lr, x16, [SP, #8]
    // 0x210d14: str             x0, [SP]
    // 0x210d18: r0 = _layoutLineBox()
    //     0x210d18: bl              #0x211ec8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x210d1c: r0 = inline_Allocate_Double()
    //     0x210d1c: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x210d20: add             x0, x0, #0x10
    //     0x210d24: cmp             x1, x0
    //     0x210d28: b.ls            #0x211de8
    //     0x210d2c: str             x0, [THR, #0x50]  ; THR::top
    //     0x210d30: sub             x0, x0, #0xf
    //     0x210d34: movz            x1, #0xd148
    //     0x210d38: movk            x1, #0x3, lsl #16
    //     0x210d3c: stur            x1, [x0, #-1]
    // 0x210d40: StoreField: r0->field_7 = d0
    //     0x210d40: stur            d0, [x0, #7]
    // 0x210d44: ldur            x16, [fp, #-8]
    // 0x210d48: ldur            lr, [fp, #-0x28]
    // 0x210d4c: stp             lr, x16, [SP, #8]
    // 0x210d50: str             x0, [SP]
    // 0x210d54: r0 = []=()
    //     0x210d54: bl              #0x3d0d20  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x210d58: ldr             x16, [fp, #0x18]
    // 0x210d5c: r30 = Instance__DecorationSlot
    //     0x210d5c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x210d60: ldr             lr, [lr, #0x3c0]
    // 0x210d64: stp             lr, x16, [SP]
    // 0x210d68: r0 = childForSlot()
    //     0x210d68: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210d6c: cmp             w0, NULL
    // 0x210d70: b.ne            #0x210d7c
    // 0x210d74: r0 = Null
    //     0x210d74: mov             x0, NULL
    // 0x210d78: b               #0x210db0
    // 0x210d7c: str             x0, [SP]
    // 0x210d80: r0 = size()
    //     0x210d80: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x210d84: LoadField: d0 = r0->field_f
    //     0x210d84: ldur            d0, [x0, #0xf]
    // 0x210d88: r0 = inline_Allocate_Double()
    //     0x210d88: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x210d8c: add             x0, x0, #0x10
    //     0x210d90: cmp             x1, x0
    //     0x210d94: b.ls            #0x211df8
    //     0x210d98: str             x0, [THR, #0x50]  ; THR::top
    //     0x210d9c: sub             x0, x0, #0xf
    //     0x210da0: movz            x1, #0xd148
    //     0x210da4: movk            x1, #0x3, lsl #16
    //     0x210da8: stur            x1, [x0, #-1]
    // 0x210dac: StoreField: r0->field_7 = d0
    //     0x210dac: stur            d0, [x0, #7]
    // 0x210db0: cmp             w0, NULL
    // 0x210db4: b.ne            #0x210dc4
    // 0x210db8: d0 = 0.000000
    //     0x210db8: eor             v0.16b, v0.16b, v0.16b
    // 0x210dbc: d0 = 0.000000
    //     0x210dbc: eor             v0.16b, v0.16b, v0.16b
    // 0x210dc0: b               #0x210dc8
    // 0x210dc4: LoadField: d0 = r0->field_7
    //     0x210dc4: ldur            d0, [x0, #7]
    // 0x210dc8: stur            d0, [fp, #-0x38]
    // 0x210dcc: ldr             x16, [fp, #0x18]
    // 0x210dd0: r30 = Instance__DecorationSlot
    //     0x210dd0: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x210dd4: ldr             lr, [lr, #0x390]
    // 0x210dd8: stp             lr, x16, [SP]
    // 0x210ddc: r0 = childForSlot()
    //     0x210ddc: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210de0: cmp             w0, NULL
    // 0x210de4: b.ne            #0x210df0
    // 0x210de8: r0 = Null
    //     0x210de8: mov             x0, NULL
    // 0x210dec: b               #0x210e24
    // 0x210df0: str             x0, [SP]
    // 0x210df4: r0 = size()
    //     0x210df4: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x210df8: LoadField: d0 = r0->field_f
    //     0x210df8: ldur            d0, [x0, #0xf]
    // 0x210dfc: r0 = inline_Allocate_Double()
    //     0x210dfc: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x210e00: add             x0, x0, #0x10
    //     0x210e04: cmp             x1, x0
    //     0x210e08: b.ls            #0x211e08
    //     0x210e0c: str             x0, [THR, #0x50]  ; THR::top
    //     0x210e10: sub             x0, x0, #0xf
    //     0x210e14: movz            x1, #0xd148
    //     0x210e18: movk            x1, #0x3, lsl #16
    //     0x210e1c: stur            x1, [x0, #-1]
    // 0x210e20: StoreField: r0->field_7 = d0
    //     0x210e20: stur            d0, [x0, #7]
    // 0x210e24: cmp             w0, NULL
    // 0x210e28: b.ne            #0x210e38
    // 0x210e2c: d1 = 0.000000
    //     0x210e2c: eor             v1.16b, v1.16b, v1.16b
    // 0x210e30: d1 = 0.000000
    //     0x210e30: eor             v1.16b, v1.16b, v1.16b
    // 0x210e34: b               #0x210e40
    // 0x210e38: LoadField: d0 = r0->field_7
    //     0x210e38: ldur            d0, [x0, #7]
    // 0x210e3c: mov             v1.16b, v0.16b
    // 0x210e40: ldur            d0, [fp, #-0x38]
    // 0x210e44: fcmp            d0, d1
    // 0x210e48: b.le            #0x210e58
    // 0x210e4c: d2 = 0.000000
    //     0x210e4c: eor             v2.16b, v2.16b, v2.16b
    // 0x210e50: d2 = 0.000000
    //     0x210e50: eor             v2.16b, v2.16b, v2.16b
    // 0x210e54: b               #0x210e98
    // 0x210e58: fcmp            d1, d0
    // 0x210e5c: b.le            #0x210e70
    // 0x210e60: mov             v0.16b, v1.16b
    // 0x210e64: d2 = 0.000000
    //     0x210e64: eor             v2.16b, v2.16b, v2.16b
    // 0x210e68: d2 = 0.000000
    //     0x210e68: eor             v2.16b, v2.16b, v2.16b
    // 0x210e6c: b               #0x210e98
    // 0x210e70: d2 = 0.000000
    //     0x210e70: eor             v2.16b, v2.16b, v2.16b
    // 0x210e74: d2 = 0.000000
    //     0x210e74: eor             v2.16b, v2.16b, v2.16b
    // 0x210e78: fcmp            d0, d2
    // 0x210e7c: b.ne            #0x210e8c
    // 0x210e80: fadd            d3, d0, d1
    // 0x210e84: mov             v0.16b, v3.16b
    // 0x210e88: b               #0x210e98
    // 0x210e8c: fcmp            d1, d1
    // 0x210e90: b.vc            #0x210e98
    // 0x210e94: mov             v0.16b, v1.16b
    // 0x210e98: ldur            x0, [fp, #-8]
    // 0x210e9c: stur            d0, [fp, #-0x38]
    // 0x210ea0: ldr             x16, [fp, #0x18]
    // 0x210ea4: r30 = Instance__DecorationSlot
    //     0x210ea4: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x210ea8: ldr             lr, [lr, #0x390]
    // 0x210eac: stp             lr, x16, [SP]
    // 0x210eb0: r0 = childForSlot()
    //     0x210eb0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210eb4: ldur            x16, [fp, #-8]
    // 0x210eb8: stp             x0, x16, [SP]
    // 0x210ebc: r0 = _getValueOrData()
    //     0x210ebc: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x210ec0: mov             x1, x0
    // 0x210ec4: ldur            x0, [fp, #-8]
    // 0x210ec8: LoadField: r2 = r0->field_f
    //     0x210ec8: ldur            w2, [x0, #0xf]
    // 0x210ecc: DecompressPointer r2
    //     0x210ecc: add             x2, x2, HEAP, lsl #32
    // 0x210ed0: cmp             w2, w1
    // 0x210ed4: b.ne            #0x210edc
    // 0x210ed8: r1 = Null
    //     0x210ed8: mov             x1, NULL
    // 0x210edc: stur            x1, [fp, #-0x20]
    // 0x210ee0: cmp             w1, NULL
    // 0x210ee4: b.eq            #0x211e18
    // 0x210ee8: ldr             x16, [fp, #0x18]
    // 0x210eec: r30 = Instance__DecorationSlot
    //     0x210eec: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x210ef0: ldr             lr, [lr, #0x3c0]
    // 0x210ef4: stp             lr, x16, [SP]
    // 0x210ef8: r0 = childForSlot()
    //     0x210ef8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210efc: ldur            x16, [fp, #-8]
    // 0x210f00: stp             x0, x16, [SP]
    // 0x210f04: r0 = _getValueOrData()
    //     0x210f04: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x210f08: mov             x1, x0
    // 0x210f0c: ldur            x0, [fp, #-8]
    // 0x210f10: LoadField: r2 = r0->field_f
    //     0x210f10: ldur            w2, [x0, #0xf]
    // 0x210f14: DecompressPointer r2
    //     0x210f14: add             x2, x2, HEAP, lsl #32
    // 0x210f18: cmp             w2, w1
    // 0x210f1c: b.ne            #0x210f28
    // 0x210f20: r2 = Null
    //     0x210f20: mov             x2, NULL
    // 0x210f24: b               #0x210f2c
    // 0x210f28: mov             x2, x1
    // 0x210f2c: ldur            x1, [fp, #-0x20]
    // 0x210f30: cmp             w2, NULL
    // 0x210f34: b.eq            #0x211e1c
    // 0x210f38: LoadField: d0 = r1->field_7
    //     0x210f38: ldur            d0, [x1, #7]
    // 0x210f3c: LoadField: d1 = r2->field_7
    //     0x210f3c: ldur            d1, [x2, #7]
    // 0x210f40: fcmp            d0, d1
    // 0x210f44: b.le            #0x210f58
    // 0x210f48: LoadField: d0 = r1->field_7
    //     0x210f48: ldur            d0, [x1, #7]
    // 0x210f4c: d2 = 0.000000
    //     0x210f4c: eor             v2.16b, v2.16b, v2.16b
    // 0x210f50: d2 = 0.000000
    //     0x210f50: eor             v2.16b, v2.16b, v2.16b
    // 0x210f54: b               #0x210fa4
    // 0x210f58: fcmp            d1, d0
    // 0x210f5c: b.le            #0x210f70
    // 0x210f60: LoadField: d0 = r2->field_7
    //     0x210f60: ldur            d0, [x2, #7]
    // 0x210f64: d2 = 0.000000
    //     0x210f64: eor             v2.16b, v2.16b, v2.16b
    // 0x210f68: d2 = 0.000000
    //     0x210f68: eor             v2.16b, v2.16b, v2.16b
    // 0x210f6c: b               #0x210fa4
    // 0x210f70: d2 = 0.000000
    //     0x210f70: eor             v2.16b, v2.16b, v2.16b
    // 0x210f74: d2 = 0.000000
    //     0x210f74: eor             v2.16b, v2.16b, v2.16b
    // 0x210f78: fcmp            d0, d2
    // 0x210f7c: b.ne            #0x210f8c
    // 0x210f80: fadd            d3, d0, d1
    // 0x210f84: mov             v0.16b, v3.16b
    // 0x210f88: b               #0x210fa4
    // 0x210f8c: LoadField: d0 = r2->field_7
    //     0x210f8c: ldur            d0, [x2, #7]
    // 0x210f90: fcmp            d0, d0
    // 0x210f94: b.vc            #0x210fa0
    // 0x210f98: LoadField: d0 = r2->field_7
    //     0x210f98: ldur            d0, [x2, #7]
    // 0x210f9c: b               #0x210fa4
    // 0x210fa0: LoadField: d0 = r1->field_7
    //     0x210fa0: ldur            d0, [x1, #7]
    // 0x210fa4: stur            d0, [fp, #-0x58]
    // 0x210fa8: ldr             x16, [fp, #0x18]
    // 0x210fac: r30 = Instance__DecorationSlot
    //     0x210fac: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x210fb0: ldr             lr, [lr, #0x3a8]
    // 0x210fb4: stp             lr, x16, [SP]
    // 0x210fb8: r0 = childForSlot()
    //     0x210fb8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x210fbc: cmp             w0, NULL
    // 0x210fc0: b.ne            #0x210fcc
    // 0x210fc4: r0 = Null
    //     0x210fc4: mov             x0, NULL
    // 0x210fc8: b               #0x211000
    // 0x210fcc: str             x0, [SP]
    // 0x210fd0: r0 = size()
    //     0x210fd0: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x210fd4: LoadField: d0 = r0->field_f
    //     0x210fd4: ldur            d0, [x0, #0xf]
    // 0x210fd8: r0 = inline_Allocate_Double()
    //     0x210fd8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x210fdc: add             x0, x0, #0x10
    //     0x210fe0: cmp             x1, x0
    //     0x210fe4: b.ls            #0x211e20
    //     0x210fe8: str             x0, [THR, #0x50]  ; THR::top
    //     0x210fec: sub             x0, x0, #0xf
    //     0x210ff0: movz            x1, #0xd148
    //     0x210ff4: movk            x1, #0x3, lsl #16
    //     0x210ff8: stur            x1, [x0, #-1]
    // 0x210ffc: StoreField: r0->field_7 = d0
    //     0x210ffc: stur            d0, [x0, #7]
    // 0x211000: cmp             w0, NULL
    // 0x211004: b.ne            #0x211014
    // 0x211008: d0 = 0.000000
    //     0x211008: eor             v0.16b, v0.16b, v0.16b
    // 0x21100c: d0 = 0.000000
    //     0x21100c: eor             v0.16b, v0.16b, v0.16b
    // 0x211010: b               #0x211018
    // 0x211014: LoadField: d0 = r0->field_7
    //     0x211014: ldur            d0, [x0, #7]
    // 0x211018: stur            d0, [fp, #-0x60]
    // 0x21101c: ldr             x16, [fp, #0x18]
    // 0x211020: r30 = Instance__DecorationSlot
    //     0x211020: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x211024: ldr             lr, [lr, #0x3b0]
    // 0x211028: stp             lr, x16, [SP]
    // 0x21102c: r0 = childForSlot()
    //     0x21102c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x211030: cmp             w0, NULL
    // 0x211034: b.ne            #0x211040
    // 0x211038: r0 = Null
    //     0x211038: mov             x0, NULL
    // 0x21103c: b               #0x211074
    // 0x211040: str             x0, [SP]
    // 0x211044: r0 = size()
    //     0x211044: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x211048: LoadField: d0 = r0->field_f
    //     0x211048: ldur            d0, [x0, #0xf]
    // 0x21104c: r0 = inline_Allocate_Double()
    //     0x21104c: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x211050: add             x0, x0, #0x10
    //     0x211054: cmp             x1, x0
    //     0x211058: b.ls            #0x211e30
    //     0x21105c: str             x0, [THR, #0x50]  ; THR::top
    //     0x211060: sub             x0, x0, #0xf
    //     0x211064: movz            x1, #0xd148
    //     0x211068: movk            x1, #0x3, lsl #16
    //     0x21106c: stur            x1, [x0, #-1]
    // 0x211070: StoreField: r0->field_7 = d0
    //     0x211070: stur            d0, [x0, #7]
    // 0x211074: cmp             w0, NULL
    // 0x211078: b.ne            #0x211088
    // 0x21107c: d0 = 0.000000
    //     0x21107c: eor             v0.16b, v0.16b, v0.16b
    // 0x211080: d0 = 0.000000
    //     0x211080: eor             v0.16b, v0.16b, v0.16b
    // 0x211084: b               #0x21108c
    // 0x211088: LoadField: d0 = r0->field_7
    //     0x211088: ldur            d0, [x0, #7]
    // 0x21108c: ldur            x0, [fp, #-8]
    // 0x211090: stur            d0, [fp, #-0x78]
    // 0x211094: ldr             x16, [fp, #0x18]
    // 0x211098: r30 = Instance__DecorationSlot
    //     0x211098: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x21109c: ldr             lr, [lr, #0x3a8]
    // 0x2110a0: stp             lr, x16, [SP]
    // 0x2110a4: r0 = childForSlot()
    //     0x2110a4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2110a8: ldur            x16, [fp, #-8]
    // 0x2110ac: stp             x0, x16, [SP]
    // 0x2110b0: r0 = _getValueOrData()
    //     0x2110b0: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x2110b4: mov             x1, x0
    // 0x2110b8: ldur            x0, [fp, #-8]
    // 0x2110bc: LoadField: r2 = r0->field_f
    //     0x2110bc: ldur            w2, [x0, #0xf]
    // 0x2110c0: DecompressPointer r2
    //     0x2110c0: add             x2, x2, HEAP, lsl #32
    // 0x2110c4: cmp             w2, w1
    // 0x2110c8: b.ne            #0x2110d0
    // 0x2110cc: r1 = Null
    //     0x2110cc: mov             x1, NULL
    // 0x2110d0: stur            x1, [fp, #-0x20]
    // 0x2110d4: cmp             w1, NULL
    // 0x2110d8: b.eq            #0x211e40
    // 0x2110dc: ldr             x16, [fp, #0x18]
    // 0x2110e0: r30 = Instance__DecorationSlot
    //     0x2110e0: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x2110e4: ldr             lr, [lr, #0x3b0]
    // 0x2110e8: stp             lr, x16, [SP]
    // 0x2110ec: r0 = childForSlot()
    //     0x2110ec: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2110f0: ldur            x16, [fp, #-8]
    // 0x2110f4: stp             x0, x16, [SP]
    // 0x2110f8: r0 = _getValueOrData()
    //     0x2110f8: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x2110fc: mov             x1, x0
    // 0x211100: ldur            x0, [fp, #-8]
    // 0x211104: LoadField: r2 = r0->field_f
    //     0x211104: ldur            w2, [x0, #0xf]
    // 0x211108: DecompressPointer r2
    //     0x211108: add             x2, x2, HEAP, lsl #32
    // 0x21110c: cmp             w2, w1
    // 0x211110: b.ne            #0x21111c
    // 0x211114: r2 = Null
    //     0x211114: mov             x2, NULL
    // 0x211118: b               #0x211120
    // 0x21111c: mov             x2, x1
    // 0x211120: ldur            x1, [fp, #-0x20]
    // 0x211124: cmp             w2, NULL
    // 0x211128: b.eq            #0x211e44
    // 0x21112c: LoadField: d0 = r1->field_7
    //     0x21112c: ldur            d0, [x1, #7]
    // 0x211130: LoadField: d1 = r2->field_7
    //     0x211130: ldur            d1, [x2, #7]
    // 0x211134: fcmp            d0, d1
    // 0x211138: b.le            #0x211150
    // 0x21113c: LoadField: d0 = r1->field_7
    //     0x21113c: ldur            d0, [x1, #7]
    // 0x211140: mov             v1.16b, v0.16b
    // 0x211144: d2 = 0.000000
    //     0x211144: eor             v2.16b, v2.16b, v2.16b
    // 0x211148: d2 = 0.000000
    //     0x211148: eor             v2.16b, v2.16b, v2.16b
    // 0x21114c: b               #0x2111a8
    // 0x211150: fcmp            d1, d0
    // 0x211154: b.le            #0x21116c
    // 0x211158: LoadField: d0 = r2->field_7
    //     0x211158: ldur            d0, [x2, #7]
    // 0x21115c: mov             v1.16b, v0.16b
    // 0x211160: d2 = 0.000000
    //     0x211160: eor             v2.16b, v2.16b, v2.16b
    // 0x211164: d2 = 0.000000
    //     0x211164: eor             v2.16b, v2.16b, v2.16b
    // 0x211168: b               #0x2111a8
    // 0x21116c: d2 = 0.000000
    //     0x21116c: eor             v2.16b, v2.16b, v2.16b
    // 0x211170: d2 = 0.000000
    //     0x211170: eor             v2.16b, v2.16b, v2.16b
    // 0x211174: fcmp            d0, d2
    // 0x211178: b.ne            #0x211188
    // 0x21117c: fadd            d3, d0, d1
    // 0x211180: mov             v1.16b, v3.16b
    // 0x211184: b               #0x2111a8
    // 0x211188: LoadField: d0 = r2->field_7
    //     0x211188: ldur            d0, [x2, #7]
    // 0x21118c: fcmp            d0, d0
    // 0x211190: b.vc            #0x2111a0
    // 0x211194: LoadField: d0 = r2->field_7
    //     0x211194: ldur            d0, [x2, #7]
    // 0x211198: mov             v1.16b, v0.16b
    // 0x21119c: b               #0x2111a8
    // 0x2111a0: LoadField: d0 = r1->field_7
    //     0x2111a0: ldur            d0, [x1, #7]
    // 0x2111a4: mov             v1.16b, v0.16b
    // 0x2111a8: ldur            d0, [fp, #-0x58]
    // 0x2111ac: fsub            d3, d1, d0
    // 0x2111b0: fcmp            d2, d3
    // 0x2111b4: b.le            #0x2111c4
    // 0x2111b8: d1 = 0.000000
    //     0x2111b8: eor             v1.16b, v1.16b, v1.16b
    // 0x2111bc: d1 = 0.000000
    //     0x2111bc: eor             v1.16b, v1.16b, v1.16b
    // 0x2111c0: b               #0x2111fc
    // 0x2111c4: fcmp            d3, d2
    // 0x2111c8: b.le            #0x2111d4
    // 0x2111cc: mov             v1.16b, v3.16b
    // 0x2111d0: b               #0x2111fc
    // 0x2111d4: fcmp            d2, d2
    // 0x2111d8: b.ne            #0x2111e4
    // 0x2111dc: fadd            d1, d2, d3
    // 0x2111e0: b               #0x2111fc
    // 0x2111e4: fcmp            d3, d3
    // 0x2111e8: b.vc            #0x2111f4
    // 0x2111ec: mov             v1.16b, v3.16b
    // 0x2111f0: b               #0x2111fc
    // 0x2111f4: d1 = 0.000000
    //     0x2111f4: eor             v1.16b, v1.16b, v1.16b
    // 0x2111f8: d1 = 0.000000
    //     0x2111f8: eor             v1.16b, v1.16b, v1.16b
    // 0x2111fc: stur            d1, [fp, #-0x80]
    // 0x211200: ldr             x16, [fp, #0x18]
    // 0x211204: r30 = Instance__DecorationSlot
    //     0x211204: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x211208: ldr             lr, [lr, #0x3a8]
    // 0x21120c: stp             lr, x16, [SP]
    // 0x211210: r0 = childForSlot()
    //     0x211210: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x211214: ldur            x16, [fp, #-8]
    // 0x211218: stp             x0, x16, [SP]
    // 0x21121c: r0 = _getValueOrData()
    //     0x21121c: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x211220: mov             x1, x0
    // 0x211224: ldur            x0, [fp, #-8]
    // 0x211228: LoadField: r2 = r0->field_f
    //     0x211228: ldur            w2, [x0, #0xf]
    // 0x21122c: DecompressPointer r2
    //     0x21122c: add             x2, x2, HEAP, lsl #32
    // 0x211230: cmp             w2, w1
    // 0x211234: b.ne            #0x21123c
    // 0x211238: r1 = Null
    //     0x211238: mov             x1, NULL
    // 0x21123c: ldur            d0, [fp, #-0x60]
    // 0x211240: cmp             w1, NULL
    // 0x211244: b.eq            #0x211e48
    // 0x211248: LoadField: d1 = r1->field_7
    //     0x211248: ldur            d1, [x1, #7]
    // 0x21124c: fsub            d2, d0, d1
    // 0x211250: stur            d2, [fp, #-0x88]
    // 0x211254: ldr             x16, [fp, #0x18]
    // 0x211258: r30 = Instance__DecorationSlot
    //     0x211258: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x21125c: ldr             lr, [lr, #0x3b0]
    // 0x211260: stp             lr, x16, [SP]
    // 0x211264: r0 = childForSlot()
    //     0x211264: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x211268: ldur            x16, [fp, #-8]
    // 0x21126c: stp             x0, x16, [SP]
    // 0x211270: r0 = _getValueOrData()
    //     0x211270: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x211274: mov             x1, x0
    // 0x211278: ldur            x0, [fp, #-8]
    // 0x21127c: LoadField: r2 = r0->field_f
    //     0x21127c: ldur            w2, [x0, #0xf]
    // 0x211280: DecompressPointer r2
    //     0x211280: add             x2, x2, HEAP, lsl #32
    // 0x211284: cmp             w2, w1
    // 0x211288: b.ne            #0x211290
    // 0x21128c: r1 = Null
    //     0x21128c: mov             x1, NULL
    // 0x211290: ldur            d1, [fp, #-0x78]
    // 0x211294: ldur            d0, [fp, #-0x88]
    // 0x211298: cmp             w1, NULL
    // 0x21129c: b.eq            #0x211e4c
    // 0x2112a0: LoadField: d2 = r1->field_7
    //     0x2112a0: ldur            d2, [x1, #7]
    // 0x2112a4: fsub            d3, d1, d2
    // 0x2112a8: fcmp            d0, d3
    // 0x2112ac: b.le            #0x2112c0
    // 0x2112b0: mov             v3.16b, v0.16b
    // 0x2112b4: d1 = 0.000000
    //     0x2112b4: eor             v1.16b, v1.16b, v1.16b
    // 0x2112b8: d1 = 0.000000
    //     0x2112b8: eor             v1.16b, v1.16b, v1.16b
    // 0x2112bc: b               #0x2112fc
    // 0x2112c0: fcmp            d3, d0
    // 0x2112c4: b.le            #0x2112d4
    // 0x2112c8: d1 = 0.000000
    //     0x2112c8: eor             v1.16b, v1.16b, v1.16b
    // 0x2112cc: d1 = 0.000000
    //     0x2112cc: eor             v1.16b, v1.16b, v1.16b
    // 0x2112d0: b               #0x2112fc
    // 0x2112d4: d1 = 0.000000
    //     0x2112d4: eor             v1.16b, v1.16b, v1.16b
    // 0x2112d8: d1 = 0.000000
    //     0x2112d8: eor             v1.16b, v1.16b, v1.16b
    // 0x2112dc: fcmp            d0, d1
    // 0x2112e0: b.ne            #0x2112f0
    // 0x2112e4: fadd            d2, d0, d3
    // 0x2112e8: mov             v3.16b, v2.16b
    // 0x2112ec: b               #0x2112fc
    // 0x2112f0: fcmp            d3, d3
    // 0x2112f4: b.vs            #0x2112fc
    // 0x2112f8: mov             v3.16b, v0.16b
    // 0x2112fc: ldur            d2, [fp, #-0x38]
    // 0x211300: ldur            d0, [fp, #-0x58]
    // 0x211304: fsub            d4, d2, d0
    // 0x211308: fsub            d5, d3, d4
    // 0x21130c: fcmp            d1, d5
    // 0x211310: b.le            #0x211320
    // 0x211314: d3 = 0.000000
    //     0x211314: eor             v3.16b, v3.16b, v3.16b
    // 0x211318: d3 = 0.000000
    //     0x211318: eor             v3.16b, v3.16b, v3.16b
    // 0x21131c: b               #0x211358
    // 0x211320: fcmp            d5, d1
    // 0x211324: b.le            #0x211330
    // 0x211328: mov             v3.16b, v5.16b
    // 0x21132c: b               #0x211358
    // 0x211330: fcmp            d1, d1
    // 0x211334: b.ne            #0x211340
    // 0x211338: fadd            d3, d1, d5
    // 0x21133c: b               #0x211358
    // 0x211340: fcmp            d5, d5
    // 0x211344: b.vc            #0x211350
    // 0x211348: mov             v3.16b, v5.16b
    // 0x21134c: b               #0x211358
    // 0x211350: d3 = 0.000000
    //     0x211350: eor             v3.16b, v3.16b, v3.16b
    // 0x211354: d3 = 0.000000
    //     0x211354: eor             v3.16b, v3.16b, v3.16b
    // 0x211358: stur            d3, [fp, #-0x60]
    // 0x21135c: ldr             x16, [fp, #0x18]
    // 0x211360: r30 = Instance__DecorationSlot
    //     0x211360: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x211364: ldr             lr, [lr, #0x398]
    // 0x211368: stp             lr, x16, [SP]
    // 0x21136c: r0 = childForSlot()
    //     0x21136c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x211370: cmp             w0, NULL
    // 0x211374: b.ne            #0x211380
    // 0x211378: r0 = Null
    //     0x211378: mov             x0, NULL
    // 0x21137c: b               #0x2113b4
    // 0x211380: str             x0, [SP]
    // 0x211384: r0 = size()
    //     0x211384: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x211388: LoadField: d0 = r0->field_f
    //     0x211388: ldur            d0, [x0, #0xf]
    // 0x21138c: r0 = inline_Allocate_Double()
    //     0x21138c: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x211390: add             x0, x0, #0x10
    //     0x211394: cmp             x1, x0
    //     0x211398: b.ls            #0x211e50
    //     0x21139c: str             x0, [THR, #0x50]  ; THR::top
    //     0x2113a0: sub             x0, x0, #0xf
    //     0x2113a4: movz            x1, #0xd148
    //     0x2113a8: movk            x1, #0x3, lsl #16
    //     0x2113ac: stur            x1, [x0, #-1]
    // 0x2113b0: StoreField: r0->field_7 = d0
    //     0x2113b0: stur            d0, [x0, #7]
    // 0x2113b4: cmp             w0, NULL
    // 0x2113b8: b.ne            #0x2113c8
    // 0x2113bc: d0 = 0.000000
    //     0x2113bc: eor             v0.16b, v0.16b, v0.16b
    // 0x2113c0: d0 = 0.000000
    //     0x2113c0: eor             v0.16b, v0.16b, v0.16b
    // 0x2113c4: b               #0x2113cc
    // 0x2113c8: LoadField: d0 = r0->field_7
    //     0x2113c8: ldur            d0, [x0, #7]
    // 0x2113cc: stur            d0, [fp, #-0x78]
    // 0x2113d0: ldr             x16, [fp, #0x18]
    // 0x2113d4: r30 = Instance__DecorationSlot
    //     0x2113d4: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x2113d8: ldr             lr, [lr, #0x3a0]
    // 0x2113dc: stp             lr, x16, [SP]
    // 0x2113e0: r0 = childForSlot()
    //     0x2113e0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2113e4: cmp             w0, NULL
    // 0x2113e8: b.ne            #0x2113f4
    // 0x2113ec: r0 = Null
    //     0x2113ec: mov             x0, NULL
    // 0x2113f0: b               #0x211428
    // 0x2113f4: str             x0, [SP]
    // 0x2113f8: r0 = size()
    //     0x2113f8: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x2113fc: LoadField: d0 = r0->field_f
    //     0x2113fc: ldur            d0, [x0, #0xf]
    // 0x211400: r0 = inline_Allocate_Double()
    //     0x211400: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x211404: add             x0, x0, #0x10
    //     0x211408: cmp             x1, x0
    //     0x21140c: b.ls            #0x211e60
    //     0x211410: str             x0, [THR, #0x50]  ; THR::top
    //     0x211414: sub             x0, x0, #0xf
    //     0x211418: movz            x1, #0xd148
    //     0x21141c: movk            x1, #0x3, lsl #16
    //     0x211420: stur            x1, [x0, #-1]
    // 0x211424: StoreField: r0->field_7 = d0
    //     0x211424: stur            d0, [x0, #7]
    // 0x211428: cmp             w0, NULL
    // 0x21142c: b.ne            #0x21143c
    // 0x211430: d1 = 0.000000
    //     0x211430: eor             v1.16b, v1.16b, v1.16b
    // 0x211434: d1 = 0.000000
    //     0x211434: eor             v1.16b, v1.16b, v1.16b
    // 0x211438: b               #0x211444
    // 0x21143c: LoadField: d0 = r0->field_7
    //     0x21143c: ldur            d0, [x0, #7]
    // 0x211440: mov             v1.16b, v0.16b
    // 0x211444: ldur            d0, [fp, #-0x78]
    // 0x211448: fcmp            d0, d1
    // 0x21144c: b.le            #0x211460
    // 0x211450: mov             v6.16b, v0.16b
    // 0x211454: d2 = 0.000000
    //     0x211454: eor             v2.16b, v2.16b, v2.16b
    // 0x211458: d2 = 0.000000
    //     0x211458: eor             v2.16b, v2.16b, v2.16b
    // 0x21145c: b               #0x2114a8
    // 0x211460: fcmp            d1, d0
    // 0x211464: b.le            #0x211478
    // 0x211468: mov             v6.16b, v1.16b
    // 0x21146c: d2 = 0.000000
    //     0x21146c: eor             v2.16b, v2.16b, v2.16b
    // 0x211470: d2 = 0.000000
    //     0x211470: eor             v2.16b, v2.16b, v2.16b
    // 0x211474: b               #0x2114a8
    // 0x211478: d2 = 0.000000
    //     0x211478: eor             v2.16b, v2.16b, v2.16b
    // 0x21147c: d2 = 0.000000
    //     0x21147c: eor             v2.16b, v2.16b, v2.16b
    // 0x211480: fcmp            d0, d2
    // 0x211484: b.ne            #0x211494
    // 0x211488: fadd            d3, d0, d1
    // 0x21148c: mov             v6.16b, v3.16b
    // 0x211490: b               #0x2114a8
    // 0x211494: fcmp            d1, d1
    // 0x211498: b.vc            #0x2114a4
    // 0x21149c: mov             v6.16b, v1.16b
    // 0x2114a0: b               #0x2114a8
    // 0x2114a4: mov             v6.16b, v0.16b
    // 0x2114a8: ldr             x0, [fp, #0x18]
    // 0x2114ac: ldur            d4, [fp, #-0x40]
    // 0x2114b0: ldur            d3, [fp, #-0x80]
    // 0x2114b4: ldur            d1, [fp, #-0x60]
    // 0x2114b8: ldur            d0, [fp, #-0x38]
    // 0x2114bc: ldur            d5, [fp, #-0x70]
    // 0x2114c0: LoadField: r1 = r0->field_63
    //     0x2114c0: ldur            w1, [x0, #0x63]
    // 0x2114c4: DecompressPointer r1
    //     0x2114c4: add             x1, x1, HEAP, lsl #32
    // 0x2114c8: LoadField: r2 = r1->field_7
    //     0x2114c8: ldur            w2, [x1, #7]
    // 0x2114cc: DecompressPointer r2
    //     0x2114cc: add             x2, x2, HEAP, lsl #32
    // 0x2114d0: LoadField: d7 = r2->field_f
    //     0x2114d0: ldur            d7, [x2, #0xf]
    // 0x2114d4: fadd            d8, d4, d7
    // 0x2114d8: fadd            d7, d8, d3
    // 0x2114dc: fadd            d8, d7, d0
    // 0x2114e0: fadd            d7, d8, d1
    // 0x2114e4: LoadField: d8 = r2->field_1f
    //     0x2114e4: ldur            d8, [x2, #0x1f]
    // 0x2114e8: fadd            d9, d7, d8
    // 0x2114ec: fadd            d7, d9, d5
    // 0x2114f0: fcmp            d6, d7
    // 0x2114f4: b.gt            #0x211528
    // 0x2114f8: fcmp            d7, d6
    // 0x2114fc: b.le            #0x211508
    // 0x211500: mov             v6.16b, v7.16b
    // 0x211504: b               #0x211528
    // 0x211508: fcmp            d6, d2
    // 0x21150c: b.ne            #0x21151c
    // 0x211510: fadd            d8, d6, d7
    // 0x211514: mov             v6.16b, v8.16b
    // 0x211518: b               #0x211528
    // 0x21151c: fcmp            d7, d7
    // 0x211520: b.vc            #0x211528
    // 0x211524: mov             v6.16b, v7.16b
    // 0x211528: stur            d6, [fp, #-0x90]
    // 0x21152c: LoadField: r2 = r1->field_2f
    //     0x21152c: ldur            w2, [x1, #0x2f]
    // 0x211530: DecompressPointer r2
    //     0x211530: add             x2, x2, HEAP, lsl #32
    // 0x211534: cmp             w2, NULL
    // 0x211538: b.eq            #0x211e70
    // 0x21153c: tbnz            w2, #4, #0x21154c
    // 0x211540: d8 = 0.000000
    //     0x211540: eor             v8.16b, v8.16b, v8.16b
    // 0x211544: d8 = 0.000000
    //     0x211544: eor             v8.16b, v8.16b, v8.16b
    // 0x211548: b               #0x211554
    // 0x21154c: d8 = 48.000000
    //     0x21154c: ldr             d8, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x211550: d8 = 48.000000
    //     0x211550: ldr             d8, [PP, #0x5c40]  ; [pp+0x5c40] IMM: double(48) from 0x4048000000000000
    // 0x211554: ldur            x1, [fp, #-0x10]
    // 0x211558: ldur            d7, [fp, #-0x48]
    // 0x21155c: stur            d8, [fp, #-0x88]
    // 0x211560: LoadField: d9 = r1->field_1f
    //     0x211560: ldur            d9, [x1, #0x1f]
    // 0x211564: fsub            d10, d9, d7
    // 0x211568: fcmp            d2, d10
    // 0x21156c: b.le            #0x21157c
    // 0x211570: d7 = 0.000000
    //     0x211570: eor             v7.16b, v7.16b, v7.16b
    // 0x211574: d7 = 0.000000
    //     0x211574: eor             v7.16b, v7.16b, v7.16b
    // 0x211578: b               #0x2115b4
    // 0x21157c: fcmp            d10, d2
    // 0x211580: b.le            #0x21158c
    // 0x211584: mov             v7.16b, v10.16b
    // 0x211588: b               #0x2115b4
    // 0x21158c: fcmp            d2, d2
    // 0x211590: b.ne            #0x21159c
    // 0x211594: fadd            d7, d2, d10
    // 0x211598: b               #0x2115b4
    // 0x21159c: fcmp            d10, d10
    // 0x2115a0: b.vc            #0x2115ac
    // 0x2115a4: mov             v7.16b, v10.16b
    // 0x2115a8: b               #0x2115b4
    // 0x2115ac: d7 = 0.000000
    //     0x2115ac: eor             v7.16b, v7.16b, v7.16b
    // 0x2115b0: d7 = 0.000000
    //     0x2115b0: eor             v7.16b, v7.16b, v7.16b
    // 0x2115b4: stur            d7, [fp, #-0x78]
    // 0x2115b8: fcmp            d6, d8
    // 0x2115bc: b.le            #0x2115c8
    // 0x2115c0: mov             v9.16b, v6.16b
    // 0x2115c4: b               #0x2115fc
    // 0x2115c8: fcmp            d8, d6
    // 0x2115cc: b.le            #0x2115d8
    // 0x2115d0: mov             v9.16b, v8.16b
    // 0x2115d4: b               #0x2115fc
    // 0x2115d8: fcmp            d6, d2
    // 0x2115dc: b.ne            #0x2115e8
    // 0x2115e0: fadd            d9, d6, d8
    // 0x2115e4: b               #0x2115fc
    // 0x2115e8: fcmp            d8, d8
    // 0x2115ec: b.vc            #0x2115f8
    // 0x2115f0: mov             v9.16b, v8.16b
    // 0x2115f4: b               #0x2115fc
    // 0x2115f8: mov             v9.16b, v6.16b
    // 0x2115fc: stur            d9, [fp, #-0x48]
    // 0x211600: fcmp            d9, d7
    // 0x211604: b.le            #0x21161c
    // 0x211608: mov             v3.16b, v7.16b
    // 0x21160c: mov             v2.16b, v8.16b
    // 0x211610: mov             v0.16b, v7.16b
    // 0x211614: mov             v1.16b, v6.16b
    // 0x211618: b               #0x2116cc
    // 0x21161c: fcmp            d7, d9
    // 0x211620: b.le            #0x211638
    // 0x211624: mov             v3.16b, v9.16b
    // 0x211628: mov             v2.16b, v8.16b
    // 0x21162c: mov             v0.16b, v7.16b
    // 0x211630: mov             v1.16b, v6.16b
    // 0x211634: b               #0x2116cc
    // 0x211638: fcmp            d9, d2
    // 0x21163c: b.ne            #0x211660
    // 0x211640: fadd            d10, d9, d7
    // 0x211644: fmul            d11, d10, d9
    // 0x211648: fmul            d9, d11, d7
    // 0x21164c: mov             v3.16b, v9.16b
    // 0x211650: mov             v2.16b, v8.16b
    // 0x211654: mov             v0.16b, v7.16b
    // 0x211658: mov             v1.16b, v6.16b
    // 0x21165c: b               #0x2116cc
    // 0x211660: fcmp            d9, d2
    // 0x211664: b.ne            #0x2116a4
    // 0x211668: r1 = inline_Allocate_Double()
    //     0x211668: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x21166c: add             x1, x1, #0x10
    //     0x211670: cmp             x2, x1
    //     0x211674: b.ls            #0x211e74
    //     0x211678: str             x1, [THR, #0x50]  ; THR::top
    //     0x21167c: sub             x1, x1, #0xf
    //     0x211680: movz            x2, #0xd148
    //     0x211684: movk            x2, #0x3, lsl #16
    //     0x211688: stur            x2, [x1, #-1]
    // 0x21168c: StoreField: r1->field_7 = d7
    //     0x21168c: stur            d7, [x1, #7]
    // 0x211690: str             x1, [SP]
    // 0x211694: r0 = isNegative()
    //     0x211694: bl              #0x3e3414  ; [dart:core] _Double::isNegative
    // 0x211698: tbnz            w0, #4, #0x2116a4
    // 0x21169c: ldur            d0, [fp, #-0x78]
    // 0x2116a0: b               #0x2116b0
    // 0x2116a4: ldur            d0, [fp, #-0x78]
    // 0x2116a8: fcmp            d0, d0
    // 0x2116ac: b.vc            #0x2116c0
    // 0x2116b0: mov             v3.16b, v0.16b
    // 0x2116b4: ldur            d2, [fp, #-0x88]
    // 0x2116b8: ldur            d1, [fp, #-0x90]
    // 0x2116bc: b               #0x2116cc
    // 0x2116c0: ldur            d3, [fp, #-0x48]
    // 0x2116c4: ldur            d2, [fp, #-0x88]
    // 0x2116c8: ldur            d1, [fp, #-0x90]
    // 0x2116cc: stur            d3, [fp, #-0x98]
    // 0x2116d0: fcmp            d2, d1
    // 0x2116d4: b.le            #0x2116f0
    // 0x2116d8: d4 = 2.000000
    //     0x2116d8: fmov            d4, #2.00000000
    // 0x2116dc: d4 = 2.000000
    //     0x2116dc: fmov            d4, #2.00000000
    // 0x2116e0: fsub            d5, d2, d1
    // 0x2116e4: fdiv            d2, d5, d4
    // 0x2116e8: mov             v5.16b, v2.16b
    // 0x2116ec: b               #0x211700
    // 0x2116f0: d4 = 2.000000
    //     0x2116f0: fmov            d4, #2.00000000
    // 0x2116f4: d4 = 2.000000
    //     0x2116f4: fmov            d4, #2.00000000
    // 0x2116f8: d5 = 0.000000
    //     0x2116f8: eor             v5.16b, v5.16b, v5.16b
    // 0x2116fc: d5 = 0.000000
    //     0x2116fc: eor             v5.16b, v5.16b, v5.16b
    // 0x211700: d2 = 0.000000
    //     0x211700: eor             v2.16b, v2.16b, v2.16b
    // 0x211704: d2 = 0.000000
    //     0x211704: eor             v2.16b, v2.16b, v2.16b
    // 0x211708: stur            d5, [fp, #-0x88]
    // 0x21170c: fsub            d6, d1, d0
    // 0x211710: fcmp            d2, d6
    // 0x211714: b.le            #0x211724
    // 0x211718: d0 = 0.000000
    //     0x211718: eor             v0.16b, v0.16b, v0.16b
    // 0x21171c: d0 = 0.000000
    //     0x21171c: eor             v0.16b, v0.16b, v0.16b
    // 0x211720: b               #0x21175c
    // 0x211724: fcmp            d6, d2
    // 0x211728: b.le            #0x211734
    // 0x21172c: mov             v0.16b, v6.16b
    // 0x211730: b               #0x21175c
    // 0x211734: fcmp            d2, d2
    // 0x211738: b.ne            #0x211744
    // 0x21173c: fadd            d0, d2, d6
    // 0x211740: b               #0x21175c
    // 0x211744: fcmp            d6, d6
    // 0x211748: b.vc            #0x211754
    // 0x21174c: mov             v0.16b, v6.16b
    // 0x211750: b               #0x21175c
    // 0x211754: d0 = 0.000000
    //     0x211754: eor             v0.16b, v0.16b, v0.16b
    // 0x211758: d0 = 0.000000
    //     0x211758: eor             v0.16b, v0.16b, v0.16b
    // 0x21175c: ldr             x1, [fp, #0x18]
    // 0x211760: stur            d0, [fp, #-0x48]
    // 0x211764: LoadField: r0 = r1->field_63
    //     0x211764: ldur            w0, [x1, #0x63]
    // 0x211768: DecompressPointer r0
    //     0x211768: add             x0, x0, HEAP, lsl #32
    // 0x21176c: LoadField: r2 = r0->field_23
    //     0x21176c: ldur            w2, [x0, #0x23]
    // 0x211770: DecompressPointer r2
    //     0x211770: add             x2, x2, HEAP, lsl #32
    // 0x211774: r0 = LoadClassIdInstr(r2)
    //     0x211774: ldur            x0, [x2, #-1]
    //     0x211778: ubfx            x0, x0, #0xc, #0x14
    // 0x21177c: str             x2, [SP]
    // 0x211780: r0 = GDT[cid_x0 + -0x1000]()
    //     0x211780: sub             lr, x0, #1, lsl #12
    //     0x211784: ldr             lr, [x21, lr, lsl #3]
    //     0x211788: blr             lr
    // 0x21178c: tbnz            w0, #4, #0x21179c
    // 0x211790: r0 = Instance_TextAlignVertical
    //     0x211790: add             x0, PP, #0x14, lsl #12  ; [pp+0x14570] Obj!TextAlignVertical@473571
    //     0x211794: ldr             x0, [x0, #0x570]
    // 0x211798: b               #0x2117a4
    // 0x21179c: r0 = Instance_TextAlignVertical
    //     0x21179c: add             x0, PP, #0x14, lsl #12  ; [pp+0x14578] Obj!TextAlignVertical@473561
    //     0x2117a0: ldr             x0, [x0, #0x578]
    // 0x2117a4: ldr             x1, [fp, #0x18]
    // 0x2117a8: ldur            d7, [fp, #-0x40]
    // 0x2117ac: ldur            d10, [fp, #-0x68]
    // 0x2117b0: ldur            d2, [fp, #-0x88]
    // 0x2117b4: ldur            d3, [fp, #-0x48]
    // 0x2117b8: ldur            d0, [fp, #-0x98]
    // 0x2117bc: ldur            d6, [fp, #-0x80]
    // 0x2117c0: ldur            d5, [fp, #-0x60]
    // 0x2117c4: ldur            d4, [fp, #-0x38]
    // 0x2117c8: ldur            d9, [fp, #-0x58]
    // 0x2117cc: ldur            d8, [fp, #-0x70]
    // 0x2117d0: d11 = 1.000000
    //     0x2117d0: fmov            d11, #1.00000000
    // 0x2117d4: d11 = 1.000000
    //     0x2117d4: fmov            d11, #1.00000000
    // 0x2117d8: d1 = 2.000000
    //     0x2117d8: fmov            d1, #2.00000000
    // 0x2117dc: d1 = 2.000000
    //     0x2117dc: fmov            d1, #2.00000000
    // 0x2117e0: LoadField: d12 = r0->field_7
    //     0x2117e0: ldur            d12, [x0, #7]
    // 0x2117e4: fadd            d13, d12, d11
    // 0x2117e8: fdiv            d12, d13, d1
    // 0x2117ec: fsub            d13, d11, d12
    // 0x2117f0: fmul            d14, d3, d13
    // 0x2117f4: fsub            d3, d6, d14
    // 0x2117f8: LoadField: r0 = r1->field_63
    //     0x2117f8: ldur            w0, [x1, #0x63]
    // 0x2117fc: DecompressPointer r0
    //     0x2117fc: add             x0, x0, HEAP, lsl #32
    // 0x211800: LoadField: r2 = r0->field_7
    //     0x211800: ldur            w2, [x0, #7]
    // 0x211804: DecompressPointer r2
    //     0x211804: add             x2, x2, HEAP, lsl #32
    // 0x211808: LoadField: d13 = r2->field_f
    //     0x211808: ldur            d13, [x2, #0xf]
    // 0x21180c: fadd            d14, d13, d7
    // 0x211810: fadd            d15, d14, d9
    // 0x211814: fadd            d14, d15, d3
    // 0x211818: fadd            d15, d14, d2
    // 0x21181c: fadd            d2, d15, d10
    // 0x211820: stur            d2, [fp, #-0x78]
    // 0x211824: LoadField: d10 = r2->field_1f
    //     0x211824: ldur            d10, [x2, #0x1f]
    // 0x211828: fadd            d14, d13, d10
    // 0x21182c: fsub            d10, d0, d14
    // 0x211830: fsub            d13, d10, d7
    // 0x211834: fsub            d7, d13, d8
    // 0x211838: fadd            d8, d6, d4
    // 0x21183c: fadd            d6, d8, d5
    // 0x211840: fsub            d5, d7, d6
    // 0x211844: fmul            d6, d5, d12
    // 0x211848: fadd            d7, d2, d6
    // 0x21184c: stur            d7, [fp, #-0x48]
    // 0x211850: fdiv            d6, d3, d1
    // 0x211854: fadd            d3, d9, d6
    // 0x211858: fadd            d6, d1, d4
    // 0x21185c: fsub            d4, d0, d6
    // 0x211860: fdiv            d6, d4, d1
    // 0x211864: fadd            d1, d3, d6
    // 0x211868: stur            d1, [fp, #-0x40]
    // 0x21186c: fadd            d3, d2, d5
    // 0x211870: stur            d3, [fp, #-0x38]
    // 0x211874: LoadField: r2 = r0->field_23
    //     0x211874: ldur            w2, [x0, #0x23]
    // 0x211878: DecompressPointer r2
    //     0x211878: add             x2, x2, HEAP, lsl #32
    // 0x21187c: r0 = LoadClassIdInstr(r2)
    //     0x21187c: ldur            x0, [x2, #-1]
    //     0x211880: ubfx            x0, x0, #0xc, #0x14
    // 0x211884: str             x2, [SP]
    // 0x211888: r0 = GDT[cid_x0 + -0x1000]()
    //     0x211888: sub             lr, x0, #1, lsl #12
    //     0x21188c: ldr             lr, [x21, lr, lsl #3]
    //     0x211890: blr             lr
    // 0x211894: tbnz            w0, #4, #0x2118a4
    // 0x211898: r0 = Instance_TextAlignVertical
    //     0x211898: add             x0, PP, #0x14, lsl #12  ; [pp+0x14570] Obj!TextAlignVertical@473571
    //     0x21189c: ldr             x0, [x0, #0x570]
    // 0x2118a0: b               #0x2118ac
    // 0x2118a4: r0 = Instance_TextAlignVertical
    //     0x2118a4: add             x0, PP, #0x14, lsl #12  ; [pp+0x14578] Obj!TextAlignVertical@473561
    //     0x2118a8: ldr             x0, [x0, #0x578]
    // 0x2118ac: d0 = 0.000000
    //     0x2118ac: eor             v0.16b, v0.16b, v0.16b
    // 0x2118b0: d0 = 0.000000
    //     0x2118b0: eor             v0.16b, v0.16b, v0.16b
    // 0x2118b4: LoadField: d1 = r0->field_7
    //     0x2118b4: ldur            d1, [x0, #7]
    // 0x2118b8: fcmp            d0, d1
    // 0x2118bc: b.lt            #0x2118f4
    // 0x2118c0: ldur            d2, [fp, #-0x78]
    // 0x2118c4: ldur            d3, [fp, #-0x40]
    // 0x2118c8: fcmp            d2, d3
    // 0x2118cc: b.lt            #0x2118d8
    // 0x2118d0: mov             v1.16b, v3.16b
    // 0x2118d4: b               #0x211918
    // 0x2118d8: d4 = 1.000000
    //     0x2118d8: fmov            d4, #1.00000000
    // 0x2118dc: d4 = 1.000000
    //     0x2118dc: fmov            d4, #1.00000000
    // 0x2118e0: fadd            d5, d1, d4
    // 0x2118e4: fsub            d1, d3, d2
    // 0x2118e8: fmul            d3, d1, d5
    // 0x2118ec: fadd            d1, d2, d3
    // 0x2118f0: b               #0x211918
    // 0x2118f4: ldur            d3, [fp, #-0x40]
    // 0x2118f8: ldur            d2, [fp, #-0x38]
    // 0x2118fc: fcmp            d3, d2
    // 0x211900: b.lt            #0x21190c
    // 0x211904: mov             v1.16b, v3.16b
    // 0x211908: b               #0x211918
    // 0x21190c: fsub            d4, d2, d3
    // 0x211910: fmul            d2, d4, d1
    // 0x211914: fadd            d1, d3, d2
    // 0x211918: stur            d1, [fp, #-0x38]
    // 0x21191c: ldr             x16, [fp, #0x18]
    // 0x211920: r30 = Instance__DecorationSlot
    //     0x211920: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x211924: ldr             lr, [lr, #0x3d0]
    // 0x211928: stp             lr, x16, [SP]
    // 0x21192c: r0 = childForSlot()
    //     0x21192c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x211930: cmp             w0, NULL
    // 0x211934: b.eq            #0x2119e4
    // 0x211938: ldur            x0, [fp, #-8]
    // 0x21193c: ldur            d0, [fp, #-0x98]
    // 0x211940: d1 = 8.000000
    //     0x211940: fmov            d1, #8.00000000
    // 0x211944: d1 = 8.000000
    //     0x211944: fmov            d1, #8.00000000
    // 0x211948: fadd            d2, d0, d1
    // 0x21194c: stur            d2, [fp, #-0x40]
    // 0x211950: ldr             x16, [fp, #0x18]
    // 0x211954: r30 = Instance__DecorationSlot
    //     0x211954: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x211958: ldr             lr, [lr, #0x3d0]
    // 0x21195c: stp             lr, x16, [SP]
    // 0x211960: r0 = childForSlot()
    //     0x211960: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x211964: ldur            x16, [fp, #-8]
    // 0x211968: stp             x0, x16, [SP]
    // 0x21196c: r0 = _getValueOrData()
    //     0x21196c: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x211970: mov             x1, x0
    // 0x211974: ldur            x0, [fp, #-8]
    // 0x211978: LoadField: r2 = r0->field_f
    //     0x211978: ldur            w2, [x0, #0xf]
    // 0x21197c: DecompressPointer r2
    //     0x21197c: add             x2, x2, HEAP, lsl #32
    // 0x211980: cmp             w2, w1
    // 0x211984: b.ne            #0x21198c
    // 0x211988: r1 = Null
    //     0x211988: mov             x1, NULL
    // 0x21198c: ldur            d0, [fp, #-0x40]
    // 0x211990: cmp             w1, NULL
    // 0x211994: b.eq            #0x211eb0
    // 0x211998: LoadField: d1 = r1->field_7
    //     0x211998: ldur            d1, [x1, #7]
    // 0x21199c: fadd            d2, d0, d1
    // 0x2119a0: stur            d2, [fp, #-0x58]
    // 0x2119a4: ldr             x16, [fp, #0x18]
    // 0x2119a8: r30 = Instance__DecorationSlot
    //     0x2119a8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x2119ac: ldr             lr, [lr, #0x3d0]
    // 0x2119b0: stp             lr, x16, [SP]
    // 0x2119b4: r0 = childForSlot()
    //     0x2119b4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2119b8: cmp             w0, NULL
    // 0x2119bc: b.eq            #0x211eb4
    // 0x2119c0: str             x0, [SP]
    // 0x2119c4: r0 = size()
    //     0x2119c4: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x2119c8: LoadField: d0 = r0->field_f
    //     0x2119c8: ldur            d0, [x0, #0xf]
    // 0x2119cc: d1 = 8.000000
    //     0x2119cc: fmov            d1, #8.00000000
    // 0x2119d0: d1 = 8.000000
    //     0x2119d0: fmov            d1, #8.00000000
    // 0x2119d4: fadd            d2, d0, d1
    // 0x2119d8: mov             v0.16b, v2.16b
    // 0x2119dc: ldur            d2, [fp, #-0x58]
    // 0x2119e0: b               #0x2119fc
    // 0x2119e4: d1 = 8.000000
    //     0x2119e4: fmov            d1, #8.00000000
    // 0x2119e8: d1 = 8.000000
    //     0x2119e8: fmov            d1, #8.00000000
    // 0x2119ec: d2 = 0.000000
    //     0x2119ec: eor             v2.16b, v2.16b, v2.16b
    // 0x2119f0: d2 = 0.000000
    //     0x2119f0: eor             v2.16b, v2.16b, v2.16b
    // 0x2119f4: d0 = 0.000000
    //     0x2119f4: eor             v0.16b, v0.16b, v0.16b
    // 0x2119f8: d0 = 0.000000
    //     0x2119f8: eor             v0.16b, v0.16b, v0.16b
    // 0x2119fc: ldur            x0, [fp, #-0x18]
    // 0x211a00: stur            d2, [fp, #-0x58]
    // 0x211a04: stur            d0, [fp, #-0x60]
    // 0x211a08: tbnz            w0, #4, #0x211a74
    // 0x211a0c: ldur            x0, [fp, #-8]
    // 0x211a10: ldur            d3, [fp, #-0x98]
    // 0x211a14: fadd            d4, d3, d1
    // 0x211a18: stur            d4, [fp, #-0x40]
    // 0x211a1c: ldr             x16, [fp, #0x18]
    // 0x211a20: r30 = Instance__DecorationSlot
    //     0x211a20: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x211a24: ldr             lr, [lr, #0x3c8]
    // 0x211a28: stp             lr, x16, [SP]
    // 0x211a2c: r0 = childForSlot()
    //     0x211a2c: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x211a30: ldur            x16, [fp, #-8]
    // 0x211a34: stp             x0, x16, [SP]
    // 0x211a38: r0 = _getValueOrData()
    //     0x211a38: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x211a3c: mov             x1, x0
    // 0x211a40: ldur            x0, [fp, #-8]
    // 0x211a44: LoadField: r2 = r0->field_f
    //     0x211a44: ldur            w2, [x0, #0xf]
    // 0x211a48: DecompressPointer r2
    //     0x211a48: add             x2, x2, HEAP, lsl #32
    // 0x211a4c: cmp             w2, w1
    // 0x211a50: b.ne            #0x211a58
    // 0x211a54: r1 = Null
    //     0x211a54: mov             x1, NULL
    // 0x211a58: ldur            d0, [fp, #-0x40]
    // 0x211a5c: cmp             w1, NULL
    // 0x211a60: b.eq            #0x211eb8
    // 0x211a64: LoadField: d1 = r1->field_7
    //     0x211a64: ldur            d1, [x1, #7]
    // 0x211a68: fadd            d2, d0, d1
    // 0x211a6c: ldur            d1, [fp, #-0x50]
    // 0x211a70: b               #0x211a88
    // 0x211a74: ldur            x0, [fp, #-8]
    // 0x211a78: d2 = 0.000000
    //     0x211a78: eor             v2.16b, v2.16b, v2.16b
    // 0x211a7c: d2 = 0.000000
    //     0x211a7c: eor             v2.16b, v2.16b, v2.16b
    // 0x211a80: d1 = 0.000000
    //     0x211a80: eor             v1.16b, v1.16b, v1.16b
    // 0x211a84: d1 = 0.000000
    //     0x211a84: eor             v1.16b, v1.16b, v1.16b
    // 0x211a88: ldur            d0, [fp, #-0x58]
    // 0x211a8c: fcmp            d0, d2
    // 0x211a90: b.le            #0x211aa4
    // 0x211a94: mov             v2.16b, v0.16b
    // 0x211a98: d3 = 0.000000
    //     0x211a98: eor             v3.16b, v3.16b, v3.16b
    // 0x211a9c: d3 = 0.000000
    //     0x211a9c: eor             v3.16b, v3.16b, v3.16b
    // 0x211aa0: b               #0x211ae0
    // 0x211aa4: fcmp            d2, d0
    // 0x211aa8: b.le            #0x211ab8
    // 0x211aac: d3 = 0.000000
    //     0x211aac: eor             v3.16b, v3.16b, v3.16b
    // 0x211ab0: d3 = 0.000000
    //     0x211ab0: eor             v3.16b, v3.16b, v3.16b
    // 0x211ab4: b               #0x211ae0
    // 0x211ab8: d3 = 0.000000
    //     0x211ab8: eor             v3.16b, v3.16b, v3.16b
    // 0x211abc: d3 = 0.000000
    //     0x211abc: eor             v3.16b, v3.16b, v3.16b
    // 0x211ac0: fcmp            d0, d3
    // 0x211ac4: b.ne            #0x211ad4
    // 0x211ac8: fadd            d4, d0, d2
    // 0x211acc: mov             v2.16b, v4.16b
    // 0x211ad0: b               #0x211ae0
    // 0x211ad4: fcmp            d2, d2
    // 0x211ad8: b.vs            #0x211ae0
    // 0x211adc: mov             v2.16b, v0.16b
    // 0x211ae0: ldur            d0, [fp, #-0x60]
    // 0x211ae4: stur            d2, [fp, #-0x50]
    // 0x211ae8: fcmp            d0, d1
    // 0x211aec: b.le            #0x211af8
    // 0x211af0: mov             v4.16b, v0.16b
    // 0x211af4: b               #0x211b30
    // 0x211af8: fcmp            d1, d0
    // 0x211afc: b.le            #0x211b08
    // 0x211b00: mov             v4.16b, v1.16b
    // 0x211b04: b               #0x211b30
    // 0x211b08: fcmp            d0, d3
    // 0x211b0c: b.ne            #0x211b1c
    // 0x211b10: fadd            d3, d0, d1
    // 0x211b14: mov             v4.16b, v3.16b
    // 0x211b18: b               #0x211b30
    // 0x211b1c: fcmp            d1, d1
    // 0x211b20: b.vc            #0x211b2c
    // 0x211b24: mov             v4.16b, v1.16b
    // 0x211b28: b               #0x211b30
    // 0x211b2c: mov             v4.16b, v0.16b
    // 0x211b30: ldur            d3, [fp, #-0x48]
    // 0x211b34: ldur            d1, [fp, #-0x38]
    // 0x211b38: ldur            d0, [fp, #-0x98]
    // 0x211b3c: stur            d4, [fp, #-0x40]
    // 0x211b40: r0 = _RenderDecorationLayout()
    //     0x211b40: bl              #0x211ebc  ; Allocate_RenderDecorationLayoutStub -> _RenderDecorationLayout (size=0x34)
    // 0x211b44: ldur            x1, [fp, #-8]
    // 0x211b48: StoreField: r0->field_7 = r1
    //     0x211b48: stur            w1, [x0, #7]
    // 0x211b4c: ldur            d0, [fp, #-0x48]
    // 0x211b50: StoreField: r0->field_b = d0
    //     0x211b50: stur            d0, [x0, #0xb]
    // 0x211b54: ldur            d0, [fp, #-0x38]
    // 0x211b58: StoreField: r0->field_13 = d0
    //     0x211b58: stur            d0, [x0, #0x13]
    // 0x211b5c: ldur            d0, [fp, #-0x50]
    // 0x211b60: StoreField: r0->field_1b = d0
    //     0x211b60: stur            d0, [x0, #0x1b]
    // 0x211b64: ldur            d0, [fp, #-0x98]
    // 0x211b68: StoreField: r0->field_23 = d0
    //     0x211b68: stur            d0, [x0, #0x23]
    // 0x211b6c: ldur            d0, [fp, #-0x40]
    // 0x211b70: StoreField: r0->field_2b = d0
    //     0x211b70: stur            d0, [x0, #0x2b]
    // 0x211b74: LeaveFrame
    //     0x211b74: mov             SP, fp
    //     0x211b78: ldp             fp, lr, [SP], #0x10
    // 0x211b7c: ret
    //     0x211b7c: ret             
    // 0x211b80: r0 = StateError()
    //     0x211b80: bl              #0x187d8c  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0x211b84: r2 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x211b84: ldr             x2, [PP, #0x53e8]  ; [pp+0x53e8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x211b88: StoreField: r0->field_b = r2
    //     0x211b88: stur            w2, [x0, #0xb]
    // 0x211b8c: r0 = Throw()
    //     0x211b8c: bl              #0x3e41c8  ; ThrowStub
    // 0x211b90: brk             #0
    // 0x211b94: r0 = StateError()
    //     0x211b94: bl              #0x187d8c  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0x211b98: mov             x1, x0
    // 0x211b9c: r0 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x211b9c: ldr             x0, [PP, #0x53e8]  ; [pp+0x53e8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x211ba0: StoreField: r1->field_b = r0
    //     0x211ba0: stur            w0, [x1, #0xb]
    // 0x211ba4: mov             x0, x1
    // 0x211ba8: r0 = Throw()
    //     0x211ba8: bl              #0x3e41c8  ; ThrowStub
    // 0x211bac: brk             #0
    // 0x211bb0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x211bb0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x211bb4: b               #0x20fcd0
    // 0x211bb8: SaveReg d0
    //     0x211bb8: str             q0, [SP, #-0x10]!
    // 0x211bbc: r0 = AllocateDouble()
    //     0x211bbc: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211bc0: RestoreReg d0
    //     0x211bc0: ldr             q0, [SP], #0x10
    // 0x211bc4: b               #0x20fd5c
    // 0x211bc8: SaveReg d2
    //     0x211bc8: str             q2, [SP, #-0x10]!
    // 0x211bcc: r0 = AllocateDouble()
    //     0x211bcc: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211bd0: RestoreReg d2
    //     0x211bd0: ldr             q2, [SP], #0x10
    // 0x211bd4: b               #0x20fdcc
    // 0x211bd8: SaveReg d0
    //     0x211bd8: str             q0, [SP, #-0x10]!
    // 0x211bdc: r0 = AllocateDouble()
    //     0x211bdc: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211be0: RestoreReg d0
    //     0x211be0: ldr             q0, [SP], #0x10
    // 0x211be4: b               #0x20fe4c
    // 0x211be8: SaveReg d0
    //     0x211be8: str             q0, [SP, #-0x10]!
    // 0x211bec: r0 = AllocateDouble()
    //     0x211bec: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211bf0: RestoreReg d0
    //     0x211bf0: ldr             q0, [SP], #0x10
    // 0x211bf4: b               #0x20fec8
    // 0x211bf8: stp             q0, q1, [SP, #-0x20]!
    // 0x211bfc: stp             x0, x1, [SP, #-0x10]!
    // 0x211c00: r0 = AllocateDouble()
    //     0x211c00: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211c04: mov             x2, x0
    // 0x211c08: ldp             x0, x1, [SP], #0x10
    // 0x211c0c: ldp             q0, q1, [SP], #0x20
    // 0x211c10: b               #0x20ff8c
    // 0x211c14: SaveReg d0
    //     0x211c14: str             q0, [SP, #-0x10]!
    // 0x211c18: r0 = AllocateDouble()
    //     0x211c18: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211c1c: RestoreReg d0
    //     0x211c1c: ldr             q0, [SP], #0x10
    // 0x211c20: b               #0x210008
    // 0x211c24: SaveReg d0
    //     0x211c24: str             q0, [SP, #-0x10]!
    // 0x211c28: r0 = AllocateDouble()
    //     0x211c28: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211c2c: RestoreReg d0
    //     0x211c2c: ldr             q0, [SP], #0x10
    // 0x211c30: b               #0x210084
    // 0x211c34: SaveReg d0
    //     0x211c34: str             q0, [SP, #-0x10]!
    // 0x211c38: SaveReg r0
    //     0x211c38: str             x0, [SP, #-8]!
    // 0x211c3c: r0 = AllocateDouble()
    //     0x211c3c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211c40: mov             x1, x0
    // 0x211c44: RestoreReg r0
    //     0x211c44: ldr             x0, [SP], #8
    // 0x211c48: RestoreReg d0
    //     0x211c48: ldr             q0, [SP], #0x10
    // 0x211c4c: b               #0x210140
    // 0x211c50: SaveReg d0
    //     0x211c50: str             q0, [SP, #-0x10]!
    // 0x211c54: stp             x0, x1, [SP, #-0x10]!
    // 0x211c58: r0 = AllocateDouble()
    //     0x211c58: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211c5c: mov             x2, x0
    // 0x211c60: ldp             x0, x1, [SP], #0x10
    // 0x211c64: RestoreReg d0
    //     0x211c64: ldr             q0, [SP], #0x10
    // 0x211c68: b               #0x21016c
    // 0x211c6c: SaveReg d0
    //     0x211c6c: str             q0, [SP, #-0x10]!
    // 0x211c70: SaveReg r0
    //     0x211c70: str             x0, [SP, #-8]!
    // 0x211c74: r0 = AllocateDouble()
    //     0x211c74: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211c78: mov             x1, x0
    // 0x211c7c: RestoreReg r0
    //     0x211c7c: ldr             x0, [SP], #8
    // 0x211c80: RestoreReg d0
    //     0x211c80: ldr             q0, [SP], #0x10
    // 0x211c84: b               #0x210294
    // 0x211c88: stp             q0, q1, [SP, #-0x20]!
    // 0x211c8c: stp             x0, x1, [SP, #-0x10]!
    // 0x211c90: r0 = AllocateDouble()
    //     0x211c90: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211c94: mov             x2, x0
    // 0x211c98: ldp             x0, x1, [SP], #0x10
    // 0x211c9c: ldp             q0, q1, [SP], #0x20
    // 0x211ca0: b               #0x2102c4
    // 0x211ca4: stp             q1, q2, [SP, #-0x20]!
    // 0x211ca8: SaveReg d0
    //     0x211ca8: str             q0, [SP, #-0x10]!
    // 0x211cac: SaveReg r0
    //     0x211cac: str             x0, [SP, #-8]!
    // 0x211cb0: r0 = AllocateDouble()
    //     0x211cb0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211cb4: mov             x1, x0
    // 0x211cb8: RestoreReg r0
    //     0x211cb8: ldr             x0, [SP], #8
    // 0x211cbc: RestoreReg d0
    //     0x211cbc: ldr             q0, [SP], #0x10
    // 0x211cc0: ldp             q1, q2, [SP], #0x20
    // 0x211cc4: b               #0x210368
    // 0x211cc8: stp             q0, q1, [SP, #-0x20]!
    // 0x211ccc: SaveReg r0
    //     0x211ccc: str             x0, [SP, #-8]!
    // 0x211cd0: r0 = AllocateDouble()
    //     0x211cd0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211cd4: mov             x1, x0
    // 0x211cd8: RestoreReg r0
    //     0x211cd8: ldr             x0, [SP], #8
    // 0x211cdc: ldp             q0, q1, [SP], #0x20
    // 0x211ce0: b               #0x210414
    // 0x211ce4: SaveReg d1
    //     0x211ce4: str             q1, [SP, #-0x10]!
    // 0x211ce8: stp             x0, x1, [SP, #-0x10]!
    // 0x211cec: r0 = AllocateDouble()
    //     0x211cec: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211cf0: mov             x2, x0
    // 0x211cf4: ldp             x0, x1, [SP], #0x10
    // 0x211cf8: RestoreReg d1
    //     0x211cf8: ldr             q1, [SP], #0x10
    // 0x211cfc: b               #0x21043c
    // 0x211d00: SaveReg d2
    //     0x211d00: str             q2, [SP, #-0x10]!
    // 0x211d04: SaveReg r1
    //     0x211d04: str             x1, [SP, #-8]!
    // 0x211d08: r0 = AllocateDouble()
    //     0x211d08: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d0c: RestoreReg r1
    //     0x211d0c: ldr             x1, [SP], #8
    // 0x211d10: RestoreReg d2
    //     0x211d10: ldr             q2, [SP], #0x10
    // 0x211d14: b               #0x2105d0
    // 0x211d18: SaveReg d0
    //     0x211d18: str             q0, [SP, #-0x10]!
    // 0x211d1c: r0 = AllocateDouble()
    //     0x211d1c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d20: RestoreReg d0
    //     0x211d20: ldr             q0, [SP], #0x10
    // 0x211d24: b               #0x210620
    // 0x211d28: SaveReg d0
    //     0x211d28: str             q0, [SP, #-0x10]!
    // 0x211d2c: SaveReg r0
    //     0x211d2c: str             x0, [SP, #-8]!
    // 0x211d30: r0 = AllocateDouble()
    //     0x211d30: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d34: mov             x1, x0
    // 0x211d38: RestoreReg r0
    //     0x211d38: ldr             x0, [SP], #8
    // 0x211d3c: RestoreReg d0
    //     0x211d3c: ldr             q0, [SP], #0x10
    // 0x211d40: b               #0x210690
    // 0x211d44: SaveReg d0
    //     0x211d44: str             q0, [SP, #-0x10]!
    // 0x211d48: stp             x0, x1, [SP, #-0x10]!
    // 0x211d4c: r0 = AllocateDouble()
    //     0x211d4c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d50: mov             x2, x0
    // 0x211d54: ldp             x0, x1, [SP], #0x10
    // 0x211d58: RestoreReg d0
    //     0x211d58: ldr             q0, [SP], #0x10
    // 0x211d5c: b               #0x2106b8
    // 0x211d60: SaveReg d0
    //     0x211d60: str             q0, [SP, #-0x10]!
    // 0x211d64: r0 = AllocateDouble()
    //     0x211d64: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d68: RestoreReg d0
    //     0x211d68: ldr             q0, [SP], #0x10
    // 0x211d6c: b               #0x210708
    // 0x211d70: SaveReg d0
    //     0x211d70: str             q0, [SP, #-0x10]!
    // 0x211d74: r0 = AllocateDouble()
    //     0x211d74: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d78: RestoreReg d0
    //     0x211d78: ldr             q0, [SP], #0x10
    // 0x211d7c: b               #0x210784
    // 0x211d80: stp             q0, q1, [SP, #-0x20]!
    // 0x211d84: r0 = AllocateDouble()
    //     0x211d84: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d88: ldp             q0, q1, [SP], #0x20
    // 0x211d8c: b               #0x21087c
    // 0x211d90: SaveReg d0
    //     0x211d90: str             q0, [SP, #-0x10]!
    // 0x211d94: r0 = AllocateDouble()
    //     0x211d94: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211d98: RestoreReg d0
    //     0x211d98: ldr             q0, [SP], #0x10
    // 0x211d9c: b               #0x2108cc
    // 0x211da0: r0 = NullCastErrorSharedWithFPURegs()
    //     0x211da0: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x211da4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x211da4: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x211da8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211da8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x211dac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211dac: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x211db0: SaveReg d0
    //     0x211db0: str             q0, [SP, #-0x10]!
    // 0x211db4: SaveReg r0
    //     0x211db4: str             x0, [SP, #-8]!
    // 0x211db8: r0 = AllocateDouble()
    //     0x211db8: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211dbc: mov             x1, x0
    // 0x211dc0: RestoreReg r0
    //     0x211dc0: ldr             x0, [SP], #8
    // 0x211dc4: RestoreReg d0
    //     0x211dc4: ldr             q0, [SP], #0x10
    // 0x211dc8: b               #0x210ccc
    // 0x211dcc: SaveReg d0
    //     0x211dcc: str             q0, [SP, #-0x10]!
    // 0x211dd0: stp             x0, x1, [SP, #-0x10]!
    // 0x211dd4: r0 = AllocateDouble()
    //     0x211dd4: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211dd8: mov             x2, x0
    // 0x211ddc: ldp             x0, x1, [SP], #0x10
    // 0x211de0: RestoreReg d0
    //     0x211de0: ldr             q0, [SP], #0x10
    // 0x211de4: b               #0x210cf4
    // 0x211de8: SaveReg d0
    //     0x211de8: str             q0, [SP, #-0x10]!
    // 0x211dec: r0 = AllocateDouble()
    //     0x211dec: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211df0: RestoreReg d0
    //     0x211df0: ldr             q0, [SP], #0x10
    // 0x211df4: b               #0x210d40
    // 0x211df8: SaveReg d0
    //     0x211df8: str             q0, [SP, #-0x10]!
    // 0x211dfc: r0 = AllocateDouble()
    //     0x211dfc: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211e00: RestoreReg d0
    //     0x211e00: ldr             q0, [SP], #0x10
    // 0x211e04: b               #0x210dac
    // 0x211e08: SaveReg d0
    //     0x211e08: str             q0, [SP, #-0x10]!
    // 0x211e0c: r0 = AllocateDouble()
    //     0x211e0c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211e10: RestoreReg d0
    //     0x211e10: ldr             q0, [SP], #0x10
    // 0x211e14: b               #0x210e20
    // 0x211e18: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211e18: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x211e1c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211e1c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x211e20: SaveReg d0
    //     0x211e20: str             q0, [SP, #-0x10]!
    // 0x211e24: r0 = AllocateDouble()
    //     0x211e24: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211e28: RestoreReg d0
    //     0x211e28: ldr             q0, [SP], #0x10
    // 0x211e2c: b               #0x210ffc
    // 0x211e30: SaveReg d0
    //     0x211e30: str             q0, [SP, #-0x10]!
    // 0x211e34: r0 = AllocateDouble()
    //     0x211e34: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211e38: RestoreReg d0
    //     0x211e38: ldr             q0, [SP], #0x10
    // 0x211e3c: b               #0x211070
    // 0x211e40: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211e40: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x211e44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211e44: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x211e48: r0 = NullCastErrorSharedWithFPURegs()
    //     0x211e48: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x211e4c: r0 = NullCastErrorSharedWithFPURegs()
    //     0x211e4c: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x211e50: SaveReg d0
    //     0x211e50: str             q0, [SP, #-0x10]!
    // 0x211e54: r0 = AllocateDouble()
    //     0x211e54: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211e58: RestoreReg d0
    //     0x211e58: ldr             q0, [SP], #0x10
    // 0x211e5c: b               #0x2113b0
    // 0x211e60: SaveReg d0
    //     0x211e60: str             q0, [SP, #-0x10]!
    // 0x211e64: r0 = AllocateDouble()
    //     0x211e64: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211e68: RestoreReg d0
    //     0x211e68: ldr             q0, [SP], #0x10
    // 0x211e6c: b               #0x211424
    // 0x211e70: r0 = NullCastErrorSharedWithFPURegs()
    //     0x211e70: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x211e74: stp             q8, q9, [SP, #-0x20]!
    // 0x211e78: stp             q6, q7, [SP, #-0x20]!
    // 0x211e7c: stp             q4, q5, [SP, #-0x20]!
    // 0x211e80: stp             q2, q3, [SP, #-0x20]!
    // 0x211e84: stp             q0, q1, [SP, #-0x20]!
    // 0x211e88: SaveReg r0
    //     0x211e88: str             x0, [SP, #-8]!
    // 0x211e8c: r0 = AllocateDouble()
    //     0x211e8c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x211e90: mov             x1, x0
    // 0x211e94: RestoreReg r0
    //     0x211e94: ldr             x0, [SP], #8
    // 0x211e98: ldp             q0, q1, [SP], #0x20
    // 0x211e9c: ldp             q2, q3, [SP], #0x20
    // 0x211ea0: ldp             q4, q5, [SP], #0x20
    // 0x211ea4: ldp             q6, q7, [SP], #0x20
    // 0x211ea8: ldp             q8, q9, [SP], #0x20
    // 0x211eac: b               #0x21168c
    // 0x211eb0: r0 = NullCastErrorSharedWithFPURegs()
    //     0x211eb0: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x211eb4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211eb4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x211eb8: r0 = NullCastErrorSharedWithFPURegs()
    //     0x211eb8: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
  }
  _ _layoutLineBox(/* No info */) {
    // ** addr: 0x211ec8, size: 0x94
    // 0x211ec8: EnterFrame
    //     0x211ec8: stp             fp, lr, [SP, #-0x10]!
    //     0x211ecc: mov             fp, SP
    // 0x211ed0: AllocStack(0x18)
    //     0x211ed0: sub             SP, SP, #0x18
    // 0x211ed4: CheckStackOverflow
    //     0x211ed4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x211ed8: cmp             SP, x16
    //     0x211edc: b.ls            #0x211f50
    // 0x211ee0: ldr             x1, [fp, #0x18]
    // 0x211ee4: cmp             w1, NULL
    // 0x211ee8: b.ne            #0x211f00
    // 0x211eec: d0 = 0.000000
    //     0x211eec: eor             v0.16b, v0.16b, v0.16b
    // 0x211ef0: d0 = 0.000000
    //     0x211ef0: eor             v0.16b, v0.16b, v0.16b
    // 0x211ef4: LeaveFrame
    //     0x211ef4: mov             SP, fp
    //     0x211ef8: ldp             fp, lr, [SP], #0x10
    // 0x211efc: ret
    //     0x211efc: ret             
    // 0x211f00: r0 = LoadClassIdInstr(r1)
    //     0x211f00: ldur            x0, [x1, #-1]
    //     0x211f04: ubfx            x0, x0, #0xc, #0x14
    // 0x211f08: ldr             x16, [fp, #0x10]
    // 0x211f0c: stp             x16, x1, [SP, #8]
    // 0x211f10: r16 = true
    //     0x211f10: add             x16, NULL, #0x20  ; true
    // 0x211f14: str             x16, [SP]
    // 0x211f18: r4 = const [0, 0x3, 0x3, 0x2, parentUsesSize, 0x2, null]
    //     0x211f18: add             x4, PP, #9, lsl #12  ; [pp+0x9f60] List(7) [0, 0x3, 0x3, 0x2, "parentUsesSize", 0x2, Null]
    //     0x211f1c: ldr             x4, [x4, #0xf60]
    // 0x211f20: r0 = GDT[cid_x0 + -0x4f8]()
    //     0x211f20: sub             lr, x0, #0x4f8
    //     0x211f24: ldr             lr, [x21, lr, lsl #3]
    //     0x211f28: blr             lr
    // 0x211f2c: ldr             x16, [fp, #0x18]
    // 0x211f30: str             x16, [SP]
    // 0x211f34: r0 = getDistanceToBaseline()
    //     0x211f34: bl              #0x211f5c  ; [package:flutter/src/rendering/box.dart] RenderBox::getDistanceToBaseline
    // 0x211f38: cmp             w0, NULL
    // 0x211f3c: b.eq            #0x211f58
    // 0x211f40: LoadField: d0 = r0->field_7
    //     0x211f40: ldur            d0, [x0, #7]
    // 0x211f44: LeaveFrame
    //     0x211f44: mov             SP, fp
    //     0x211f48: ldp             fp, lr, [SP], #0x10
    // 0x211f4c: ret
    //     0x211f4c: ret             
    // 0x211f50: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x211f50: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x211f54: b               #0x211ee0
    // 0x211f58: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x211f58: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] double baselineLayout(dynamic, RenderBox, double) {
    // ** addr: 0x212134, size: 0x1b4
    // 0x212134: EnterFrame
    //     0x212134: stp             fp, lr, [SP, #-0x10]!
    //     0x212138: mov             fp, SP
    // 0x21213c: AllocStack(0x38)
    //     0x21213c: sub             SP, SP, #0x38
    // 0x212140: SetupParameters()
    //     0x212140: ldr             x0, [fp, #0x20]
    //     0x212144: ldur            w3, [x0, #0x17]
    //     0x212148: add             x3, x3, HEAP, lsl #32
    //     0x21214c: stur            x3, [fp, #-0x10]
    // 0x212150: CheckStackOverflow
    //     0x212150: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x212154: cmp             SP, x16
    //     0x212158: b.ls            #0x2122c8
    // 0x21215c: ldr             x4, [fp, #0x18]
    // 0x212160: LoadField: r5 = r4->field_7
    //     0x212160: ldur            w5, [x4, #7]
    // 0x212164: DecompressPointer r5
    //     0x212164: add             x5, x5, HEAP, lsl #32
    // 0x212168: stur            x5, [fp, #-8]
    // 0x21216c: cmp             w5, NULL
    // 0x212170: b.eq            #0x2122d0
    // 0x212174: mov             x0, x5
    // 0x212178: r2 = Null
    //     0x212178: mov             x2, NULL
    // 0x21217c: r1 = Null
    //     0x21217c: mov             x1, NULL
    // 0x212180: r4 = LoadClassIdInstr(r0)
    //     0x212180: ldur            x4, [x0, #-1]
    //     0x212184: ubfx            x4, x4, #0xc, #0x14
    // 0x212188: sub             x4, x4, #0x25f
    // 0x21218c: cmp             x4, #9
    // 0x212190: b.ls            #0x2121a8
    // 0x212194: r8 = BoxParentData
    //     0x212194: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x212198: ldr             x8, [x8, #0x50]
    // 0x21219c: r3 = Null
    //     0x21219c: add             x3, PP, #0x14, lsl #12  ; [pp+0x14538] Null
    //     0x2121a0: ldr             x3, [x3, #0x538]
    // 0x2121a4: r0 = DefaultTypeTest()
    //     0x2121a4: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x2121a8: ldur            x0, [fp, #-0x10]
    // 0x2121ac: LoadField: r1 = r0->field_17
    //     0x2121ac: ldur            w1, [x0, #0x17]
    // 0x2121b0: DecompressPointer r1
    //     0x2121b0: add             x1, x1, HEAP, lsl #32
    // 0x2121b4: r16 = Sentinel
    //     0x2121b4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2121b8: cmp             w1, w16
    // 0x2121bc: b.ne            #0x2121d0
    // 0x2121c0: r16 = "baseline"
    //     0x2121c0: add             x16, PP, #0x14, lsl #12  ; [pp+0x14548] "baseline"
    //     0x2121c4: ldr             x16, [x16, #0x548]
    // 0x2121c8: str             x16, [SP]
    // 0x2121cc: r0 = _throwLocalNotInitialized()
    //     0x2121cc: bl              #0x1be060  ; [dart:_internal] LateError::_throwLocalNotInitialized
    // 0x2121d0: ldur            x0, [fp, #-0x10]
    // 0x2121d4: LoadField: r1 = r0->field_17
    //     0x2121d4: ldur            w1, [x0, #0x17]
    // 0x2121d8: DecompressPointer r1
    //     0x2121d8: add             x1, x1, HEAP, lsl #32
    // 0x2121dc: stur            x1, [fp, #-0x18]
    // 0x2121e0: LoadField: r2 = r0->field_f
    //     0x2121e0: ldur            w2, [x0, #0xf]
    // 0x2121e4: DecompressPointer r2
    //     0x2121e4: add             x2, x2, HEAP, lsl #32
    // 0x2121e8: LoadField: r0 = r2->field_7
    //     0x2121e8: ldur            w0, [x2, #7]
    // 0x2121ec: DecompressPointer r0
    //     0x2121ec: add             x0, x0, HEAP, lsl #32
    // 0x2121f0: stur            x0, [fp, #-0x10]
    // 0x2121f4: ldr             x16, [fp, #0x18]
    // 0x2121f8: stp             x16, x0, [SP]
    // 0x2121fc: r0 = _getValueOrData()
    //     0x2121fc: bl              #0x1a55a0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x212200: mov             x1, x0
    // 0x212204: ldur            x0, [fp, #-0x10]
    // 0x212208: LoadField: r2 = r0->field_f
    //     0x212208: ldur            w2, [x0, #0xf]
    // 0x21220c: DecompressPointer r2
    //     0x21220c: add             x2, x2, HEAP, lsl #32
    // 0x212210: cmp             w2, w1
    // 0x212214: b.ne            #0x212220
    // 0x212218: r3 = Null
    //     0x212218: mov             x3, NULL
    // 0x21221c: b               #0x212224
    // 0x212220: mov             x3, x1
    // 0x212224: ldr             x2, [fp, #0x10]
    // 0x212228: ldur            x0, [fp, #-0x18]
    // 0x21222c: ldur            x1, [fp, #-8]
    // 0x212230: cmp             w3, NULL
    // 0x212234: b.eq            #0x2122d4
    // 0x212238: LoadField: d0 = r0->field_7
    //     0x212238: ldur            d0, [x0, #7]
    // 0x21223c: LoadField: d1 = r3->field_7
    //     0x21223c: ldur            d1, [x3, #7]
    // 0x212240: fsub            d2, d0, d1
    // 0x212244: stur            d2, [fp, #-0x28]
    // 0x212248: LoadField: d0 = r2->field_7
    //     0x212248: ldur            d0, [x2, #7]
    // 0x21224c: stur            d0, [fp, #-0x20]
    // 0x212250: r0 = Offset()
    //     0x212250: bl              #0x193cb0  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x212254: ldur            d0, [fp, #-0x20]
    // 0x212258: StoreField: r0->field_7 = d0
    //     0x212258: stur            d0, [x0, #7]
    // 0x21225c: ldur            d0, [fp, #-0x28]
    // 0x212260: StoreField: r0->field_f = d0
    //     0x212260: stur            d0, [x0, #0xf]
    // 0x212264: ldur            x1, [fp, #-8]
    // 0x212268: StoreField: r1->field_7 = r0
    //     0x212268: stur            w0, [x1, #7]
    //     0x21226c: ldurb           w16, [x1, #-1]
    //     0x212270: ldurb           w17, [x0, #-1]
    //     0x212274: and             x16, x17, x16, lsr #2
    //     0x212278: tst             x16, HEAP, lsr #32
    //     0x21227c: b.eq            #0x212284
    //     0x212280: bl              #0x3e4608
    // 0x212284: ldr             x16, [fp, #0x18]
    // 0x212288: str             x16, [SP]
    // 0x21228c: r0 = size()
    //     0x21228c: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x212290: LoadField: d0 = r0->field_7
    //     0x212290: ldur            d0, [x0, #7]
    // 0x212294: r0 = inline_Allocate_Double()
    //     0x212294: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x212298: add             x0, x0, #0x10
    //     0x21229c: cmp             x1, x0
    //     0x2122a0: b.ls            #0x2122d8
    //     0x2122a4: str             x0, [THR, #0x50]  ; THR::top
    //     0x2122a8: sub             x0, x0, #0xf
    //     0x2122ac: movz            x1, #0xd148
    //     0x2122b0: movk            x1, #0x3, lsl #16
    //     0x2122b4: stur            x1, [x0, #-1]
    // 0x2122b8: StoreField: r0->field_7 = d0
    //     0x2122b8: stur            d0, [x0, #7]
    // 0x2122bc: LeaveFrame
    //     0x2122bc: mov             SP, fp
    //     0x2122c0: ldp             fp, lr, [SP], #0x10
    // 0x2122c4: ret
    //     0x2122c4: ret             
    // 0x2122c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2122c8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2122cc: b               #0x21215c
    // 0x2122d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2122d0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2122d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2122d4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2122d8: SaveReg d0
    //     0x2122d8: str             q0, [SP, #-0x10]!
    // 0x2122dc: r0 = AllocateDouble()
    //     0x2122dc: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x2122e0: RestoreReg d0
    //     0x2122e0: ldr             q0, [SP], #0x10
    // 0x2122e4: b               #0x2122b8
  }
  [closure] double centerLayout(dynamic, RenderBox, double) {
    // ** addr: 0x2122e8, size: 0x17c
    // 0x2122e8: EnterFrame
    //     0x2122e8: stp             fp, lr, [SP, #-0x10]!
    //     0x2122ec: mov             fp, SP
    // 0x2122f0: AllocStack(0x30)
    //     0x2122f0: sub             SP, SP, #0x30
    // 0x2122f4: SetupParameters()
    //     0x2122f4: ldr             x0, [fp, #0x20]
    //     0x2122f8: ldur            w3, [x0, #0x17]
    //     0x2122fc: add             x3, x3, HEAP, lsl #32
    //     0x212300: stur            x3, [fp, #-0x10]
    // 0x212304: CheckStackOverflow
    //     0x212304: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x212308: cmp             SP, x16
    //     0x21230c: b.ls            #0x212448
    // 0x212310: ldr             x4, [fp, #0x18]
    // 0x212314: LoadField: r5 = r4->field_7
    //     0x212314: ldur            w5, [x4, #7]
    // 0x212318: DecompressPointer r5
    //     0x212318: add             x5, x5, HEAP, lsl #32
    // 0x21231c: stur            x5, [fp, #-8]
    // 0x212320: cmp             w5, NULL
    // 0x212324: b.eq            #0x212450
    // 0x212328: mov             x0, x5
    // 0x21232c: r2 = Null
    //     0x21232c: mov             x2, NULL
    // 0x212330: r1 = Null
    //     0x212330: mov             x1, NULL
    // 0x212334: r4 = LoadClassIdInstr(r0)
    //     0x212334: ldur            x4, [x0, #-1]
    //     0x212338: ubfx            x4, x4, #0xc, #0x14
    // 0x21233c: sub             x4, x4, #0x25f
    // 0x212340: cmp             x4, #9
    // 0x212344: b.ls            #0x21235c
    // 0x212348: r8 = BoxParentData
    //     0x212348: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x21234c: ldr             x8, [x8, #0x50]
    // 0x212350: r3 = Null
    //     0x212350: add             x3, PP, #0x14, lsl #12  ; [pp+0x14550] Null
    //     0x212354: ldr             x3, [x3, #0x550]
    // 0x212358: r0 = DefaultTypeTest()
    //     0x212358: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x21235c: ldur            x0, [fp, #-0x10]
    // 0x212360: LoadField: r1 = r0->field_13
    //     0x212360: ldur            w1, [x0, #0x13]
    // 0x212364: DecompressPointer r1
    //     0x212364: add             x1, x1, HEAP, lsl #32
    // 0x212368: r16 = Sentinel
    //     0x212368: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x21236c: cmp             w1, w16
    // 0x212370: b.ne            #0x212380
    // 0x212374: r16 = "height"
    //     0x212374: ldr             x16, [PP, #0x51a8]  ; [pp+0x51a8] "height"
    // 0x212378: str             x16, [SP]
    // 0x21237c: r0 = _throwLocalNotInitialized()
    //     0x21237c: bl              #0x1be060  ; [dart:_internal] LateError::_throwLocalNotInitialized
    // 0x212380: ldr             x2, [fp, #0x10]
    // 0x212384: ldur            x0, [fp, #-0x10]
    // 0x212388: ldur            x1, [fp, #-8]
    // 0x21238c: LoadField: r3 = r0->field_13
    //     0x21238c: ldur            w3, [x0, #0x13]
    // 0x212390: DecompressPointer r3
    //     0x212390: add             x3, x3, HEAP, lsl #32
    // 0x212394: stur            x3, [fp, #-0x18]
    // 0x212398: ldr             x16, [fp, #0x18]
    // 0x21239c: str             x16, [SP]
    // 0x2123a0: r0 = size()
    //     0x2123a0: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x2123a4: LoadField: d0 = r0->field_f
    //     0x2123a4: ldur            d0, [x0, #0xf]
    // 0x2123a8: ldur            x0, [fp, #-0x18]
    // 0x2123ac: LoadField: d1 = r0->field_7
    //     0x2123ac: ldur            d1, [x0, #7]
    // 0x2123b0: fsub            d2, d1, d0
    // 0x2123b4: d0 = 2.000000
    //     0x2123b4: fmov            d0, #2.00000000
    // 0x2123b8: d0 = 2.000000
    //     0x2123b8: fmov            d0, #2.00000000
    // 0x2123bc: fdiv            d1, d2, d0
    // 0x2123c0: ldr             x0, [fp, #0x10]
    // 0x2123c4: stur            d1, [fp, #-0x28]
    // 0x2123c8: LoadField: d0 = r0->field_7
    //     0x2123c8: ldur            d0, [x0, #7]
    // 0x2123cc: stur            d0, [fp, #-0x20]
    // 0x2123d0: r0 = Offset()
    //     0x2123d0: bl              #0x193cb0  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x2123d4: ldur            d0, [fp, #-0x20]
    // 0x2123d8: StoreField: r0->field_7 = d0
    //     0x2123d8: stur            d0, [x0, #7]
    // 0x2123dc: ldur            d0, [fp, #-0x28]
    // 0x2123e0: StoreField: r0->field_f = d0
    //     0x2123e0: stur            d0, [x0, #0xf]
    // 0x2123e4: ldur            x1, [fp, #-8]
    // 0x2123e8: StoreField: r1->field_7 = r0
    //     0x2123e8: stur            w0, [x1, #7]
    //     0x2123ec: ldurb           w16, [x1, #-1]
    //     0x2123f0: ldurb           w17, [x0, #-1]
    //     0x2123f4: and             x16, x17, x16, lsr #2
    //     0x2123f8: tst             x16, HEAP, lsr #32
    //     0x2123fc: b.eq            #0x212404
    //     0x212400: bl              #0x3e4608
    // 0x212404: ldr             x16, [fp, #0x18]
    // 0x212408: str             x16, [SP]
    // 0x21240c: r0 = size()
    //     0x21240c: bl              #0x1d9570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x212410: LoadField: d0 = r0->field_7
    //     0x212410: ldur            d0, [x0, #7]
    // 0x212414: r0 = inline_Allocate_Double()
    //     0x212414: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x212418: add             x0, x0, #0x10
    //     0x21241c: cmp             x1, x0
    //     0x212420: b.ls            #0x212454
    //     0x212424: str             x0, [THR, #0x50]  ; THR::top
    //     0x212428: sub             x0, x0, #0xf
    //     0x21242c: movz            x1, #0xd148
    //     0x212430: movk            x1, #0x3, lsl #16
    //     0x212434: stur            x1, [x0, #-1]
    // 0x212438: StoreField: r0->field_7 = d0
    //     0x212438: stur            d0, [x0, #7]
    // 0x21243c: LeaveFrame
    //     0x21243c: mov             SP, fp
    //     0x212440: ldp             fp, lr, [SP], #0x10
    // 0x212444: ret
    //     0x212444: ret             
    // 0x212448: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x212448: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x21244c: b               #0x212310
    // 0x212450: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x212450: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x212454: SaveReg d0
    //     0x212454: str             q0, [SP, #-0x10]!
    // 0x212458: r0 = AllocateDouble()
    //     0x212458: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x21245c: RestoreReg d0
    //     0x21245c: ldr             q0, [SP], #0x10
    // 0x212460: b               #0x212438
  }
  _ visitChildrenForSemantics(/* No info */) {
    // ** addr: 0x2280d0, size: 0x430
    // 0x2280d0: EnterFrame
    //     0x2280d0: stp             fp, lr, [SP, #-0x10]!
    //     0x2280d4: mov             fp, SP
    // 0x2280d8: AllocStack(0x10)
    //     0x2280d8: sub             SP, SP, #0x10
    // 0x2280dc: CheckStackOverflow
    //     0x2280dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2280e0: cmp             SP, x16
    //     0x2280e4: b.ls            #0x2284c8
    // 0x2280e8: ldr             x16, [fp, #0x18]
    // 0x2280ec: r30 = Instance__DecorationSlot
    //     0x2280ec: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x2280f0: ldr             lr, [lr, #0x388]
    // 0x2280f4: stp             lr, x16, [SP]
    // 0x2280f8: r0 = childForSlot()
    //     0x2280f8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2280fc: cmp             w0, NULL
    // 0x228100: b.eq            #0x228138
    // 0x228104: ldr             x16, [fp, #0x18]
    // 0x228108: r30 = Instance__DecorationSlot
    //     0x228108: add             lr, PP, #0x14, lsl #12  ; [pp+0x14388] Obj!_DecorationSlot@481961
    //     0x22810c: ldr             lr, [lr, #0x388]
    // 0x228110: stp             lr, x16, [SP]
    // 0x228114: r0 = childForSlot()
    //     0x228114: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228118: cmp             w0, NULL
    // 0x22811c: b.eq            #0x2284d0
    // 0x228120: ldr             x16, [fp, #0x10]
    // 0x228124: stp             x0, x16, [SP]
    // 0x228128: ldr             x0, [fp, #0x10]
    // 0x22812c: ClosureCall
    //     0x22812c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x228130: ldur            x2, [x0, #0x1f]
    //     0x228134: blr             x2
    // 0x228138: ldr             x16, [fp, #0x18]
    // 0x22813c: r30 = Instance__DecorationSlot
    //     0x22813c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x228140: ldr             lr, [lr, #0x3a8]
    // 0x228144: stp             lr, x16, [SP]
    // 0x228148: r0 = childForSlot()
    //     0x228148: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22814c: cmp             w0, NULL
    // 0x228150: b.eq            #0x228188
    // 0x228154: ldr             x16, [fp, #0x18]
    // 0x228158: r30 = Instance__DecorationSlot
    //     0x228158: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a8] Obj!_DecorationSlot@481921
    //     0x22815c: ldr             lr, [lr, #0x3a8]
    // 0x228160: stp             lr, x16, [SP]
    // 0x228164: r0 = childForSlot()
    //     0x228164: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228168: cmp             w0, NULL
    // 0x22816c: b.eq            #0x2284d4
    // 0x228170: ldr             x16, [fp, #0x10]
    // 0x228174: stp             x0, x16, [SP]
    // 0x228178: ldr             x0, [fp, #0x10]
    // 0x22817c: ClosureCall
    //     0x22817c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x228180: ldur            x2, [x0, #0x1f]
    //     0x228184: blr             x2
    // 0x228188: ldr             x16, [fp, #0x18]
    // 0x22818c: r30 = Instance__DecorationSlot
    //     0x22818c: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x228190: ldr             lr, [lr, #0x398]
    // 0x228194: stp             lr, x16, [SP]
    // 0x228198: r0 = childForSlot()
    //     0x228198: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22819c: cmp             w0, NULL
    // 0x2281a0: b.eq            #0x2281d8
    // 0x2281a4: ldr             x16, [fp, #0x18]
    // 0x2281a8: r30 = Instance__DecorationSlot
    //     0x2281a8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14398] Obj!_DecorationSlot@481941
    //     0x2281ac: ldr             lr, [lr, #0x398]
    // 0x2281b0: stp             lr, x16, [SP]
    // 0x2281b4: r0 = childForSlot()
    //     0x2281b4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2281b8: cmp             w0, NULL
    // 0x2281bc: b.eq            #0x2284d8
    // 0x2281c0: ldr             x16, [fp, #0x10]
    // 0x2281c4: stp             x0, x16, [SP]
    // 0x2281c8: ldr             x0, [fp, #0x10]
    // 0x2281cc: ClosureCall
    //     0x2281cc: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x2281d0: ldur            x2, [x0, #0x1f]
    //     0x2281d4: blr             x2
    // 0x2281d8: ldr             x16, [fp, #0x18]
    // 0x2281dc: r30 = Instance__DecorationSlot
    //     0x2281dc: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x2281e0: ldr             lr, [lr, #0x3b8]
    // 0x2281e4: stp             lr, x16, [SP]
    // 0x2281e8: r0 = childForSlot()
    //     0x2281e8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2281ec: cmp             w0, NULL
    // 0x2281f0: b.eq            #0x228228
    // 0x2281f4: ldr             x16, [fp, #0x18]
    // 0x2281f8: r30 = Instance__DecorationSlot
    //     0x2281f8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x2281fc: ldr             lr, [lr, #0x3b8]
    // 0x228200: stp             lr, x16, [SP]
    // 0x228204: r0 = childForSlot()
    //     0x228204: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228208: cmp             w0, NULL
    // 0x22820c: b.eq            #0x2284dc
    // 0x228210: ldr             x16, [fp, #0x10]
    // 0x228214: stp             x0, x16, [SP]
    // 0x228218: ldr             x0, [fp, #0x10]
    // 0x22821c: ClosureCall
    //     0x22821c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x228220: ldur            x2, [x0, #0x1f]
    //     0x228224: blr             x2
    // 0x228228: ldr             x16, [fp, #0x18]
    // 0x22822c: r30 = Instance__DecorationSlot
    //     0x22822c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x228230: ldr             lr, [lr, #0x3c0]
    // 0x228234: stp             lr, x16, [SP]
    // 0x228238: r0 = childForSlot()
    //     0x228238: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22823c: cmp             w0, NULL
    // 0x228240: b.eq            #0x2282d8
    // 0x228244: ldr             x0, [fp, #0x18]
    // 0x228248: LoadField: r1 = r0->field_73
    //     0x228248: ldur            w1, [x0, #0x73]
    // 0x22824c: DecompressPointer r1
    //     0x22824c: add             x1, x1, HEAP, lsl #32
    // 0x228250: tbnz            w1, #4, #0x228288
    // 0x228254: r16 = Instance__DecorationSlot
    //     0x228254: add             x16, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x228258: ldr             x16, [x16, #0x3c0]
    // 0x22825c: stp             x16, x0, [SP]
    // 0x228260: r0 = childForSlot()
    //     0x228260: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228264: cmp             w0, NULL
    // 0x228268: b.eq            #0x2284e0
    // 0x22826c: ldr             x16, [fp, #0x10]
    // 0x228270: stp             x0, x16, [SP]
    // 0x228274: ldr             x0, [fp, #0x10]
    // 0x228278: ClosureCall
    //     0x228278: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x22827c: ldur            x2, [x0, #0x1f]
    //     0x228280: blr             x2
    // 0x228284: b               #0x2282d8
    // 0x228288: ldr             x16, [fp, #0x18]
    // 0x22828c: r30 = Instance__DecorationSlot
    //     0x22828c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b8] Obj!_DecorationSlot@481981
    //     0x228290: ldr             lr, [lr, #0x3b8]
    // 0x228294: stp             lr, x16, [SP]
    // 0x228298: r0 = childForSlot()
    //     0x228298: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22829c: cmp             w0, NULL
    // 0x2282a0: b.ne            #0x2282d8
    // 0x2282a4: ldr             x16, [fp, #0x18]
    // 0x2282a8: r30 = Instance__DecorationSlot
    //     0x2282a8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c0] Obj!_DecorationSlot@4818e1
    //     0x2282ac: ldr             lr, [lr, #0x3c0]
    // 0x2282b0: stp             lr, x16, [SP]
    // 0x2282b4: r0 = childForSlot()
    //     0x2282b4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2282b8: cmp             w0, NULL
    // 0x2282bc: b.eq            #0x2284e4
    // 0x2282c0: ldr             x16, [fp, #0x10]
    // 0x2282c4: stp             x0, x16, [SP]
    // 0x2282c8: ldr             x0, [fp, #0x10]
    // 0x2282cc: ClosureCall
    //     0x2282cc: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x2282d0: ldur            x2, [x0, #0x1f]
    //     0x2282d4: blr             x2
    // 0x2282d8: ldr             x16, [fp, #0x18]
    // 0x2282dc: r30 = Instance__DecorationSlot
    //     0x2282dc: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x2282e0: ldr             lr, [lr, #0x390]
    // 0x2282e4: stp             lr, x16, [SP]
    // 0x2282e8: r0 = childForSlot()
    //     0x2282e8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2282ec: cmp             w0, NULL
    // 0x2282f0: b.eq            #0x228328
    // 0x2282f4: ldr             x16, [fp, #0x18]
    // 0x2282f8: r30 = Instance__DecorationSlot
    //     0x2282f8: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x2282fc: ldr             lr, [lr, #0x390]
    // 0x228300: stp             lr, x16, [SP]
    // 0x228304: r0 = childForSlot()
    //     0x228304: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228308: cmp             w0, NULL
    // 0x22830c: b.eq            #0x2284e8
    // 0x228310: ldr             x16, [fp, #0x10]
    // 0x228314: stp             x0, x16, [SP]
    // 0x228318: ldr             x0, [fp, #0x10]
    // 0x22831c: ClosureCall
    //     0x22831c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x228320: ldur            x2, [x0, #0x1f]
    //     0x228324: blr             x2
    // 0x228328: ldr             x16, [fp, #0x18]
    // 0x22832c: r30 = Instance__DecorationSlot
    //     0x22832c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x228330: ldr             lr, [lr, #0x3a0]
    // 0x228334: stp             lr, x16, [SP]
    // 0x228338: r0 = childForSlot()
    //     0x228338: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22833c: cmp             w0, NULL
    // 0x228340: b.eq            #0x228378
    // 0x228344: ldr             x16, [fp, #0x18]
    // 0x228348: r30 = Instance__DecorationSlot
    //     0x228348: add             lr, PP, #0x14, lsl #12  ; [pp+0x143a0] Obj!_DecorationSlot@4818a1
    //     0x22834c: ldr             lr, [lr, #0x3a0]
    // 0x228350: stp             lr, x16, [SP]
    // 0x228354: r0 = childForSlot()
    //     0x228354: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228358: cmp             w0, NULL
    // 0x22835c: b.eq            #0x2284ec
    // 0x228360: ldr             x16, [fp, #0x10]
    // 0x228364: stp             x0, x16, [SP]
    // 0x228368: ldr             x0, [fp, #0x10]
    // 0x22836c: ClosureCall
    //     0x22836c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x228370: ldur            x2, [x0, #0x1f]
    //     0x228374: blr             x2
    // 0x228378: ldr             x16, [fp, #0x18]
    // 0x22837c: r30 = Instance__DecorationSlot
    //     0x22837c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x228380: ldr             lr, [lr, #0x3b0]
    // 0x228384: stp             lr, x16, [SP]
    // 0x228388: r0 = childForSlot()
    //     0x228388: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22838c: cmp             w0, NULL
    // 0x228390: b.eq            #0x2283c8
    // 0x228394: ldr             x16, [fp, #0x18]
    // 0x228398: r30 = Instance__DecorationSlot
    //     0x228398: add             lr, PP, #0x14, lsl #12  ; [pp+0x143b0] Obj!_DecorationSlot@4818c1
    //     0x22839c: ldr             lr, [lr, #0x3b0]
    // 0x2283a0: stp             lr, x16, [SP]
    // 0x2283a4: r0 = childForSlot()
    //     0x2283a4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2283a8: cmp             w0, NULL
    // 0x2283ac: b.eq            #0x2284f0
    // 0x2283b0: ldr             x16, [fp, #0x10]
    // 0x2283b4: stp             x0, x16, [SP]
    // 0x2283b8: ldr             x0, [fp, #0x10]
    // 0x2283bc: ClosureCall
    //     0x2283bc: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x2283c0: ldur            x2, [x0, #0x1f]
    //     0x2283c4: blr             x2
    // 0x2283c8: ldr             x16, [fp, #0x18]
    // 0x2283cc: r30 = Instance__DecorationSlot
    //     0x2283cc: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x2283d0: ldr             lr, [lr, #0x3d8]
    // 0x2283d4: stp             lr, x16, [SP]
    // 0x2283d8: r0 = childForSlot()
    //     0x2283d8: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2283dc: cmp             w0, NULL
    // 0x2283e0: b.eq            #0x228418
    // 0x2283e4: ldr             x16, [fp, #0x18]
    // 0x2283e8: r30 = Instance__DecorationSlot
    //     0x2283e8: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d8] Obj!_DecorationSlot@4819e1
    //     0x2283ec: ldr             lr, [lr, #0x3d8]
    // 0x2283f0: stp             lr, x16, [SP]
    // 0x2283f4: r0 = childForSlot()
    //     0x2283f4: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2283f8: cmp             w0, NULL
    // 0x2283fc: b.eq            #0x2284f4
    // 0x228400: ldr             x16, [fp, #0x10]
    // 0x228404: stp             x0, x16, [SP]
    // 0x228408: ldr             x0, [fp, #0x10]
    // 0x22840c: ClosureCall
    //     0x22840c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x228410: ldur            x2, [x0, #0x1f]
    //     0x228414: blr             x2
    // 0x228418: ldr             x16, [fp, #0x18]
    // 0x22841c: r30 = Instance__DecorationSlot
    //     0x22841c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x228420: ldr             lr, [lr, #0x3c8]
    // 0x228424: stp             lr, x16, [SP]
    // 0x228428: r0 = childForSlot()
    //     0x228428: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22842c: cmp             w0, NULL
    // 0x228430: b.eq            #0x228468
    // 0x228434: ldr             x16, [fp, #0x18]
    // 0x228438: r30 = Instance__DecorationSlot
    //     0x228438: add             lr, PP, #0x14, lsl #12  ; [pp+0x143c8] Obj!_DecorationSlot@4819a1
    //     0x22843c: ldr             lr, [lr, #0x3c8]
    // 0x228440: stp             lr, x16, [SP]
    // 0x228444: r0 = childForSlot()
    //     0x228444: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228448: cmp             w0, NULL
    // 0x22844c: b.eq            #0x2284f8
    // 0x228450: ldr             x16, [fp, #0x10]
    // 0x228454: stp             x0, x16, [SP]
    // 0x228458: ldr             x0, [fp, #0x10]
    // 0x22845c: ClosureCall
    //     0x22845c: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x228460: ldur            x2, [x0, #0x1f]
    //     0x228464: blr             x2
    // 0x228468: ldr             x16, [fp, #0x18]
    // 0x22846c: r30 = Instance__DecorationSlot
    //     0x22846c: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x228470: ldr             lr, [lr, #0x3d0]
    // 0x228474: stp             lr, x16, [SP]
    // 0x228478: r0 = childForSlot()
    //     0x228478: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x22847c: cmp             w0, NULL
    // 0x228480: b.eq            #0x2284b8
    // 0x228484: ldr             x16, [fp, #0x18]
    // 0x228488: r30 = Instance__DecorationSlot
    //     0x228488: add             lr, PP, #0x14, lsl #12  ; [pp+0x143d0] Obj!_DecorationSlot@4819c1
    //     0x22848c: ldr             lr, [lr, #0x3d0]
    // 0x228490: stp             lr, x16, [SP]
    // 0x228494: r0 = childForSlot()
    //     0x228494: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x228498: cmp             w0, NULL
    // 0x22849c: b.eq            #0x2284fc
    // 0x2284a0: ldr             x16, [fp, #0x10]
    // 0x2284a4: stp             x0, x16, [SP]
    // 0x2284a8: ldr             x0, [fp, #0x10]
    // 0x2284ac: ClosureCall
    //     0x2284ac: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x2284b0: ldur            x2, [x0, #0x1f]
    //     0x2284b4: blr             x2
    // 0x2284b8: r0 = Null
    //     0x2284b8: mov             x0, NULL
    // 0x2284bc: LeaveFrame
    //     0x2284bc: mov             SP, fp
    //     0x2284c0: ldp             fp, lr, [SP], #0x10
    // 0x2284c4: ret
    //     0x2284c4: ret             
    // 0x2284c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2284c8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2284cc: b               #0x2280e8
    // 0x2284d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284d0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284d4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284d8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284d8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284dc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284e0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284e4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284e8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284ec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284f0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284f0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284f4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284f4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284f8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284f8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2284fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2284fc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ describeSemanticsConfiguration(/* No info */) {
    // ** addr: 0x22a46c, size: 0x5c
    // 0x22a46c: EnterFrame
    //     0x22a46c: stp             fp, lr, [SP, #-0x10]!
    //     0x22a470: mov             fp, SP
    // 0x22a474: r1 = 1
    //     0x22a474: movz            x1, #0x1
    // 0x22a478: r0 = AllocateContext()
    //     0x22a478: bl              #0x3e4e00  ; AllocateContextStub
    // 0x22a47c: mov             x1, x0
    // 0x22a480: ldr             x0, [fp, #0x18]
    // 0x22a484: StoreField: r1->field_f = r0
    //     0x22a484: stur            w0, [x1, #0xf]
    // 0x22a488: mov             x2, x1
    // 0x22a48c: r1 = Function '_childSemanticsConfigurationDelegate@73019562':.
    //     0x22a48c: add             x1, PP, #0x14, lsl #12  ; [pp+0x14598] AnonymousClosure: (0x22a4c8), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_childSemanticsConfigurationDelegate (0x22a514)
    //     0x22a490: ldr             x1, [x1, #0x598]
    // 0x22a494: r0 = AllocateClosure()
    //     0x22a494: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x22a498: ldr             x1, [fp, #0x10]
    // 0x22a49c: StoreField: r1->field_27 = r0
    //     0x22a49c: stur            w0, [x1, #0x27]
    //     0x22a4a0: ldurb           w16, [x1, #-1]
    //     0x22a4a4: ldurb           w17, [x0, #-1]
    //     0x22a4a8: and             x16, x17, x16, lsr #2
    //     0x22a4ac: tst             x16, HEAP, lsr #32
    //     0x22a4b0: b.eq            #0x22a4b8
    //     0x22a4b4: bl              #0x3e4608
    // 0x22a4b8: r0 = Null
    //     0x22a4b8: mov             x0, NULL
    // 0x22a4bc: LeaveFrame
    //     0x22a4bc: mov             SP, fp
    //     0x22a4c0: ldp             fp, lr, [SP], #0x10
    // 0x22a4c4: ret
    //     0x22a4c4: ret             
  }
  [closure] ChildSemanticsConfigurationsResult _childSemanticsConfigurationDelegate(dynamic, List<SemanticsConfiguration>) {
    // ** addr: 0x22a4c8, size: 0x4c
    // 0x22a4c8: EnterFrame
    //     0x22a4c8: stp             fp, lr, [SP, #-0x10]!
    //     0x22a4cc: mov             fp, SP
    // 0x22a4d0: AllocStack(0x10)
    //     0x22a4d0: sub             SP, SP, #0x10
    // 0x22a4d4: SetupParameters()
    //     0x22a4d4: ldr             x0, [fp, #0x18]
    //     0x22a4d8: ldur            w1, [x0, #0x17]
    //     0x22a4dc: add             x1, x1, HEAP, lsl #32
    // 0x22a4e0: CheckStackOverflow
    //     0x22a4e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22a4e4: cmp             SP, x16
    //     0x22a4e8: b.ls            #0x22a50c
    // 0x22a4ec: LoadField: r0 = r1->field_f
    //     0x22a4ec: ldur            w0, [x1, #0xf]
    // 0x22a4f0: DecompressPointer r0
    //     0x22a4f0: add             x0, x0, HEAP, lsl #32
    // 0x22a4f4: ldr             x16, [fp, #0x10]
    // 0x22a4f8: stp             x16, x0, [SP]
    // 0x22a4fc: r0 = _childSemanticsConfigurationDelegate()
    //     0x22a4fc: bl              #0x22a514  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_childSemanticsConfigurationDelegate
    // 0x22a500: LeaveFrame
    //     0x22a500: mov             SP, fp
    //     0x22a504: ldp             fp, lr, [SP], #0x10
    // 0x22a508: ret
    //     0x22a508: ret             
    // 0x22a50c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22a50c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22a510: b               #0x22a4ec
  }
  _ _childSemanticsConfigurationDelegate(/* No info */) {
    // ** addr: 0x22a514, size: 0x4c4
    // 0x22a514: EnterFrame
    //     0x22a514: stp             fp, lr, [SP, #-0x10]!
    //     0x22a518: mov             fp, SP
    // 0x22a51c: AllocStack(0x50)
    //     0x22a51c: sub             SP, SP, #0x50
    // 0x22a520: CheckStackOverflow
    //     0x22a520: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22a524: cmp             SP, x16
    //     0x22a528: b.ls            #0x22a9bc
    // 0x22a52c: r0 = ChildSemanticsConfigurationsResultBuilder()
    //     0x22a52c: bl              #0x22abf8  ; AllocateChildSemanticsConfigurationsResultBuilderStub -> ChildSemanticsConfigurationsResultBuilder (size=0x10)
    // 0x22a530: stur            x0, [fp, #-8]
    // 0x22a534: str             x0, [SP]
    // 0x22a538: r0 = ChildSemanticsConfigurationsResultBuilder()
    //     0x22a538: bl              #0x22aaf8  ; [package:flutter/src/semantics/semantics.dart] ChildSemanticsConfigurationsResultBuilder::ChildSemanticsConfigurationsResultBuilder
    // 0x22a53c: ldr             x0, [fp, #0x10]
    // 0x22a540: r1 = LoadClassIdInstr(r0)
    //     0x22a540: ldur            x1, [x0, #-1]
    //     0x22a544: ubfx            x1, x1, #0xc, #0x14
    // 0x22a548: str             x0, [SP]
    // 0x22a54c: mov             x0, x1
    // 0x22a550: r0 = GDT[cid_x0 + 0xa76]()
    //     0x22a550: add             lr, x0, #0xa76
    //     0x22a554: ldr             lr, [x21, lr, lsl #3]
    //     0x22a558: blr             lr
    // 0x22a55c: mov             x2, x0
    // 0x22a560: ldur            x1, [fp, #-8]
    // 0x22a564: stur            x2, [fp, #-0x28]
    // 0x22a568: LoadField: r3 = r1->field_7
    //     0x22a568: ldur            w3, [x1, #7]
    // 0x22a56c: DecompressPointer r3
    //     0x22a56c: add             x3, x3, HEAP, lsl #32
    // 0x22a570: stur            x3, [fp, #-0x20]
    // 0x22a574: r5 = Null
    //     0x22a574: mov             x5, NULL
    // 0x22a578: r4 = Null
    //     0x22a578: mov             x4, NULL
    // 0x22a57c: stur            x5, [fp, #-0x10]
    // 0x22a580: stur            x4, [fp, #-0x18]
    // 0x22a584: CheckStackOverflow
    //     0x22a584: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x22a588: cmp             SP, x16
    //     0x22a58c: b.ls            #0x22a9c4
    // 0x22a590: r0 = LoadClassIdInstr(r2)
    //     0x22a590: ldur            x0, [x2, #-1]
    //     0x22a594: ubfx            x0, x0, #0xc, #0x14
    // 0x22a598: str             x2, [SP]
    // 0x22a59c: r0 = GDT[cid_x0 + -0xfff]()
    //     0x22a59c: sub             lr, x0, #0xfff
    //     0x22a5a0: ldr             lr, [x21, lr, lsl #3]
    //     0x22a5a4: blr             lr
    // 0x22a5a8: tbnz            w0, #4, #0x22a7ec
    // 0x22a5ac: ldur            x1, [fp, #-0x28]
    // 0x22a5b0: r0 = LoadClassIdInstr(r1)
    //     0x22a5b0: ldur            x0, [x1, #-1]
    //     0x22a5b4: ubfx            x0, x0, #0xc, #0x14
    // 0x22a5b8: str             x1, [SP]
    // 0x22a5bc: r0 = GDT[cid_x0 + -0xfec]()
    //     0x22a5bc: sub             lr, x0, #0xfec
    //     0x22a5c0: ldr             lr, [x21, lr, lsl #3]
    //     0x22a5c4: blr             lr
    // 0x22a5c8: stur            x0, [fp, #-0x30]
    // 0x22a5cc: LoadField: r1 = r0->field_8f
    //     0x22a5cc: ldur            w1, [x0, #0x8f]
    // 0x22a5d0: DecompressPointer r1
    //     0x22a5d0: add             x1, x1, HEAP, lsl #32
    // 0x22a5d4: cmp             w1, NULL
    // 0x22a5d8: b.ne            #0x22a5e4
    // 0x22a5dc: r0 = Null
    //     0x22a5dc: mov             x0, NULL
    // 0x22a5e0: b               #0x22a5f4
    // 0x22a5e4: r16 = Instance_SemanticsTag
    //     0x22a5e4: add             x16, PP, #0x14, lsl #12  ; [pp+0x145a0] Obj!SemanticsTag@472db1
    //     0x22a5e8: ldr             x16, [x16, #0x5a0]
    // 0x22a5ec: stp             x16, x1, [SP]
    // 0x22a5f0: r0 = contains()
    //     0x22a5f0: bl              #0x3d9dcc  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::contains
    // 0x22a5f4: cmp             w0, NULL
    // 0x22a5f8: b.ne            #0x22a604
    // 0x22a5fc: ldur            x0, [fp, #-0x10]
    // 0x22a600: b               #0x22a688
    // 0x22a604: tbnz            w0, #4, #0x22a684
    // 0x22a608: ldur            x0, [fp, #-0x10]
    // 0x22a60c: cmp             w0, NULL
    // 0x22a610: b.ne            #0x22a650
    // 0x22a614: r0 = InitLateStaticField(0x0) // [dart:core] _GrowableList<X0>::_emptyList
    //     0x22a614: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x22a618: ldr             x0, [x0]
    //     0x22a61c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x22a620: cmp             w0, w16
    //     0x22a624: b.ne            #0x22a630
    //     0x22a628: ldr             x2, [PP, #0x340]  ; [pp+0x340] Field <_GrowableList@0150898._emptyList@0150898>: static late final (offset: 0x0)
    //     0x22a62c: bl              #0x3e406c
    // 0x22a630: r1 = <SemanticsConfiguration>
    //     0x22a630: ldr             x1, [PP, #0x32f8]  ; [pp+0x32f8] TypeArguments: <SemanticsConfiguration>
    // 0x22a634: stur            x0, [fp, #-0x38]
    // 0x22a638: r0 = AllocateGrowableArray()
    //     0x22a638: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x22a63c: mov             x1, x0
    // 0x22a640: ldur            x0, [fp, #-0x38]
    // 0x22a644: StoreField: r1->field_f = r0
    //     0x22a644: stur            w0, [x1, #0xf]
    // 0x22a648: StoreField: r1->field_b = rZR
    //     0x22a648: stur            wzr, [x1, #0xb]
    // 0x22a64c: b               #0x22a654
    // 0x22a650: mov             x1, x0
    // 0x22a654: stur            x1, [fp, #-0x38]
    // 0x22a658: r0 = LoadClassIdInstr(r1)
    //     0x22a658: ldur            x0, [x1, #-1]
    //     0x22a65c: ubfx            x0, x0, #0xc, #0x14
    // 0x22a660: ldur            x16, [fp, #-0x30]
    // 0x22a664: stp             x16, x1, [SP]
    // 0x22a668: r0 = GDT[cid_x0 + 0xc7c]()
    //     0x22a668: add             lr, x0, #0xc7c
    //     0x22a66c: ldr             lr, [x21, lr, lsl #3]
    //     0x22a670: blr             lr
    // 0x22a674: ldur            x5, [fp, #-0x38]
    // 0x22a678: ldur            x4, [fp, #-0x18]
    // 0x22a67c: ldur            x2, [fp, #-0x20]
    // 0x22a680: b               #0x22a7dc
    // 0x22a684: ldur            x0, [fp, #-0x10]
    // 0x22a688: ldur            x1, [fp, #-0x30]
    // 0x22a68c: LoadField: r2 = r1->field_8f
    //     0x22a68c: ldur            w2, [x1, #0x8f]
    // 0x22a690: DecompressPointer r2
    //     0x22a690: add             x2, x2, HEAP, lsl #32
    // 0x22a694: cmp             w2, NULL
    // 0x22a698: b.ne            #0x22a6a4
    // 0x22a69c: r0 = Null
    //     0x22a69c: mov             x0, NULL
    // 0x22a6a0: b               #0x22a6b4
    // 0x22a6a4: r16 = Instance_SemanticsTag
    //     0x22a6a4: add             x16, PP, #0x14, lsl #12  ; [pp+0x145a8] Obj!SemanticsTag@472da1
    //     0x22a6a8: ldr             x16, [x16, #0x5a8]
    // 0x22a6ac: stp             x16, x2, [SP]
    // 0x22a6b0: r0 = contains()
    //     0x22a6b0: bl              #0x3d9dcc  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::contains
    // 0x22a6b4: cmp             w0, NULL
    // 0x22a6b8: b.ne            #0x22a6c4
    // 0x22a6bc: ldur            x0, [fp, #-0x18]
    // 0x22a6c0: b               #0x22a744
    // 0x22a6c4: tbnz            w0, #4, #0x22a740
    // 0x22a6c8: ldur            x0, [fp, #-0x18]
    // 0x22a6cc: cmp             w0, NULL
    // 0x22a6d0: b.ne            #0x22a710
    // 0x22a6d4: r0 = InitLateStaticField(0x0) // [dart:core] _GrowableList<X0>::_emptyList
    //     0x22a6d4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x22a6d8: ldr             x0, [x0]
    //     0x22a6dc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x22a6e0: cmp             w0, w16
    //     0x22a6e4: b.ne            #0x22a6f0
    //     0x22a6e8: ldr             x2, [PP, #0x340]  ; [pp+0x340] Field <_GrowableList@0150898._emptyList@0150898>: static late final (offset: 0x0)
    //     0x22a6ec: bl              #0x3e406c
    // 0x22a6f0: r1 = <SemanticsConfiguration>
    //     0x22a6f0: ldr             x1, [PP, #0x32f8]  ; [pp+0x32f8] TypeArguments: <SemanticsConfiguration>
    // 0x22a6f4: stur            x0, [fp, #-0x38]
    // 0x22a6f8: r0 = AllocateGrowableArray()
    //     0x22a6f8: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x22a6fc: mov             x1, x0
    // 0x22a700: ldur            x0, [fp, #-0x38]
    // 0x22a704: StoreField: r1->field_f = r0
    //     0x22a704: stur            w0, [x1, #0xf]
    // 0x22a708: StoreField: r1->field_b = rZR
    //     0x22a708: stur            wzr, [x1, #0xb]
    // 0x22a70c: b               #0x22a714
    // 0x22a710: mov             x1, x0
    // 0x22a714: stur            x1, [fp, #-0x38]
    // 0x22a718: r0 = LoadClassIdInstr(r1)
    //     0x22a718: ldur            x0, [x1, #-1]
    //     0x22a71c: ubfx            x0, x0, #0xc, #0x14
    // 0x22a720: ldur            x16, [fp, #-0x30]
    // 0x22a724: stp             x16, x1, [SP]
    // 0x22a728: r0 = GDT[cid_x0 + 0xc7c]()
    //     0x22a728: add             lr, x0, #0xc7c
    //     0x22a72c: ldr             lr, [x21, lr, lsl #3]
    //     0x22a730: blr             lr
    // 0x22a734: ldur            x0, [fp, #-0x38]
    // 0x22a738: ldur            x2, [fp, #-0x20]
    // 0x22a73c: b               #0x22a7d4
    // 0x22a740: ldur            x0, [fp, #-0x18]
    // 0x22a744: ldur            x1, [fp, #-0x20]
    // 0x22a748: LoadField: r2 = r1->field_b
    //     0x22a748: ldur            w2, [x1, #0xb]
    // 0x22a74c: DecompressPointer r2
    //     0x22a74c: add             x2, x2, HEAP, lsl #32
    // 0x22a750: LoadField: r3 = r1->field_f
    //     0x22a750: ldur            w3, [x1, #0xf]
    // 0x22a754: DecompressPointer r3
    //     0x22a754: add             x3, x3, HEAP, lsl #32
    // 0x22a758: LoadField: r4 = r3->field_b
    //     0x22a758: ldur            w4, [x3, #0xb]
    // 0x22a75c: DecompressPointer r4
    //     0x22a75c: add             x4, x4, HEAP, lsl #32
    // 0x22a760: r3 = LoadInt32Instr(r2)
    //     0x22a760: sbfx            x3, x2, #1, #0x1f
    // 0x22a764: stur            x3, [fp, #-0x40]
    // 0x22a768: r2 = LoadInt32Instr(r4)
    //     0x22a768: sbfx            x2, x4, #1, #0x1f
    // 0x22a76c: cmp             x3, x2
    // 0x22a770: b.ne            #0x22a77c
    // 0x22a774: str             x1, [SP]
    // 0x22a778: r0 = _growToNextCapacity()
    //     0x22a778: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x22a77c: ldur            x2, [fp, #-0x20]
    // 0x22a780: ldur            x3, [fp, #-0x40]
    // 0x22a784: add             x0, x3, #1
    // 0x22a788: lsl             x1, x0, #1
    // 0x22a78c: StoreField: r2->field_b = r1
    //     0x22a78c: stur            w1, [x2, #0xb]
    // 0x22a790: mov             x1, x3
    // 0x22a794: cmp             x1, x0
    // 0x22a798: b.hs            #0x22a9cc
    // 0x22a79c: LoadField: r1 = r2->field_f
    //     0x22a79c: ldur            w1, [x2, #0xf]
    // 0x22a7a0: DecompressPointer r1
    //     0x22a7a0: add             x1, x1, HEAP, lsl #32
    // 0x22a7a4: ldur            x0, [fp, #-0x30]
    // 0x22a7a8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x22a7a8: add             x25, x1, x3, lsl #2
    //     0x22a7ac: add             x25, x25, #0xf
    //     0x22a7b0: str             w0, [x25]
    //     0x22a7b4: tbz             w0, #0, #0x22a7d0
    //     0x22a7b8: ldurb           w16, [x1, #-1]
    //     0x22a7bc: ldurb           w17, [x0, #-1]
    //     0x22a7c0: and             x16, x17, x16, lsr #2
    //     0x22a7c4: tst             x16, HEAP, lsr #32
    //     0x22a7c8: b.eq            #0x22a7d0
    //     0x22a7cc: bl              #0x3e41ec
    // 0x22a7d0: ldur            x0, [fp, #-0x18]
    // 0x22a7d4: ldur            x5, [fp, #-0x10]
    // 0x22a7d8: mov             x4, x0
    // 0x22a7dc: ldur            x1, [fp, #-8]
    // 0x22a7e0: mov             x3, x2
    // 0x22a7e4: ldur            x2, [fp, #-0x28]
    // 0x22a7e8: b               #0x22a57c
    // 0x22a7ec: ldur            x3, [fp, #-0x10]
    // 0x22a7f0: cmp             w3, NULL
    // 0x22a7f4: b.eq            #0x22a8c8
    // 0x22a7f8: ldur            x4, [fp, #-8]
    // 0x22a7fc: LoadField: r5 = r4->field_b
    //     0x22a7fc: ldur            w5, [x4, #0xb]
    // 0x22a800: DecompressPointer r5
    //     0x22a800: add             x5, x5, HEAP, lsl #32
    // 0x22a804: stur            x5, [fp, #-0x20]
    // 0x22a808: LoadField: r2 = r5->field_7
    //     0x22a808: ldur            w2, [x5, #7]
    // 0x22a80c: DecompressPointer r2
    //     0x22a80c: add             x2, x2, HEAP, lsl #32
    // 0x22a810: mov             x0, x3
    // 0x22a814: r1 = Null
    //     0x22a814: mov             x1, NULL
    // 0x22a818: cmp             w2, NULL
    // 0x22a81c: b.eq            #0x22a83c
    // 0x22a820: LoadField: r4 = r2->field_17
    //     0x22a820: ldur            w4, [x2, #0x17]
    // 0x22a824: DecompressPointer r4
    //     0x22a824: add             x4, x4, HEAP, lsl #32
    // 0x22a828: r8 = X0
    //     0x22a828: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x22a82c: LoadField: r9 = r4->field_7
    //     0x22a82c: ldur            x9, [x4, #7]
    // 0x22a830: r3 = Null
    //     0x22a830: add             x3, PP, #0x14, lsl #12  ; [pp+0x145b0] Null
    //     0x22a834: ldr             x3, [x3, #0x5b0]
    // 0x22a838: blr             x9
    // 0x22a83c: ldur            x0, [fp, #-0x20]
    // 0x22a840: LoadField: r1 = r0->field_b
    //     0x22a840: ldur            w1, [x0, #0xb]
    // 0x22a844: DecompressPointer r1
    //     0x22a844: add             x1, x1, HEAP, lsl #32
    // 0x22a848: LoadField: r2 = r0->field_f
    //     0x22a848: ldur            w2, [x0, #0xf]
    // 0x22a84c: DecompressPointer r2
    //     0x22a84c: add             x2, x2, HEAP, lsl #32
    // 0x22a850: LoadField: r3 = r2->field_b
    //     0x22a850: ldur            w3, [x2, #0xb]
    // 0x22a854: DecompressPointer r3
    //     0x22a854: add             x3, x3, HEAP, lsl #32
    // 0x22a858: r2 = LoadInt32Instr(r1)
    //     0x22a858: sbfx            x2, x1, #1, #0x1f
    // 0x22a85c: stur            x2, [fp, #-0x40]
    // 0x22a860: r1 = LoadInt32Instr(r3)
    //     0x22a860: sbfx            x1, x3, #1, #0x1f
    // 0x22a864: cmp             x2, x1
    // 0x22a868: b.ne            #0x22a874
    // 0x22a86c: str             x0, [SP]
    // 0x22a870: r0 = _growToNextCapacity()
    //     0x22a870: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x22a874: ldur            x2, [fp, #-0x20]
    // 0x22a878: ldur            x3, [fp, #-0x40]
    // 0x22a87c: add             x0, x3, #1
    // 0x22a880: lsl             x1, x0, #1
    // 0x22a884: StoreField: r2->field_b = r1
    //     0x22a884: stur            w1, [x2, #0xb]
    // 0x22a888: mov             x1, x3
    // 0x22a88c: cmp             x1, x0
    // 0x22a890: b.hs            #0x22a9d0
    // 0x22a894: LoadField: r1 = r2->field_f
    //     0x22a894: ldur            w1, [x2, #0xf]
    // 0x22a898: DecompressPointer r1
    //     0x22a898: add             x1, x1, HEAP, lsl #32
    // 0x22a89c: ldur            x0, [fp, #-0x10]
    // 0x22a8a0: ArrayStore: r1[r3] = r0  ; List_4
    //     0x22a8a0: add             x25, x1, x3, lsl #2
    //     0x22a8a4: add             x25, x25, #0xf
    //     0x22a8a8: str             w0, [x25]
    //     0x22a8ac: tbz             w0, #0, #0x22a8c8
    //     0x22a8b0: ldurb           w16, [x1, #-1]
    //     0x22a8b4: ldurb           w17, [x0, #-1]
    //     0x22a8b8: and             x16, x17, x16, lsr #2
    //     0x22a8bc: tst             x16, HEAP, lsr #32
    //     0x22a8c0: b.eq            #0x22a8c8
    //     0x22a8c4: bl              #0x3e41ec
    // 0x22a8c8: ldur            x3, [fp, #-0x18]
    // 0x22a8cc: cmp             w3, NULL
    // 0x22a8d0: b.eq            #0x22a9a4
    // 0x22a8d4: ldur            x4, [fp, #-8]
    // 0x22a8d8: LoadField: r5 = r4->field_b
    //     0x22a8d8: ldur            w5, [x4, #0xb]
    // 0x22a8dc: DecompressPointer r5
    //     0x22a8dc: add             x5, x5, HEAP, lsl #32
    // 0x22a8e0: stur            x5, [fp, #-0x10]
    // 0x22a8e4: LoadField: r2 = r5->field_7
    //     0x22a8e4: ldur            w2, [x5, #7]
    // 0x22a8e8: DecompressPointer r2
    //     0x22a8e8: add             x2, x2, HEAP, lsl #32
    // 0x22a8ec: mov             x0, x3
    // 0x22a8f0: r1 = Null
    //     0x22a8f0: mov             x1, NULL
    // 0x22a8f4: cmp             w2, NULL
    // 0x22a8f8: b.eq            #0x22a918
    // 0x22a8fc: LoadField: r4 = r2->field_17
    //     0x22a8fc: ldur            w4, [x2, #0x17]
    // 0x22a900: DecompressPointer r4
    //     0x22a900: add             x4, x4, HEAP, lsl #32
    // 0x22a904: r8 = X0
    //     0x22a904: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x22a908: LoadField: r9 = r4->field_7
    //     0x22a908: ldur            x9, [x4, #7]
    // 0x22a90c: r3 = Null
    //     0x22a90c: add             x3, PP, #0x14, lsl #12  ; [pp+0x145c0] Null
    //     0x22a910: ldr             x3, [x3, #0x5c0]
    // 0x22a914: blr             x9
    // 0x22a918: ldur            x0, [fp, #-0x10]
    // 0x22a91c: LoadField: r1 = r0->field_b
    //     0x22a91c: ldur            w1, [x0, #0xb]
    // 0x22a920: DecompressPointer r1
    //     0x22a920: add             x1, x1, HEAP, lsl #32
    // 0x22a924: LoadField: r2 = r0->field_f
    //     0x22a924: ldur            w2, [x0, #0xf]
    // 0x22a928: DecompressPointer r2
    //     0x22a928: add             x2, x2, HEAP, lsl #32
    // 0x22a92c: LoadField: r3 = r2->field_b
    //     0x22a92c: ldur            w3, [x2, #0xb]
    // 0x22a930: DecompressPointer r3
    //     0x22a930: add             x3, x3, HEAP, lsl #32
    // 0x22a934: r2 = LoadInt32Instr(r1)
    //     0x22a934: sbfx            x2, x1, #1, #0x1f
    // 0x22a938: stur            x2, [fp, #-0x40]
    // 0x22a93c: r1 = LoadInt32Instr(r3)
    //     0x22a93c: sbfx            x1, x3, #1, #0x1f
    // 0x22a940: cmp             x2, x1
    // 0x22a944: b.ne            #0x22a950
    // 0x22a948: str             x0, [SP]
    // 0x22a94c: r0 = _growToNextCapacity()
    //     0x22a94c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x22a950: ldur            x2, [fp, #-0x10]
    // 0x22a954: ldur            x3, [fp, #-0x40]
    // 0x22a958: add             x0, x3, #1
    // 0x22a95c: lsl             x1, x0, #1
    // 0x22a960: StoreField: r2->field_b = r1
    //     0x22a960: stur            w1, [x2, #0xb]
    // 0x22a964: mov             x1, x3
    // 0x22a968: cmp             x1, x0
    // 0x22a96c: b.hs            #0x22a9d4
    // 0x22a970: LoadField: r1 = r2->field_f
    //     0x22a970: ldur            w1, [x2, #0xf]
    // 0x22a974: DecompressPointer r1
    //     0x22a974: add             x1, x1, HEAP, lsl #32
    // 0x22a978: ldur            x0, [fp, #-0x18]
    // 0x22a97c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x22a97c: add             x25, x1, x3, lsl #2
    //     0x22a980: add             x25, x25, #0xf
    //     0x22a984: str             w0, [x25]
    //     0x22a988: tbz             w0, #0, #0x22a9a4
    //     0x22a98c: ldurb           w16, [x1, #-1]
    //     0x22a990: ldurb           w17, [x0, #-1]
    //     0x22a994: and             x16, x17, x16, lsr #2
    //     0x22a998: tst             x16, HEAP, lsr #32
    //     0x22a99c: b.eq            #0x22a9a4
    //     0x22a9a0: bl              #0x3e41ec
    // 0x22a9a4: ldur            x16, [fp, #-8]
    // 0x22a9a8: str             x16, [SP]
    // 0x22a9ac: r0 = build()
    //     0x22a9ac: bl              #0x22aaa4  ; [package:flutter/src/semantics/semantics.dart] ChildSemanticsConfigurationsResultBuilder::build
    // 0x22a9b0: LeaveFrame
    //     0x22a9b0: mov             SP, fp
    //     0x22a9b4: ldp             fp, lr, [SP], #0x10
    // 0x22a9b8: ret
    //     0x22a9b8: ret             
    // 0x22a9bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22a9bc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22a9c0: b               #0x22a52c
    // 0x22a9c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x22a9c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x22a9c8: b               #0x22a590
    // 0x22a9cc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x22a9cc: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x22a9d0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x22a9d0: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x22a9d4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x22a9d4: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ computeDistanceToActualBaseline(/* No info */) {
    // ** addr: 0x2b3ab8, size: 0x150
    // 0x2b3ab8: EnterFrame
    //     0x2b3ab8: stp             fp, lr, [SP, #-0x10]!
    //     0x2b3abc: mov             fp, SP
    // 0x2b3ac0: AllocStack(0x20)
    //     0x2b3ac0: sub             SP, SP, #0x20
    // 0x2b3ac4: CheckStackOverflow
    //     0x2b3ac4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2b3ac8: cmp             SP, x16
    //     0x2b3acc: b.ls            #0x2b3be8
    // 0x2b3ad0: ldr             x16, [fp, #0x10]
    // 0x2b3ad4: r30 = Instance__DecorationSlot
    //     0x2b3ad4: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x2b3ad8: ldr             lr, [lr, #0x390]
    // 0x2b3adc: stp             lr, x16, [SP]
    // 0x2b3ae0: r0 = childForSlot()
    //     0x2b3ae0: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2b3ae4: cmp             w0, NULL
    // 0x2b3ae8: b.eq            #0x2b3bf0
    // 0x2b3aec: LoadField: r3 = r0->field_7
    //     0x2b3aec: ldur            w3, [x0, #7]
    // 0x2b3af0: DecompressPointer r3
    //     0x2b3af0: add             x3, x3, HEAP, lsl #32
    // 0x2b3af4: stur            x3, [fp, #-8]
    // 0x2b3af8: cmp             w3, NULL
    // 0x2b3afc: b.eq            #0x2b3bf4
    // 0x2b3b00: mov             x0, x3
    // 0x2b3b04: r2 = Null
    //     0x2b3b04: mov             x2, NULL
    // 0x2b3b08: r1 = Null
    //     0x2b3b08: mov             x1, NULL
    // 0x2b3b0c: r4 = LoadClassIdInstr(r0)
    //     0x2b3b0c: ldur            x4, [x0, #-1]
    //     0x2b3b10: ubfx            x4, x4, #0xc, #0x14
    // 0x2b3b14: sub             x4, x4, #0x25f
    // 0x2b3b18: cmp             x4, #9
    // 0x2b3b1c: b.ls            #0x2b3b34
    // 0x2b3b20: r8 = BoxParentData
    //     0x2b3b20: add             x8, PP, #0xa, lsl #12  ; [pp+0xa050] Type: BoxParentData
    //     0x2b3b24: ldr             x8, [x8, #0x50]
    // 0x2b3b28: r3 = Null
    //     0x2b3b28: add             x3, PP, #0x14, lsl #12  ; [pp+0x14e20] Null
    //     0x2b3b2c: ldr             x3, [x3, #0xe20]
    // 0x2b3b30: r0 = DefaultTypeTest()
    //     0x2b3b30: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x2b3b34: ldur            x0, [fp, #-8]
    // 0x2b3b38: LoadField: r1 = r0->field_7
    //     0x2b3b38: ldur            w1, [x0, #7]
    // 0x2b3b3c: DecompressPointer r1
    //     0x2b3b3c: add             x1, x1, HEAP, lsl #32
    // 0x2b3b40: LoadField: d0 = r1->field_f
    //     0x2b3b40: ldur            d0, [x1, #0xf]
    // 0x2b3b44: stur            d0, [fp, #-0x10]
    // 0x2b3b48: ldr             x16, [fp, #0x10]
    // 0x2b3b4c: r30 = Instance__DecorationSlot
    //     0x2b3b4c: add             lr, PP, #0x14, lsl #12  ; [pp+0x14390] Obj!_DecorationSlot@481901
    //     0x2b3b50: ldr             lr, [lr, #0x390]
    // 0x2b3b54: stp             lr, x16, [SP]
    // 0x2b3b58: r0 = childForSlot()
    //     0x2b3b58: bl              #0x1cf26c  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x2b3b5c: cmp             w0, NULL
    // 0x2b3b60: b.ne            #0x2b3b6c
    // 0x2b3b64: r1 = Null
    //     0x2b3b64: mov             x1, NULL
    // 0x2b3b68: b               #0x2b3b90
    // 0x2b3b6c: r1 = LoadClassIdInstr(r0)
    //     0x2b3b6c: ldur            x1, [x0, #-1]
    //     0x2b3b70: ubfx            x1, x1, #0xc, #0x14
    // 0x2b3b74: str             x0, [SP]
    // 0x2b3b78: mov             x0, x1
    // 0x2b3b7c: r0 = GDT[cid_x0 + 0x5509]()
    //     0x2b3b7c: movz            x17, #0x5509
    //     0x2b3b80: add             lr, x0, x17
    //     0x2b3b84: ldr             lr, [x21, lr, lsl #3]
    //     0x2b3b88: blr             lr
    // 0x2b3b8c: mov             x1, x0
    // 0x2b3b90: cmp             w1, NULL
    // 0x2b3b94: b.ne            #0x2b3ba4
    // 0x2b3b98: d1 = 0.000000
    //     0x2b3b98: eor             v1.16b, v1.16b, v1.16b
    // 0x2b3b9c: d1 = 0.000000
    //     0x2b3b9c: eor             v1.16b, v1.16b, v1.16b
    // 0x2b3ba0: b               #0x2b3bac
    // 0x2b3ba4: LoadField: d0 = r1->field_7
    //     0x2b3ba4: ldur            d0, [x1, #7]
    // 0x2b3ba8: mov             v1.16b, v0.16b
    // 0x2b3bac: ldur            d0, [fp, #-0x10]
    // 0x2b3bb0: fadd            d2, d0, d1
    // 0x2b3bb4: r0 = inline_Allocate_Double()
    //     0x2b3bb4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x2b3bb8: add             x0, x0, #0x10
    //     0x2b3bbc: cmp             x1, x0
    //     0x2b3bc0: b.ls            #0x2b3bf8
    //     0x2b3bc4: str             x0, [THR, #0x50]  ; THR::top
    //     0x2b3bc8: sub             x0, x0, #0xf
    //     0x2b3bcc: movz            x1, #0xd148
    //     0x2b3bd0: movk            x1, #0x3, lsl #16
    //     0x2b3bd4: stur            x1, [x0, #-1]
    // 0x2b3bd8: StoreField: r0->field_7 = d2
    //     0x2b3bd8: stur            d2, [x0, #7]
    // 0x2b3bdc: LeaveFrame
    //     0x2b3bdc: mov             SP, fp
    //     0x2b3be0: ldp             fp, lr, [SP], #0x10
    // 0x2b3be4: ret
    //     0x2b3be4: ret             
    // 0x2b3be8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2b3be8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2b3bec: b               #0x2b3ad0
    // 0x2b3bf0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2b3bf0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2b3bf4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2b3bf4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2b3bf8: SaveReg d2
    //     0x2b3bf8: str             q2, [SP, #-0x10]!
    // 0x2b3bfc: r0 = AllocateDouble()
    //     0x2b3bfc: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x2b3c00: RestoreReg d2
    //     0x2b3c00: ldr             q2, [SP], #0x10
    // 0x2b3c04: b               #0x2b3bd8
  }
  set _ textBaseline=(/* No info */) {
    // ** addr: 0x2f46dc, size: 0x80
    // 0x2f46dc: EnterFrame
    //     0x2f46dc: stp             fp, lr, [SP, #-0x10]!
    //     0x2f46e0: mov             fp, SP
    // 0x2f46e4: AllocStack(0x8)
    //     0x2f46e4: sub             SP, SP, #8
    // 0x2f46e8: CheckStackOverflow
    //     0x2f46e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2f46ec: cmp             SP, x16
    //     0x2f46f0: b.ls            #0x2f4754
    // 0x2f46f4: ldr             x1, [fp, #0x18]
    // 0x2f46f8: LoadField: r0 = r1->field_6b
    //     0x2f46f8: ldur            w0, [x1, #0x6b]
    // 0x2f46fc: DecompressPointer r0
    //     0x2f46fc: add             x0, x0, HEAP, lsl #32
    // 0x2f4700: ldr             x2, [fp, #0x10]
    // 0x2f4704: cmp             w0, w2
    // 0x2f4708: b.ne            #0x2f471c
    // 0x2f470c: r0 = Null
    //     0x2f470c: mov             x0, NULL
    // 0x2f4710: LeaveFrame
    //     0x2f4710: mov             SP, fp
    //     0x2f4714: ldp             fp, lr, [SP], #0x10
    // 0x2f4718: ret
    //     0x2f4718: ret             
    // 0x2f471c: mov             x0, x2
    // 0x2f4720: StoreField: r1->field_6b = r0
    //     0x2f4720: stur            w0, [x1, #0x6b]
    //     0x2f4724: ldurb           w16, [x1, #-1]
    //     0x2f4728: ldurb           w17, [x0, #-1]
    //     0x2f472c: and             x16, x17, x16, lsr #2
    //     0x2f4730: tst             x16, HEAP, lsr #32
    //     0x2f4734: b.eq            #0x2f473c
    //     0x2f4738: bl              #0x3e4608
    // 0x2f473c: str             x1, [SP]
    // 0x2f4740: r0 = markNeedsLayout()
    //     0x2f4740: bl              #0x32e9c8  ; [package:flutter/src/rendering/box.dart] RenderBox::markNeedsLayout
    // 0x2f4744: r0 = Null
    //     0x2f4744: mov             x0, NULL
    // 0x2f4748: LeaveFrame
    //     0x2f4748: mov             SP, fp
    //     0x2f474c: ldp             fp, lr, [SP], #0x10
    // 0x2f4750: ret
    //     0x2f4750: ret             
    // 0x2f4754: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2f4754: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2f4758: b               #0x2f46f4
  }
  set _ isFocused=(/* No info */) {
    // ** addr: 0x2f475c, size: 0x64
    // 0x2f475c: EnterFrame
    //     0x2f475c: stp             fp, lr, [SP, #-0x10]!
    //     0x2f4760: mov             fp, SP
    // 0x2f4764: AllocStack(0x8)
    //     0x2f4764: sub             SP, SP, #8
    // 0x2f4768: CheckStackOverflow
    //     0x2f4768: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2f476c: cmp             SP, x16
    //     0x2f4770: b.ls            #0x2f47b8
    // 0x2f4774: ldr             x0, [fp, #0x18]
    // 0x2f4778: LoadField: r1 = r0->field_73
    //     0x2f4778: ldur            w1, [x0, #0x73]
    // 0x2f477c: DecompressPointer r1
    //     0x2f477c: add             x1, x1, HEAP, lsl #32
    // 0x2f4780: ldr             x2, [fp, #0x10]
    // 0x2f4784: cmp             w1, w2
    // 0x2f4788: b.ne            #0x2f479c
    // 0x2f478c: r0 = Null
    //     0x2f478c: mov             x0, NULL
    // 0x2f4790: LeaveFrame
    //     0x2f4790: mov             SP, fp
    //     0x2f4794: ldp             fp, lr, [SP], #0x10
    // 0x2f4798: ret
    //     0x2f4798: ret             
    // 0x2f479c: StoreField: r0->field_73 = r2
    //     0x2f479c: stur            w2, [x0, #0x73]
    // 0x2f47a0: str             x0, [SP]
    // 0x2f47a4: r0 = markNeedsSemanticsUpdate()
    //     0x2f47a4: bl              #0x20b538  ; [package:flutter/src/rendering/object.dart] RenderObject::markNeedsSemanticsUpdate
    // 0x2f47a8: r0 = Null
    //     0x2f47a8: mov             x0, NULL
    // 0x2f47ac: LeaveFrame
    //     0x2f47ac: mov             SP, fp
    //     0x2f47b0: ldp             fp, lr, [SP], #0x10
    // 0x2f47b4: ret
    //     0x2f47b4: ret             
    // 0x2f47b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2f47b8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2f47bc: b               #0x2f4774
  }
  set _ decoration=(/* No info */) {
    // ** addr: 0x2f47c0, size: 0x88
    // 0x2f47c0: EnterFrame
    //     0x2f47c0: stp             fp, lr, [SP, #-0x10]!
    //     0x2f47c4: mov             fp, SP
    // 0x2f47c8: AllocStack(0x10)
    //     0x2f47c8: sub             SP, SP, #0x10
    // 0x2f47cc: CheckStackOverflow
    //     0x2f47cc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2f47d0: cmp             SP, x16
    //     0x2f47d4: b.ls            #0x2f4840
    // 0x2f47d8: ldr             x0, [fp, #0x18]
    // 0x2f47dc: LoadField: r1 = r0->field_63
    //     0x2f47dc: ldur            w1, [x0, #0x63]
    // 0x2f47e0: DecompressPointer r1
    //     0x2f47e0: add             x1, x1, HEAP, lsl #32
    // 0x2f47e4: ldr             x16, [fp, #0x10]
    // 0x2f47e8: stp             x16, x1, [SP]
    // 0x2f47ec: r0 = ==()
    //     0x2f47ec: bl              #0x365168  ; [package:flutter/src/material/input_decorator.dart] _Decoration::==
    // 0x2f47f0: tbnz            w0, #4, #0x2f4804
    // 0x2f47f4: r0 = Null
    //     0x2f47f4: mov             x0, NULL
    // 0x2f47f8: LeaveFrame
    //     0x2f47f8: mov             SP, fp
    //     0x2f47fc: ldp             fp, lr, [SP], #0x10
    // 0x2f4800: ret
    //     0x2f4800: ret             
    // 0x2f4804: ldr             x1, [fp, #0x18]
    // 0x2f4808: ldr             x0, [fp, #0x10]
    // 0x2f480c: StoreField: r1->field_63 = r0
    //     0x2f480c: stur            w0, [x1, #0x63]
    //     0x2f4810: ldurb           w16, [x1, #-1]
    //     0x2f4814: ldurb           w17, [x0, #-1]
    //     0x2f4818: and             x16, x17, x16, lsr #2
    //     0x2f481c: tst             x16, HEAP, lsr #32
    //     0x2f4820: b.eq            #0x2f4828
    //     0x2f4824: bl              #0x3e4608
    // 0x2f4828: str             x1, [SP]
    // 0x2f482c: r0 = markNeedsLayout()
    //     0x2f482c: bl              #0x32e9c8  ; [package:flutter/src/rendering/box.dart] RenderBox::markNeedsLayout
    // 0x2f4830: r0 = Null
    //     0x2f4830: mov             x0, NULL
    // 0x2f4834: LeaveFrame
    //     0x2f4834: mov             SP, fp
    //     0x2f4838: ldp             fp, lr, [SP], #0x10
    // 0x2f483c: ret
    //     0x2f483c: ret             
    // 0x2f4840: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2f4840: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2f4844: b               #0x2f47d8
  }
  _ _RenderDecoration(/* No info */) {
    // ** addr: 0x30e72c, size: 0xd0
    // 0x30e72c: EnterFrame
    //     0x30e72c: stp             fp, lr, [SP, #-0x10]!
    //     0x30e730: mov             fp, SP
    // 0x30e734: AllocStack(0x10)
    //     0x30e734: sub             SP, SP, #0x10
    // 0x30e738: r2 = Instance_TextDirection
    //     0x30e738: ldr             x2, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x30e73c: r1 = false
    //     0x30e73c: add             x1, NULL, #0x30  ; false
    // 0x30e740: CheckStackOverflow
    //     0x30e740: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x30e744: cmp             SP, x16
    //     0x30e748: b.ls            #0x30e7f4
    // 0x30e74c: ldr             x0, [fp, #0x28]
    // 0x30e750: ldr             x3, [fp, #0x30]
    // 0x30e754: StoreField: r3->field_63 = r0
    //     0x30e754: stur            w0, [x3, #0x63]
    //     0x30e758: ldurb           w16, [x3, #-1]
    //     0x30e75c: ldurb           w17, [x0, #-1]
    //     0x30e760: and             x16, x17, x16, lsr #2
    //     0x30e764: tst             x16, HEAP, lsr #32
    //     0x30e768: b.eq            #0x30e770
    //     0x30e76c: bl              #0x3e4648
    // 0x30e770: StoreField: r3->field_67 = r2
    //     0x30e770: stur            w2, [x3, #0x67]
    // 0x30e774: ldr             x0, [fp, #0x10]
    // 0x30e778: StoreField: r3->field_6b = r0
    //     0x30e778: stur            w0, [x3, #0x6b]
    //     0x30e77c: ldurb           w16, [x3, #-1]
    //     0x30e780: ldurb           w17, [x0, #-1]
    //     0x30e784: and             x16, x17, x16, lsr #2
    //     0x30e788: tst             x16, HEAP, lsr #32
    //     0x30e78c: b.eq            #0x30e794
    //     0x30e790: bl              #0x3e4648
    // 0x30e794: ldr             x0, [fp, #0x20]
    // 0x30e798: StoreField: r3->field_73 = r0
    //     0x30e798: stur            w0, [x3, #0x73]
    // 0x30e79c: StoreField: r3->field_77 = r1
    //     0x30e79c: stur            w1, [x3, #0x77]
    // 0x30e7a0: ldr             x0, [fp, #0x18]
    // 0x30e7a4: StoreField: r3->field_7b = r0
    //     0x30e7a4: stur            w0, [x3, #0x7b]
    // 0x30e7a8: r16 = <_DecorationSlot, RenderBox>
    //     0x30e7a8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b80] TypeArguments: <_DecorationSlot, RenderBox>
    //     0x30e7ac: ldr             x16, [x16, #0xb80]
    // 0x30e7b0: ldr             lr, [THR, #0x88]  ; THR::empty_array
    // 0x30e7b4: stp             lr, x16, [SP]
    // 0x30e7b8: r0 = Map._fromLiteral()
    //     0x30e7b8: bl              #0x18fe4c  ; [dart:core] Map::Map._fromLiteral
    // 0x30e7bc: ldr             x1, [fp, #0x30]
    // 0x30e7c0: StoreField: r1->field_5f = r0
    //     0x30e7c0: stur            w0, [x1, #0x5f]
    //     0x30e7c4: ldurb           w16, [x1, #-1]
    //     0x30e7c8: ldurb           w17, [x0, #-1]
    //     0x30e7cc: and             x16, x17, x16, lsr #2
    //     0x30e7d0: tst             x16, HEAP, lsr #32
    //     0x30e7d4: b.eq            #0x30e7dc
    //     0x30e7d8: bl              #0x3e4608
    // 0x30e7dc: str             x1, [SP]
    // 0x30e7e0: r0 = RenderObject()
    //     0x30e7e0: bl              #0x2f67b0  ; [package:flutter/src/rendering/object.dart] RenderObject::RenderObject
    // 0x30e7e4: r0 = Null
    //     0x30e7e4: mov             x0, NULL
    // 0x30e7e8: LeaveFrame
    //     0x30e7e8: mov             SP, fp
    //     0x30e7ec: ldp             fp, lr, [SP], #0x10
    // 0x30e7f0: ret
    //     0x30e7f0: ret             
    // 0x30e7f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x30e7f4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x30e7f8: b               #0x30e74c
  }
}

// class id: 727, size: 0xd8, field offset: 0x8
//   const constructor, 
class InputDecoration extends Object {

  _ applyDefaults(/* No info */) {
    // ** addr: 0x2682ac, size: 0xf8
    // 0x2682ac: EnterFrame
    //     0x2682ac: stp             fp, lr, [SP, #-0x10]!
    //     0x2682b0: mov             fp, SP
    // 0x2682b4: AllocStack(0x48)
    //     0x2682b4: sub             SP, SP, #0x48
    // 0x2682b8: CheckStackOverflow
    //     0x2682b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2682bc: cmp             SP, x16
    //     0x2682c0: b.ls            #0x26839c
    // 0x2682c4: ldr             x0, [fp, #0x10]
    // 0x2682c8: LoadField: r1 = r0->field_4f
    //     0x2682c8: ldur            w1, [x0, #0x4f]
    // 0x2682cc: DecompressPointer r1
    //     0x2682cc: add             x1, x1, HEAP, lsl #32
    // 0x2682d0: cmp             w1, NULL
    // 0x2682d4: b.ne            #0x2682e0
    // 0x2682d8: r1 = Instance_FloatingLabelBehavior
    //     0x2682d8: add             x1, PP, #0xa, lsl #12  ; [pp+0xad60] Obj!FloatingLabelBehavior@481a01
    //     0x2682dc: ldr             x1, [x1, #0xd60]
    // 0x2682e0: LoadField: r2 = r0->field_53
    //     0x2682e0: ldur            w2, [x0, #0x53]
    // 0x2682e4: DecompressPointer r2
    //     0x2682e4: add             x2, x2, HEAP, lsl #32
    // 0x2682e8: cmp             w2, NULL
    // 0x2682ec: b.ne            #0x2682f8
    // 0x2682f0: r2 = Instance_FloatingLabelAlignment
    //     0x2682f0: add             x2, PP, #0xa, lsl #12  ; [pp+0xad68] Obj!FloatingLabelAlignment@473731
    //     0x2682f4: ldr             x2, [x2, #0xd68]
    // 0x2682f8: LoadField: r3 = r0->field_57
    //     0x2682f8: ldur            w3, [x0, #0x57]
    // 0x2682fc: DecompressPointer r3
    //     0x2682fc: add             x3, x3, HEAP, lsl #32
    // 0x268300: cmp             w3, NULL
    // 0x268304: b.ne            #0x26830c
    // 0x268308: r3 = false
    //     0x268308: add             x3, NULL, #0x30  ; false
    // 0x26830c: LoadField: r4 = r0->field_5f
    //     0x26830c: ldur            w4, [x0, #0x5f]
    // 0x268310: DecompressPointer r4
    //     0x268310: add             x4, x4, HEAP, lsl #32
    // 0x268314: cmp             w4, NULL
    // 0x268318: b.ne            #0x268320
    // 0x26831c: r4 = false
    //     0x26831c: add             x4, NULL, #0x30  ; false
    // 0x268320: LoadField: r5 = r0->field_9f
    //     0x268320: ldur            w5, [x0, #0x9f]
    // 0x268324: DecompressPointer r5
    //     0x268324: add             x5, x5, HEAP, lsl #32
    // 0x268328: cmp             w5, NULL
    // 0x26832c: b.ne            #0x268334
    // 0x268330: r5 = false
    //     0x268330: add             x5, NULL, #0x30  ; false
    // 0x268334: LoadField: r6 = r0->field_a3
    //     0x268334: ldur            w6, [x0, #0xa3]
    // 0x268338: DecompressPointer r6
    //     0x268338: add             x6, x6, HEAP, lsl #32
    // 0x26833c: cmp             w6, NULL
    // 0x268340: b.ne            #0x268348
    // 0x268344: r6 = Null
    //     0x268344: mov             x6, NULL
    // 0x268348: LoadField: r7 = r0->field_c3
    //     0x268348: ldur            w7, [x0, #0xc3]
    // 0x26834c: DecompressPointer r7
    //     0x26834c: add             x7, x7, HEAP, lsl #32
    // 0x268350: cmp             w7, NULL
    // 0x268354: b.ne            #0x26835c
    // 0x268358: r7 = Null
    //     0x268358: mov             x7, NULL
    // 0x26835c: LoadField: r8 = r0->field_cf
    //     0x26835c: ldur            w8, [x0, #0xcf]
    // 0x268360: DecompressPointer r8
    //     0x268360: add             x8, x8, HEAP, lsl #32
    // 0x268364: cmp             w8, NULL
    // 0x268368: b.ne            #0x268370
    // 0x26836c: r8 = false
    //     0x26836c: add             x8, NULL, #0x30  ; false
    // 0x268370: stp             x1, x0, [SP, #0x38]
    // 0x268374: stp             x3, x2, [SP, #0x28]
    // 0x268378: stp             x5, x4, [SP, #0x18]
    // 0x26837c: stp             x7, x6, [SP, #8]
    // 0x268380: str             x8, [SP]
    // 0x268384: r4 = const [0, 0x9, 0x9, 0x1, alignLabelWithHint, 0x8, border, 0x7, fillColor, 0x6, filled, 0x5, floatingLabelAlignment, 0x2, floatingLabelBehavior, 0x1, isCollapsed, 0x4, isDense, 0x3, null]
    //     0x268384: add             x4, PP, #0xd, lsl #12  ; [pp+0xdeb0] List(21) [0, 0x9, 0x9, 0x1, "alignLabelWithHint", 0x8, "border", 0x7, "fillColor", 0x6, "filled", 0x5, "floatingLabelAlignment", 0x2, "floatingLabelBehavior", 0x1, "isCollapsed", 0x4, "isDense", 0x3, Null]
    //     0x268388: ldr             x4, [x4, #0xeb0]
    // 0x26838c: r0 = copyWith()
    //     0x26838c: bl              #0x2683a4  ; [package:flutter/src/material/input_decorator.dart] InputDecoration::copyWith
    // 0x268390: LeaveFrame
    //     0x268390: mov             SP, fp
    //     0x268394: ldp             fp, lr, [SP], #0x10
    // 0x268398: ret
    //     0x268398: ret             
    // 0x26839c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26839c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2683a0: b               #0x2682c4
  }
  _ copyWith(/* No info */) {
    // ** addr: 0x2683a4, size: 0x4ac
    // 0x2683a4: EnterFrame
    //     0x2683a4: stp             fp, lr, [SP, #-0x10]!
    //     0x2683a8: mov             fp, SP
    // 0x2683ac: AllocStack(0x50)
    //     0x2683ac: sub             SP, SP, #0x50
    // 0x2683b0: SetupParameters(InputDecoration this /* r3 */, {dynamic alignLabelWithHint = Null /* r4 */, dynamic border = Null /* r5 */, dynamic enabled, dynamic fillColor = Null /* r6 */, dynamic filled = Null /* r7 */, dynamic floatingLabelAlignment = Null /* r8 */, dynamic floatingLabelBehavior = Null /* r9 */, dynamic hintMaxLines = Null /* r10 */, dynamic isCollapsed = Null /* r11 */, dynamic isDense = Null /* r0 */})
    //     0x2683b0: mov             x0, x4
    //     0x2683b4: ldur            w1, [x0, #0x13]
    //     0x2683b8: add             x1, x1, HEAP, lsl #32
    //     0x2683bc: sub             x2, x1, #2
    //     0x2683c0: add             x3, fp, w2, sxtw #2
    //     0x2683c4: ldr             x3, [x3, #0x10]
    //     0x2683c8: ldur            w2, [x0, #0x1f]
    //     0x2683cc: add             x2, x2, HEAP, lsl #32
    //     0x2683d0: add             x16, PP, #0xd, lsl #12  ; [pp+0xde68] "alignLabelWithHint"
    //     0x2683d4: ldr             x16, [x16, #0xe68]
    //     0x2683d8: cmp             w2, w16
    //     0x2683dc: b.ne            #0x268400
    //     0x2683e0: ldur            w2, [x0, #0x23]
    //     0x2683e4: add             x2, x2, HEAP, lsl #32
    //     0x2683e8: sub             w4, w1, w2
    //     0x2683ec: add             x2, fp, w4, sxtw #2
    //     0x2683f0: ldr             x2, [x2, #8]
    //     0x2683f4: mov             x4, x2
    //     0x2683f8: movz            x2, #0x1
    //     0x2683fc: b               #0x268408
    //     0x268400: mov             x4, NULL
    //     0x268404: movz            x2, #0
    //     0x268408: lsl             x5, x2, #1
    //     0x26840c: lsl             w6, w5, #1
    //     0x268410: add             w7, w6, #8
    //     0x268414: add             x16, x0, w7, sxtw #1
    //     0x268418: ldur            w8, [x16, #0xf]
    //     0x26841c: add             x8, x8, HEAP, lsl #32
    //     0x268420: add             x16, PP, #0xd, lsl #12  ; [pp+0xde70] "border"
    //     0x268424: ldr             x16, [x16, #0xe70]
    //     0x268428: cmp             w8, w16
    //     0x26842c: b.ne            #0x268460
    //     0x268430: add             w2, w6, #0xa
    //     0x268434: add             x16, x0, w2, sxtw #1
    //     0x268438: ldur            w6, [x16, #0xf]
    //     0x26843c: add             x6, x6, HEAP, lsl #32
    //     0x268440: sub             w2, w1, w6
    //     0x268444: add             x6, fp, w2, sxtw #2
    //     0x268448: ldr             x6, [x6, #8]
    //     0x26844c: add             w2, w5, #2
    //     0x268450: sbfx            x5, x2, #1, #0x1f
    //     0x268454: mov             x2, x5
    //     0x268458: mov             x5, x6
    //     0x26845c: b               #0x268464
    //     0x268460: mov             x5, NULL
    //     0x268464: lsl             x6, x2, #1
    //     0x268468: lsl             w7, w6, #1
    //     0x26846c: add             w8, w7, #8
    //     0x268470: add             x16, x0, w8, sxtw #1
    //     0x268474: ldur            w7, [x16, #0xf]
    //     0x268478: add             x7, x7, HEAP, lsl #32
    //     0x26847c: ldr             x16, [PP, #0x4720]  ; [pp+0x4720] "enabled"
    //     0x268480: cmp             w7, w16
    //     0x268484: b.ne            #0x268494
    //     0x268488: add             w2, w6, #2
    //     0x26848c: sbfx            x6, x2, #1, #0x1f
    //     0x268490: mov             x2, x6
    //     0x268494: lsl             x6, x2, #1
    //     0x268498: lsl             w7, w6, #1
    //     0x26849c: add             w8, w7, #8
    //     0x2684a0: add             x16, x0, w8, sxtw #1
    //     0x2684a4: ldur            w9, [x16, #0xf]
    //     0x2684a8: add             x9, x9, HEAP, lsl #32
    //     0x2684ac: add             x16, PP, #0xd, lsl #12  ; [pp+0xde78] "fillColor"
    //     0x2684b0: ldr             x16, [x16, #0xe78]
    //     0x2684b4: cmp             w9, w16
    //     0x2684b8: b.ne            #0x2684ec
    //     0x2684bc: add             w2, w7, #0xa
    //     0x2684c0: add             x16, x0, w2, sxtw #1
    //     0x2684c4: ldur            w7, [x16, #0xf]
    //     0x2684c8: add             x7, x7, HEAP, lsl #32
    //     0x2684cc: sub             w2, w1, w7
    //     0x2684d0: add             x7, fp, w2, sxtw #2
    //     0x2684d4: ldr             x7, [x7, #8]
    //     0x2684d8: add             w2, w6, #2
    //     0x2684dc: sbfx            x6, x2, #1, #0x1f
    //     0x2684e0: mov             x2, x6
    //     0x2684e4: mov             x6, x7
    //     0x2684e8: b               #0x2684f0
    //     0x2684ec: mov             x6, NULL
    //     0x2684f0: lsl             x7, x2, #1
    //     0x2684f4: lsl             w8, w7, #1
    //     0x2684f8: add             w9, w8, #8
    //     0x2684fc: add             x16, x0, w9, sxtw #1
    //     0x268500: ldur            w10, [x16, #0xf]
    //     0x268504: add             x10, x10, HEAP, lsl #32
    //     0x268508: add             x16, PP, #0xd, lsl #12  ; [pp+0xde80] "filled"
    //     0x26850c: ldr             x16, [x16, #0xe80]
    //     0x268510: cmp             w10, w16
    //     0x268514: b.ne            #0x268548
    //     0x268518: add             w2, w8, #0xa
    //     0x26851c: add             x16, x0, w2, sxtw #1
    //     0x268520: ldur            w8, [x16, #0xf]
    //     0x268524: add             x8, x8, HEAP, lsl #32
    //     0x268528: sub             w2, w1, w8
    //     0x26852c: add             x8, fp, w2, sxtw #2
    //     0x268530: ldr             x8, [x8, #8]
    //     0x268534: add             w2, w7, #2
    //     0x268538: sbfx            x7, x2, #1, #0x1f
    //     0x26853c: mov             x2, x7
    //     0x268540: mov             x7, x8
    //     0x268544: b               #0x26854c
    //     0x268548: mov             x7, NULL
    //     0x26854c: lsl             x8, x2, #1
    //     0x268550: lsl             w9, w8, #1
    //     0x268554: add             w10, w9, #8
    //     0x268558: add             x16, x0, w10, sxtw #1
    //     0x26855c: ldur            w11, [x16, #0xf]
    //     0x268560: add             x11, x11, HEAP, lsl #32
    //     0x268564: add             x16, PP, #0xd, lsl #12  ; [pp+0xde88] "floatingLabelAlignment"
    //     0x268568: ldr             x16, [x16, #0xe88]
    //     0x26856c: cmp             w11, w16
    //     0x268570: b.ne            #0x2685a4
    //     0x268574: add             w2, w9, #0xa
    //     0x268578: add             x16, x0, w2, sxtw #1
    //     0x26857c: ldur            w9, [x16, #0xf]
    //     0x268580: add             x9, x9, HEAP, lsl #32
    //     0x268584: sub             w2, w1, w9
    //     0x268588: add             x9, fp, w2, sxtw #2
    //     0x26858c: ldr             x9, [x9, #8]
    //     0x268590: add             w2, w8, #2
    //     0x268594: sbfx            x8, x2, #1, #0x1f
    //     0x268598: mov             x2, x8
    //     0x26859c: mov             x8, x9
    //     0x2685a0: b               #0x2685a8
    //     0x2685a4: mov             x8, NULL
    //     0x2685a8: lsl             x9, x2, #1
    //     0x2685ac: lsl             w10, w9, #1
    //     0x2685b0: add             w11, w10, #8
    //     0x2685b4: add             x16, x0, w11, sxtw #1
    //     0x2685b8: ldur            w12, [x16, #0xf]
    //     0x2685bc: add             x12, x12, HEAP, lsl #32
    //     0x2685c0: add             x16, PP, #0xd, lsl #12  ; [pp+0xde90] "floatingLabelBehavior"
    //     0x2685c4: ldr             x16, [x16, #0xe90]
    //     0x2685c8: cmp             w12, w16
    //     0x2685cc: b.ne            #0x268600
    //     0x2685d0: add             w2, w10, #0xa
    //     0x2685d4: add             x16, x0, w2, sxtw #1
    //     0x2685d8: ldur            w10, [x16, #0xf]
    //     0x2685dc: add             x10, x10, HEAP, lsl #32
    //     0x2685e0: sub             w2, w1, w10
    //     0x2685e4: add             x10, fp, w2, sxtw #2
    //     0x2685e8: ldr             x10, [x10, #8]
    //     0x2685ec: add             w2, w9, #2
    //     0x2685f0: sbfx            x9, x2, #1, #0x1f
    //     0x2685f4: mov             x2, x9
    //     0x2685f8: mov             x9, x10
    //     0x2685fc: b               #0x268604
    //     0x268600: mov             x9, NULL
    //     0x268604: lsl             x10, x2, #1
    //     0x268608: lsl             w11, w10, #1
    //     0x26860c: add             w12, w11, #8
    //     0x268610: add             x16, x0, w12, sxtw #1
    //     0x268614: ldur            w13, [x16, #0xf]
    //     0x268618: add             x13, x13, HEAP, lsl #32
    //     0x26861c: add             x16, PP, #0xd, lsl #12  ; [pp+0xde98] "hintMaxLines"
    //     0x268620: ldr             x16, [x16, #0xe98]
    //     0x268624: cmp             w13, w16
    //     0x268628: b.ne            #0x26865c
    //     0x26862c: add             w2, w11, #0xa
    //     0x268630: add             x16, x0, w2, sxtw #1
    //     0x268634: ldur            w11, [x16, #0xf]
    //     0x268638: add             x11, x11, HEAP, lsl #32
    //     0x26863c: sub             w2, w1, w11
    //     0x268640: add             x11, fp, w2, sxtw #2
    //     0x268644: ldr             x11, [x11, #8]
    //     0x268648: add             w2, w10, #2
    //     0x26864c: sbfx            x10, x2, #1, #0x1f
    //     0x268650: mov             x2, x10
    //     0x268654: mov             x10, x11
    //     0x268658: b               #0x268660
    //     0x26865c: mov             x10, NULL
    //     0x268660: lsl             x11, x2, #1
    //     0x268664: lsl             w12, w11, #1
    //     0x268668: add             w13, w12, #8
    //     0x26866c: add             x16, x0, w13, sxtw #1
    //     0x268670: ldur            w14, [x16, #0xf]
    //     0x268674: add             x14, x14, HEAP, lsl #32
    //     0x268678: add             x16, PP, #0xd, lsl #12  ; [pp+0xdea0] "isCollapsed"
    //     0x26867c: ldr             x16, [x16, #0xea0]
    //     0x268680: cmp             w14, w16
    //     0x268684: b.ne            #0x2686b8
    //     0x268688: add             w2, w12, #0xa
    //     0x26868c: add             x16, x0, w2, sxtw #1
    //     0x268690: ldur            w12, [x16, #0xf]
    //     0x268694: add             x12, x12, HEAP, lsl #32
    //     0x268698: sub             w2, w1, w12
    //     0x26869c: add             x12, fp, w2, sxtw #2
    //     0x2686a0: ldr             x12, [x12, #8]
    //     0x2686a4: add             w2, w11, #2
    //     0x2686a8: sbfx            x11, x2, #1, #0x1f
    //     0x2686ac: mov             x2, x11
    //     0x2686b0: mov             x11, x12
    //     0x2686b4: b               #0x2686bc
    //     0x2686b8: mov             x11, NULL
    //     0x2686bc: lsl             x12, x2, #1
    //     0x2686c0: lsl             w2, w12, #1
    //     0x2686c4: add             w12, w2, #8
    //     0x2686c8: add             x16, x0, w12, sxtw #1
    //     0x2686cc: ldur            w13, [x16, #0xf]
    //     0x2686d0: add             x13, x13, HEAP, lsl #32
    //     0x2686d4: add             x16, PP, #0xd, lsl #12  ; [pp+0xdea8] "isDense"
    //     0x2686d8: ldr             x16, [x16, #0xea8]
    //     0x2686dc: cmp             w13, w16
    //     0x2686e0: b.ne            #0x268708
    //     0x2686e4: add             w12, w2, #0xa
    //     0x2686e8: add             x16, x0, w12, sxtw #1
    //     0x2686ec: ldur            w2, [x16, #0xf]
    //     0x2686f0: add             x2, x2, HEAP, lsl #32
    //     0x2686f4: sub             w0, w1, w2
    //     0x2686f8: add             x1, fp, w0, sxtw #2
    //     0x2686fc: ldr             x1, [x1, #8]
    //     0x268700: mov             x0, x1
    //     0x268704: b               #0x26870c
    //     0x268708: mov             x0, NULL
    // 0x26870c: LoadField: r1 = r3->field_13
    //     0x26870c: ldur            w1, [x3, #0x13]
    // 0x268710: DecompressPointer r1
    //     0x268710: add             x1, x1, HEAP, lsl #32
    // 0x268714: stur            x1, [fp, #-0x50]
    // 0x268718: cmp             w10, NULL
    // 0x26871c: b.ne            #0x26872c
    // 0x268720: LoadField: r2 = r3->field_37
    //     0x268720: ldur            w2, [x3, #0x37]
    // 0x268724: DecompressPointer r2
    //     0x268724: add             x2, x2, HEAP, lsl #32
    // 0x268728: b               #0x268730
    // 0x26872c: mov             x2, x10
    // 0x268730: stur            x2, [fp, #-0x48]
    // 0x268734: cmp             w9, NULL
    // 0x268738: b.ne            #0x268744
    // 0x26873c: LoadField: r9 = r3->field_4f
    //     0x26873c: ldur            w9, [x3, #0x4f]
    // 0x268740: DecompressPointer r9
    //     0x268740: add             x9, x9, HEAP, lsl #32
    // 0x268744: stur            x9, [fp, #-0x40]
    // 0x268748: cmp             w8, NULL
    // 0x26874c: b.ne            #0x268758
    // 0x268750: LoadField: r8 = r3->field_53
    //     0x268750: ldur            w8, [x3, #0x53]
    // 0x268754: DecompressPointer r8
    //     0x268754: add             x8, x8, HEAP, lsl #32
    // 0x268758: stur            x8, [fp, #-0x38]
    // 0x26875c: cmp             w11, NULL
    // 0x268760: b.ne            #0x268770
    // 0x268764: LoadField: r10 = r3->field_5f
    //     0x268764: ldur            w10, [x3, #0x5f]
    // 0x268768: DecompressPointer r10
    //     0x268768: add             x10, x10, HEAP, lsl #32
    // 0x26876c: b               #0x268774
    // 0x268770: mov             x10, x11
    // 0x268774: stur            x10, [fp, #-0x30]
    // 0x268778: cmp             w0, NULL
    // 0x26877c: b.ne            #0x268788
    // 0x268780: LoadField: r0 = r3->field_57
    //     0x268780: ldur            w0, [x3, #0x57]
    // 0x268784: DecompressPointer r0
    //     0x268784: add             x0, x0, HEAP, lsl #32
    // 0x268788: stur            x0, [fp, #-0x28]
    // 0x26878c: cmp             w7, NULL
    // 0x268790: b.ne            #0x26879c
    // 0x268794: LoadField: r7 = r3->field_9f
    //     0x268794: ldur            w7, [x3, #0x9f]
    // 0x268798: DecompressPointer r7
    //     0x268798: add             x7, x7, HEAP, lsl #32
    // 0x26879c: stur            x7, [fp, #-0x20]
    // 0x2687a0: cmp             w6, NULL
    // 0x2687a4: b.ne            #0x2687b0
    // 0x2687a8: LoadField: r6 = r3->field_a3
    //     0x2687a8: ldur            w6, [x3, #0xa3]
    // 0x2687ac: DecompressPointer r6
    //     0x2687ac: add             x6, x6, HEAP, lsl #32
    // 0x2687b0: stur            x6, [fp, #-0x18]
    // 0x2687b4: cmp             w5, NULL
    // 0x2687b8: b.ne            #0x2687c4
    // 0x2687bc: LoadField: r5 = r3->field_c3
    //     0x2687bc: ldur            w5, [x3, #0xc3]
    // 0x2687c0: DecompressPointer r5
    //     0x2687c0: add             x5, x5, HEAP, lsl #32
    // 0x2687c4: stur            x5, [fp, #-0x10]
    // 0x2687c8: cmp             w4, NULL
    // 0x2687cc: b.ne            #0x2687e0
    // 0x2687d0: LoadField: r4 = r3->field_cf
    //     0x2687d0: ldur            w4, [x3, #0xcf]
    // 0x2687d4: DecompressPointer r4
    //     0x2687d4: add             x4, x4, HEAP, lsl #32
    // 0x2687d8: mov             x3, x4
    // 0x2687dc: b               #0x2687e4
    // 0x2687e0: mov             x3, x4
    // 0x2687e4: stur            x3, [fp, #-8]
    // 0x2687e8: r0 = InputDecoration()
    //     0x2687e8: bl              #0x268850  ; AllocateInputDecorationStub -> InputDecoration (size=0xd8)
    // 0x2687ec: ldur            x1, [fp, #-0x50]
    // 0x2687f0: StoreField: r0->field_13 = r1
    //     0x2687f0: stur            w1, [x0, #0x13]
    // 0x2687f4: ldur            x1, [fp, #-0x48]
    // 0x2687f8: StoreField: r0->field_37 = r1
    //     0x2687f8: stur            w1, [x0, #0x37]
    // 0x2687fc: ldur            x1, [fp, #-0x40]
    // 0x268800: StoreField: r0->field_4f = r1
    //     0x268800: stur            w1, [x0, #0x4f]
    // 0x268804: ldur            x1, [fp, #-0x38]
    // 0x268808: StoreField: r0->field_53 = r1
    //     0x268808: stur            w1, [x0, #0x53]
    // 0x26880c: ldur            x1, [fp, #-0x30]
    // 0x268810: StoreField: r0->field_5f = r1
    //     0x268810: stur            w1, [x0, #0x5f]
    // 0x268814: ldur            x1, [fp, #-0x28]
    // 0x268818: StoreField: r0->field_57 = r1
    //     0x268818: stur            w1, [x0, #0x57]
    // 0x26881c: ldur            x1, [fp, #-0x20]
    // 0x268820: StoreField: r0->field_9f = r1
    //     0x268820: stur            w1, [x0, #0x9f]
    // 0x268824: ldur            x1, [fp, #-0x18]
    // 0x268828: StoreField: r0->field_a3 = r1
    //     0x268828: stur            w1, [x0, #0xa3]
    // 0x26882c: ldur            x1, [fp, #-0x10]
    // 0x268830: StoreField: r0->field_c3 = r1
    //     0x268830: stur            w1, [x0, #0xc3]
    // 0x268834: r1 = true
    //     0x268834: add             x1, NULL, #0x20  ; true
    // 0x268838: StoreField: r0->field_c7 = r1
    //     0x268838: stur            w1, [x0, #0xc7]
    // 0x26883c: ldur            x1, [fp, #-8]
    // 0x268840: StoreField: r0->field_cf = r1
    //     0x268840: stur            w1, [x0, #0xcf]
    // 0x268844: LeaveFrame
    //     0x268844: mov             SP, fp
    //     0x268848: ldp             fp, lr, [SP], #0x10
    // 0x26884c: ret
    //     0x26884c: ret             
  }
  _ toString(/* No info */) {
    // ** addr: 0x2e4eec, size: 0x784
    // 0x2e4eec: EnterFrame
    //     0x2e4eec: stp             fp, lr, [SP, #-0x10]!
    //     0x2e4ef0: mov             fp, SP
    // 0x2e4ef4: AllocStack(0x28)
    //     0x2e4ef4: sub             SP, SP, #0x28
    // 0x2e4ef8: CheckStackOverflow
    //     0x2e4ef8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2e4efc: cmp             SP, x16
    //     0x2e4f00: b.ls            #0x2e5648
    // 0x2e4f04: r16 = <String>
    //     0x2e4f04: ldr             x16, [PP, #0x798]  ; [pp+0x798] TypeArguments: <String>
    // 0x2e4f08: stp             xzr, x16, [SP]
    // 0x2e4f0c: r0 = _GrowableList()
    //     0x2e4f0c: bl              #0x1874e4  ; [dart:core] _GrowableList::_GrowableList
    // 0x2e4f10: mov             x3, x0
    // 0x2e4f14: ldr             x0, [fp, #0x10]
    // 0x2e4f18: stur            x3, [fp, #-0x10]
    // 0x2e4f1c: LoadField: r4 = r0->field_13
    //     0x2e4f1c: ldur            w4, [x0, #0x13]
    // 0x2e4f20: DecompressPointer r4
    //     0x2e4f20: add             x4, x4, HEAP, lsl #32
    // 0x2e4f24: stur            x4, [fp, #-8]
    // 0x2e4f28: cmp             w4, NULL
    // 0x2e4f2c: b.eq            #0x2e4ff4
    // 0x2e4f30: r1 = Null
    //     0x2e4f30: mov             x1, NULL
    // 0x2e4f34: r2 = 6
    //     0x2e4f34: movz            x2, #0x6
    // 0x2e4f38: r0 = AllocateArray()
    //     0x2e4f38: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e4f3c: r17 = "labelText: \""
    //     0x2e4f3c: add             x17, PP, #0xc, lsl #12  ; [pp+0xc768] "labelText: \""
    //     0x2e4f40: ldr             x17, [x17, #0x768]
    // 0x2e4f44: StoreField: r0->field_f = r17
    //     0x2e4f44: stur            w17, [x0, #0xf]
    // 0x2e4f48: ldur            x1, [fp, #-8]
    // 0x2e4f4c: StoreField: r0->field_13 = r1
    //     0x2e4f4c: stur            w1, [x0, #0x13]
    // 0x2e4f50: r17 = "\""
    //     0x2e4f50: ldr             x17, [PP, #0x6d10]  ; [pp+0x6d10] "\""
    // 0x2e4f54: StoreField: r0->field_17 = r17
    //     0x2e4f54: stur            w17, [x0, #0x17]
    // 0x2e4f58: str             x0, [SP]
    // 0x2e4f5c: r0 = _interpolate()
    //     0x2e4f5c: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e4f60: mov             x1, x0
    // 0x2e4f64: ldur            x0, [fp, #-0x10]
    // 0x2e4f68: stur            x1, [fp, #-8]
    // 0x2e4f6c: LoadField: r2 = r0->field_b
    //     0x2e4f6c: ldur            w2, [x0, #0xb]
    // 0x2e4f70: DecompressPointer r2
    //     0x2e4f70: add             x2, x2, HEAP, lsl #32
    // 0x2e4f74: LoadField: r3 = r0->field_f
    //     0x2e4f74: ldur            w3, [x0, #0xf]
    // 0x2e4f78: DecompressPointer r3
    //     0x2e4f78: add             x3, x3, HEAP, lsl #32
    // 0x2e4f7c: LoadField: r4 = r3->field_b
    //     0x2e4f7c: ldur            w4, [x3, #0xb]
    // 0x2e4f80: DecompressPointer r4
    //     0x2e4f80: add             x4, x4, HEAP, lsl #32
    // 0x2e4f84: r3 = LoadInt32Instr(r2)
    //     0x2e4f84: sbfx            x3, x2, #1, #0x1f
    // 0x2e4f88: stur            x3, [fp, #-0x18]
    // 0x2e4f8c: r2 = LoadInt32Instr(r4)
    //     0x2e4f8c: sbfx            x2, x4, #1, #0x1f
    // 0x2e4f90: cmp             x3, x2
    // 0x2e4f94: b.ne            #0x2e4fa0
    // 0x2e4f98: str             x0, [SP]
    // 0x2e4f9c: r0 = _growToNextCapacity()
    //     0x2e4f9c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e4fa0: ldur            x3, [fp, #-0x10]
    // 0x2e4fa4: ldur            x2, [fp, #-0x18]
    // 0x2e4fa8: add             x0, x2, #1
    // 0x2e4fac: lsl             x1, x0, #1
    // 0x2e4fb0: StoreField: r3->field_b = r1
    //     0x2e4fb0: stur            w1, [x3, #0xb]
    // 0x2e4fb4: mov             x1, x2
    // 0x2e4fb8: cmp             x1, x0
    // 0x2e4fbc: b.hs            #0x2e5650
    // 0x2e4fc0: LoadField: r1 = r3->field_f
    //     0x2e4fc0: ldur            w1, [x3, #0xf]
    // 0x2e4fc4: DecompressPointer r1
    //     0x2e4fc4: add             x1, x1, HEAP, lsl #32
    // 0x2e4fc8: ldur            x0, [fp, #-8]
    // 0x2e4fcc: ArrayStore: r1[r2] = r0  ; List_4
    //     0x2e4fcc: add             x25, x1, x2, lsl #2
    //     0x2e4fd0: add             x25, x25, #0xf
    //     0x2e4fd4: str             w0, [x25]
    //     0x2e4fd8: tbz             w0, #0, #0x2e4ff4
    //     0x2e4fdc: ldurb           w16, [x1, #-1]
    //     0x2e4fe0: ldurb           w17, [x0, #-1]
    //     0x2e4fe4: and             x16, x17, x16, lsr #2
    //     0x2e4fe8: tst             x16, HEAP, lsr #32
    //     0x2e4fec: b.eq            #0x2e4ff4
    //     0x2e4ff0: bl              #0x3e41ec
    // 0x2e4ff4: ldr             x0, [fp, #0x10]
    // 0x2e4ff8: LoadField: r4 = r0->field_37
    //     0x2e4ff8: ldur            w4, [x0, #0x37]
    // 0x2e4ffc: DecompressPointer r4
    //     0x2e4ffc: add             x4, x4, HEAP, lsl #32
    // 0x2e5000: stur            x4, [fp, #-8]
    // 0x2e5004: cmp             w4, NULL
    // 0x2e5008: b.eq            #0x2e50d0
    // 0x2e500c: r1 = Null
    //     0x2e500c: mov             x1, NULL
    // 0x2e5010: r2 = 6
    //     0x2e5010: movz            x2, #0x6
    // 0x2e5014: r0 = AllocateArray()
    //     0x2e5014: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e5018: r17 = "hintMaxLines: \""
    //     0x2e5018: add             x17, PP, #0xc, lsl #12  ; [pp+0xc770] "hintMaxLines: \""
    //     0x2e501c: ldr             x17, [x17, #0x770]
    // 0x2e5020: StoreField: r0->field_f = r17
    //     0x2e5020: stur            w17, [x0, #0xf]
    // 0x2e5024: ldur            x1, [fp, #-8]
    // 0x2e5028: StoreField: r0->field_13 = r1
    //     0x2e5028: stur            w1, [x0, #0x13]
    // 0x2e502c: r17 = "\""
    //     0x2e502c: ldr             x17, [PP, #0x6d10]  ; [pp+0x6d10] "\""
    // 0x2e5030: StoreField: r0->field_17 = r17
    //     0x2e5030: stur            w17, [x0, #0x17]
    // 0x2e5034: str             x0, [SP]
    // 0x2e5038: r0 = _interpolate()
    //     0x2e5038: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e503c: mov             x1, x0
    // 0x2e5040: ldur            x0, [fp, #-0x10]
    // 0x2e5044: stur            x1, [fp, #-8]
    // 0x2e5048: LoadField: r2 = r0->field_b
    //     0x2e5048: ldur            w2, [x0, #0xb]
    // 0x2e504c: DecompressPointer r2
    //     0x2e504c: add             x2, x2, HEAP, lsl #32
    // 0x2e5050: LoadField: r3 = r0->field_f
    //     0x2e5050: ldur            w3, [x0, #0xf]
    // 0x2e5054: DecompressPointer r3
    //     0x2e5054: add             x3, x3, HEAP, lsl #32
    // 0x2e5058: LoadField: r4 = r3->field_b
    //     0x2e5058: ldur            w4, [x3, #0xb]
    // 0x2e505c: DecompressPointer r4
    //     0x2e505c: add             x4, x4, HEAP, lsl #32
    // 0x2e5060: r3 = LoadInt32Instr(r2)
    //     0x2e5060: sbfx            x3, x2, #1, #0x1f
    // 0x2e5064: stur            x3, [fp, #-0x18]
    // 0x2e5068: r2 = LoadInt32Instr(r4)
    //     0x2e5068: sbfx            x2, x4, #1, #0x1f
    // 0x2e506c: cmp             x3, x2
    // 0x2e5070: b.ne            #0x2e507c
    // 0x2e5074: str             x0, [SP]
    // 0x2e5078: r0 = _growToNextCapacity()
    //     0x2e5078: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e507c: ldur            x3, [fp, #-0x10]
    // 0x2e5080: ldur            x2, [fp, #-0x18]
    // 0x2e5084: add             x0, x2, #1
    // 0x2e5088: lsl             x1, x0, #1
    // 0x2e508c: StoreField: r3->field_b = r1
    //     0x2e508c: stur            w1, [x3, #0xb]
    // 0x2e5090: mov             x1, x2
    // 0x2e5094: cmp             x1, x0
    // 0x2e5098: b.hs            #0x2e5654
    // 0x2e509c: LoadField: r1 = r3->field_f
    //     0x2e509c: ldur            w1, [x3, #0xf]
    // 0x2e50a0: DecompressPointer r1
    //     0x2e50a0: add             x1, x1, HEAP, lsl #32
    // 0x2e50a4: ldur            x0, [fp, #-8]
    // 0x2e50a8: ArrayStore: r1[r2] = r0  ; List_4
    //     0x2e50a8: add             x25, x1, x2, lsl #2
    //     0x2e50ac: add             x25, x25, #0xf
    //     0x2e50b0: str             w0, [x25]
    //     0x2e50b4: tbz             w0, #0, #0x2e50d0
    //     0x2e50b8: ldurb           w16, [x1, #-1]
    //     0x2e50bc: ldurb           w17, [x0, #-1]
    //     0x2e50c0: and             x16, x17, x16, lsr #2
    //     0x2e50c4: tst             x16, HEAP, lsr #32
    //     0x2e50c8: b.eq            #0x2e50d0
    //     0x2e50cc: bl              #0x3e41ec
    // 0x2e50d0: ldr             x0, [fp, #0x10]
    // 0x2e50d4: LoadField: r4 = r0->field_4f
    //     0x2e50d4: ldur            w4, [x0, #0x4f]
    // 0x2e50d8: DecompressPointer r4
    //     0x2e50d8: add             x4, x4, HEAP, lsl #32
    // 0x2e50dc: stur            x4, [fp, #-8]
    // 0x2e50e0: cmp             w4, NULL
    // 0x2e50e4: b.eq            #0x2e51a4
    // 0x2e50e8: r1 = Null
    //     0x2e50e8: mov             x1, NULL
    // 0x2e50ec: r2 = 4
    //     0x2e50ec: movz            x2, #0x4
    // 0x2e50f0: r0 = AllocateArray()
    //     0x2e50f0: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e50f4: r17 = "floatingLabelBehavior: "
    //     0x2e50f4: add             x17, PP, #0xc, lsl #12  ; [pp+0xc778] "floatingLabelBehavior: "
    //     0x2e50f8: ldr             x17, [x17, #0x778]
    // 0x2e50fc: StoreField: r0->field_f = r17
    //     0x2e50fc: stur            w17, [x0, #0xf]
    // 0x2e5100: ldur            x1, [fp, #-8]
    // 0x2e5104: StoreField: r0->field_13 = r1
    //     0x2e5104: stur            w1, [x0, #0x13]
    // 0x2e5108: str             x0, [SP]
    // 0x2e510c: r0 = _interpolate()
    //     0x2e510c: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e5110: mov             x1, x0
    // 0x2e5114: ldur            x0, [fp, #-0x10]
    // 0x2e5118: stur            x1, [fp, #-8]
    // 0x2e511c: LoadField: r2 = r0->field_b
    //     0x2e511c: ldur            w2, [x0, #0xb]
    // 0x2e5120: DecompressPointer r2
    //     0x2e5120: add             x2, x2, HEAP, lsl #32
    // 0x2e5124: LoadField: r3 = r0->field_f
    //     0x2e5124: ldur            w3, [x0, #0xf]
    // 0x2e5128: DecompressPointer r3
    //     0x2e5128: add             x3, x3, HEAP, lsl #32
    // 0x2e512c: LoadField: r4 = r3->field_b
    //     0x2e512c: ldur            w4, [x3, #0xb]
    // 0x2e5130: DecompressPointer r4
    //     0x2e5130: add             x4, x4, HEAP, lsl #32
    // 0x2e5134: r3 = LoadInt32Instr(r2)
    //     0x2e5134: sbfx            x3, x2, #1, #0x1f
    // 0x2e5138: stur            x3, [fp, #-0x18]
    // 0x2e513c: r2 = LoadInt32Instr(r4)
    //     0x2e513c: sbfx            x2, x4, #1, #0x1f
    // 0x2e5140: cmp             x3, x2
    // 0x2e5144: b.ne            #0x2e5150
    // 0x2e5148: str             x0, [SP]
    // 0x2e514c: r0 = _growToNextCapacity()
    //     0x2e514c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e5150: ldur            x3, [fp, #-0x10]
    // 0x2e5154: ldur            x2, [fp, #-0x18]
    // 0x2e5158: add             x0, x2, #1
    // 0x2e515c: lsl             x1, x0, #1
    // 0x2e5160: StoreField: r3->field_b = r1
    //     0x2e5160: stur            w1, [x3, #0xb]
    // 0x2e5164: mov             x1, x2
    // 0x2e5168: cmp             x1, x0
    // 0x2e516c: b.hs            #0x2e5658
    // 0x2e5170: LoadField: r1 = r3->field_f
    //     0x2e5170: ldur            w1, [x3, #0xf]
    // 0x2e5174: DecompressPointer r1
    //     0x2e5174: add             x1, x1, HEAP, lsl #32
    // 0x2e5178: ldur            x0, [fp, #-8]
    // 0x2e517c: ArrayStore: r1[r2] = r0  ; List_4
    //     0x2e517c: add             x25, x1, x2, lsl #2
    //     0x2e5180: add             x25, x25, #0xf
    //     0x2e5184: str             w0, [x25]
    //     0x2e5188: tbz             w0, #0, #0x2e51a4
    //     0x2e518c: ldurb           w16, [x1, #-1]
    //     0x2e5190: ldurb           w17, [x0, #-1]
    //     0x2e5194: and             x16, x17, x16, lsr #2
    //     0x2e5198: tst             x16, HEAP, lsr #32
    //     0x2e519c: b.eq            #0x2e51a4
    //     0x2e51a0: bl              #0x3e41ec
    // 0x2e51a4: ldr             x0, [fp, #0x10]
    // 0x2e51a8: LoadField: r4 = r0->field_53
    //     0x2e51a8: ldur            w4, [x0, #0x53]
    // 0x2e51ac: DecompressPointer r4
    //     0x2e51ac: add             x4, x4, HEAP, lsl #32
    // 0x2e51b0: stur            x4, [fp, #-8]
    // 0x2e51b4: cmp             w4, NULL
    // 0x2e51b8: b.eq            #0x2e527c
    // 0x2e51bc: r1 = Null
    //     0x2e51bc: mov             x1, NULL
    // 0x2e51c0: r2 = 4
    //     0x2e51c0: movz            x2, #0x4
    // 0x2e51c4: r0 = AllocateArray()
    //     0x2e51c4: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e51c8: r17 = "floatingLabelAlignment: "
    //     0x2e51c8: add             x17, PP, #0xc, lsl #12  ; [pp+0xc780] "floatingLabelAlignment: "
    //     0x2e51cc: ldr             x17, [x17, #0x780]
    // 0x2e51d0: StoreField: r0->field_f = r17
    //     0x2e51d0: stur            w17, [x0, #0xf]
    // 0x2e51d4: ldur            x1, [fp, #-8]
    // 0x2e51d8: StoreField: r0->field_13 = r1
    //     0x2e51d8: stur            w1, [x0, #0x13]
    // 0x2e51dc: str             x0, [SP]
    // 0x2e51e0: r0 = _interpolate()
    //     0x2e51e0: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e51e4: mov             x1, x0
    // 0x2e51e8: ldur            x0, [fp, #-0x10]
    // 0x2e51ec: stur            x1, [fp, #-8]
    // 0x2e51f0: LoadField: r2 = r0->field_b
    //     0x2e51f0: ldur            w2, [x0, #0xb]
    // 0x2e51f4: DecompressPointer r2
    //     0x2e51f4: add             x2, x2, HEAP, lsl #32
    // 0x2e51f8: LoadField: r3 = r0->field_f
    //     0x2e51f8: ldur            w3, [x0, #0xf]
    // 0x2e51fc: DecompressPointer r3
    //     0x2e51fc: add             x3, x3, HEAP, lsl #32
    // 0x2e5200: LoadField: r4 = r3->field_b
    //     0x2e5200: ldur            w4, [x3, #0xb]
    // 0x2e5204: DecompressPointer r4
    //     0x2e5204: add             x4, x4, HEAP, lsl #32
    // 0x2e5208: r3 = LoadInt32Instr(r2)
    //     0x2e5208: sbfx            x3, x2, #1, #0x1f
    // 0x2e520c: stur            x3, [fp, #-0x18]
    // 0x2e5210: r2 = LoadInt32Instr(r4)
    //     0x2e5210: sbfx            x2, x4, #1, #0x1f
    // 0x2e5214: cmp             x3, x2
    // 0x2e5218: b.ne            #0x2e5224
    // 0x2e521c: str             x0, [SP]
    // 0x2e5220: r0 = _growToNextCapacity()
    //     0x2e5220: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e5224: ldur            x2, [fp, #-0x10]
    // 0x2e5228: ldur            x3, [fp, #-0x18]
    // 0x2e522c: add             x0, x3, #1
    // 0x2e5230: lsl             x1, x0, #1
    // 0x2e5234: StoreField: r2->field_b = r1
    //     0x2e5234: stur            w1, [x2, #0xb]
    // 0x2e5238: mov             x1, x3
    // 0x2e523c: cmp             x1, x0
    // 0x2e5240: b.hs            #0x2e565c
    // 0x2e5244: LoadField: r1 = r2->field_f
    //     0x2e5244: ldur            w1, [x2, #0xf]
    // 0x2e5248: DecompressPointer r1
    //     0x2e5248: add             x1, x1, HEAP, lsl #32
    // 0x2e524c: ldur            x0, [fp, #-8]
    // 0x2e5250: ArrayStore: r1[r3] = r0  ; List_4
    //     0x2e5250: add             x25, x1, x3, lsl #2
    //     0x2e5254: add             x25, x25, #0xf
    //     0x2e5258: str             w0, [x25]
    //     0x2e525c: tbz             w0, #0, #0x2e5278
    //     0x2e5260: ldurb           w16, [x1, #-1]
    //     0x2e5264: ldurb           w17, [x0, #-1]
    //     0x2e5268: and             x16, x17, x16, lsr #2
    //     0x2e526c: tst             x16, HEAP, lsr #32
    //     0x2e5270: b.eq            #0x2e5278
    //     0x2e5274: bl              #0x3e41ec
    // 0x2e5278: b               #0x2e5280
    // 0x2e527c: mov             x2, x3
    // 0x2e5280: ldr             x0, [fp, #0x10]
    // 0x2e5284: LoadField: r1 = r0->field_57
    //     0x2e5284: ldur            w1, [x0, #0x57]
    // 0x2e5288: DecompressPointer r1
    //     0x2e5288: add             x1, x1, HEAP, lsl #32
    // 0x2e528c: cmp             w1, NULL
    // 0x2e5290: b.eq            #0x2e5298
    // 0x2e5294: tbz             w1, #4, #0x2e5630
    // 0x2e5298: LoadField: r1 = r0->field_5f
    //     0x2e5298: ldur            w1, [x0, #0x5f]
    // 0x2e529c: DecompressPointer r1
    //     0x2e529c: add             x1, x1, HEAP, lsl #32
    // 0x2e52a0: cmp             w1, NULL
    // 0x2e52a4: b.eq            #0x2e52ac
    // 0x2e52a8: tbz             w1, #4, #0x2e563c
    // 0x2e52ac: LoadField: r1 = r0->field_9f
    //     0x2e52ac: ldur            w1, [x0, #0x9f]
    // 0x2e52b0: DecompressPointer r1
    //     0x2e52b0: add             x1, x1, HEAP, lsl #32
    // 0x2e52b4: cmp             w1, NULL
    // 0x2e52b8: b.ne            #0x2e52c4
    // 0x2e52bc: mov             x3, x2
    // 0x2e52c0: b               #0x2e533c
    // 0x2e52c4: tbnz            w1, #4, #0x2e5338
    // 0x2e52c8: LoadField: r1 = r2->field_b
    //     0x2e52c8: ldur            w1, [x2, #0xb]
    // 0x2e52cc: DecompressPointer r1
    //     0x2e52cc: add             x1, x1, HEAP, lsl #32
    // 0x2e52d0: LoadField: r3 = r2->field_f
    //     0x2e52d0: ldur            w3, [x2, #0xf]
    // 0x2e52d4: DecompressPointer r3
    //     0x2e52d4: add             x3, x3, HEAP, lsl #32
    // 0x2e52d8: LoadField: r4 = r3->field_b
    //     0x2e52d8: ldur            w4, [x3, #0xb]
    // 0x2e52dc: DecompressPointer r4
    //     0x2e52dc: add             x4, x4, HEAP, lsl #32
    // 0x2e52e0: r3 = LoadInt32Instr(r1)
    //     0x2e52e0: sbfx            x3, x1, #1, #0x1f
    // 0x2e52e4: stur            x3, [fp, #-0x18]
    // 0x2e52e8: r1 = LoadInt32Instr(r4)
    //     0x2e52e8: sbfx            x1, x4, #1, #0x1f
    // 0x2e52ec: cmp             x3, x1
    // 0x2e52f0: b.ne            #0x2e52fc
    // 0x2e52f4: str             x2, [SP]
    // 0x2e52f8: r0 = _growToNextCapacity()
    //     0x2e52f8: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e52fc: ldur            x3, [fp, #-0x10]
    // 0x2e5300: ldur            x2, [fp, #-0x18]
    // 0x2e5304: add             x0, x2, #1
    // 0x2e5308: lsl             x1, x0, #1
    // 0x2e530c: StoreField: r3->field_b = r1
    //     0x2e530c: stur            w1, [x3, #0xb]
    // 0x2e5310: mov             x1, x2
    // 0x2e5314: cmp             x1, x0
    // 0x2e5318: b.hs            #0x2e5660
    // 0x2e531c: LoadField: r0 = r3->field_f
    //     0x2e531c: ldur            w0, [x3, #0xf]
    // 0x2e5320: DecompressPointer r0
    //     0x2e5320: add             x0, x0, HEAP, lsl #32
    // 0x2e5324: add             x1, x0, x2, lsl #2
    // 0x2e5328: r17 = "filled: true"
    //     0x2e5328: add             x17, PP, #0xc, lsl #12  ; [pp+0xc788] "filled: true"
    //     0x2e532c: ldr             x17, [x17, #0x788]
    // 0x2e5330: StoreField: r1->field_f = r17
    //     0x2e5330: stur            w17, [x1, #0xf]
    // 0x2e5334: b               #0x2e533c
    // 0x2e5338: mov             x3, x2
    // 0x2e533c: ldr             x0, [fp, #0x10]
    // 0x2e5340: LoadField: r4 = r0->field_a3
    //     0x2e5340: ldur            w4, [x0, #0xa3]
    // 0x2e5344: DecompressPointer r4
    //     0x2e5344: add             x4, x4, HEAP, lsl #32
    // 0x2e5348: stur            x4, [fp, #-8]
    // 0x2e534c: cmp             w4, NULL
    // 0x2e5350: b.eq            #0x2e5410
    // 0x2e5354: r1 = Null
    //     0x2e5354: mov             x1, NULL
    // 0x2e5358: r2 = 4
    //     0x2e5358: movz            x2, #0x4
    // 0x2e535c: r0 = AllocateArray()
    //     0x2e535c: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e5360: r17 = "fillColor: "
    //     0x2e5360: add             x17, PP, #0xc, lsl #12  ; [pp+0xc790] "fillColor: "
    //     0x2e5364: ldr             x17, [x17, #0x790]
    // 0x2e5368: StoreField: r0->field_f = r17
    //     0x2e5368: stur            w17, [x0, #0xf]
    // 0x2e536c: ldur            x1, [fp, #-8]
    // 0x2e5370: StoreField: r0->field_13 = r1
    //     0x2e5370: stur            w1, [x0, #0x13]
    // 0x2e5374: str             x0, [SP]
    // 0x2e5378: r0 = _interpolate()
    //     0x2e5378: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e537c: mov             x1, x0
    // 0x2e5380: ldur            x0, [fp, #-0x10]
    // 0x2e5384: stur            x1, [fp, #-8]
    // 0x2e5388: LoadField: r2 = r0->field_b
    //     0x2e5388: ldur            w2, [x0, #0xb]
    // 0x2e538c: DecompressPointer r2
    //     0x2e538c: add             x2, x2, HEAP, lsl #32
    // 0x2e5390: LoadField: r3 = r0->field_f
    //     0x2e5390: ldur            w3, [x0, #0xf]
    // 0x2e5394: DecompressPointer r3
    //     0x2e5394: add             x3, x3, HEAP, lsl #32
    // 0x2e5398: LoadField: r4 = r3->field_b
    //     0x2e5398: ldur            w4, [x3, #0xb]
    // 0x2e539c: DecompressPointer r4
    //     0x2e539c: add             x4, x4, HEAP, lsl #32
    // 0x2e53a0: r3 = LoadInt32Instr(r2)
    //     0x2e53a0: sbfx            x3, x2, #1, #0x1f
    // 0x2e53a4: stur            x3, [fp, #-0x18]
    // 0x2e53a8: r2 = LoadInt32Instr(r4)
    //     0x2e53a8: sbfx            x2, x4, #1, #0x1f
    // 0x2e53ac: cmp             x3, x2
    // 0x2e53b0: b.ne            #0x2e53bc
    // 0x2e53b4: str             x0, [SP]
    // 0x2e53b8: r0 = _growToNextCapacity()
    //     0x2e53b8: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e53bc: ldur            x3, [fp, #-0x10]
    // 0x2e53c0: ldur            x2, [fp, #-0x18]
    // 0x2e53c4: add             x0, x2, #1
    // 0x2e53c8: lsl             x1, x0, #1
    // 0x2e53cc: StoreField: r3->field_b = r1
    //     0x2e53cc: stur            w1, [x3, #0xb]
    // 0x2e53d0: mov             x1, x2
    // 0x2e53d4: cmp             x1, x0
    // 0x2e53d8: b.hs            #0x2e5664
    // 0x2e53dc: LoadField: r1 = r3->field_f
    //     0x2e53dc: ldur            w1, [x3, #0xf]
    // 0x2e53e0: DecompressPointer r1
    //     0x2e53e0: add             x1, x1, HEAP, lsl #32
    // 0x2e53e4: ldur            x0, [fp, #-8]
    // 0x2e53e8: ArrayStore: r1[r2] = r0  ; List_4
    //     0x2e53e8: add             x25, x1, x2, lsl #2
    //     0x2e53ec: add             x25, x25, #0xf
    //     0x2e53f0: str             w0, [x25]
    //     0x2e53f4: tbz             w0, #0, #0x2e5410
    //     0x2e53f8: ldurb           w16, [x1, #-1]
    //     0x2e53fc: ldurb           w17, [x0, #-1]
    //     0x2e5400: and             x16, x17, x16, lsr #2
    //     0x2e5404: tst             x16, HEAP, lsr #32
    //     0x2e5408: b.eq            #0x2e5410
    //     0x2e540c: bl              #0x3e41ec
    // 0x2e5410: ldr             x0, [fp, #0x10]
    // 0x2e5414: LoadField: r4 = r0->field_c3
    //     0x2e5414: ldur            w4, [x0, #0xc3]
    // 0x2e5418: DecompressPointer r4
    //     0x2e5418: add             x4, x4, HEAP, lsl #32
    // 0x2e541c: stur            x4, [fp, #-8]
    // 0x2e5420: cmp             w4, NULL
    // 0x2e5424: b.eq            #0x2e54e4
    // 0x2e5428: r1 = Null
    //     0x2e5428: mov             x1, NULL
    // 0x2e542c: r2 = 4
    //     0x2e542c: movz            x2, #0x4
    // 0x2e5430: r0 = AllocateArray()
    //     0x2e5430: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e5434: r17 = "border: "
    //     0x2e5434: add             x17, PP, #0xc, lsl #12  ; [pp+0xc798] "border: "
    //     0x2e5438: ldr             x17, [x17, #0x798]
    // 0x2e543c: StoreField: r0->field_f = r17
    //     0x2e543c: stur            w17, [x0, #0xf]
    // 0x2e5440: ldur            x1, [fp, #-8]
    // 0x2e5444: StoreField: r0->field_13 = r1
    //     0x2e5444: stur            w1, [x0, #0x13]
    // 0x2e5448: str             x0, [SP]
    // 0x2e544c: r0 = _interpolate()
    //     0x2e544c: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e5450: mov             x1, x0
    // 0x2e5454: ldur            x0, [fp, #-0x10]
    // 0x2e5458: stur            x1, [fp, #-8]
    // 0x2e545c: LoadField: r2 = r0->field_b
    //     0x2e545c: ldur            w2, [x0, #0xb]
    // 0x2e5460: DecompressPointer r2
    //     0x2e5460: add             x2, x2, HEAP, lsl #32
    // 0x2e5464: LoadField: r3 = r0->field_f
    //     0x2e5464: ldur            w3, [x0, #0xf]
    // 0x2e5468: DecompressPointer r3
    //     0x2e5468: add             x3, x3, HEAP, lsl #32
    // 0x2e546c: LoadField: r4 = r3->field_b
    //     0x2e546c: ldur            w4, [x3, #0xb]
    // 0x2e5470: DecompressPointer r4
    //     0x2e5470: add             x4, x4, HEAP, lsl #32
    // 0x2e5474: r3 = LoadInt32Instr(r2)
    //     0x2e5474: sbfx            x3, x2, #1, #0x1f
    // 0x2e5478: stur            x3, [fp, #-0x18]
    // 0x2e547c: r2 = LoadInt32Instr(r4)
    //     0x2e547c: sbfx            x2, x4, #1, #0x1f
    // 0x2e5480: cmp             x3, x2
    // 0x2e5484: b.ne            #0x2e5490
    // 0x2e5488: str             x0, [SP]
    // 0x2e548c: r0 = _growToNextCapacity()
    //     0x2e548c: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e5490: ldur            x3, [fp, #-0x10]
    // 0x2e5494: ldur            x2, [fp, #-0x18]
    // 0x2e5498: add             x0, x2, #1
    // 0x2e549c: lsl             x1, x0, #1
    // 0x2e54a0: StoreField: r3->field_b = r1
    //     0x2e54a0: stur            w1, [x3, #0xb]
    // 0x2e54a4: mov             x1, x2
    // 0x2e54a8: cmp             x1, x0
    // 0x2e54ac: b.hs            #0x2e5668
    // 0x2e54b0: LoadField: r1 = r3->field_f
    //     0x2e54b0: ldur            w1, [x3, #0xf]
    // 0x2e54b4: DecompressPointer r1
    //     0x2e54b4: add             x1, x1, HEAP, lsl #32
    // 0x2e54b8: ldur            x0, [fp, #-8]
    // 0x2e54bc: ArrayStore: r1[r2] = r0  ; List_4
    //     0x2e54bc: add             x25, x1, x2, lsl #2
    //     0x2e54c0: add             x25, x25, #0xf
    //     0x2e54c4: str             w0, [x25]
    //     0x2e54c8: tbz             w0, #0, #0x2e54e4
    //     0x2e54cc: ldurb           w16, [x1, #-1]
    //     0x2e54d0: ldurb           w17, [x0, #-1]
    //     0x2e54d4: and             x16, x17, x16, lsr #2
    //     0x2e54d8: tst             x16, HEAP, lsr #32
    //     0x2e54dc: b.eq            #0x2e54e4
    //     0x2e54e0: bl              #0x3e41ec
    // 0x2e54e4: ldr             x0, [fp, #0x10]
    // 0x2e54e8: LoadField: r4 = r0->field_cf
    //     0x2e54e8: ldur            w4, [x0, #0xcf]
    // 0x2e54ec: DecompressPointer r4
    //     0x2e54ec: add             x4, x4, HEAP, lsl #32
    // 0x2e54f0: stur            x4, [fp, #-8]
    // 0x2e54f4: cmp             w4, NULL
    // 0x2e54f8: b.eq            #0x2e55b8
    // 0x2e54fc: r1 = Null
    //     0x2e54fc: mov             x1, NULL
    // 0x2e5500: r2 = 4
    //     0x2e5500: movz            x2, #0x4
    // 0x2e5504: r0 = AllocateArray()
    //     0x2e5504: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e5508: r17 = "alignLabelWithHint: "
    //     0x2e5508: add             x17, PP, #0xc, lsl #12  ; [pp+0xc7a0] "alignLabelWithHint: "
    //     0x2e550c: ldr             x17, [x17, #0x7a0]
    // 0x2e5510: StoreField: r0->field_f = r17
    //     0x2e5510: stur            w17, [x0, #0xf]
    // 0x2e5514: ldur            x1, [fp, #-8]
    // 0x2e5518: StoreField: r0->field_13 = r1
    //     0x2e5518: stur            w1, [x0, #0x13]
    // 0x2e551c: str             x0, [SP]
    // 0x2e5520: r0 = _interpolate()
    //     0x2e5520: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e5524: mov             x1, x0
    // 0x2e5528: ldur            x0, [fp, #-0x10]
    // 0x2e552c: stur            x1, [fp, #-8]
    // 0x2e5530: LoadField: r2 = r0->field_b
    //     0x2e5530: ldur            w2, [x0, #0xb]
    // 0x2e5534: DecompressPointer r2
    //     0x2e5534: add             x2, x2, HEAP, lsl #32
    // 0x2e5538: LoadField: r3 = r0->field_f
    //     0x2e5538: ldur            w3, [x0, #0xf]
    // 0x2e553c: DecompressPointer r3
    //     0x2e553c: add             x3, x3, HEAP, lsl #32
    // 0x2e5540: LoadField: r4 = r3->field_b
    //     0x2e5540: ldur            w4, [x3, #0xb]
    // 0x2e5544: DecompressPointer r4
    //     0x2e5544: add             x4, x4, HEAP, lsl #32
    // 0x2e5548: r3 = LoadInt32Instr(r2)
    //     0x2e5548: sbfx            x3, x2, #1, #0x1f
    // 0x2e554c: stur            x3, [fp, #-0x18]
    // 0x2e5550: r2 = LoadInt32Instr(r4)
    //     0x2e5550: sbfx            x2, x4, #1, #0x1f
    // 0x2e5554: cmp             x3, x2
    // 0x2e5558: b.ne            #0x2e5564
    // 0x2e555c: str             x0, [SP]
    // 0x2e5560: r0 = _growToNextCapacity()
    //     0x2e5560: bl              #0x186f18  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x2e5564: ldur            x3, [fp, #-0x10]
    // 0x2e5568: ldur            x2, [fp, #-0x18]
    // 0x2e556c: add             x0, x2, #1
    // 0x2e5570: lsl             x1, x0, #1
    // 0x2e5574: StoreField: r3->field_b = r1
    //     0x2e5574: stur            w1, [x3, #0xb]
    // 0x2e5578: mov             x1, x2
    // 0x2e557c: cmp             x1, x0
    // 0x2e5580: b.hs            #0x2e566c
    // 0x2e5584: LoadField: r1 = r3->field_f
    //     0x2e5584: ldur            w1, [x3, #0xf]
    // 0x2e5588: DecompressPointer r1
    //     0x2e5588: add             x1, x1, HEAP, lsl #32
    // 0x2e558c: ldur            x0, [fp, #-8]
    // 0x2e5590: ArrayStore: r1[r2] = r0  ; List_4
    //     0x2e5590: add             x25, x1, x2, lsl #2
    //     0x2e5594: add             x25, x25, #0xf
    //     0x2e5598: str             w0, [x25]
    //     0x2e559c: tbz             w0, #0, #0x2e55b8
    //     0x2e55a0: ldurb           w16, [x1, #-1]
    //     0x2e55a4: ldurb           w17, [x0, #-1]
    //     0x2e55a8: and             x16, x17, x16, lsr #2
    //     0x2e55ac: tst             x16, HEAP, lsr #32
    //     0x2e55b0: b.eq            #0x2e55b8
    //     0x2e55b4: bl              #0x3e41ec
    // 0x2e55b8: r1 = Null
    //     0x2e55b8: mov             x1, NULL
    // 0x2e55bc: r2 = 6
    //     0x2e55bc: movz            x2, #0x6
    // 0x2e55c0: r0 = AllocateArray()
    //     0x2e55c0: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e55c4: stur            x0, [fp, #-8]
    // 0x2e55c8: r17 = "InputDecoration("
    //     0x2e55c8: add             x17, PP, #0xc, lsl #12  ; [pp+0xc7a8] "InputDecoration("
    //     0x2e55cc: ldr             x17, [x17, #0x7a8]
    // 0x2e55d0: StoreField: r0->field_f = r17
    //     0x2e55d0: stur            w17, [x0, #0xf]
    // 0x2e55d4: ldur            x16, [fp, #-0x10]
    // 0x2e55d8: r30 = ", "
    //     0x2e55d8: ldr             lr, [PP, #0x23f8]  ; [pp+0x23f8] ", "
    // 0x2e55dc: stp             lr, x16, [SP]
    // 0x2e55e0: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x2e55e0: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x2e55e4: r0 = join()
    //     0x2e55e4: bl              #0x33a904  ; [dart:core] _GrowableList::join
    // 0x2e55e8: ldur            x1, [fp, #-8]
    // 0x2e55ec: ArrayStore: r1[1] = r0  ; List_4
    //     0x2e55ec: add             x25, x1, #0x13
    //     0x2e55f0: str             w0, [x25]
    //     0x2e55f4: tbz             w0, #0, #0x2e5610
    //     0x2e55f8: ldurb           w16, [x1, #-1]
    //     0x2e55fc: ldurb           w17, [x0, #-1]
    //     0x2e5600: and             x16, x17, x16, lsr #2
    //     0x2e5604: tst             x16, HEAP, lsr #32
    //     0x2e5608: b.eq            #0x2e5610
    //     0x2e560c: bl              #0x3e41ec
    // 0x2e5610: ldur            x0, [fp, #-8]
    // 0x2e5614: r17 = ")"
    //     0x2e5614: ldr             x17, [PP, #0x23d8]  ; [pp+0x23d8] ")"
    // 0x2e5618: StoreField: r0->field_17 = r17
    //     0x2e5618: stur            w17, [x0, #0x17]
    // 0x2e561c: str             x0, [SP]
    // 0x2e5620: r0 = _interpolate()
    //     0x2e5620: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e5624: LeaveFrame
    //     0x2e5624: mov             SP, fp
    //     0x2e5628: ldp             fp, lr, [SP], #0x10
    // 0x2e562c: ret
    //     0x2e562c: ret             
    // 0x2e5630: r0 = "Attempt to execute code removed by Dart AOT compiler (TFA)"
    //     0x2e5630: ldr             x0, [PP, #0x670]  ; [pp+0x670] "Attempt to execute code removed by Dart AOT compiler (TFA)"
    // 0x2e5634: r0 = Throw()
    //     0x2e5634: bl              #0x3e41c8  ; ThrowStub
    // 0x2e5638: brk             #0
    // 0x2e563c: r0 = "Attempt to execute code removed by Dart AOT compiler (TFA)"
    //     0x2e563c: ldr             x0, [PP, #0x670]  ; [pp+0x670] "Attempt to execute code removed by Dart AOT compiler (TFA)"
    // 0x2e5640: r0 = Throw()
    //     0x2e5640: bl              #0x3e41c8  ; ThrowStub
    // 0x2e5644: brk             #0
    // 0x2e5648: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2e5648: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2e564c: b               #0x2e4f04
    // 0x2e5650: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e5650: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x2e5654: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e5654: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x2e5658: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e5658: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x2e565c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e565c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x2e5660: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e5660: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x2e5664: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e5664: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x2e5668: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e5668: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
    // 0x2e566c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x2e566c: bl              #0x3e611c  ; RangeErrorSharedWithoutFPURegsStub
  }
  get _ hashCode(/* No info */) {
    // ** addr: 0x309b70, size: 0x300
    // 0x309b70: EnterFrame
    //     0x309b70: stp             fp, lr, [SP, #-0x10]!
    //     0x309b74: mov             fp, SP
    // 0x309b78: AllocStack(0x18)
    //     0x309b78: sub             SP, SP, #0x18
    // 0x309b7c: r0 = 104
    //     0x309b7c: movz            x0, #0x68
    // 0x309b80: CheckStackOverflow
    //     0x309b80: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x309b84: cmp             SP, x16
    //     0x309b88: b.ls            #0x309e68
    // 0x309b8c: ldr             x3, [fp, #0x10]
    // 0x309b90: LoadField: r4 = r3->field_7
    //     0x309b90: ldur            w4, [x3, #7]
    // 0x309b94: DecompressPointer r4
    //     0x309b94: add             x4, x4, HEAP, lsl #32
    // 0x309b98: mov             x2, x0
    // 0x309b9c: stur            x4, [fp, #-8]
    // 0x309ba0: r1 = <Object?>
    //     0x309ba0: ldr             x1, [PP, #0x560]  ; [pp+0x560] TypeArguments: <Object?>
    // 0x309ba4: r0 = AllocateArray()
    //     0x309ba4: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x309ba8: mov             x2, x0
    // 0x309bac: ldur            x0, [fp, #-8]
    // 0x309bb0: stur            x2, [fp, #-0x10]
    // 0x309bb4: StoreField: r2->field_f = r0
    //     0x309bb4: stur            w0, [x2, #0xf]
    // 0x309bb8: ldr             x0, [fp, #0x10]
    // 0x309bbc: LoadField: r1 = r0->field_b
    //     0x309bbc: ldur            w1, [x0, #0xb]
    // 0x309bc0: DecompressPointer r1
    //     0x309bc0: add             x1, x1, HEAP, lsl #32
    // 0x309bc4: StoreField: r2->field_13 = r1
    //     0x309bc4: stur            w1, [x2, #0x13]
    // 0x309bc8: LoadField: r1 = r0->field_f
    //     0x309bc8: ldur            w1, [x0, #0xf]
    // 0x309bcc: DecompressPointer r1
    //     0x309bcc: add             x1, x1, HEAP, lsl #32
    // 0x309bd0: StoreField: r2->field_17 = r1
    //     0x309bd0: stur            w1, [x2, #0x17]
    // 0x309bd4: LoadField: r1 = r0->field_13
    //     0x309bd4: ldur            w1, [x0, #0x13]
    // 0x309bd8: DecompressPointer r1
    //     0x309bd8: add             x1, x1, HEAP, lsl #32
    // 0x309bdc: StoreField: r2->field_1b = r1
    //     0x309bdc: stur            w1, [x2, #0x1b]
    // 0x309be0: LoadField: r1 = r0->field_1b
    //     0x309be0: ldur            w1, [x0, #0x1b]
    // 0x309be4: DecompressPointer r1
    //     0x309be4: add             x1, x1, HEAP, lsl #32
    // 0x309be8: StoreField: r2->field_1f = r1
    //     0x309be8: stur            w1, [x2, #0x1f]
    // 0x309bec: LoadField: r1 = r0->field_17
    //     0x309bec: ldur            w1, [x0, #0x17]
    // 0x309bf0: DecompressPointer r1
    //     0x309bf0: add             x1, x1, HEAP, lsl #32
    // 0x309bf4: StoreField: r2->field_23 = r1
    //     0x309bf4: stur            w1, [x2, #0x23]
    // 0x309bf8: LoadField: r1 = r0->field_1f
    //     0x309bf8: ldur            w1, [x0, #0x1f]
    // 0x309bfc: DecompressPointer r1
    //     0x309bfc: add             x1, x1, HEAP, lsl #32
    // 0x309c00: StoreField: r2->field_27 = r1
    //     0x309c00: stur            w1, [x2, #0x27]
    // 0x309c04: LoadField: r1 = r0->field_23
    //     0x309c04: ldur            w1, [x0, #0x23]
    // 0x309c08: DecompressPointer r1
    //     0x309c08: add             x1, x1, HEAP, lsl #32
    // 0x309c0c: StoreField: r2->field_2b = r1
    //     0x309c0c: stur            w1, [x2, #0x2b]
    // 0x309c10: LoadField: r1 = r0->field_27
    //     0x309c10: ldur            w1, [x0, #0x27]
    // 0x309c14: DecompressPointer r1
    //     0x309c14: add             x1, x1, HEAP, lsl #32
    // 0x309c18: StoreField: r2->field_2f = r1
    //     0x309c18: stur            w1, [x2, #0x2f]
    // 0x309c1c: LoadField: r1 = r0->field_2b
    //     0x309c1c: ldur            w1, [x0, #0x2b]
    // 0x309c20: DecompressPointer r1
    //     0x309c20: add             x1, x1, HEAP, lsl #32
    // 0x309c24: StoreField: r2->field_33 = r1
    //     0x309c24: stur            w1, [x2, #0x33]
    // 0x309c28: LoadField: r1 = r0->field_2f
    //     0x309c28: ldur            w1, [x0, #0x2f]
    // 0x309c2c: DecompressPointer r1
    //     0x309c2c: add             x1, x1, HEAP, lsl #32
    // 0x309c30: StoreField: r2->field_37 = r1
    //     0x309c30: stur            w1, [x2, #0x37]
    // 0x309c34: LoadField: r1 = r0->field_33
    //     0x309c34: ldur            w1, [x0, #0x33]
    // 0x309c38: DecompressPointer r1
    //     0x309c38: add             x1, x1, HEAP, lsl #32
    // 0x309c3c: StoreField: r2->field_3b = r1
    //     0x309c3c: stur            w1, [x2, #0x3b]
    // 0x309c40: LoadField: r1 = r0->field_37
    //     0x309c40: ldur            w1, [x0, #0x37]
    // 0x309c44: DecompressPointer r1
    //     0x309c44: add             x1, x1, HEAP, lsl #32
    // 0x309c48: StoreField: r2->field_3f = r1
    //     0x309c48: stur            w1, [x2, #0x3f]
    // 0x309c4c: LoadField: r1 = r0->field_3b
    //     0x309c4c: ldur            w1, [x0, #0x3b]
    // 0x309c50: DecompressPointer r1
    //     0x309c50: add             x1, x1, HEAP, lsl #32
    // 0x309c54: StoreField: r2->field_43 = r1
    //     0x309c54: stur            w1, [x2, #0x43]
    // 0x309c58: LoadField: r1 = r0->field_3f
    //     0x309c58: ldur            w1, [x0, #0x3f]
    // 0x309c5c: DecompressPointer r1
    //     0x309c5c: add             x1, x1, HEAP, lsl #32
    // 0x309c60: StoreField: r2->field_47 = r1
    //     0x309c60: stur            w1, [x2, #0x47]
    // 0x309c64: LoadField: r1 = r0->field_43
    //     0x309c64: ldur            w1, [x0, #0x43]
    // 0x309c68: DecompressPointer r1
    //     0x309c68: add             x1, x1, HEAP, lsl #32
    // 0x309c6c: StoreField: r2->field_4b = r1
    //     0x309c6c: stur            w1, [x2, #0x4b]
    // 0x309c70: LoadField: r1 = r0->field_47
    //     0x309c70: ldur            w1, [x0, #0x47]
    // 0x309c74: DecompressPointer r1
    //     0x309c74: add             x1, x1, HEAP, lsl #32
    // 0x309c78: StoreField: r2->field_4f = r1
    //     0x309c78: stur            w1, [x2, #0x4f]
    // 0x309c7c: LoadField: r1 = r0->field_4b
    //     0x309c7c: ldur            w1, [x0, #0x4b]
    // 0x309c80: DecompressPointer r1
    //     0x309c80: add             x1, x1, HEAP, lsl #32
    // 0x309c84: StoreField: r2->field_53 = r1
    //     0x309c84: stur            w1, [x2, #0x53]
    // 0x309c88: LoadField: r1 = r0->field_4f
    //     0x309c88: ldur            w1, [x0, #0x4f]
    // 0x309c8c: DecompressPointer r1
    //     0x309c8c: add             x1, x1, HEAP, lsl #32
    // 0x309c90: StoreField: r2->field_57 = r1
    //     0x309c90: stur            w1, [x2, #0x57]
    // 0x309c94: LoadField: r1 = r0->field_53
    //     0x309c94: ldur            w1, [x0, #0x53]
    // 0x309c98: DecompressPointer r1
    //     0x309c98: add             x1, x1, HEAP, lsl #32
    // 0x309c9c: StoreField: r2->field_5b = r1
    //     0x309c9c: stur            w1, [x2, #0x5b]
    // 0x309ca0: LoadField: r1 = r0->field_57
    //     0x309ca0: ldur            w1, [x0, #0x57]
    // 0x309ca4: DecompressPointer r1
    //     0x309ca4: add             x1, x1, HEAP, lsl #32
    // 0x309ca8: StoreField: r2->field_5f = r1
    //     0x309ca8: stur            w1, [x2, #0x5f]
    // 0x309cac: LoadField: r1 = r0->field_5b
    //     0x309cac: ldur            w1, [x0, #0x5b]
    // 0x309cb0: DecompressPointer r1
    //     0x309cb0: add             x1, x1, HEAP, lsl #32
    // 0x309cb4: StoreField: r2->field_63 = r1
    //     0x309cb4: stur            w1, [x2, #0x63]
    // 0x309cb8: LoadField: r1 = r0->field_5f
    //     0x309cb8: ldur            w1, [x0, #0x5f]
    // 0x309cbc: DecompressPointer r1
    //     0x309cbc: add             x1, x1, HEAP, lsl #32
    // 0x309cc0: StoreField: r2->field_67 = r1
    //     0x309cc0: stur            w1, [x2, #0x67]
    // 0x309cc4: LoadField: r1 = r0->field_9f
    //     0x309cc4: ldur            w1, [x0, #0x9f]
    // 0x309cc8: DecompressPointer r1
    //     0x309cc8: add             x1, x1, HEAP, lsl #32
    // 0x309ccc: StoreField: r2->field_6b = r1
    //     0x309ccc: stur            w1, [x2, #0x6b]
    // 0x309cd0: LoadField: r1 = r0->field_a3
    //     0x309cd0: ldur            w1, [x0, #0xa3]
    // 0x309cd4: DecompressPointer r1
    //     0x309cd4: add             x1, x1, HEAP, lsl #32
    // 0x309cd8: StoreField: r2->field_6f = r1
    //     0x309cd8: stur            w1, [x2, #0x6f]
    // 0x309cdc: LoadField: r1 = r0->field_a7
    //     0x309cdc: ldur            w1, [x0, #0xa7]
    // 0x309ce0: DecompressPointer r1
    //     0x309ce0: add             x1, x1, HEAP, lsl #32
    // 0x309ce4: StoreField: r2->field_73 = r1
    //     0x309ce4: stur            w1, [x2, #0x73]
    // 0x309ce8: LoadField: r1 = r0->field_ab
    //     0x309ce8: ldur            w1, [x0, #0xab]
    // 0x309cec: DecompressPointer r1
    //     0x309cec: add             x1, x1, HEAP, lsl #32
    // 0x309cf0: StoreField: r2->field_77 = r1
    //     0x309cf0: stur            w1, [x2, #0x77]
    // 0x309cf4: LoadField: r1 = r0->field_63
    //     0x309cf4: ldur            w1, [x0, #0x63]
    // 0x309cf8: DecompressPointer r1
    //     0x309cf8: add             x1, x1, HEAP, lsl #32
    // 0x309cfc: StoreField: r2->field_7b = r1
    //     0x309cfc: stur            w1, [x2, #0x7b]
    // 0x309d00: LoadField: r1 = r0->field_77
    //     0x309d00: ldur            w1, [x0, #0x77]
    // 0x309d04: DecompressPointer r1
    //     0x309d04: add             x1, x1, HEAP, lsl #32
    // 0x309d08: StoreField: r2->field_7f = r1
    //     0x309d08: stur            w1, [x2, #0x7f]
    // 0x309d0c: LoadField: r1 = r0->field_6b
    //     0x309d0c: ldur            w1, [x0, #0x6b]
    // 0x309d10: DecompressPointer r1
    //     0x309d10: add             x1, x1, HEAP, lsl #32
    // 0x309d14: StoreField: r2->field_83 = r1
    //     0x309d14: stur            w1, [x2, #0x83]
    // 0x309d18: LoadField: r1 = r0->field_6f
    //     0x309d18: ldur            w1, [x0, #0x6f]
    // 0x309d1c: DecompressPointer r1
    //     0x309d1c: add             x1, x1, HEAP, lsl #32
    // 0x309d20: StoreField: r2->field_87 = r1
    //     0x309d20: stur            w1, [x2, #0x87]
    // 0x309d24: LoadField: r1 = r0->field_73
    //     0x309d24: ldur            w1, [x0, #0x73]
    // 0x309d28: DecompressPointer r1
    //     0x309d28: add             x1, x1, HEAP, lsl #32
    // 0x309d2c: StoreField: r2->field_8b = r1
    //     0x309d2c: stur            w1, [x2, #0x8b]
    // 0x309d30: LoadField: r1 = r0->field_67
    //     0x309d30: ldur            w1, [x0, #0x67]
    // 0x309d34: DecompressPointer r1
    //     0x309d34: add             x1, x1, HEAP, lsl #32
    // 0x309d38: StoreField: r2->field_8f = r1
    //     0x309d38: stur            w1, [x2, #0x8f]
    // 0x309d3c: LoadField: r1 = r0->field_7b
    //     0x309d3c: ldur            w1, [x0, #0x7b]
    // 0x309d40: DecompressPointer r1
    //     0x309d40: add             x1, x1, HEAP, lsl #32
    // 0x309d44: StoreField: r2->field_93 = r1
    //     0x309d44: stur            w1, [x2, #0x93]
    // 0x309d48: LoadField: r1 = r0->field_8b
    //     0x309d48: ldur            w1, [x0, #0x8b]
    // 0x309d4c: DecompressPointer r1
    //     0x309d4c: add             x1, x1, HEAP, lsl #32
    // 0x309d50: StoreField: r2->field_97 = r1
    //     0x309d50: stur            w1, [x2, #0x97]
    // 0x309d54: LoadField: r1 = r0->field_7f
    //     0x309d54: ldur            w1, [x0, #0x7f]
    // 0x309d58: DecompressPointer r1
    //     0x309d58: add             x1, x1, HEAP, lsl #32
    // 0x309d5c: StoreField: r2->field_9b = r1
    //     0x309d5c: stur            w1, [x2, #0x9b]
    // 0x309d60: LoadField: r1 = r0->field_83
    //     0x309d60: ldur            w1, [x0, #0x83]
    // 0x309d64: DecompressPointer r1
    //     0x309d64: add             x1, x1, HEAP, lsl #32
    // 0x309d68: StoreField: r2->field_9f = r1
    //     0x309d68: stur            w1, [x2, #0x9f]
    // 0x309d6c: LoadField: r1 = r0->field_87
    //     0x309d6c: ldur            w1, [x0, #0x87]
    // 0x309d70: DecompressPointer r1
    //     0x309d70: add             x1, x1, HEAP, lsl #32
    // 0x309d74: StoreField: r2->field_a3 = r1
    //     0x309d74: stur            w1, [x2, #0xa3]
    // 0x309d78: LoadField: r1 = r0->field_8f
    //     0x309d78: ldur            w1, [x0, #0x8f]
    // 0x309d7c: DecompressPointer r1
    //     0x309d7c: add             x1, x1, HEAP, lsl #32
    // 0x309d80: StoreField: r2->field_a7 = r1
    //     0x309d80: stur            w1, [x2, #0xa7]
    // 0x309d84: LoadField: r1 = r0->field_97
    //     0x309d84: ldur            w1, [x0, #0x97]
    // 0x309d88: DecompressPointer r1
    //     0x309d88: add             x1, x1, HEAP, lsl #32
    // 0x309d8c: StoreField: r2->field_ab = r1
    //     0x309d8c: stur            w1, [x2, #0xab]
    // 0x309d90: LoadField: r1 = r0->field_93
    //     0x309d90: ldur            w1, [x0, #0x93]
    // 0x309d94: DecompressPointer r1
    //     0x309d94: add             x1, x1, HEAP, lsl #32
    // 0x309d98: StoreField: r2->field_af = r1
    //     0x309d98: stur            w1, [x2, #0xaf]
    // 0x309d9c: LoadField: r1 = r0->field_9b
    //     0x309d9c: ldur            w1, [x0, #0x9b]
    // 0x309da0: DecompressPointer r1
    //     0x309da0: add             x1, x1, HEAP, lsl #32
    // 0x309da4: StoreField: r2->field_b3 = r1
    //     0x309da4: stur            w1, [x2, #0xb3]
    // 0x309da8: LoadField: r1 = r0->field_af
    //     0x309da8: ldur            w1, [x0, #0xaf]
    // 0x309dac: DecompressPointer r1
    //     0x309dac: add             x1, x1, HEAP, lsl #32
    // 0x309db0: StoreField: r2->field_b7 = r1
    //     0x309db0: stur            w1, [x2, #0xb7]
    // 0x309db4: LoadField: r1 = r0->field_b3
    //     0x309db4: ldur            w1, [x0, #0xb3]
    // 0x309db8: DecompressPointer r1
    //     0x309db8: add             x1, x1, HEAP, lsl #32
    // 0x309dbc: StoreField: r2->field_bb = r1
    //     0x309dbc: stur            w1, [x2, #0xbb]
    // 0x309dc0: LoadField: r1 = r0->field_b7
    //     0x309dc0: ldur            w1, [x0, #0xb7]
    // 0x309dc4: DecompressPointer r1
    //     0x309dc4: add             x1, x1, HEAP, lsl #32
    // 0x309dc8: StoreField: r2->field_bf = r1
    //     0x309dc8: stur            w1, [x2, #0xbf]
    // 0x309dcc: LoadField: r1 = r0->field_bb
    //     0x309dcc: ldur            w1, [x0, #0xbb]
    // 0x309dd0: DecompressPointer r1
    //     0x309dd0: add             x1, x1, HEAP, lsl #32
    // 0x309dd4: StoreField: r2->field_c3 = r1
    //     0x309dd4: stur            w1, [x2, #0xc3]
    // 0x309dd8: LoadField: r1 = r0->field_bf
    //     0x309dd8: ldur            w1, [x0, #0xbf]
    // 0x309ddc: DecompressPointer r1
    //     0x309ddc: add             x1, x1, HEAP, lsl #32
    // 0x309de0: StoreField: r2->field_c7 = r1
    //     0x309de0: stur            w1, [x2, #0xc7]
    // 0x309de4: LoadField: r1 = r0->field_c3
    //     0x309de4: ldur            w1, [x0, #0xc3]
    // 0x309de8: DecompressPointer r1
    //     0x309de8: add             x1, x1, HEAP, lsl #32
    // 0x309dec: StoreField: r2->field_cb = r1
    //     0x309dec: stur            w1, [x2, #0xcb]
    // 0x309df0: LoadField: r1 = r0->field_c7
    //     0x309df0: ldur            w1, [x0, #0xc7]
    // 0x309df4: DecompressPointer r1
    //     0x309df4: add             x1, x1, HEAP, lsl #32
    // 0x309df8: StoreField: r2->field_cf = r1
    //     0x309df8: stur            w1, [x2, #0xcf]
    // 0x309dfc: LoadField: r1 = r0->field_cb
    //     0x309dfc: ldur            w1, [x0, #0xcb]
    // 0x309e00: DecompressPointer r1
    //     0x309e00: add             x1, x1, HEAP, lsl #32
    // 0x309e04: StoreField: r2->field_d3 = r1
    //     0x309e04: stur            w1, [x2, #0xd3]
    // 0x309e08: LoadField: r1 = r0->field_cf
    //     0x309e08: ldur            w1, [x0, #0xcf]
    // 0x309e0c: DecompressPointer r1
    //     0x309e0c: add             x1, x1, HEAP, lsl #32
    // 0x309e10: StoreField: r2->field_d7 = r1
    //     0x309e10: stur            w1, [x2, #0xd7]
    // 0x309e14: LoadField: r1 = r0->field_d3
    //     0x309e14: ldur            w1, [x0, #0xd3]
    // 0x309e18: DecompressPointer r1
    //     0x309e18: add             x1, x1, HEAP, lsl #32
    // 0x309e1c: StoreField: r2->field_db = r1
    //     0x309e1c: stur            w1, [x2, #0xdb]
    // 0x309e20: r1 = <Object?>
    //     0x309e20: ldr             x1, [PP, #0x560]  ; [pp+0x560] TypeArguments: <Object?>
    // 0x309e24: r0 = AllocateGrowableArray()
    //     0x309e24: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x309e28: mov             x1, x0
    // 0x309e2c: ldur            x0, [fp, #-0x10]
    // 0x309e30: StoreField: r1->field_f = r0
    //     0x309e30: stur            w0, [x1, #0xf]
    // 0x309e34: r0 = 104
    //     0x309e34: movz            x0, #0x68
    // 0x309e38: StoreField: r1->field_b = r0
    //     0x309e38: stur            w0, [x1, #0xb]
    // 0x309e3c: str             x1, [SP]
    // 0x309e40: r0 = hashAll()
    //     0x309e40: bl              #0x2ffc6c  ; [dart:core] Object::hashAll
    // 0x309e44: mov             x2, x0
    // 0x309e48: r0 = BoxInt64Instr(r2)
    //     0x309e48: sbfiz           x0, x2, #1, #0x1f
    //     0x309e4c: cmp             x2, x0, asr #1
    //     0x309e50: b.eq            #0x309e5c
    //     0x309e54: bl              #0x3e5e54
    //     0x309e58: stur            x2, [x0, #7]
    // 0x309e5c: LeaveFrame
    //     0x309e5c: mov             SP, fp
    //     0x309e60: ldp             fp, lr, [SP], #0x10
    // 0x309e64: ret
    //     0x309e64: ret             
    // 0x309e68: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x309e68: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x309e6c: b               #0x309b8c
  }
  _ ==(/* No info */) {
    // ** addr: 0x365490, size: 0x240
    // 0x365490: EnterFrame
    //     0x365490: stp             fp, lr, [SP, #-0x10]!
    //     0x365494: mov             fp, SP
    // 0x365498: AllocStack(0x10)
    //     0x365498: sub             SP, SP, #0x10
    // 0x36549c: CheckStackOverflow
    //     0x36549c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3654a0: cmp             SP, x16
    //     0x3654a4: b.ls            #0x3656c8
    // 0x3654a8: ldr             x0, [fp, #0x10]
    // 0x3654ac: cmp             w0, NULL
    // 0x3654b0: b.ne            #0x3654c4
    // 0x3654b4: r0 = false
    //     0x3654b4: add             x0, NULL, #0x30  ; false
    // 0x3654b8: LeaveFrame
    //     0x3654b8: mov             SP, fp
    //     0x3654bc: ldp             fp, lr, [SP], #0x10
    // 0x3654c0: ret
    //     0x3654c0: ret             
    // 0x3654c4: ldr             x1, [fp, #0x18]
    // 0x3654c8: cmp             w1, w0
    // 0x3654cc: b.ne            #0x3654e0
    // 0x3654d0: r0 = true
    //     0x3654d0: add             x0, NULL, #0x20  ; true
    // 0x3654d4: LeaveFrame
    //     0x3654d4: mov             SP, fp
    //     0x3654d8: ldp             fp, lr, [SP], #0x10
    // 0x3654dc: ret
    //     0x3654dc: ret             
    // 0x3654e0: str             x0, [SP]
    // 0x3654e4: r0 = runtimeType()
    //     0x3654e4: bl              #0x2d0354  ; [dart:core] Object::runtimeType
    // 0x3654e8: r1 = LoadClassIdInstr(r0)
    //     0x3654e8: ldur            x1, [x0, #-1]
    //     0x3654ec: ubfx            x1, x1, #0xc, #0x14
    // 0x3654f0: r16 = InputDecoration
    //     0x3654f0: add             x16, PP, #0xc, lsl #12  ; [pp+0xc7b0] Type: InputDecoration
    //     0x3654f4: ldr             x16, [x16, #0x7b0]
    // 0x3654f8: stp             x16, x0, [SP]
    // 0x3654fc: mov             x0, x1
    // 0x365500: mov             lr, x0
    // 0x365504: ldr             lr, [x21, lr, lsl #3]
    // 0x365508: blr             lr
    // 0x36550c: tbz             w0, #4, #0x365520
    // 0x365510: r0 = false
    //     0x365510: add             x0, NULL, #0x30  ; false
    // 0x365514: LeaveFrame
    //     0x365514: mov             SP, fp
    //     0x365518: ldp             fp, lr, [SP], #0x10
    // 0x36551c: ret
    //     0x36551c: ret             
    // 0x365520: ldr             x1, [fp, #0x10]
    // 0x365524: r0 = 59
    //     0x365524: movz            x0, #0x3b
    // 0x365528: branchIfSmi(r1, 0x365534)
    //     0x365528: tbz             w1, #0, #0x365534
    // 0x36552c: r0 = LoadClassIdInstr(r1)
    //     0x36552c: ldur            x0, [x1, #-1]
    //     0x365530: ubfx            x0, x0, #0xc, #0x14
    // 0x365534: cmp             x0, #0x2d7
    // 0x365538: b.ne            #0x3656b8
    // 0x36553c: ldr             x2, [fp, #0x18]
    // 0x365540: LoadField: r0 = r1->field_13
    //     0x365540: ldur            w0, [x1, #0x13]
    // 0x365544: DecompressPointer r0
    //     0x365544: add             x0, x0, HEAP, lsl #32
    // 0x365548: LoadField: r3 = r2->field_13
    //     0x365548: ldur            w3, [x2, #0x13]
    // 0x36554c: DecompressPointer r3
    //     0x36554c: add             x3, x3, HEAP, lsl #32
    // 0x365550: r4 = LoadClassIdInstr(r0)
    //     0x365550: ldur            x4, [x0, #-1]
    //     0x365554: ubfx            x4, x4, #0xc, #0x14
    // 0x365558: stp             x3, x0, [SP]
    // 0x36555c: mov             x0, x4
    // 0x365560: mov             lr, x0
    // 0x365564: ldr             lr, [x21, lr, lsl #3]
    // 0x365568: blr             lr
    // 0x36556c: tbnz            w0, #4, #0x3656b8
    // 0x365570: ldr             x2, [fp, #0x18]
    // 0x365574: ldr             x1, [fp, #0x10]
    // 0x365578: LoadField: r0 = r1->field_37
    //     0x365578: ldur            w0, [x1, #0x37]
    // 0x36557c: DecompressPointer r0
    //     0x36557c: add             x0, x0, HEAP, lsl #32
    // 0x365580: LoadField: r3 = r2->field_37
    //     0x365580: ldur            w3, [x2, #0x37]
    // 0x365584: DecompressPointer r3
    //     0x365584: add             x3, x3, HEAP, lsl #32
    // 0x365588: cmp             w0, w3
    // 0x36558c: b.ne            #0x3656b8
    // 0x365590: LoadField: r0 = r1->field_4f
    //     0x365590: ldur            w0, [x1, #0x4f]
    // 0x365594: DecompressPointer r0
    //     0x365594: add             x0, x0, HEAP, lsl #32
    // 0x365598: LoadField: r3 = r2->field_4f
    //     0x365598: ldur            w3, [x2, #0x4f]
    // 0x36559c: DecompressPointer r3
    //     0x36559c: add             x3, x3, HEAP, lsl #32
    // 0x3655a0: cmp             w0, w3
    // 0x3655a4: b.ne            #0x3656b8
    // 0x3655a8: LoadField: r0 = r1->field_53
    //     0x3655a8: ldur            w0, [x1, #0x53]
    // 0x3655ac: DecompressPointer r0
    //     0x3655ac: add             x0, x0, HEAP, lsl #32
    // 0x3655b0: LoadField: r3 = r2->field_53
    //     0x3655b0: ldur            w3, [x2, #0x53]
    // 0x3655b4: DecompressPointer r3
    //     0x3655b4: add             x3, x3, HEAP, lsl #32
    // 0x3655b8: r4 = LoadClassIdInstr(r0)
    //     0x3655b8: ldur            x4, [x0, #-1]
    //     0x3655bc: ubfx            x4, x4, #0xc, #0x14
    // 0x3655c0: stp             x3, x0, [SP]
    // 0x3655c4: mov             x0, x4
    // 0x3655c8: mov             lr, x0
    // 0x3655cc: ldr             lr, [x21, lr, lsl #3]
    // 0x3655d0: blr             lr
    // 0x3655d4: tbnz            w0, #4, #0x3656b8
    // 0x3655d8: ldr             x2, [fp, #0x18]
    // 0x3655dc: ldr             x1, [fp, #0x10]
    // 0x3655e0: LoadField: r0 = r1->field_57
    //     0x3655e0: ldur            w0, [x1, #0x57]
    // 0x3655e4: DecompressPointer r0
    //     0x3655e4: add             x0, x0, HEAP, lsl #32
    // 0x3655e8: LoadField: r3 = r2->field_57
    //     0x3655e8: ldur            w3, [x2, #0x57]
    // 0x3655ec: DecompressPointer r3
    //     0x3655ec: add             x3, x3, HEAP, lsl #32
    // 0x3655f0: cmp             w0, w3
    // 0x3655f4: b.ne            #0x3656b8
    // 0x3655f8: LoadField: r0 = r1->field_5f
    //     0x3655f8: ldur            w0, [x1, #0x5f]
    // 0x3655fc: DecompressPointer r0
    //     0x3655fc: add             x0, x0, HEAP, lsl #32
    // 0x365600: LoadField: r3 = r2->field_5f
    //     0x365600: ldur            w3, [x2, #0x5f]
    // 0x365604: DecompressPointer r3
    //     0x365604: add             x3, x3, HEAP, lsl #32
    // 0x365608: cmp             w0, w3
    // 0x36560c: b.ne            #0x3656b8
    // 0x365610: LoadField: r0 = r1->field_9f
    //     0x365610: ldur            w0, [x1, #0x9f]
    // 0x365614: DecompressPointer r0
    //     0x365614: add             x0, x0, HEAP, lsl #32
    // 0x365618: LoadField: r3 = r2->field_9f
    //     0x365618: ldur            w3, [x2, #0x9f]
    // 0x36561c: DecompressPointer r3
    //     0x36561c: add             x3, x3, HEAP, lsl #32
    // 0x365620: cmp             w0, w3
    // 0x365624: b.ne            #0x3656b8
    // 0x365628: LoadField: r0 = r1->field_a3
    //     0x365628: ldur            w0, [x1, #0xa3]
    // 0x36562c: DecompressPointer r0
    //     0x36562c: add             x0, x0, HEAP, lsl #32
    // 0x365630: LoadField: r3 = r2->field_a3
    //     0x365630: ldur            w3, [x2, #0xa3]
    // 0x365634: DecompressPointer r3
    //     0x365634: add             x3, x3, HEAP, lsl #32
    // 0x365638: r4 = LoadClassIdInstr(r0)
    //     0x365638: ldur            x4, [x0, #-1]
    //     0x36563c: ubfx            x4, x4, #0xc, #0x14
    // 0x365640: stp             x3, x0, [SP]
    // 0x365644: mov             x0, x4
    // 0x365648: mov             lr, x0
    // 0x36564c: ldr             lr, [x21, lr, lsl #3]
    // 0x365650: blr             lr
    // 0x365654: tbnz            w0, #4, #0x3656b8
    // 0x365658: ldr             x2, [fp, #0x18]
    // 0x36565c: ldr             x1, [fp, #0x10]
    // 0x365660: LoadField: r0 = r1->field_c3
    //     0x365660: ldur            w0, [x1, #0xc3]
    // 0x365664: DecompressPointer r0
    //     0x365664: add             x0, x0, HEAP, lsl #32
    // 0x365668: LoadField: r3 = r2->field_c3
    //     0x365668: ldur            w3, [x2, #0xc3]
    // 0x36566c: DecompressPointer r3
    //     0x36566c: add             x3, x3, HEAP, lsl #32
    // 0x365670: r4 = LoadClassIdInstr(r0)
    //     0x365670: ldur            x4, [x0, #-1]
    //     0x365674: ubfx            x4, x4, #0xc, #0x14
    // 0x365678: stp             x3, x0, [SP]
    // 0x36567c: mov             x0, x4
    // 0x365680: mov             lr, x0
    // 0x365684: ldr             lr, [x21, lr, lsl #3]
    // 0x365688: blr             lr
    // 0x36568c: tbnz            w0, #4, #0x3656b8
    // 0x365690: ldr             x2, [fp, #0x18]
    // 0x365694: ldr             x1, [fp, #0x10]
    // 0x365698: LoadField: r3 = r1->field_cf
    //     0x365698: ldur            w3, [x1, #0xcf]
    // 0x36569c: DecompressPointer r3
    //     0x36569c: add             x3, x3, HEAP, lsl #32
    // 0x3656a0: LoadField: r1 = r2->field_cf
    //     0x3656a0: ldur            w1, [x2, #0xcf]
    // 0x3656a4: DecompressPointer r1
    //     0x3656a4: add             x1, x1, HEAP, lsl #32
    // 0x3656a8: cmp             w3, w1
    // 0x3656ac: b.ne            #0x3656b8
    // 0x3656b0: r0 = true
    //     0x3656b0: add             x0, NULL, #0x20  ; true
    // 0x3656b4: b               #0x3656bc
    // 0x3656b8: r0 = false
    //     0x3656b8: add             x0, NULL, #0x30  ; false
    // 0x3656bc: LeaveFrame
    //     0x3656bc: mov             SP, fp
    //     0x3656c0: ldp             fp, lr, [SP], #0x10
    // 0x3656c4: ret
    //     0x3656c4: ret             
    // 0x3656c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3656c8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3656cc: b               #0x3654a8
  }
}

// class id: 728, size: 0x34, field offset: 0x8
//   const constructor, 
class _RenderDecorationLayout extends Object {
}

// class id: 729, size: 0x64, field offset: 0x8
//   const constructor, 
class _Decoration extends Object {

  get _ hashCode(/* No info */) {
    // ** addr: 0x3099b8, size: 0x1b8
    // 0x3099b8: EnterFrame
    //     0x3099b8: stp             fp, lr, [SP, #-0x10]!
    //     0x3099bc: mov             fp, SP
    // 0x3099c0: AllocStack(0xa0)
    //     0x3099c0: sub             SP, SP, #0xa0
    // 0x3099c4: CheckStackOverflow
    //     0x3099c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3099c8: cmp             SP, x16
    //     0x3099cc: b.ls            #0x309ae4
    // 0x3099d0: ldr             x0, [fp, #0x10]
    // 0x3099d4: LoadField: r1 = r0->field_7
    //     0x3099d4: ldur            w1, [x0, #7]
    // 0x3099d8: DecompressPointer r1
    //     0x3099d8: add             x1, x1, HEAP, lsl #32
    // 0x3099dc: LoadField: d0 = r0->field_f
    //     0x3099dc: ldur            d0, [x0, #0xf]
    // 0x3099e0: LoadField: d1 = r0->field_17
    //     0x3099e0: ldur            d1, [x0, #0x17]
    // 0x3099e4: LoadField: r2 = r0->field_23
    //     0x3099e4: ldur            w2, [x0, #0x23]
    // 0x3099e8: DecompressPointer r2
    //     0x3099e8: add             x2, x2, HEAP, lsl #32
    // 0x3099ec: LoadField: r3 = r0->field_27
    //     0x3099ec: ldur            w3, [x0, #0x27]
    // 0x3099f0: DecompressPointer r3
    //     0x3099f0: add             x3, x3, HEAP, lsl #32
    // 0x3099f4: LoadField: r4 = r0->field_2f
    //     0x3099f4: ldur            w4, [x0, #0x2f]
    // 0x3099f8: DecompressPointer r4
    //     0x3099f8: add             x4, x4, HEAP, lsl #32
    // 0x3099fc: LoadField: r5 = r0->field_33
    //     0x3099fc: ldur            w5, [x0, #0x33]
    // 0x309a00: DecompressPointer r5
    //     0x309a00: add             x5, x5, HEAP, lsl #32
    // 0x309a04: LoadField: r6 = r0->field_3b
    //     0x309a04: ldur            w6, [x0, #0x3b]
    // 0x309a08: DecompressPointer r6
    //     0x309a08: add             x6, x6, HEAP, lsl #32
    // 0x309a0c: LoadField: r7 = r0->field_3f
    //     0x309a0c: ldur            w7, [x0, #0x3f]
    // 0x309a10: DecompressPointer r7
    //     0x309a10: add             x7, x7, HEAP, lsl #32
    // 0x309a14: LoadField: r8 = r0->field_47
    //     0x309a14: ldur            w8, [x0, #0x47]
    // 0x309a18: DecompressPointer r8
    //     0x309a18: add             x8, x8, HEAP, lsl #32
    // 0x309a1c: LoadField: r9 = r0->field_4b
    //     0x309a1c: ldur            w9, [x0, #0x4b]
    // 0x309a20: DecompressPointer r9
    //     0x309a20: add             x9, x9, HEAP, lsl #32
    // 0x309a24: LoadField: r10 = r0->field_57
    //     0x309a24: ldur            w10, [x0, #0x57]
    // 0x309a28: DecompressPointer r10
    //     0x309a28: add             x10, x10, HEAP, lsl #32
    // 0x309a2c: LoadField: r11 = r0->field_5f
    //     0x309a2c: ldur            w11, [x0, #0x5f]
    // 0x309a30: DecompressPointer r11
    //     0x309a30: add             x11, x11, HEAP, lsl #32
    // 0x309a34: r0 = inline_Allocate_Double()
    //     0x309a34: ldp             x0, x12, [THR, #0x50]  ; THR::top
    //     0x309a38: add             x0, x0, #0x10
    //     0x309a3c: cmp             x12, x0
    //     0x309a40: b.ls            #0x309aec
    //     0x309a44: str             x0, [THR, #0x50]  ; THR::top
    //     0x309a48: sub             x0, x0, #0xf
    //     0x309a4c: movz            x12, #0xd148
    //     0x309a50: movk            x12, #0x3, lsl #16
    //     0x309a54: stur            x12, [x0, #-1]
    // 0x309a58: StoreField: r0->field_7 = d0
    //     0x309a58: stur            d0, [x0, #7]
    // 0x309a5c: r12 = inline_Allocate_Double()
    //     0x309a5c: ldp             x12, x13, [THR, #0x50]  ; THR::top
    //     0x309a60: add             x12, x12, #0x10
    //     0x309a64: cmp             x13, x12
    //     0x309a68: b.ls            #0x309b2c
    //     0x309a6c: str             x12, [THR, #0x50]  ; THR::top
    //     0x309a70: sub             x12, x12, #0xf
    //     0x309a74: movz            x13, #0xd148
    //     0x309a78: movk            x13, #0x3, lsl #16
    //     0x309a7c: stur            x13, [x12, #-1]
    // 0x309a80: StoreField: r12->field_7 = d1
    //     0x309a80: stur            d1, [x12, #7]
    // 0x309a84: stp             x0, x1, [SP, #0x90]
    // 0x309a88: r16 = Instance_FloatingLabelAlignment
    //     0x309a88: add             x16, PP, #0xa, lsl #12  ; [pp+0xad68] Obj!FloatingLabelAlignment@473731
    //     0x309a8c: ldr             x16, [x16, #0xd68]
    // 0x309a90: stp             x16, x12, [SP, #0x80]
    // 0x309a94: stp             x3, x2, [SP, #0x70]
    // 0x309a98: r16 = false
    //     0x309a98: add             x16, NULL, #0x30  ; false
    // 0x309a9c: stp             x4, x16, [SP, #0x60]
    // 0x309aa0: stp             NULL, x5, [SP, #0x50]
    // 0x309aa4: stp             x7, x6, [SP, #0x40]
    // 0x309aa8: stp             x8, NULL, [SP, #0x30]
    // 0x309aac: stp             NULL, x9, [SP, #0x20]
    // 0x309ab0: stp             x10, NULL, [SP, #0x10]
    // 0x309ab4: stp             x11, NULL, [SP]
    // 0x309ab8: r4 = const [0, 0x14, 0x14, 0x14, null]
    //     0x309ab8: ldr             x4, [PP, #0x67b0]  ; [pp+0x67b0] List(5) [0, 0x14, 0x14, 0x14, Null]
    // 0x309abc: r0 = hash()
    //     0x309abc: bl              #0x2f86fc  ; [dart:core] Object::hash
    // 0x309ac0: mov             x2, x0
    // 0x309ac4: r0 = BoxInt64Instr(r2)
    //     0x309ac4: sbfiz           x0, x2, #1, #0x1f
    //     0x309ac8: cmp             x2, x0, asr #1
    //     0x309acc: b.eq            #0x309ad8
    //     0x309ad0: bl              #0x3e5e54
    //     0x309ad4: stur            x2, [x0, #7]
    // 0x309ad8: LeaveFrame
    //     0x309ad8: mov             SP, fp
    //     0x309adc: ldp             fp, lr, [SP], #0x10
    // 0x309ae0: ret
    //     0x309ae0: ret             
    // 0x309ae4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x309ae4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x309ae8: b               #0x3099d0
    // 0x309aec: stp             q0, q1, [SP, #-0x20]!
    // 0x309af0: stp             x10, x11, [SP, #-0x10]!
    // 0x309af4: stp             x8, x9, [SP, #-0x10]!
    // 0x309af8: stp             x6, x7, [SP, #-0x10]!
    // 0x309afc: stp             x4, x5, [SP, #-0x10]!
    // 0x309b00: stp             x2, x3, [SP, #-0x10]!
    // 0x309b04: SaveReg r1
    //     0x309b04: str             x1, [SP, #-8]!
    // 0x309b08: r0 = AllocateDouble()
    //     0x309b08: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x309b0c: RestoreReg r1
    //     0x309b0c: ldr             x1, [SP], #8
    // 0x309b10: ldp             x2, x3, [SP], #0x10
    // 0x309b14: ldp             x4, x5, [SP], #0x10
    // 0x309b18: ldp             x6, x7, [SP], #0x10
    // 0x309b1c: ldp             x8, x9, [SP], #0x10
    // 0x309b20: ldp             x10, x11, [SP], #0x10
    // 0x309b24: ldp             q0, q1, [SP], #0x20
    // 0x309b28: b               #0x309a58
    // 0x309b2c: SaveReg d1
    //     0x309b2c: str             q1, [SP, #-0x10]!
    // 0x309b30: stp             x10, x11, [SP, #-0x10]!
    // 0x309b34: stp             x8, x9, [SP, #-0x10]!
    // 0x309b38: stp             x6, x7, [SP, #-0x10]!
    // 0x309b3c: stp             x4, x5, [SP, #-0x10]!
    // 0x309b40: stp             x2, x3, [SP, #-0x10]!
    // 0x309b44: stp             x0, x1, [SP, #-0x10]!
    // 0x309b48: r0 = AllocateDouble()
    //     0x309b48: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x309b4c: mov             x12, x0
    // 0x309b50: ldp             x0, x1, [SP], #0x10
    // 0x309b54: ldp             x2, x3, [SP], #0x10
    // 0x309b58: ldp             x4, x5, [SP], #0x10
    // 0x309b5c: ldp             x6, x7, [SP], #0x10
    // 0x309b60: ldp             x8, x9, [SP], #0x10
    // 0x309b64: ldp             x10, x11, [SP], #0x10
    // 0x309b68: RestoreReg d1
    //     0x309b68: ldr             q1, [SP], #0x10
    // 0x309b6c: b               #0x309a80
  }
  _ ==(/* No info */) {
    // ** addr: 0x365168, size: 0x328
    // 0x365168: EnterFrame
    //     0x365168: stp             fp, lr, [SP, #-0x10]!
    //     0x36516c: mov             fp, SP
    // 0x365170: AllocStack(0x20)
    //     0x365170: sub             SP, SP, #0x20
    // 0x365174: CheckStackOverflow
    //     0x365174: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x365178: cmp             SP, x16
    //     0x36517c: b.ls            #0x365488
    // 0x365180: ldr             x0, [fp, #0x10]
    // 0x365184: cmp             w0, NULL
    // 0x365188: b.ne            #0x36519c
    // 0x36518c: r0 = false
    //     0x36518c: add             x0, NULL, #0x30  ; false
    // 0x365190: LeaveFrame
    //     0x365190: mov             SP, fp
    //     0x365194: ldp             fp, lr, [SP], #0x10
    // 0x365198: ret
    //     0x365198: ret             
    // 0x36519c: ldr             x1, [fp, #0x18]
    // 0x3651a0: cmp             w1, w0
    // 0x3651a4: b.ne            #0x3651b8
    // 0x3651a8: r0 = true
    //     0x3651a8: add             x0, NULL, #0x20  ; true
    // 0x3651ac: LeaveFrame
    //     0x3651ac: mov             SP, fp
    //     0x3651b0: ldp             fp, lr, [SP], #0x10
    // 0x3651b4: ret
    //     0x3651b4: ret             
    // 0x3651b8: str             x0, [SP]
    // 0x3651bc: r0 = runtimeType()
    //     0x3651bc: bl              #0x2d0354  ; [dart:core] Object::runtimeType
    // 0x3651c0: r1 = LoadClassIdInstr(r0)
    //     0x3651c0: ldur            x1, [x0, #-1]
    //     0x3651c4: ubfx            x1, x1, #0xc, #0x14
    // 0x3651c8: r16 = _Decoration
    //     0x3651c8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12960] Type: _Decoration
    //     0x3651cc: ldr             x16, [x16, #0x960]
    // 0x3651d0: stp             x16, x0, [SP]
    // 0x3651d4: mov             x0, x1
    // 0x3651d8: mov             lr, x0
    // 0x3651dc: ldr             lr, [x21, lr, lsl #3]
    // 0x3651e0: blr             lr
    // 0x3651e4: tbz             w0, #4, #0x3651f8
    // 0x3651e8: r0 = false
    //     0x3651e8: add             x0, NULL, #0x30  ; false
    // 0x3651ec: LeaveFrame
    //     0x3651ec: mov             SP, fp
    //     0x3651f0: ldp             fp, lr, [SP], #0x10
    // 0x3651f4: ret
    //     0x3651f4: ret             
    // 0x3651f8: ldr             x0, [fp, #0x10]
    // 0x3651fc: r1 = 59
    //     0x3651fc: movz            x1, #0x3b
    // 0x365200: branchIfSmi(r0, 0x36520c)
    //     0x365200: tbz             w0, #0, #0x36520c
    // 0x365204: r1 = LoadClassIdInstr(r0)
    //     0x365204: ldur            x1, [x0, #-1]
    //     0x365208: ubfx            x1, x1, #0xc, #0x14
    // 0x36520c: cmp             x1, #0x2d9
    // 0x365210: b.ne            #0x365478
    // 0x365214: ldr             x1, [fp, #0x18]
    // 0x365218: LoadField: r2 = r0->field_7
    //     0x365218: ldur            w2, [x0, #7]
    // 0x36521c: DecompressPointer r2
    //     0x36521c: add             x2, x2, HEAP, lsl #32
    // 0x365220: LoadField: r3 = r1->field_7
    //     0x365220: ldur            w3, [x1, #7]
    // 0x365224: DecompressPointer r3
    //     0x365224: add             x3, x3, HEAP, lsl #32
    // 0x365228: stp             x3, x2, [SP]
    // 0x36522c: r0 = ==()
    //     0x36522c: bl              #0x3660b8  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsetsGeometry::==
    // 0x365230: tbnz            w0, #4, #0x365478
    // 0x365234: ldr             x2, [fp, #0x18]
    // 0x365238: ldr             x1, [fp, #0x10]
    // 0x36523c: LoadField: d0 = r1->field_f
    //     0x36523c: ldur            d0, [x1, #0xf]
    // 0x365240: LoadField: d1 = r2->field_f
    //     0x365240: ldur            d1, [x2, #0xf]
    // 0x365244: fcmp            d0, d1
    // 0x365248: b.ne            #0x365478
    // 0x36524c: LoadField: d0 = r1->field_17
    //     0x36524c: ldur            d0, [x1, #0x17]
    // 0x365250: LoadField: d1 = r2->field_17
    //     0x365250: ldur            d1, [x2, #0x17]
    // 0x365254: fcmp            d0, d1
    // 0x365258: b.ne            #0x365478
    // 0x36525c: LoadField: r0 = r1->field_23
    //     0x36525c: ldur            w0, [x1, #0x23]
    // 0x365260: DecompressPointer r0
    //     0x365260: add             x0, x0, HEAP, lsl #32
    // 0x365264: LoadField: r3 = r2->field_23
    //     0x365264: ldur            w3, [x2, #0x23]
    // 0x365268: DecompressPointer r3
    //     0x365268: add             x3, x3, HEAP, lsl #32
    // 0x36526c: r4 = LoadClassIdInstr(r0)
    //     0x36526c: ldur            x4, [x0, #-1]
    //     0x365270: ubfx            x4, x4, #0xc, #0x14
    // 0x365274: cmp             x4, #0x2ea
    // 0x365278: b.ne            #0x365290
    // 0x36527c: cmp             w0, w3
    // 0x365280: b.ne            #0x365478
    // 0x365284: mov             x0, x1
    // 0x365288: mov             x1, x2
    // 0x36528c: b               #0x3652b8
    // 0x365290: r4 = LoadClassIdInstr(r0)
    //     0x365290: ldur            x4, [x0, #-1]
    //     0x365294: ubfx            x4, x4, #0xc, #0x14
    // 0x365298: stp             x3, x0, [SP]
    // 0x36529c: mov             x0, x4
    // 0x3652a0: mov             lr, x0
    // 0x3652a4: ldr             lr, [x21, lr, lsl #3]
    // 0x3652a8: blr             lr
    // 0x3652ac: tbnz            w0, #4, #0x365478
    // 0x3652b0: ldr             x1, [fp, #0x18]
    // 0x3652b4: ldr             x0, [fp, #0x10]
    // 0x3652b8: LoadField: r2 = r0->field_27
    //     0x3652b8: ldur            w2, [x0, #0x27]
    // 0x3652bc: DecompressPointer r2
    //     0x3652bc: add             x2, x2, HEAP, lsl #32
    // 0x3652c0: LoadField: r3 = r1->field_27
    //     0x3652c0: ldur            w3, [x1, #0x27]
    // 0x3652c4: DecompressPointer r3
    //     0x3652c4: add             x3, x3, HEAP, lsl #32
    // 0x3652c8: stp             x3, x2, [SP]
    // 0x3652cc: r0 = ==()
    //     0x3652cc: bl              #0x3636d8  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::==
    // 0x3652d0: tbnz            w0, #4, #0x365478
    // 0x3652d4: ldr             x1, [fp, #0x18]
    // 0x3652d8: ldr             x0, [fp, #0x10]
    // 0x3652dc: LoadField: r2 = r0->field_2f
    //     0x3652dc: ldur            w2, [x0, #0x2f]
    // 0x3652e0: DecompressPointer r2
    //     0x3652e0: add             x2, x2, HEAP, lsl #32
    // 0x3652e4: LoadField: r3 = r1->field_2f
    //     0x3652e4: ldur            w3, [x1, #0x2f]
    // 0x3652e8: DecompressPointer r3
    //     0x3652e8: add             x3, x3, HEAP, lsl #32
    // 0x3652ec: cmp             w2, w3
    // 0x3652f0: b.ne            #0x365478
    // 0x3652f4: LoadField: r2 = r0->field_33
    //     0x3652f4: ldur            w2, [x0, #0x33]
    // 0x3652f8: DecompressPointer r2
    //     0x3652f8: add             x2, x2, HEAP, lsl #32
    // 0x3652fc: stur            x2, [fp, #-0x10]
    // 0x365300: LoadField: r3 = r1->field_33
    //     0x365300: ldur            w3, [x1, #0x33]
    // 0x365304: DecompressPointer r3
    //     0x365304: add             x3, x3, HEAP, lsl #32
    // 0x365308: stur            x3, [fp, #-8]
    // 0x36530c: r16 = VisualDensity
    //     0x36530c: add             x16, PP, #0xa, lsl #12  ; [pp+0xaa40] Type: VisualDensity
    //     0x365310: ldr             x16, [x16, #0xa40]
    // 0x365314: r30 = VisualDensity
    //     0x365314: add             lr, PP, #0xa, lsl #12  ; [pp+0xaa40] Type: VisualDensity
    //     0x365318: ldr             lr, [lr, #0xa40]
    // 0x36531c: stp             lr, x16, [SP]
    // 0x365320: r0 = ==()
    //     0x365320: bl              #0x36b020  ; [dart:core] _Type::==
    // 0x365324: tbnz            w0, #4, #0x365478
    // 0x365328: ldur            x0, [fp, #-0x10]
    // 0x36532c: ldur            x1, [fp, #-8]
    // 0x365330: LoadField: d0 = r1->field_7
    //     0x365330: ldur            d0, [x1, #7]
    // 0x365334: LoadField: d1 = r0->field_7
    //     0x365334: ldur            d1, [x0, #7]
    // 0x365338: fcmp            d0, d1
    // 0x36533c: b.ne            #0x365478
    // 0x365340: LoadField: d0 = r1->field_f
    //     0x365340: ldur            d0, [x1, #0xf]
    // 0x365344: LoadField: d1 = r0->field_f
    //     0x365344: ldur            d1, [x0, #0xf]
    // 0x365348: fcmp            d0, d1
    // 0x36534c: b.ne            #0x365478
    // 0x365350: ldr             x2, [fp, #0x18]
    // 0x365354: ldr             x1, [fp, #0x10]
    // 0x365358: LoadField: r0 = r1->field_3b
    //     0x365358: ldur            w0, [x1, #0x3b]
    // 0x36535c: DecompressPointer r0
    //     0x36535c: add             x0, x0, HEAP, lsl #32
    // 0x365360: LoadField: r3 = r2->field_3b
    //     0x365360: ldur            w3, [x2, #0x3b]
    // 0x365364: DecompressPointer r3
    //     0x365364: add             x3, x3, HEAP, lsl #32
    // 0x365368: r4 = LoadClassIdInstr(r0)
    //     0x365368: ldur            x4, [x0, #-1]
    //     0x36536c: ubfx            x4, x4, #0xc, #0x14
    // 0x365370: stp             x3, x0, [SP]
    // 0x365374: mov             x0, x4
    // 0x365378: mov             lr, x0
    // 0x36537c: ldr             lr, [x21, lr, lsl #3]
    // 0x365380: blr             lr
    // 0x365384: tbnz            w0, #4, #0x365478
    // 0x365388: ldr             x2, [fp, #0x18]
    // 0x36538c: ldr             x1, [fp, #0x10]
    // 0x365390: LoadField: r0 = r1->field_3f
    //     0x365390: ldur            w0, [x1, #0x3f]
    // 0x365394: DecompressPointer r0
    //     0x365394: add             x0, x0, HEAP, lsl #32
    // 0x365398: LoadField: r3 = r2->field_3f
    //     0x365398: ldur            w3, [x2, #0x3f]
    // 0x36539c: DecompressPointer r3
    //     0x36539c: add             x3, x3, HEAP, lsl #32
    // 0x3653a0: r4 = LoadClassIdInstr(r0)
    //     0x3653a0: ldur            x4, [x0, #-1]
    //     0x3653a4: ubfx            x4, x4, #0xc, #0x14
    // 0x3653a8: stp             x3, x0, [SP]
    // 0x3653ac: mov             x0, x4
    // 0x3653b0: mov             lr, x0
    // 0x3653b4: ldr             lr, [x21, lr, lsl #3]
    // 0x3653b8: blr             lr
    // 0x3653bc: tbnz            w0, #4, #0x365478
    // 0x3653c0: ldr             x2, [fp, #0x18]
    // 0x3653c4: ldr             x1, [fp, #0x10]
    // 0x3653c8: LoadField: r0 = r1->field_47
    //     0x3653c8: ldur            w0, [x1, #0x47]
    // 0x3653cc: DecompressPointer r0
    //     0x3653cc: add             x0, x0, HEAP, lsl #32
    // 0x3653d0: LoadField: r3 = r2->field_47
    //     0x3653d0: ldur            w3, [x2, #0x47]
    // 0x3653d4: DecompressPointer r3
    //     0x3653d4: add             x3, x3, HEAP, lsl #32
    // 0x3653d8: r4 = LoadClassIdInstr(r0)
    //     0x3653d8: ldur            x4, [x0, #-1]
    //     0x3653dc: ubfx            x4, x4, #0xc, #0x14
    // 0x3653e0: stp             x3, x0, [SP]
    // 0x3653e4: mov             x0, x4
    // 0x3653e8: mov             lr, x0
    // 0x3653ec: ldr             lr, [x21, lr, lsl #3]
    // 0x3653f0: blr             lr
    // 0x3653f4: tbnz            w0, #4, #0x365478
    // 0x3653f8: ldr             x2, [fp, #0x18]
    // 0x3653fc: ldr             x1, [fp, #0x10]
    // 0x365400: LoadField: r0 = r1->field_4b
    //     0x365400: ldur            w0, [x1, #0x4b]
    // 0x365404: DecompressPointer r0
    //     0x365404: add             x0, x0, HEAP, lsl #32
    // 0x365408: LoadField: r3 = r2->field_4b
    //     0x365408: ldur            w3, [x2, #0x4b]
    // 0x36540c: DecompressPointer r3
    //     0x36540c: add             x3, x3, HEAP, lsl #32
    // 0x365410: r4 = LoadClassIdInstr(r0)
    //     0x365410: ldur            x4, [x0, #-1]
    //     0x365414: ubfx            x4, x4, #0xc, #0x14
    // 0x365418: stp             x3, x0, [SP]
    // 0x36541c: mov             x0, x4
    // 0x365420: mov             lr, x0
    // 0x365424: ldr             lr, [x21, lr, lsl #3]
    // 0x365428: blr             lr
    // 0x36542c: tbnz            w0, #4, #0x365478
    // 0x365430: ldr             x2, [fp, #0x18]
    // 0x365434: ldr             x1, [fp, #0x10]
    // 0x365438: LoadField: r3 = r1->field_57
    //     0x365438: ldur            w3, [x1, #0x57]
    // 0x36543c: DecompressPointer r3
    //     0x36543c: add             x3, x3, HEAP, lsl #32
    // 0x365440: LoadField: r4 = r2->field_57
    //     0x365440: ldur            w4, [x2, #0x57]
    // 0x365444: DecompressPointer r4
    //     0x365444: add             x4, x4, HEAP, lsl #32
    // 0x365448: cmp             w3, w4
    // 0x36544c: b.ne            #0x365478
    // 0x365450: LoadField: r3 = r1->field_5f
    //     0x365450: ldur            w3, [x1, #0x5f]
    // 0x365454: DecompressPointer r3
    //     0x365454: add             x3, x3, HEAP, lsl #32
    // 0x365458: LoadField: r1 = r2->field_5f
    //     0x365458: ldur            w1, [x2, #0x5f]
    // 0x36545c: DecompressPointer r1
    //     0x36545c: add             x1, x1, HEAP, lsl #32
    // 0x365460: cmp             w3, w1
    // 0x365464: r16 = true
    //     0x365464: add             x16, NULL, #0x20  ; true
    // 0x365468: r17 = false
    //     0x365468: add             x17, NULL, #0x30  ; false
    // 0x36546c: csel            x2, x16, x17, eq
    // 0x365470: mov             x0, x2
    // 0x365474: b               #0x36547c
    // 0x365478: r0 = false
    //     0x365478: add             x0, NULL, #0x30  ; false
    // 0x36547c: LeaveFrame
    //     0x36547c: mov             SP, fp
    //     0x365480: ldp             fp, lr, [SP], #0x10
    // 0x365484: ret
    //     0x365484: ret             
    // 0x365488: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x365488: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x36548c: b               #0x365180
  }
}

// class id: 730, size: 0x10, field offset: 0x8
//   const constructor, 
class FloatingLabelAlignment extends Object {

  _Double field_8;

  _ toString(/* No info */) {
    // ** addr: 0x2e4ddc, size: 0x2c
    // 0x2e4ddc: EnterFrame
    //     0x2e4ddc: stp             fp, lr, [SP, #-0x10]!
    //     0x2e4de0: mov             fp, SP
    // 0x2e4de4: CheckStackOverflow
    //     0x2e4de4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2e4de8: cmp             SP, x16
    //     0x2e4dec: b.ls            #0x2e4e00
    // 0x2e4df0: r0 = _stringify()
    //     0x2e4df0: bl              #0x2e4e08  ; [package:flutter/src/material/input_decorator.dart] FloatingLabelAlignment::_stringify
    // 0x2e4df4: LeaveFrame
    //     0x2e4df4: mov             SP, fp
    //     0x2e4df8: ldp             fp, lr, [SP], #0x10
    // 0x2e4dfc: ret
    //     0x2e4dfc: ret             
    // 0x2e4e00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2e4e00: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2e4e04: b               #0x2e4df0
  }
  static _ _stringify(/* No info */) {
    // ** addr: 0x2e4e08, size: 0xe4
    // 0x2e4e08: EnterFrame
    //     0x2e4e08: stp             fp, lr, [SP, #-0x10]!
    //     0x2e4e0c: mov             fp, SP
    // 0x2e4e10: AllocStack(0x18)
    //     0x2e4e10: sub             SP, SP, #0x18
    // 0x2e4e14: d0 = -1.000000
    //     0x2e4e14: fmov            d0, #-1.00000000
    // 0x2e4e18: d0 = -1.000000
    //     0x2e4e18: fmov            d0, #-1.00000000
    // 0x2e4e1c: CheckStackOverflow
    //     0x2e4e1c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2e4e20: cmp             SP, x16
    //     0x2e4e24: b.ls            #0x2e4ee4
    // 0x2e4e28: fcmp            d0, d0
    // 0x2e4e2c: b.ne            #0x2e4e44
    // 0x2e4e30: r0 = "FloatingLabelAlignment.start"
    //     0x2e4e30: add             x0, PP, #0xa, lsl #12  ; [pp+0xad70] "FloatingLabelAlignment.start"
    //     0x2e4e34: ldr             x0, [x0, #0xd70]
    // 0x2e4e38: LeaveFrame
    //     0x2e4e38: mov             SP, fp
    //     0x2e4e3c: ldp             fp, lr, [SP], #0x10
    // 0x2e4e40: ret
    //     0x2e4e40: ret             
    // 0x2e4e44: d1 = 0.000000
    //     0x2e4e44: eor             v1.16b, v1.16b, v1.16b
    // 0x2e4e48: d1 = 0.000000
    //     0x2e4e48: eor             v1.16b, v1.16b, v1.16b
    // 0x2e4e4c: fcmp            d0, d1
    // 0x2e4e50: b.ne            #0x2e4e68
    // 0x2e4e54: r0 = "FloatingLabelAlignment.center"
    //     0x2e4e54: add             x0, PP, #0xa, lsl #12  ; [pp+0xad78] "FloatingLabelAlignment.center"
    //     0x2e4e58: ldr             x0, [x0, #0xd78]
    // 0x2e4e5c: LeaveFrame
    //     0x2e4e5c: mov             SP, fp
    //     0x2e4e60: ldp             fp, lr, [SP], #0x10
    // 0x2e4e64: ret
    //     0x2e4e64: ret             
    // 0x2e4e68: r1 = Null
    //     0x2e4e68: mov             x1, NULL
    // 0x2e4e6c: r2 = 6
    //     0x2e4e6c: movz            x2, #0x6
    // 0x2e4e70: r0 = AllocateArray()
    //     0x2e4e70: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x2e4e74: stur            x0, [fp, #-8]
    // 0x2e4e78: r17 = "FloatingLabelAlignment(x: "
    //     0x2e4e78: add             x17, PP, #0xa, lsl #12  ; [pp+0xad80] "FloatingLabelAlignment(x: "
    //     0x2e4e7c: ldr             x17, [x17, #0xd80]
    // 0x2e4e80: StoreField: r0->field_f = r17
    //     0x2e4e80: stur            w17, [x0, #0xf]
    // 0x2e4e84: r16 = -1.000000
    //     0x2e4e84: add             x16, PP, #0xa, lsl #12  ; [pp+0xad88] -1
    //     0x2e4e88: ldr             x16, [x16, #0xd88]
    // 0x2e4e8c: str             x16, [SP, #8]
    // 0x2e4e90: r1 = 1
    //     0x2e4e90: movz            x1, #0x1
    // 0x2e4e94: str             x1, [SP]
    // 0x2e4e98: r0 = toStringAsFixed()
    //     0x2e4e98: bl              #0x2b77d0  ; [dart:core] _Double::toStringAsFixed
    // 0x2e4e9c: ldur            x1, [fp, #-8]
    // 0x2e4ea0: ArrayStore: r1[1] = r0  ; List_4
    //     0x2e4ea0: add             x25, x1, #0x13
    //     0x2e4ea4: str             w0, [x25]
    //     0x2e4ea8: tbz             w0, #0, #0x2e4ec4
    //     0x2e4eac: ldurb           w16, [x1, #-1]
    //     0x2e4eb0: ldurb           w17, [x0, #-1]
    //     0x2e4eb4: and             x16, x17, x16, lsr #2
    //     0x2e4eb8: tst             x16, HEAP, lsr #32
    //     0x2e4ebc: b.eq            #0x2e4ec4
    //     0x2e4ec0: bl              #0x3e41ec
    // 0x2e4ec4: ldur            x0, [fp, #-8]
    // 0x2e4ec8: r17 = ")"
    //     0x2e4ec8: ldr             x17, [PP, #0x23d8]  ; [pp+0x23d8] ")"
    // 0x2e4ecc: StoreField: r0->field_17 = r17
    //     0x2e4ecc: stur            w17, [x0, #0x17]
    // 0x2e4ed0: str             x0, [SP]
    // 0x2e4ed4: r0 = _interpolate()
    //     0x2e4ed4: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x2e4ed8: LeaveFrame
    //     0x2e4ed8: mov             SP, fp
    //     0x2e4edc: ldp             fp, lr, [SP], #0x10
    // 0x2e4ee0: ret
    //     0x2e4ee0: ret             
    // 0x2e4ee4: r0 = StackOverflowSharedWithFPURegs()
    //     0x2e4ee4: bl              #0x3e5d54  ; StackOverflowSharedWithFPURegsStub
    // 0x2e4ee8: b               #0x2e4e28
  }
  get _ hashCode(/* No info */) {
    // ** addr: 0x30995c, size: 0x5c
    // 0x30995c: d0 = -1.000000
    //     0x30995c: fmov            d0, #-1.00000000
    // 0x309960: d0 = -1.000000
    //     0x309960: fmov            d0, #-1.00000000
    // 0x309964: mov             x16, v0.d[0]
    // 0x309968: and             x16, x16, #0x7ff0000000000000
    // 0x30996c: r17 = 9218868437227405312
    //     0x30996c: orr             x17, xzr, #0x7ff0000000000000
    // 0x309970: cmp             x16, x17
    // 0x309974: b.eq            #0x3099a4
    // 0x309978: fcvtzs          x16, d0
    // 0x30997c: scvtf           d1, x16
    // 0x309980: fcmp            d1, d0
    // 0x309984: b.ne            #0x3099a4
    // 0x309988: r17 = 11601
    //     0x309988: movz            x17, #0x2d51
    // 0x30998c: mul             x1, x16, x17
    // 0x309990: umulh           x16, x16, x17
    // 0x309994: eor             x1, x1, x16
    // 0x309998: r1 = 0
    //     0x309998: eor             x1, x1, x1, lsr #32
    // 0x30999c: and             x1, x1, #0x3fffffff
    // 0x3099a0: b               #0x3099b0
    // 0x3099a4: r1 = 0.000000
    //     0x3099a4: fmov            x1, d0
    // 0x3099a8: r1 = 0
    //     0x3099a8: eor             x1, x1, x1, lsr #32
    // 0x3099ac: and             x1, x1, #0x3fffffff
    // 0x3099b0: lsl             x0, x1, #1
    // 0x3099b4: ret
    //     0x3099b4: ret             
  }
  _ ==(/* No info */) {
    // ** addr: 0x365084, size: 0xe4
    // 0x365084: EnterFrame
    //     0x365084: stp             fp, lr, [SP, #-0x10]!
    //     0x365088: mov             fp, SP
    // 0x36508c: AllocStack(0x10)
    //     0x36508c: sub             SP, SP, #0x10
    // 0x365090: CheckStackOverflow
    //     0x365090: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x365094: cmp             SP, x16
    //     0x365098: b.ls            #0x365160
    // 0x36509c: ldr             x0, [fp, #0x10]
    // 0x3650a0: cmp             w0, NULL
    // 0x3650a4: b.ne            #0x3650b8
    // 0x3650a8: r0 = false
    //     0x3650a8: add             x0, NULL, #0x30  ; false
    // 0x3650ac: LeaveFrame
    //     0x3650ac: mov             SP, fp
    //     0x3650b0: ldp             fp, lr, [SP], #0x10
    // 0x3650b4: ret
    //     0x3650b4: ret             
    // 0x3650b8: ldr             x1, [fp, #0x18]
    // 0x3650bc: cmp             w1, w0
    // 0x3650c0: b.ne            #0x3650d4
    // 0x3650c4: r0 = true
    //     0x3650c4: add             x0, NULL, #0x20  ; true
    // 0x3650c8: LeaveFrame
    //     0x3650c8: mov             SP, fp
    //     0x3650cc: ldp             fp, lr, [SP], #0x10
    // 0x3650d0: ret
    //     0x3650d0: ret             
    // 0x3650d4: str             x0, [SP]
    // 0x3650d8: r0 = runtimeType()
    //     0x3650d8: bl              #0x2d0354  ; [dart:core] Object::runtimeType
    // 0x3650dc: r1 = LoadClassIdInstr(r0)
    //     0x3650dc: ldur            x1, [x0, #-1]
    //     0x3650e0: ubfx            x1, x1, #0xc, #0x14
    // 0x3650e4: r16 = FloatingLabelAlignment
    //     0x3650e4: add             x16, PP, #0xa, lsl #12  ; [pp+0xad90] Type: FloatingLabelAlignment
    //     0x3650e8: ldr             x16, [x16, #0xd90]
    // 0x3650ec: stp             x16, x0, [SP]
    // 0x3650f0: mov             x0, x1
    // 0x3650f4: mov             lr, x0
    // 0x3650f8: ldr             lr, [x21, lr, lsl #3]
    // 0x3650fc: blr             lr
    // 0x365100: tbz             w0, #4, #0x365114
    // 0x365104: r0 = false
    //     0x365104: add             x0, NULL, #0x30  ; false
    // 0x365108: LeaveFrame
    //     0x365108: mov             SP, fp
    //     0x36510c: ldp             fp, lr, [SP], #0x10
    // 0x365110: ret
    //     0x365110: ret             
    // 0x365114: ldr             x1, [fp, #0x10]
    // 0x365118: r2 = 59
    //     0x365118: movz            x2, #0x3b
    // 0x36511c: branchIfSmi(r1, 0x365128)
    //     0x36511c: tbz             w1, #0, #0x365128
    // 0x365120: r2 = LoadClassIdInstr(r1)
    //     0x365120: ldur            x2, [x1, #-1]
    //     0x365124: ubfx            x2, x2, #0xc, #0x14
    // 0x365128: cmp             x2, #0x2da
    // 0x36512c: b.ne            #0x365150
    // 0x365130: d0 = -1.000000
    //     0x365130: fmov            d0, #-1.00000000
    // 0x365134: d0 = -1.000000
    //     0x365134: fmov            d0, #-1.00000000
    // 0x365138: fcmp            d0, d0
    // 0x36513c: r16 = true
    //     0x36513c: add             x16, NULL, #0x20  ; true
    // 0x365140: r17 = false
    //     0x365140: add             x17, NULL, #0x30  ; false
    // 0x365144: csel            x1, x16, x17, eq
    // 0x365148: mov             x0, x1
    // 0x36514c: b               #0x365154
    // 0x365150: r0 = false
    //     0x365150: add             x0, NULL, #0x30  ; false
    // 0x365154: LeaveFrame
    //     0x365154: mov             SP, fp
    //     0x365158: ldp             fp, lr, [SP], #0x10
    // 0x36515c: ret
    //     0x36515c: ret             
    // 0x365160: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x365160: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x365164: b               #0x36509c
  }
}

// class id: 1049, size: 0x30, field offset: 0x24
class _InputBorderGap extends ChangeNotifier {

  set _ extent=(/* No info */) {
    // ** addr: 0x20fb80, size: 0x50
    // 0x20fb80: EnterFrame
    //     0x20fb80: stp             fp, lr, [SP, #-0x10]!
    //     0x20fb84: mov             fp, SP
    // 0x20fb88: AllocStack(0x8)
    //     0x20fb88: sub             SP, SP, #8
    // 0x20fb8c: CheckStackOverflow
    //     0x20fb8c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x20fb90: cmp             SP, x16
    //     0x20fb94: b.ls            #0x20fbc8
    // 0x20fb98: ldr             x0, [fp, #0x18]
    // 0x20fb9c: LoadField: d0 = r0->field_27
    //     0x20fb9c: ldur            d0, [x0, #0x27]
    // 0x20fba0: ldr             d1, [fp, #0x10]
    // 0x20fba4: fcmp            d1, d0
    // 0x20fba8: b.eq            #0x20fbb8
    // 0x20fbac: StoreField: r0->field_27 = d1
    //     0x20fbac: stur            d1, [x0, #0x27]
    // 0x20fbb0: str             x0, [SP]
    // 0x20fbb4: r0 = notifyListeners()
    //     0x20fbb4: bl              #0x1fd158  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x20fbb8: r0 = Null
    //     0x20fbb8: mov             x0, NULL
    // 0x20fbbc: LeaveFrame
    //     0x20fbbc: mov             SP, fp
    //     0x20fbc0: ldp             fp, lr, [SP], #0x10
    // 0x20fbc4: ret
    //     0x20fbc4: ret             
    // 0x20fbc8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x20fbc8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x20fbcc: b               #0x20fb98
  }
  set _ start=(/* No info */) {
    // ** addr: 0x20fbd0, size: 0x8c
    // 0x20fbd0: EnterFrame
    //     0x20fbd0: stp             fp, lr, [SP, #-0x10]!
    //     0x20fbd4: mov             fp, SP
    // 0x20fbd8: AllocStack(0x10)
    //     0x20fbd8: sub             SP, SP, #0x10
    // 0x20fbdc: CheckStackOverflow
    //     0x20fbdc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x20fbe0: cmp             SP, x16
    //     0x20fbe4: b.ls            #0x20fc54
    // 0x20fbe8: ldr             x1, [fp, #0x18]
    // 0x20fbec: LoadField: r0 = r1->field_23
    //     0x20fbec: ldur            w0, [x1, #0x23]
    // 0x20fbf0: DecompressPointer r0
    //     0x20fbf0: add             x0, x0, HEAP, lsl #32
    // 0x20fbf4: ldr             x2, [fp, #0x10]
    // 0x20fbf8: r3 = LoadClassIdInstr(r2)
    //     0x20fbf8: ldur            x3, [x2, #-1]
    //     0x20fbfc: ubfx            x3, x3, #0xc, #0x14
    // 0x20fc00: stp             x0, x2, [SP]
    // 0x20fc04: mov             x0, x3
    // 0x20fc08: mov             lr, x0
    // 0x20fc0c: ldr             lr, [x21, lr, lsl #3]
    // 0x20fc10: blr             lr
    // 0x20fc14: tbz             w0, #4, #0x20fc44
    // 0x20fc18: ldr             x1, [fp, #0x18]
    // 0x20fc1c: ldr             x0, [fp, #0x10]
    // 0x20fc20: StoreField: r1->field_23 = r0
    //     0x20fc20: stur            w0, [x1, #0x23]
    //     0x20fc24: ldurb           w16, [x1, #-1]
    //     0x20fc28: ldurb           w17, [x0, #-1]
    //     0x20fc2c: and             x16, x17, x16, lsr #2
    //     0x20fc30: tst             x16, HEAP, lsr #32
    //     0x20fc34: b.eq            #0x20fc3c
    //     0x20fc38: bl              #0x3e4608
    // 0x20fc3c: str             x1, [SP]
    // 0x20fc40: r0 = notifyListeners()
    //     0x20fc40: bl              #0x1fd158  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x20fc44: r0 = Null
    //     0x20fc44: mov             x0, NULL
    // 0x20fc48: LeaveFrame
    //     0x20fc48: mov             SP, fp
    //     0x20fc4c: ldp             fp, lr, [SP], #0x10
    // 0x20fc50: ret
    //     0x20fc50: ret             
    // 0x20fc54: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x20fc54: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x20fc58: b               #0x20fbe8
  }
  get _ hashCode(/* No info */) {
    // ** addr: 0x30947c, size: 0xa0
    // 0x30947c: EnterFrame
    //     0x30947c: stp             fp, lr, [SP, #-0x10]!
    //     0x309480: mov             fp, SP
    // 0x309484: AllocStack(0x10)
    //     0x309484: sub             SP, SP, #0x10
    // 0x309488: CheckStackOverflow
    //     0x309488: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x30948c: cmp             SP, x16
    //     0x309490: b.ls            #0x3094fc
    // 0x309494: ldr             x0, [fp, #0x10]
    // 0x309498: LoadField: r1 = r0->field_23
    //     0x309498: ldur            w1, [x0, #0x23]
    // 0x30949c: DecompressPointer r1
    //     0x30949c: add             x1, x1, HEAP, lsl #32
    // 0x3094a0: LoadField: d0 = r0->field_27
    //     0x3094a0: ldur            d0, [x0, #0x27]
    // 0x3094a4: r0 = inline_Allocate_Double()
    //     0x3094a4: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x3094a8: add             x0, x0, #0x10
    //     0x3094ac: cmp             x2, x0
    //     0x3094b0: b.ls            #0x309504
    //     0x3094b4: str             x0, [THR, #0x50]  ; THR::top
    //     0x3094b8: sub             x0, x0, #0xf
    //     0x3094bc: movz            x2, #0xd148
    //     0x3094c0: movk            x2, #0x3, lsl #16
    //     0x3094c4: stur            x2, [x0, #-1]
    // 0x3094c8: StoreField: r0->field_7 = d0
    //     0x3094c8: stur            d0, [x0, #7]
    // 0x3094cc: stp             x0, x1, [SP]
    // 0x3094d0: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x3094d0: ldr             x4, [PP, #0x90]  ; [pp+0x90] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x3094d4: r0 = hash()
    //     0x3094d4: bl              #0x2f86fc  ; [dart:core] Object::hash
    // 0x3094d8: mov             x2, x0
    // 0x3094dc: r0 = BoxInt64Instr(r2)
    //     0x3094dc: sbfiz           x0, x2, #1, #0x1f
    //     0x3094e0: cmp             x2, x0, asr #1
    //     0x3094e4: b.eq            #0x3094f0
    //     0x3094e8: bl              #0x3e5e54
    //     0x3094ec: stur            x2, [x0, #7]
    // 0x3094f0: LeaveFrame
    //     0x3094f0: mov             SP, fp
    //     0x3094f4: ldp             fp, lr, [SP], #0x10
    // 0x3094f8: ret
    //     0x3094f8: ret             
    // 0x3094fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3094fc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x309500: b               #0x309494
    // 0x309504: SaveReg d0
    //     0x309504: str             q0, [SP, #-0x10]!
    // 0x309508: SaveReg r1
    //     0x309508: str             x1, [SP, #-8]!
    // 0x30950c: r0 = AllocateDouble()
    //     0x30950c: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x309510: RestoreReg r1
    //     0x309510: ldr             x1, [SP], #8
    // 0x309514: RestoreReg d0
    //     0x309514: ldr             q0, [SP], #0x10
    // 0x309518: b               #0x3094c8
  }
  _ ==(/* No info */) {
    // ** addr: 0x3636d8, size: 0x120
    // 0x3636d8: EnterFrame
    //     0x3636d8: stp             fp, lr, [SP, #-0x10]!
    //     0x3636dc: mov             fp, SP
    // 0x3636e0: AllocStack(0x10)
    //     0x3636e0: sub             SP, SP, #0x10
    // 0x3636e4: CheckStackOverflow
    //     0x3636e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3636e8: cmp             SP, x16
    //     0x3636ec: b.ls            #0x3637f0
    // 0x3636f0: ldr             x0, [fp, #0x10]
    // 0x3636f4: cmp             w0, NULL
    // 0x3636f8: b.ne            #0x36370c
    // 0x3636fc: r0 = false
    //     0x3636fc: add             x0, NULL, #0x30  ; false
    // 0x363700: LeaveFrame
    //     0x363700: mov             SP, fp
    //     0x363704: ldp             fp, lr, [SP], #0x10
    // 0x363708: ret
    //     0x363708: ret             
    // 0x36370c: ldr             x1, [fp, #0x18]
    // 0x363710: cmp             w1, w0
    // 0x363714: b.ne            #0x363728
    // 0x363718: r0 = true
    //     0x363718: add             x0, NULL, #0x20  ; true
    // 0x36371c: LeaveFrame
    //     0x36371c: mov             SP, fp
    //     0x363720: ldp             fp, lr, [SP], #0x10
    // 0x363724: ret
    //     0x363724: ret             
    // 0x363728: str             x0, [SP]
    // 0x36372c: r0 = runtimeType()
    //     0x36372c: bl              #0x2d0354  ; [dart:core] Object::runtimeType
    // 0x363730: r1 = LoadClassIdInstr(r0)
    //     0x363730: ldur            x1, [x0, #-1]
    //     0x363734: ubfx            x1, x1, #0xc, #0x14
    // 0x363738: r16 = _InputBorderGap
    //     0x363738: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c38] Type: _InputBorderGap
    //     0x36373c: ldr             x16, [x16, #0xc38]
    // 0x363740: stp             x16, x0, [SP]
    // 0x363744: mov             x0, x1
    // 0x363748: mov             lr, x0
    // 0x36374c: ldr             lr, [x21, lr, lsl #3]
    // 0x363750: blr             lr
    // 0x363754: tbz             w0, #4, #0x363768
    // 0x363758: r0 = false
    //     0x363758: add             x0, NULL, #0x30  ; false
    // 0x36375c: LeaveFrame
    //     0x36375c: mov             SP, fp
    //     0x363760: ldp             fp, lr, [SP], #0x10
    // 0x363764: ret
    //     0x363764: ret             
    // 0x363768: ldr             x1, [fp, #0x10]
    // 0x36376c: r0 = 59
    //     0x36376c: movz            x0, #0x3b
    // 0x363770: branchIfSmi(r1, 0x36377c)
    //     0x363770: tbz             w1, #0, #0x36377c
    // 0x363774: r0 = LoadClassIdInstr(r1)
    //     0x363774: ldur            x0, [x1, #-1]
    //     0x363778: ubfx            x0, x0, #0xc, #0x14
    // 0x36377c: cmp             x0, #0x419
    // 0x363780: b.ne            #0x3637e0
    // 0x363784: ldr             x2, [fp, #0x18]
    // 0x363788: LoadField: r0 = r1->field_23
    //     0x363788: ldur            w0, [x1, #0x23]
    // 0x36378c: DecompressPointer r0
    //     0x36378c: add             x0, x0, HEAP, lsl #32
    // 0x363790: LoadField: r3 = r2->field_23
    //     0x363790: ldur            w3, [x2, #0x23]
    // 0x363794: DecompressPointer r3
    //     0x363794: add             x3, x3, HEAP, lsl #32
    // 0x363798: r4 = LoadClassIdInstr(r0)
    //     0x363798: ldur            x4, [x0, #-1]
    //     0x36379c: ubfx            x4, x4, #0xc, #0x14
    // 0x3637a0: stp             x3, x0, [SP]
    // 0x3637a4: mov             x0, x4
    // 0x3637a8: mov             lr, x0
    // 0x3637ac: ldr             lr, [x21, lr, lsl #3]
    // 0x3637b0: blr             lr
    // 0x3637b4: tbnz            w0, #4, #0x3637e0
    // 0x3637b8: ldr             x2, [fp, #0x18]
    // 0x3637bc: ldr             x1, [fp, #0x10]
    // 0x3637c0: LoadField: d0 = r1->field_27
    //     0x3637c0: ldur            d0, [x1, #0x27]
    // 0x3637c4: LoadField: d1 = r2->field_27
    //     0x3637c4: ldur            d1, [x2, #0x27]
    // 0x3637c8: fcmp            d0, d1
    // 0x3637cc: r16 = true
    //     0x3637cc: add             x16, NULL, #0x20  ; true
    // 0x3637d0: r17 = false
    //     0x3637d0: add             x17, NULL, #0x30  ; false
    // 0x3637d4: csel            x1, x16, x17, eq
    // 0x3637d8: mov             x0, x1
    // 0x3637dc: b               #0x3637e4
    // 0x3637e0: r0 = false
    //     0x3637e0: add             x0, NULL, #0x30  ; false
    // 0x3637e4: LeaveFrame
    //     0x3637e4: mov             SP, fp
    //     0x3637e8: ldp             fp, lr, [SP], #0x10
    // 0x3637ec: ret
    //     0x3637ec: ret             
    // 0x3637f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3637f0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3637f4: b               #0x3636f0
  }
}

// class id: 1231, size: 0x8c, field offset: 0x8
//   const constructor, 
class InputDecorationTheme extends _DiagnosticableTree&Object&Diagnosticable {

  FloatingLabelBehavior field_28;
  FloatingLabelAlignment field_2c;
  bool field_30;
  bool field_38;
  bool field_54;
  bool field_84;

  get _ hashCode(/* No info */) {
    // ** addr: 0x303578, size: 0x744
    // 0x303578: EnterFrame
    //     0x303578: stp             fp, lr, [SP, #-0x10]!
    //     0x30357c: mov             fp, SP
    // 0x303580: AllocStack(0xf8)
    //     0x303580: sub             SP, SP, #0xf8
    // 0x303584: CheckStackOverflow
    //     0x303584: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x303588: cmp             SP, x16
    //     0x30358c: b.ls            #0x303cb4
    // 0x303590: ldr             x1, [fp, #0x10]
    // 0x303594: r0 = LoadClassIdInstr(r1)
    //     0x303594: ldur            x0, [x1, #-1]
    //     0x303598: ubfx            x0, x0, #0xc, #0x14
    // 0x30359c: stur            x0, [fp, #-8]
    // 0x3035a0: cmp             x0, #0x4cf
    // 0x3035a4: b.ne            #0x3035b8
    // 0x3035a8: LoadField: r2 = r1->field_7
    //     0x3035a8: ldur            w2, [x1, #7]
    // 0x3035ac: DecompressPointer r2
    //     0x3035ac: add             x2, x2, HEAP, lsl #32
    // 0x3035b0: mov             x1, x2
    // 0x3035b4: b               #0x30362c
    // 0x3035b8: cmp             x0, #0x4d0
    // 0x3035bc: b.ne            #0x3035f8
    // 0x3035c0: r1 = 1
    //     0x3035c0: movz            x1, #0x1
    // 0x3035c4: r0 = AllocateContext()
    //     0x3035c4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x3035c8: mov             x1, x0
    // 0x3035cc: ldr             x0, [fp, #0x10]
    // 0x3035d0: StoreField: r1->field_f = r0
    //     0x3035d0: stur            w0, [x1, #0xf]
    // 0x3035d4: mov             x2, x1
    // 0x3035d8: r1 = Function '<anonymous closure>':.
    //     0x3035d8: add             x1, PP, #0xa, lsl #12  ; [pp+0xac70] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x3035dc: ldr             x1, [x1, #0xc70]
    // 0x3035e0: r0 = AllocateClosure()
    //     0x3035e0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x3035e4: str             x0, [SP]
    // 0x3035e8: r0 = resolveWith()
    //     0x3035e8: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x3035ec: mov             x1, x0
    // 0x3035f0: ldur            x0, [fp, #-8]
    // 0x3035f4: b               #0x30362c
    // 0x3035f8: r1 = 1
    //     0x3035f8: movz            x1, #0x1
    // 0x3035fc: r0 = AllocateContext()
    //     0x3035fc: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303600: mov             x1, x0
    // 0x303604: ldr             x0, [fp, #0x10]
    // 0x303608: StoreField: r1->field_f = r0
    //     0x303608: stur            w0, [x1, #0xf]
    // 0x30360c: mov             x2, x1
    // 0x303610: r1 = Function '<anonymous closure>':.
    //     0x303610: add             x1, PP, #0xa, lsl #12  ; [pp+0xac78] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x303614: ldr             x1, [x1, #0xc78]
    // 0x303618: r0 = AllocateClosure()
    //     0x303618: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x30361c: str             x0, [SP]
    // 0x303620: r0 = resolveWith()
    //     0x303620: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x303624: mov             x1, x0
    // 0x303628: ldur            x0, [fp, #-8]
    // 0x30362c: stur            x1, [fp, #-0x10]
    // 0x303630: cmp             x0, #0x4cf
    // 0x303634: b.ne            #0x30364c
    // 0x303638: ldr             x2, [fp, #0x10]
    // 0x30363c: LoadField: r3 = r2->field_b
    //     0x30363c: ldur            w3, [x2, #0xb]
    // 0x303640: DecompressPointer r3
    //     0x303640: add             x3, x3, HEAP, lsl #32
    // 0x303644: mov             x1, x3
    // 0x303648: b               #0x3036c8
    // 0x30364c: ldr             x2, [fp, #0x10]
    // 0x303650: cmp             x0, #0x4d0
    // 0x303654: b.ne            #0x303690
    // 0x303658: r1 = 1
    //     0x303658: movz            x1, #0x1
    // 0x30365c: r0 = AllocateContext()
    //     0x30365c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303660: mov             x1, x0
    // 0x303664: ldr             x0, [fp, #0x10]
    // 0x303668: StoreField: r1->field_f = r0
    //     0x303668: stur            w0, [x1, #0xf]
    // 0x30366c: mov             x2, x1
    // 0x303670: r1 = Function '<anonymous closure>':.
    //     0x303670: add             x1, PP, #0xa, lsl #12  ; [pp+0xac80] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303674: ldr             x1, [x1, #0xc80]
    // 0x303678: r0 = AllocateClosure()
    //     0x303678: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x30367c: str             x0, [SP]
    // 0x303680: r0 = resolveWith()
    //     0x303680: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x303684: mov             x1, x0
    // 0x303688: ldur            x0, [fp, #-8]
    // 0x30368c: b               #0x3036c8
    // 0x303690: mov             x1, x2
    // 0x303694: r1 = 1
    //     0x303694: movz            x1, #0x1
    // 0x303698: r0 = AllocateContext()
    //     0x303698: bl              #0x3e4e00  ; AllocateContextStub
    // 0x30369c: mov             x1, x0
    // 0x3036a0: ldr             x0, [fp, #0x10]
    // 0x3036a4: StoreField: r1->field_f = r0
    //     0x3036a4: stur            w0, [x1, #0xf]
    // 0x3036a8: mov             x2, x1
    // 0x3036ac: r1 = Function '<anonymous closure>':.
    //     0x3036ac: add             x1, PP, #0xa, lsl #12  ; [pp+0xac88] AnonymousClosure: (0x28dc1c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x3036b0: ldr             x1, [x1, #0xc88]
    // 0x3036b4: r0 = AllocateClosure()
    //     0x3036b4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x3036b8: str             x0, [SP]
    // 0x3036bc: r0 = resolveWith()
    //     0x3036bc: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x3036c0: mov             x1, x0
    // 0x3036c4: ldur            x0, [fp, #-8]
    // 0x3036c8: stur            x1, [fp, #-0x18]
    // 0x3036cc: cmp             x0, #0x4cf
    // 0x3036d0: b.ne            #0x3036e8
    // 0x3036d4: ldr             x2, [fp, #0x10]
    // 0x3036d8: LoadField: r3 = r2->field_f
    //     0x3036d8: ldur            w3, [x2, #0xf]
    // 0x3036dc: DecompressPointer r3
    //     0x3036dc: add             x3, x3, HEAP, lsl #32
    // 0x3036e0: mov             x1, x3
    // 0x3036e4: b               #0x303764
    // 0x3036e8: ldr             x2, [fp, #0x10]
    // 0x3036ec: cmp             x0, #0x4d0
    // 0x3036f0: b.ne            #0x30372c
    // 0x3036f4: r1 = 1
    //     0x3036f4: movz            x1, #0x1
    // 0x3036f8: r0 = AllocateContext()
    //     0x3036f8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x3036fc: mov             x1, x0
    // 0x303700: ldr             x0, [fp, #0x10]
    // 0x303704: StoreField: r1->field_f = r0
    //     0x303704: stur            w0, [x1, #0xf]
    // 0x303708: mov             x2, x1
    // 0x30370c: r1 = Function '<anonymous closure>':.
    //     0x30370c: add             x1, PP, #0xa, lsl #12  ; [pp+0xac90] AnonymousClosure: (0x28d850), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303710: ldr             x1, [x1, #0xc90]
    // 0x303714: r0 = AllocateClosure()
    //     0x303714: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303718: str             x0, [SP]
    // 0x30371c: r0 = resolveWith()
    //     0x30371c: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x303720: mov             x1, x0
    // 0x303724: ldur            x0, [fp, #-8]
    // 0x303728: b               #0x303764
    // 0x30372c: mov             x1, x2
    // 0x303730: r1 = 1
    //     0x303730: movz            x1, #0x1
    // 0x303734: r0 = AllocateContext()
    //     0x303734: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303738: mov             x1, x0
    // 0x30373c: ldr             x0, [fp, #0x10]
    // 0x303740: StoreField: r1->field_f = r0
    //     0x303740: stur            w0, [x1, #0xf]
    // 0x303744: mov             x2, x1
    // 0x303748: r1 = Function '<anonymous closure>':.
    //     0x303748: add             x1, PP, #0xa, lsl #12  ; [pp+0xac98] AnonymousClosure: (0x28d754), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x30374c: ldr             x1, [x1, #0xc98]
    // 0x303750: r0 = AllocateClosure()
    //     0x303750: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303754: str             x0, [SP]
    // 0x303758: r0 = resolveWith()
    //     0x303758: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x30375c: mov             x1, x0
    // 0x303760: ldur            x0, [fp, #-8]
    // 0x303764: stur            x1, [fp, #-0x20]
    // 0x303768: cmp             x0, #0x4cf
    // 0x30376c: b.ne            #0x303784
    // 0x303770: ldr             x2, [fp, #0x10]
    // 0x303774: LoadField: r3 = r2->field_17
    //     0x303774: ldur            w3, [x2, #0x17]
    // 0x303778: DecompressPointer r3
    //     0x303778: add             x3, x3, HEAP, lsl #32
    // 0x30377c: mov             x1, x3
    // 0x303780: b               #0x303800
    // 0x303784: ldr             x2, [fp, #0x10]
    // 0x303788: cmp             x0, #0x4d0
    // 0x30378c: b.ne            #0x3037c8
    // 0x303790: r1 = 1
    //     0x303790: movz            x1, #0x1
    // 0x303794: r0 = AllocateContext()
    //     0x303794: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303798: mov             x1, x0
    // 0x30379c: ldr             x0, [fp, #0x10]
    // 0x3037a0: StoreField: r1->field_f = r0
    //     0x3037a0: stur            w0, [x1, #0xf]
    // 0x3037a4: mov             x2, x1
    // 0x3037a8: r1 = Function '<anonymous closure>':.
    //     0x3037a8: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca0] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x3037ac: ldr             x1, [x1, #0xca0]
    // 0x3037b0: r0 = AllocateClosure()
    //     0x3037b0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x3037b4: str             x0, [SP]
    // 0x3037b8: r0 = resolveWith()
    //     0x3037b8: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x3037bc: mov             x1, x0
    // 0x3037c0: ldur            x0, [fp, #-8]
    // 0x3037c4: b               #0x303800
    // 0x3037c8: mov             x1, x2
    // 0x3037cc: r1 = 1
    //     0x3037cc: movz            x1, #0x1
    // 0x3037d0: r0 = AllocateContext()
    //     0x3037d0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x3037d4: mov             x1, x0
    // 0x3037d8: ldr             x0, [fp, #0x10]
    // 0x3037dc: StoreField: r1->field_f = r0
    //     0x3037dc: stur            w0, [x1, #0xf]
    // 0x3037e0: mov             x2, x1
    // 0x3037e4: r1 = Function '<anonymous closure>':.
    //     0x3037e4: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca8] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x3037e8: ldr             x1, [x1, #0xca8]
    // 0x3037ec: r0 = AllocateClosure()
    //     0x3037ec: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x3037f0: str             x0, [SP]
    // 0x3037f4: r0 = resolveWith()
    //     0x3037f4: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x3037f8: mov             x1, x0
    // 0x3037fc: ldur            x0, [fp, #-8]
    // 0x303800: stur            x1, [fp, #-0x28]
    // 0x303804: cmp             x0, #0x4cf
    // 0x303808: b.ne            #0x303820
    // 0x30380c: ldr             x2, [fp, #0x10]
    // 0x303810: LoadField: r3 = r2->field_1f
    //     0x303810: ldur            w3, [x2, #0x1f]
    // 0x303814: DecompressPointer r3
    //     0x303814: add             x3, x3, HEAP, lsl #32
    // 0x303818: mov             x2, x3
    // 0x30381c: b               #0x30389c
    // 0x303820: ldr             x2, [fp, #0x10]
    // 0x303824: cmp             x0, #0x4d0
    // 0x303828: b.ne            #0x303864
    // 0x30382c: r1 = 1
    //     0x30382c: movz            x1, #0x1
    // 0x303830: r0 = AllocateContext()
    //     0x303830: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303834: mov             x1, x0
    // 0x303838: ldr             x0, [fp, #0x10]
    // 0x30383c: StoreField: r1->field_f = r0
    //     0x30383c: stur            w0, [x1, #0xf]
    // 0x303840: mov             x2, x1
    // 0x303844: r1 = Function '<anonymous closure>':.
    //     0x303844: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb0] AnonymousClosure: (0x28d4cc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303848: ldr             x1, [x1, #0xcb0]
    // 0x30384c: r0 = AllocateClosure()
    //     0x30384c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303850: str             x0, [SP]
    // 0x303854: r0 = resolveWith()
    //     0x303854: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x303858: mov             x2, x0
    // 0x30385c: ldur            x0, [fp, #-8]
    // 0x303860: b               #0x30389c
    // 0x303864: mov             x1, x2
    // 0x303868: r1 = 1
    //     0x303868: movz            x1, #0x1
    // 0x30386c: r0 = AllocateContext()
    //     0x30386c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303870: mov             x1, x0
    // 0x303874: ldr             x0, [fp, #0x10]
    // 0x303878: StoreField: r1->field_f = r0
    //     0x303878: stur            w0, [x1, #0xf]
    // 0x30387c: mov             x2, x1
    // 0x303880: r1 = Function '<anonymous closure>':.
    //     0x303880: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb8] AnonymousClosure: (0x28d3c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x303884: ldr             x1, [x1, #0xcb8]
    // 0x303888: r0 = AllocateClosure()
    //     0x303888: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x30388c: str             x0, [SP]
    // 0x303890: r0 = resolveWith()
    //     0x303890: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x303894: mov             x2, x0
    // 0x303898: ldur            x0, [fp, #-8]
    // 0x30389c: stur            x2, [fp, #-0x30]
    // 0x3038a0: cmp             x0, #0x4cf
    // 0x3038a4: b.ne            #0x3038b8
    // 0x3038a8: ldr             x3, [fp, #0x10]
    // 0x3038ac: LoadField: r1 = r3->field_3b
    //     0x3038ac: ldur            w1, [x3, #0x3b]
    // 0x3038b0: DecompressPointer r1
    //     0x3038b0: add             x1, x1, HEAP, lsl #32
    // 0x3038b4: b               #0x303950
    // 0x3038b8: ldr             x3, [fp, #0x10]
    // 0x3038bc: cmp             x0, #0x4d0
    // 0x3038c0: b.ne            #0x303918
    // 0x3038c4: mov             x1, x3
    // 0x3038c8: LoadField: r0 = r1->field_8f
    //     0x3038c8: ldur            w0, [x1, #0x8f]
    // 0x3038cc: DecompressPointer r0
    //     0x3038cc: add             x0, x0, HEAP, lsl #32
    // 0x3038d0: r16 = Sentinel
    //     0x3038d0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x3038d4: cmp             w0, w16
    // 0x3038d8: b.ne            #0x3038e8
    // 0x3038dc: r2 = _colors
    //     0x3038dc: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x3038e0: ldr             x2, [x2, #0xcc0]
    // 0x3038e4: r0 = InitLateFinalInstanceField()
    //     0x3038e4: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x3038e8: LoadField: r1 = r0->field_5f
    //     0x3038e8: ldur            w1, [x0, #0x5f]
    // 0x3038ec: DecompressPointer r1
    //     0x3038ec: add             x1, x1, HEAP, lsl #32
    // 0x3038f0: cmp             w1, NULL
    // 0x3038f4: b.ne            #0x303908
    // 0x3038f8: LoadField: r1 = r0->field_57
    //     0x3038f8: ldur            w1, [x0, #0x57]
    // 0x3038fc: DecompressPointer r1
    //     0x3038fc: add             x1, x1, HEAP, lsl #32
    // 0x303900: mov             x0, x1
    // 0x303904: b               #0x30390c
    // 0x303908: mov             x0, x1
    // 0x30390c: mov             x1, x0
    // 0x303910: ldur            x0, [fp, #-8]
    // 0x303914: b               #0x303950
    // 0x303918: mov             x0, x3
    // 0x30391c: r1 = 1
    //     0x30391c: movz            x1, #0x1
    // 0x303920: r0 = AllocateContext()
    //     0x303920: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303924: mov             x1, x0
    // 0x303928: ldr             x0, [fp, #0x10]
    // 0x30392c: StoreField: r1->field_f = r0
    //     0x30392c: stur            w0, [x1, #0xf]
    // 0x303930: mov             x2, x1
    // 0x303934: r1 = Function '<anonymous closure>':.
    //     0x303934: add             x1, PP, #0xa, lsl #12  ; [pp+0xacc8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x303938: ldr             x1, [x1, #0xcc8]
    // 0x30393c: r0 = AllocateClosure()
    //     0x30393c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303940: str             x0, [SP]
    // 0x303944: r0 = resolveWith()
    //     0x303944: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x303948: mov             x1, x0
    // 0x30394c: ldur            x0, [fp, #-8]
    // 0x303950: stur            x1, [fp, #-0x38]
    // 0x303954: cmp             x0, #0x4cf
    // 0x303958: b.ne            #0x303970
    // 0x30395c: ldr             x2, [fp, #0x10]
    // 0x303960: LoadField: r3 = r2->field_43
    //     0x303960: ldur            w3, [x2, #0x43]
    // 0x303964: DecompressPointer r3
    //     0x303964: add             x3, x3, HEAP, lsl #32
    // 0x303968: mov             x1, x3
    // 0x30396c: b               #0x3039ec
    // 0x303970: ldr             x2, [fp, #0x10]
    // 0x303974: cmp             x0, #0x4d0
    // 0x303978: b.ne            #0x3039b4
    // 0x30397c: r1 = 1
    //     0x30397c: movz            x1, #0x1
    // 0x303980: r0 = AllocateContext()
    //     0x303980: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303984: mov             x1, x0
    // 0x303988: ldr             x0, [fp, #0x10]
    // 0x30398c: StoreField: r1->field_f = r0
    //     0x30398c: stur            w0, [x1, #0xf]
    // 0x303990: mov             x2, x1
    // 0x303994: r1 = Function '<anonymous closure>':.
    //     0x303994: add             x1, PP, #0xa, lsl #12  ; [pp+0xacd0] AnonymousClosure: (0x303fc0), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303998: ldr             x1, [x1, #0xcd0]
    // 0x30399c: r0 = AllocateClosure()
    //     0x30399c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x3039a0: str             x0, [SP]
    // 0x3039a4: r0 = resolveWith()
    //     0x3039a4: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x3039a8: mov             x1, x0
    // 0x3039ac: ldur            x0, [fp, #-8]
    // 0x3039b0: b               #0x3039ec
    // 0x3039b4: mov             x0, x2
    // 0x3039b8: r1 = 1
    //     0x3039b8: movz            x1, #0x1
    // 0x3039bc: r0 = AllocateContext()
    //     0x3039bc: bl              #0x3e4e00  ; AllocateContextStub
    // 0x3039c0: mov             x1, x0
    // 0x3039c4: ldr             x0, [fp, #0x10]
    // 0x3039c8: StoreField: r1->field_f = r0
    //     0x3039c8: stur            w0, [x1, #0xf]
    // 0x3039cc: mov             x2, x1
    // 0x3039d0: r1 = Function '<anonymous closure>':.
    //     0x3039d0: add             x1, PP, #0xa, lsl #12  ; [pp+0xacd8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x3039d4: ldr             x1, [x1, #0xcd8]
    // 0x3039d8: r0 = AllocateClosure()
    //     0x3039d8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x3039dc: str             x0, [SP]
    // 0x3039e0: r0 = resolveWith()
    //     0x3039e0: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x3039e4: mov             x1, x0
    // 0x3039e8: ldur            x0, [fp, #-8]
    // 0x3039ec: stur            x1, [fp, #-0x40]
    // 0x3039f0: cmp             x0, #0x4cf
    // 0x3039f4: b.ne            #0x303a0c
    // 0x3039f8: ldr             x2, [fp, #0x10]
    // 0x3039fc: LoadField: r3 = r2->field_4b
    //     0x3039fc: ldur            w3, [x2, #0x4b]
    // 0x303a00: DecompressPointer r3
    //     0x303a00: add             x3, x3, HEAP, lsl #32
    // 0x303a04: mov             x1, x3
    // 0x303a08: b               #0x303a88
    // 0x303a0c: ldr             x2, [fp, #0x10]
    // 0x303a10: cmp             x0, #0x4d0
    // 0x303a14: b.ne            #0x303a50
    // 0x303a18: r1 = 1
    //     0x303a18: movz            x1, #0x1
    // 0x303a1c: r0 = AllocateContext()
    //     0x303a1c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303a20: mov             x1, x0
    // 0x303a24: ldr             x0, [fp, #0x10]
    // 0x303a28: StoreField: r1->field_f = r0
    //     0x303a28: stur            w0, [x1, #0xf]
    // 0x303a2c: mov             x2, x1
    // 0x303a30: r1 = Function '<anonymous closure>':.
    //     0x303a30: add             x1, PP, #0xa, lsl #12  ; [pp+0xace0] AnonymousClosure: (0x303e3c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303a34: ldr             x1, [x1, #0xce0]
    // 0x303a38: r0 = AllocateClosure()
    //     0x303a38: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303a3c: str             x0, [SP]
    // 0x303a40: r0 = resolveWith()
    //     0x303a40: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x303a44: mov             x1, x0
    // 0x303a48: ldur            x0, [fp, #-8]
    // 0x303a4c: b               #0x303a88
    // 0x303a50: mov             x0, x2
    // 0x303a54: r1 = 1
    //     0x303a54: movz            x1, #0x1
    // 0x303a58: r0 = AllocateContext()
    //     0x303a58: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303a5c: mov             x1, x0
    // 0x303a60: ldr             x0, [fp, #0x10]
    // 0x303a64: StoreField: r1->field_f = r0
    //     0x303a64: stur            w0, [x1, #0xf]
    // 0x303a68: mov             x2, x1
    // 0x303a6c: r1 = Function '<anonymous closure>':.
    //     0x303a6c: add             x1, PP, #0xa, lsl #12  ; [pp+0xace8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x303a70: ldr             x1, [x1, #0xce8]
    // 0x303a74: r0 = AllocateClosure()
    //     0x303a74: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303a78: str             x0, [SP]
    // 0x303a7c: r0 = resolveWith()
    //     0x303a7c: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x303a80: mov             x1, x0
    // 0x303a84: ldur            x0, [fp, #-8]
    // 0x303a88: stur            x1, [fp, #-0x48]
    // 0x303a8c: cmp             x0, #0x4cf
    // 0x303a90: b.ne            #0x303aa8
    // 0x303a94: ldr             x2, [fp, #0x10]
    // 0x303a98: LoadField: r3 = r2->field_57
    //     0x303a98: ldur            w3, [x2, #0x57]
    // 0x303a9c: DecompressPointer r3
    //     0x303a9c: add             x3, x3, HEAP, lsl #32
    // 0x303aa0: mov             x1, x3
    // 0x303aa4: b               #0x303b24
    // 0x303aa8: ldr             x2, [fp, #0x10]
    // 0x303aac: cmp             x0, #0x4d0
    // 0x303ab0: b.ne            #0x303aec
    // 0x303ab4: r1 = 1
    //     0x303ab4: movz            x1, #0x1
    // 0x303ab8: r0 = AllocateContext()
    //     0x303ab8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303abc: mov             x1, x0
    // 0x303ac0: ldr             x0, [fp, #0x10]
    // 0x303ac4: StoreField: r1->field_f = r0
    //     0x303ac4: stur            w0, [x1, #0xf]
    // 0x303ac8: mov             x2, x1
    // 0x303acc: r1 = Function '<anonymous closure>':.
    //     0x303acc: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf0] AnonymousClosure: (0x28e828), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303ad0: ldr             x1, [x1, #0xcf0]
    // 0x303ad4: r0 = AllocateClosure()
    //     0x303ad4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303ad8: str             x0, [SP]
    // 0x303adc: r0 = resolveWith()
    //     0x303adc: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x303ae0: mov             x1, x0
    // 0x303ae4: ldur            x0, [fp, #-8]
    // 0x303ae8: b               #0x303b24
    // 0x303aec: mov             x0, x2
    // 0x303af0: r1 = 1
    //     0x303af0: movz            x1, #0x1
    // 0x303af4: r0 = AllocateContext()
    //     0x303af4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303af8: mov             x1, x0
    // 0x303afc: ldr             x0, [fp, #0x10]
    // 0x303b00: StoreField: r1->field_f = r0
    //     0x303b00: stur            w0, [x1, #0xf]
    // 0x303b04: mov             x2, x1
    // 0x303b08: r1 = Function '<anonymous closure>':.
    //     0x303b08: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf8] AnonymousClosure: (0x28e710), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x303b0c: ldr             x1, [x1, #0xcf8]
    // 0x303b10: r0 = AllocateClosure()
    //     0x303b10: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303b14: str             x0, [SP]
    // 0x303b18: r0 = resolveWith()
    //     0x303b18: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x303b1c: mov             x1, x0
    // 0x303b20: ldur            x0, [fp, #-8]
    // 0x303b24: stur            x1, [fp, #-0x50]
    // 0x303b28: cmp             x0, #0x4cf
    // 0x303b2c: b.eq            #0x303b74
    // 0x303b30: cmp             x0, #0x4d0
    // 0x303b34: b.ne            #0x303b74
    // 0x303b38: ldr             x2, [fp, #0x10]
    // 0x303b3c: r1 = 1
    //     0x303b3c: movz            x1, #0x1
    // 0x303b40: r0 = AllocateContext()
    //     0x303b40: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303b44: mov             x1, x0
    // 0x303b48: ldr             x0, [fp, #0x10]
    // 0x303b4c: StoreField: r1->field_f = r0
    //     0x303b4c: stur            w0, [x1, #0xf]
    // 0x303b50: mov             x2, x1
    // 0x303b54: r1 = Function '<anonymous closure>':.
    //     0x303b54: add             x1, PP, #0xa, lsl #12  ; [pp+0xad00] AnonymousClosure: (0x28f7d0), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303b58: ldr             x1, [x1, #0xd00]
    // 0x303b5c: r0 = AllocateClosure()
    //     0x303b5c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303b60: str             x0, [SP]
    // 0x303b64: r0 = resolveWith()
    //     0x303b64: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x303b68: mov             x2, x0
    // 0x303b6c: ldr             x0, [fp, #0x10]
    // 0x303b70: b               #0x303b84
    // 0x303b74: ldr             x0, [fp, #0x10]
    // 0x303b78: LoadField: r1 = r0->field_5f
    //     0x303b78: ldur            w1, [x0, #0x5f]
    // 0x303b7c: DecompressPointer r1
    //     0x303b7c: add             x1, x1, HEAP, lsl #32
    // 0x303b80: mov             x2, x1
    // 0x303b84: ldur            x1, [fp, #-8]
    // 0x303b88: stur            x2, [fp, #-0x58]
    // 0x303b8c: cmp             x1, #0x4cf
    // 0x303b90: b.eq            #0x303bcc
    // 0x303b94: cmp             x1, #0x4d0
    // 0x303b98: b.ne            #0x303bcc
    // 0x303b9c: r1 = 1
    //     0x303b9c: movz            x1, #0x1
    // 0x303ba0: r0 = AllocateContext()
    //     0x303ba0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x303ba4: mov             x1, x0
    // 0x303ba8: ldr             x0, [fp, #0x10]
    // 0x303bac: StoreField: r1->field_f = r0
    //     0x303bac: stur            w0, [x1, #0xf]
    // 0x303bb0: mov             x2, x1
    // 0x303bb4: r1 = Function '<anonymous closure>':.
    //     0x303bb4: add             x1, PP, #0xa, lsl #12  ; [pp+0xad08] AnonymousClosure: (0x28f254), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x303bb8: ldr             x1, [x1, #0xd08]
    // 0x303bbc: r0 = AllocateClosure()
    //     0x303bbc: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x303bc0: str             x0, [SP]
    // 0x303bc4: r0 = resolveWith()
    //     0x303bc4: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x303bc8: b               #0x303bd8
    // 0x303bcc: LoadField: r1 = r0->field_5b
    //     0x303bcc: ldur            w1, [x0, #0x5b]
    // 0x303bd0: DecompressPointer r1
    //     0x303bd0: add             x1, x1, HEAP, lsl #32
    // 0x303bd4: mov             x0, x1
    // 0x303bd8: ldur            x16, [fp, #-0x50]
    // 0x303bdc: ldur            lr, [fp, #-0x58]
    // 0x303be0: stp             lr, x16, [SP, #0x60]
    // 0x303be4: stp             NULL, x0, [SP, #0x50]
    // 0x303be8: stp             NULL, NULL, [SP, #0x40]
    // 0x303bec: stp             NULL, NULL, [SP, #0x30]
    // 0x303bf0: stp             NULL, NULL, [SP, #0x20]
    // 0x303bf4: r16 = false
    //     0x303bf4: add             x16, NULL, #0x30  ; false
    // 0x303bf8: stp             x16, NULL, [SP, #0x10]
    // 0x303bfc: stp             NULL, NULL, [SP]
    // 0x303c00: r4 = const [0, 0xe, 0xe, 0xe, null]
    //     0x303c00: add             x4, PP, #0xa, lsl #12  ; [pp+0xaa88] List(5) [0, 0xe, 0xe, 0xe, Null]
    //     0x303c04: ldr             x4, [x4, #0xa88]
    // 0x303c08: r0 = hash()
    //     0x303c08: bl              #0x2f86fc  ; [dart:core] Object::hash
    // 0x303c0c: mov             x2, x0
    // 0x303c10: r0 = BoxInt64Instr(r2)
    //     0x303c10: sbfiz           x0, x2, #1, #0x1f
    //     0x303c14: cmp             x2, x0, asr #1
    //     0x303c18: b.eq            #0x303c24
    //     0x303c1c: bl              #0x3e5e54
    //     0x303c20: stur            x2, [x0, #7]
    // 0x303c24: ldur            x16, [fp, #-0x10]
    // 0x303c28: ldur            lr, [fp, #-0x18]
    // 0x303c2c: stp             lr, x16, [SP, #0x90]
    // 0x303c30: ldur            x16, [fp, #-0x20]
    // 0x303c34: stp             NULL, x16, [SP, #0x80]
    // 0x303c38: ldur            x16, [fp, #-0x28]
    // 0x303c3c: ldur            lr, [fp, #-0x30]
    // 0x303c40: stp             lr, x16, [SP, #0x70]
    // 0x303c44: r16 = Instance_FloatingLabelBehavior
    //     0x303c44: add             x16, PP, #0xa, lsl #12  ; [pp+0xad60] Obj!FloatingLabelBehavior@481a01
    //     0x303c48: ldr             x16, [x16, #0xd60]
    // 0x303c4c: stp             x16, NULL, [SP, #0x60]
    // 0x303c50: r16 = Instance_FloatingLabelAlignment
    //     0x303c50: add             x16, PP, #0xa, lsl #12  ; [pp+0xad68] Obj!FloatingLabelAlignment@473731
    //     0x303c54: ldr             x16, [x16, #0xd68]
    // 0x303c58: r30 = false
    //     0x303c58: add             lr, NULL, #0x30  ; false
    // 0x303c5c: stp             lr, x16, [SP, #0x50]
    // 0x303c60: r16 = false
    //     0x303c60: add             x16, NULL, #0x30  ; false
    // 0x303c64: stp             x16, NULL, [SP, #0x40]
    // 0x303c68: ldur            x16, [fp, #-0x38]
    // 0x303c6c: stp             NULL, x16, [SP, #0x30]
    // 0x303c70: ldur            x16, [fp, #-0x40]
    // 0x303c74: stp             NULL, x16, [SP, #0x20]
    // 0x303c78: ldur            x16, [fp, #-0x48]
    // 0x303c7c: stp             NULL, x16, [SP, #0x10]
    // 0x303c80: r16 = false
    //     0x303c80: add             x16, NULL, #0x30  ; false
    // 0x303c84: stp             x0, x16, [SP]
    // 0x303c88: r4 = const [0, 0x14, 0x14, 0x14, null]
    //     0x303c88: ldr             x4, [PP, #0x67b0]  ; [pp+0x67b0] List(5) [0, 0x14, 0x14, 0x14, Null]
    // 0x303c8c: r0 = hash()
    //     0x303c8c: bl              #0x2f86fc  ; [dart:core] Object::hash
    // 0x303c90: mov             x2, x0
    // 0x303c94: r0 = BoxInt64Instr(r2)
    //     0x303c94: sbfiz           x0, x2, #1, #0x1f
    //     0x303c98: cmp             x2, x0, asr #1
    //     0x303c9c: b.eq            #0x303ca8
    //     0x303ca0: bl              #0x3e5e54
    //     0x303ca4: stur            x2, [x0, #7]
    // 0x303ca8: LeaveFrame
    //     0x303ca8: mov             SP, fp
    //     0x303cac: ldp             fp, lr, [SP], #0x10
    // 0x303cb0: ret
    //     0x303cb0: ret             
    // 0x303cb4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x303cb4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x303cb8: b               #0x303590
  }
  _ ==(/* No info */) {
    // ** addr: 0x35af78, size: 0xea0
    // 0x35af78: EnterFrame
    //     0x35af78: stp             fp, lr, [SP, #-0x10]!
    //     0x35af7c: mov             fp, SP
    // 0x35af80: AllocStack(0x28)
    //     0x35af80: sub             SP, SP, #0x28
    // 0x35af84: CheckStackOverflow
    //     0x35af84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x35af88: cmp             SP, x16
    //     0x35af8c: b.ls            #0x35be10
    // 0x35af90: ldr             x1, [fp, #0x10]
    // 0x35af94: cmp             w1, NULL
    // 0x35af98: b.ne            #0x35afac
    // 0x35af9c: r0 = false
    //     0x35af9c: add             x0, NULL, #0x30  ; false
    // 0x35afa0: LeaveFrame
    //     0x35afa0: mov             SP, fp
    //     0x35afa4: ldp             fp, lr, [SP], #0x10
    // 0x35afa8: ret
    //     0x35afa8: ret             
    // 0x35afac: ldr             x0, [fp, #0x18]
    // 0x35afb0: cmp             w0, w1
    // 0x35afb4: b.ne            #0x35afc8
    // 0x35afb8: r0 = true
    //     0x35afb8: add             x0, NULL, #0x20  ; true
    // 0x35afbc: LeaveFrame
    //     0x35afbc: mov             SP, fp
    //     0x35afc0: ldp             fp, lr, [SP], #0x10
    // 0x35afc4: ret
    //     0x35afc4: ret             
    // 0x35afc8: stp             x0, x1, [SP]
    // 0x35afcc: r0 = _haveSameRuntimeType()
    //     0x35afcc: bl              #0x21e8f4  ; [dart:core] Object::_haveSameRuntimeType
    // 0x35afd0: tbz             w0, #4, #0x35afe4
    // 0x35afd4: r0 = false
    //     0x35afd4: add             x0, NULL, #0x30  ; false
    // 0x35afd8: LeaveFrame
    //     0x35afd8: mov             SP, fp
    //     0x35afdc: ldp             fp, lr, [SP], #0x10
    // 0x35afe0: ret
    //     0x35afe0: ret             
    // 0x35afe4: ldr             x1, [fp, #0x10]
    // 0x35afe8: r0 = 59
    //     0x35afe8: movz            x0, #0x3b
    // 0x35afec: branchIfSmi(r1, 0x35aff8)
    //     0x35afec: tbz             w1, #0, #0x35aff8
    // 0x35aff0: r0 = LoadClassIdInstr(r1)
    //     0x35aff0: ldur            x0, [x1, #-1]
    //     0x35aff4: ubfx            x0, x0, #0xc, #0x14
    // 0x35aff8: stur            x0, [fp, #-8]
    // 0x35affc: sub             x16, x0, #0x4cf
    // 0x35b000: cmp             x16, #2
    // 0x35b004: b.hi            #0x35be00
    // 0x35b008: cmp             x0, #0x4cf
    // 0x35b00c: b.ne            #0x35b020
    // 0x35b010: LoadField: r2 = r1->field_7
    //     0x35b010: ldur            w2, [x1, #7]
    // 0x35b014: DecompressPointer r2
    //     0x35b014: add             x2, x2, HEAP, lsl #32
    // 0x35b018: mov             x0, x2
    // 0x35b01c: b               #0x35b084
    // 0x35b020: cmp             x0, #0x4d0
    // 0x35b024: b.ne            #0x35b058
    // 0x35b028: r1 = 1
    //     0x35b028: movz            x1, #0x1
    // 0x35b02c: r0 = AllocateContext()
    //     0x35b02c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b030: mov             x1, x0
    // 0x35b034: ldr             x0, [fp, #0x10]
    // 0x35b038: StoreField: r1->field_f = r0
    //     0x35b038: stur            w0, [x1, #0xf]
    // 0x35b03c: mov             x2, x1
    // 0x35b040: r1 = Function '<anonymous closure>':.
    //     0x35b040: add             x1, PP, #0xa, lsl #12  ; [pp+0xac70] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b044: ldr             x1, [x1, #0xc70]
    // 0x35b048: r0 = AllocateClosure()
    //     0x35b048: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b04c: str             x0, [SP]
    // 0x35b050: r0 = resolveWith()
    //     0x35b050: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b054: b               #0x35b084
    // 0x35b058: r1 = 1
    //     0x35b058: movz            x1, #0x1
    // 0x35b05c: r0 = AllocateContext()
    //     0x35b05c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b060: mov             x1, x0
    // 0x35b064: ldr             x0, [fp, #0x10]
    // 0x35b068: StoreField: r1->field_f = r0
    //     0x35b068: stur            w0, [x1, #0xf]
    // 0x35b06c: mov             x2, x1
    // 0x35b070: r1 = Function '<anonymous closure>':.
    //     0x35b070: add             x1, PP, #0xa, lsl #12  ; [pp+0xac78] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b074: ldr             x1, [x1, #0xc78]
    // 0x35b078: r0 = AllocateClosure()
    //     0x35b078: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b07c: str             x0, [SP]
    // 0x35b080: r0 = resolveWith()
    //     0x35b080: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b084: ldr             x1, [fp, #0x18]
    // 0x35b088: stur            x0, [fp, #-0x18]
    // 0x35b08c: r2 = LoadClassIdInstr(r1)
    //     0x35b08c: ldur            x2, [x1, #-1]
    //     0x35b090: ubfx            x2, x2, #0xc, #0x14
    // 0x35b094: stur            x2, [fp, #-0x10]
    // 0x35b098: cmp             x2, #0x4cf
    // 0x35b09c: b.ne            #0x35b0b0
    // 0x35b0a0: LoadField: r3 = r1->field_7
    //     0x35b0a0: ldur            w3, [x1, #7]
    // 0x35b0a4: DecompressPointer r3
    //     0x35b0a4: add             x3, x3, HEAP, lsl #32
    // 0x35b0a8: mov             x1, x3
    // 0x35b0ac: b               #0x35b124
    // 0x35b0b0: cmp             x2, #0x4d0
    // 0x35b0b4: b.ne            #0x35b0f0
    // 0x35b0b8: r1 = 1
    //     0x35b0b8: movz            x1, #0x1
    // 0x35b0bc: r0 = AllocateContext()
    //     0x35b0bc: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b0c0: mov             x1, x0
    // 0x35b0c4: ldr             x0, [fp, #0x18]
    // 0x35b0c8: StoreField: r1->field_f = r0
    //     0x35b0c8: stur            w0, [x1, #0xf]
    // 0x35b0cc: mov             x2, x1
    // 0x35b0d0: r1 = Function '<anonymous closure>':.
    //     0x35b0d0: add             x1, PP, #0xa, lsl #12  ; [pp+0xac70] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b0d4: ldr             x1, [x1, #0xc70]
    // 0x35b0d8: r0 = AllocateClosure()
    //     0x35b0d8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b0dc: str             x0, [SP]
    // 0x35b0e0: r0 = resolveWith()
    //     0x35b0e0: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b0e4: mov             x1, x0
    // 0x35b0e8: ldur            x0, [fp, #-0x18]
    // 0x35b0ec: b               #0x35b124
    // 0x35b0f0: r1 = 1
    //     0x35b0f0: movz            x1, #0x1
    // 0x35b0f4: r0 = AllocateContext()
    //     0x35b0f4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b0f8: mov             x1, x0
    // 0x35b0fc: ldr             x0, [fp, #0x18]
    // 0x35b100: StoreField: r1->field_f = r0
    //     0x35b100: stur            w0, [x1, #0xf]
    // 0x35b104: mov             x2, x1
    // 0x35b108: r1 = Function '<anonymous closure>':.
    //     0x35b108: add             x1, PP, #0xa, lsl #12  ; [pp+0xac78] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b10c: ldr             x1, [x1, #0xc78]
    // 0x35b110: r0 = AllocateClosure()
    //     0x35b110: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b114: str             x0, [SP]
    // 0x35b118: r0 = resolveWith()
    //     0x35b118: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b11c: mov             x1, x0
    // 0x35b120: ldur            x0, [fp, #-0x18]
    // 0x35b124: r2 = LoadClassIdInstr(r0)
    //     0x35b124: ldur            x2, [x0, #-1]
    //     0x35b128: ubfx            x2, x2, #0xc, #0x14
    // 0x35b12c: stp             x1, x0, [SP]
    // 0x35b130: mov             x0, x2
    // 0x35b134: mov             lr, x0
    // 0x35b138: ldr             lr, [x21, lr, lsl #3]
    // 0x35b13c: blr             lr
    // 0x35b140: tbnz            w0, #4, #0x35be00
    // 0x35b144: ldur            x0, [fp, #-8]
    // 0x35b148: cmp             x0, #0x4cf
    // 0x35b14c: b.ne            #0x35b164
    // 0x35b150: ldr             x1, [fp, #0x10]
    // 0x35b154: LoadField: r2 = r1->field_b
    //     0x35b154: ldur            w2, [x1, #0xb]
    // 0x35b158: DecompressPointer r2
    //     0x35b158: add             x2, x2, HEAP, lsl #32
    // 0x35b15c: mov             x1, x2
    // 0x35b160: b               #0x35b1d4
    // 0x35b164: ldr             x1, [fp, #0x10]
    // 0x35b168: cmp             x0, #0x4d0
    // 0x35b16c: b.ne            #0x35b1a4
    // 0x35b170: r1 = 1
    //     0x35b170: movz            x1, #0x1
    // 0x35b174: r0 = AllocateContext()
    //     0x35b174: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b178: mov             x1, x0
    // 0x35b17c: ldr             x0, [fp, #0x10]
    // 0x35b180: StoreField: r1->field_f = r0
    //     0x35b180: stur            w0, [x1, #0xf]
    // 0x35b184: mov             x2, x1
    // 0x35b188: r1 = Function '<anonymous closure>':.
    //     0x35b188: add             x1, PP, #0xa, lsl #12  ; [pp+0xac80] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b18c: ldr             x1, [x1, #0xc80]
    // 0x35b190: r0 = AllocateClosure()
    //     0x35b190: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b194: str             x0, [SP]
    // 0x35b198: r0 = resolveWith()
    //     0x35b198: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b19c: mov             x1, x0
    // 0x35b1a0: b               #0x35b1d4
    // 0x35b1a4: r1 = 1
    //     0x35b1a4: movz            x1, #0x1
    // 0x35b1a8: r0 = AllocateContext()
    //     0x35b1a8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b1ac: mov             x1, x0
    // 0x35b1b0: ldr             x0, [fp, #0x10]
    // 0x35b1b4: StoreField: r1->field_f = r0
    //     0x35b1b4: stur            w0, [x1, #0xf]
    // 0x35b1b8: mov             x2, x1
    // 0x35b1bc: r1 = Function '<anonymous closure>':.
    //     0x35b1bc: add             x1, PP, #0xa, lsl #12  ; [pp+0xac88] AnonymousClosure: (0x28dc1c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b1c0: ldr             x1, [x1, #0xc88]
    // 0x35b1c4: r0 = AllocateClosure()
    //     0x35b1c4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b1c8: str             x0, [SP]
    // 0x35b1cc: r0 = resolveWith()
    //     0x35b1cc: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b1d0: mov             x1, x0
    // 0x35b1d4: ldur            x0, [fp, #-0x10]
    // 0x35b1d8: stur            x1, [fp, #-0x18]
    // 0x35b1dc: cmp             x0, #0x4cf
    // 0x35b1e0: b.ne            #0x35b1fc
    // 0x35b1e4: ldr             x2, [fp, #0x18]
    // 0x35b1e8: LoadField: r3 = r2->field_b
    //     0x35b1e8: ldur            w3, [x2, #0xb]
    // 0x35b1ec: DecompressPointer r3
    //     0x35b1ec: add             x3, x3, HEAP, lsl #32
    // 0x35b1f0: mov             x0, x1
    // 0x35b1f4: mov             x1, x3
    // 0x35b1f8: b               #0x35b278
    // 0x35b1fc: ldr             x2, [fp, #0x18]
    // 0x35b200: cmp             x0, #0x4d0
    // 0x35b204: b.ne            #0x35b240
    // 0x35b208: r1 = 1
    //     0x35b208: movz            x1, #0x1
    // 0x35b20c: r0 = AllocateContext()
    //     0x35b20c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b210: mov             x1, x0
    // 0x35b214: ldr             x0, [fp, #0x18]
    // 0x35b218: StoreField: r1->field_f = r0
    //     0x35b218: stur            w0, [x1, #0xf]
    // 0x35b21c: mov             x2, x1
    // 0x35b220: r1 = Function '<anonymous closure>':.
    //     0x35b220: add             x1, PP, #0xa, lsl #12  ; [pp+0xac80] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b224: ldr             x1, [x1, #0xc80]
    // 0x35b228: r0 = AllocateClosure()
    //     0x35b228: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b22c: str             x0, [SP]
    // 0x35b230: r0 = resolveWith()
    //     0x35b230: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b234: mov             x1, x0
    // 0x35b238: ldur            x0, [fp, #-0x18]
    // 0x35b23c: b               #0x35b278
    // 0x35b240: mov             x1, x2
    // 0x35b244: r1 = 1
    //     0x35b244: movz            x1, #0x1
    // 0x35b248: r0 = AllocateContext()
    //     0x35b248: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b24c: mov             x1, x0
    // 0x35b250: ldr             x0, [fp, #0x18]
    // 0x35b254: StoreField: r1->field_f = r0
    //     0x35b254: stur            w0, [x1, #0xf]
    // 0x35b258: mov             x2, x1
    // 0x35b25c: r1 = Function '<anonymous closure>':.
    //     0x35b25c: add             x1, PP, #0xa, lsl #12  ; [pp+0xac88] AnonymousClosure: (0x28dc1c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b260: ldr             x1, [x1, #0xc88]
    // 0x35b264: r0 = AllocateClosure()
    //     0x35b264: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b268: str             x0, [SP]
    // 0x35b26c: r0 = resolveWith()
    //     0x35b26c: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b270: mov             x1, x0
    // 0x35b274: ldur            x0, [fp, #-0x18]
    // 0x35b278: r2 = LoadClassIdInstr(r0)
    //     0x35b278: ldur            x2, [x0, #-1]
    //     0x35b27c: ubfx            x2, x2, #0xc, #0x14
    // 0x35b280: stp             x1, x0, [SP]
    // 0x35b284: mov             x0, x2
    // 0x35b288: mov             lr, x0
    // 0x35b28c: ldr             lr, [x21, lr, lsl #3]
    // 0x35b290: blr             lr
    // 0x35b294: tbnz            w0, #4, #0x35be00
    // 0x35b298: ldur            x0, [fp, #-8]
    // 0x35b29c: cmp             x0, #0x4cf
    // 0x35b2a0: b.ne            #0x35b2b8
    // 0x35b2a4: ldr             x1, [fp, #0x10]
    // 0x35b2a8: LoadField: r2 = r1->field_f
    //     0x35b2a8: ldur            w2, [x1, #0xf]
    // 0x35b2ac: DecompressPointer r2
    //     0x35b2ac: add             x2, x2, HEAP, lsl #32
    // 0x35b2b0: mov             x1, x2
    // 0x35b2b4: b               #0x35b328
    // 0x35b2b8: ldr             x1, [fp, #0x10]
    // 0x35b2bc: cmp             x0, #0x4d0
    // 0x35b2c0: b.ne            #0x35b2f8
    // 0x35b2c4: r1 = 1
    //     0x35b2c4: movz            x1, #0x1
    // 0x35b2c8: r0 = AllocateContext()
    //     0x35b2c8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b2cc: mov             x1, x0
    // 0x35b2d0: ldr             x0, [fp, #0x10]
    // 0x35b2d4: StoreField: r1->field_f = r0
    //     0x35b2d4: stur            w0, [x1, #0xf]
    // 0x35b2d8: mov             x2, x1
    // 0x35b2dc: r1 = Function '<anonymous closure>':.
    //     0x35b2dc: add             x1, PP, #0xa, lsl #12  ; [pp+0xac90] AnonymousClosure: (0x28d850), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b2e0: ldr             x1, [x1, #0xc90]
    // 0x35b2e4: r0 = AllocateClosure()
    //     0x35b2e4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b2e8: str             x0, [SP]
    // 0x35b2ec: r0 = resolveWith()
    //     0x35b2ec: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b2f0: mov             x1, x0
    // 0x35b2f4: b               #0x35b328
    // 0x35b2f8: r1 = 1
    //     0x35b2f8: movz            x1, #0x1
    // 0x35b2fc: r0 = AllocateContext()
    //     0x35b2fc: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b300: mov             x1, x0
    // 0x35b304: ldr             x0, [fp, #0x10]
    // 0x35b308: StoreField: r1->field_f = r0
    //     0x35b308: stur            w0, [x1, #0xf]
    // 0x35b30c: mov             x2, x1
    // 0x35b310: r1 = Function '<anonymous closure>':.
    //     0x35b310: add             x1, PP, #0xa, lsl #12  ; [pp+0xac98] AnonymousClosure: (0x28d754), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b314: ldr             x1, [x1, #0xc98]
    // 0x35b318: r0 = AllocateClosure()
    //     0x35b318: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b31c: str             x0, [SP]
    // 0x35b320: r0 = resolveWith()
    //     0x35b320: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b324: mov             x1, x0
    // 0x35b328: ldur            x0, [fp, #-0x10]
    // 0x35b32c: stur            x1, [fp, #-0x18]
    // 0x35b330: cmp             x0, #0x4cf
    // 0x35b334: b.ne            #0x35b350
    // 0x35b338: ldr             x2, [fp, #0x18]
    // 0x35b33c: LoadField: r3 = r2->field_f
    //     0x35b33c: ldur            w3, [x2, #0xf]
    // 0x35b340: DecompressPointer r3
    //     0x35b340: add             x3, x3, HEAP, lsl #32
    // 0x35b344: mov             x0, x1
    // 0x35b348: mov             x1, x3
    // 0x35b34c: b               #0x35b3cc
    // 0x35b350: ldr             x2, [fp, #0x18]
    // 0x35b354: cmp             x0, #0x4d0
    // 0x35b358: b.ne            #0x35b394
    // 0x35b35c: r1 = 1
    //     0x35b35c: movz            x1, #0x1
    // 0x35b360: r0 = AllocateContext()
    //     0x35b360: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b364: mov             x1, x0
    // 0x35b368: ldr             x0, [fp, #0x18]
    // 0x35b36c: StoreField: r1->field_f = r0
    //     0x35b36c: stur            w0, [x1, #0xf]
    // 0x35b370: mov             x2, x1
    // 0x35b374: r1 = Function '<anonymous closure>':.
    //     0x35b374: add             x1, PP, #0xa, lsl #12  ; [pp+0xac90] AnonymousClosure: (0x28d850), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b378: ldr             x1, [x1, #0xc90]
    // 0x35b37c: r0 = AllocateClosure()
    //     0x35b37c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b380: str             x0, [SP]
    // 0x35b384: r0 = resolveWith()
    //     0x35b384: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b388: mov             x1, x0
    // 0x35b38c: ldur            x0, [fp, #-0x18]
    // 0x35b390: b               #0x35b3cc
    // 0x35b394: mov             x1, x2
    // 0x35b398: r1 = 1
    //     0x35b398: movz            x1, #0x1
    // 0x35b39c: r0 = AllocateContext()
    //     0x35b39c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b3a0: mov             x1, x0
    // 0x35b3a4: ldr             x0, [fp, #0x18]
    // 0x35b3a8: StoreField: r1->field_f = r0
    //     0x35b3a8: stur            w0, [x1, #0xf]
    // 0x35b3ac: mov             x2, x1
    // 0x35b3b0: r1 = Function '<anonymous closure>':.
    //     0x35b3b0: add             x1, PP, #0xa, lsl #12  ; [pp+0xac98] AnonymousClosure: (0x28d754), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b3b4: ldr             x1, [x1, #0xc98]
    // 0x35b3b8: r0 = AllocateClosure()
    //     0x35b3b8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b3bc: str             x0, [SP]
    // 0x35b3c0: r0 = resolveWith()
    //     0x35b3c0: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b3c4: mov             x1, x0
    // 0x35b3c8: ldur            x0, [fp, #-0x18]
    // 0x35b3cc: r2 = LoadClassIdInstr(r0)
    //     0x35b3cc: ldur            x2, [x0, #-1]
    //     0x35b3d0: ubfx            x2, x2, #0xc, #0x14
    // 0x35b3d4: stp             x1, x0, [SP]
    // 0x35b3d8: mov             x0, x2
    // 0x35b3dc: mov             lr, x0
    // 0x35b3e0: ldr             lr, [x21, lr, lsl #3]
    // 0x35b3e4: blr             lr
    // 0x35b3e8: tbnz            w0, #4, #0x35be00
    // 0x35b3ec: ldur            x0, [fp, #-8]
    // 0x35b3f0: cmp             x0, #0x4cf
    // 0x35b3f4: b.ne            #0x35b40c
    // 0x35b3f8: ldr             x1, [fp, #0x10]
    // 0x35b3fc: LoadField: r2 = r1->field_17
    //     0x35b3fc: ldur            w2, [x1, #0x17]
    // 0x35b400: DecompressPointer r2
    //     0x35b400: add             x2, x2, HEAP, lsl #32
    // 0x35b404: mov             x1, x2
    // 0x35b408: b               #0x35b47c
    // 0x35b40c: ldr             x1, [fp, #0x10]
    // 0x35b410: cmp             x0, #0x4d0
    // 0x35b414: b.ne            #0x35b44c
    // 0x35b418: r1 = 1
    //     0x35b418: movz            x1, #0x1
    // 0x35b41c: r0 = AllocateContext()
    //     0x35b41c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b420: mov             x1, x0
    // 0x35b424: ldr             x0, [fp, #0x10]
    // 0x35b428: StoreField: r1->field_f = r0
    //     0x35b428: stur            w0, [x1, #0xf]
    // 0x35b42c: mov             x2, x1
    // 0x35b430: r1 = Function '<anonymous closure>':.
    //     0x35b430: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca0] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b434: ldr             x1, [x1, #0xca0]
    // 0x35b438: r0 = AllocateClosure()
    //     0x35b438: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b43c: str             x0, [SP]
    // 0x35b440: r0 = resolveWith()
    //     0x35b440: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b444: mov             x1, x0
    // 0x35b448: b               #0x35b47c
    // 0x35b44c: r1 = 1
    //     0x35b44c: movz            x1, #0x1
    // 0x35b450: r0 = AllocateContext()
    //     0x35b450: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b454: mov             x1, x0
    // 0x35b458: ldr             x0, [fp, #0x10]
    // 0x35b45c: StoreField: r1->field_f = r0
    //     0x35b45c: stur            w0, [x1, #0xf]
    // 0x35b460: mov             x2, x1
    // 0x35b464: r1 = Function '<anonymous closure>':.
    //     0x35b464: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca8] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b468: ldr             x1, [x1, #0xca8]
    // 0x35b46c: r0 = AllocateClosure()
    //     0x35b46c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b470: str             x0, [SP]
    // 0x35b474: r0 = resolveWith()
    //     0x35b474: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b478: mov             x1, x0
    // 0x35b47c: ldur            x0, [fp, #-0x10]
    // 0x35b480: stur            x1, [fp, #-0x18]
    // 0x35b484: cmp             x0, #0x4cf
    // 0x35b488: b.ne            #0x35b4a4
    // 0x35b48c: ldr             x2, [fp, #0x18]
    // 0x35b490: LoadField: r3 = r2->field_17
    //     0x35b490: ldur            w3, [x2, #0x17]
    // 0x35b494: DecompressPointer r3
    //     0x35b494: add             x3, x3, HEAP, lsl #32
    // 0x35b498: mov             x0, x1
    // 0x35b49c: mov             x1, x3
    // 0x35b4a0: b               #0x35b520
    // 0x35b4a4: ldr             x2, [fp, #0x18]
    // 0x35b4a8: cmp             x0, #0x4d0
    // 0x35b4ac: b.ne            #0x35b4e8
    // 0x35b4b0: r1 = 1
    //     0x35b4b0: movz            x1, #0x1
    // 0x35b4b4: r0 = AllocateContext()
    //     0x35b4b4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b4b8: mov             x1, x0
    // 0x35b4bc: ldr             x0, [fp, #0x18]
    // 0x35b4c0: StoreField: r1->field_f = r0
    //     0x35b4c0: stur            w0, [x1, #0xf]
    // 0x35b4c4: mov             x2, x1
    // 0x35b4c8: r1 = Function '<anonymous closure>':.
    //     0x35b4c8: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca0] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b4cc: ldr             x1, [x1, #0xca0]
    // 0x35b4d0: r0 = AllocateClosure()
    //     0x35b4d0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b4d4: str             x0, [SP]
    // 0x35b4d8: r0 = resolveWith()
    //     0x35b4d8: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b4dc: mov             x1, x0
    // 0x35b4e0: ldur            x0, [fp, #-0x18]
    // 0x35b4e4: b               #0x35b520
    // 0x35b4e8: mov             x1, x2
    // 0x35b4ec: r1 = 1
    //     0x35b4ec: movz            x1, #0x1
    // 0x35b4f0: r0 = AllocateContext()
    //     0x35b4f0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b4f4: mov             x1, x0
    // 0x35b4f8: ldr             x0, [fp, #0x18]
    // 0x35b4fc: StoreField: r1->field_f = r0
    //     0x35b4fc: stur            w0, [x1, #0xf]
    // 0x35b500: mov             x2, x1
    // 0x35b504: r1 = Function '<anonymous closure>':.
    //     0x35b504: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca8] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b508: ldr             x1, [x1, #0xca8]
    // 0x35b50c: r0 = AllocateClosure()
    //     0x35b50c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b510: str             x0, [SP]
    // 0x35b514: r0 = resolveWith()
    //     0x35b514: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b518: mov             x1, x0
    // 0x35b51c: ldur            x0, [fp, #-0x18]
    // 0x35b520: r2 = LoadClassIdInstr(r0)
    //     0x35b520: ldur            x2, [x0, #-1]
    //     0x35b524: ubfx            x2, x2, #0xc, #0x14
    // 0x35b528: stp             x1, x0, [SP]
    // 0x35b52c: mov             x0, x2
    // 0x35b530: mov             lr, x0
    // 0x35b534: ldr             lr, [x21, lr, lsl #3]
    // 0x35b538: blr             lr
    // 0x35b53c: tbnz            w0, #4, #0x35be00
    // 0x35b540: ldur            x0, [fp, #-8]
    // 0x35b544: cmp             x0, #0x4cf
    // 0x35b548: b.ne            #0x35b560
    // 0x35b54c: ldr             x1, [fp, #0x10]
    // 0x35b550: LoadField: r2 = r1->field_1f
    //     0x35b550: ldur            w2, [x1, #0x1f]
    // 0x35b554: DecompressPointer r2
    //     0x35b554: add             x2, x2, HEAP, lsl #32
    // 0x35b558: mov             x1, x2
    // 0x35b55c: b               #0x35b5d0
    // 0x35b560: ldr             x1, [fp, #0x10]
    // 0x35b564: cmp             x0, #0x4d0
    // 0x35b568: b.ne            #0x35b5a0
    // 0x35b56c: r1 = 1
    //     0x35b56c: movz            x1, #0x1
    // 0x35b570: r0 = AllocateContext()
    //     0x35b570: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b574: mov             x1, x0
    // 0x35b578: ldr             x0, [fp, #0x10]
    // 0x35b57c: StoreField: r1->field_f = r0
    //     0x35b57c: stur            w0, [x1, #0xf]
    // 0x35b580: mov             x2, x1
    // 0x35b584: r1 = Function '<anonymous closure>':.
    //     0x35b584: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb0] AnonymousClosure: (0x28d4cc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b588: ldr             x1, [x1, #0xcb0]
    // 0x35b58c: r0 = AllocateClosure()
    //     0x35b58c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b590: str             x0, [SP]
    // 0x35b594: r0 = resolveWith()
    //     0x35b594: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b598: mov             x1, x0
    // 0x35b59c: b               #0x35b5d0
    // 0x35b5a0: r1 = 1
    //     0x35b5a0: movz            x1, #0x1
    // 0x35b5a4: r0 = AllocateContext()
    //     0x35b5a4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b5a8: mov             x1, x0
    // 0x35b5ac: ldr             x0, [fp, #0x10]
    // 0x35b5b0: StoreField: r1->field_f = r0
    //     0x35b5b0: stur            w0, [x1, #0xf]
    // 0x35b5b4: mov             x2, x1
    // 0x35b5b8: r1 = Function '<anonymous closure>':.
    //     0x35b5b8: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb8] AnonymousClosure: (0x28d3c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b5bc: ldr             x1, [x1, #0xcb8]
    // 0x35b5c0: r0 = AllocateClosure()
    //     0x35b5c0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b5c4: str             x0, [SP]
    // 0x35b5c8: r0 = resolveWith()
    //     0x35b5c8: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b5cc: mov             x1, x0
    // 0x35b5d0: ldur            x0, [fp, #-0x10]
    // 0x35b5d4: stur            x1, [fp, #-0x18]
    // 0x35b5d8: cmp             x0, #0x4cf
    // 0x35b5dc: b.ne            #0x35b5f8
    // 0x35b5e0: ldr             x2, [fp, #0x18]
    // 0x35b5e4: LoadField: r3 = r2->field_1f
    //     0x35b5e4: ldur            w3, [x2, #0x1f]
    // 0x35b5e8: DecompressPointer r3
    //     0x35b5e8: add             x3, x3, HEAP, lsl #32
    // 0x35b5ec: mov             x0, x1
    // 0x35b5f0: mov             x1, x3
    // 0x35b5f4: b               #0x35b674
    // 0x35b5f8: ldr             x2, [fp, #0x18]
    // 0x35b5fc: cmp             x0, #0x4d0
    // 0x35b600: b.ne            #0x35b63c
    // 0x35b604: r1 = 1
    //     0x35b604: movz            x1, #0x1
    // 0x35b608: r0 = AllocateContext()
    //     0x35b608: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b60c: mov             x1, x0
    // 0x35b610: ldr             x0, [fp, #0x18]
    // 0x35b614: StoreField: r1->field_f = r0
    //     0x35b614: stur            w0, [x1, #0xf]
    // 0x35b618: mov             x2, x1
    // 0x35b61c: r1 = Function '<anonymous closure>':.
    //     0x35b61c: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb0] AnonymousClosure: (0x28d4cc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b620: ldr             x1, [x1, #0xcb0]
    // 0x35b624: r0 = AllocateClosure()
    //     0x35b624: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b628: str             x0, [SP]
    // 0x35b62c: r0 = resolveWith()
    //     0x35b62c: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b630: mov             x1, x0
    // 0x35b634: ldur            x0, [fp, #-0x18]
    // 0x35b638: b               #0x35b674
    // 0x35b63c: mov             x1, x2
    // 0x35b640: r1 = 1
    //     0x35b640: movz            x1, #0x1
    // 0x35b644: r0 = AllocateContext()
    //     0x35b644: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b648: mov             x1, x0
    // 0x35b64c: ldr             x0, [fp, #0x18]
    // 0x35b650: StoreField: r1->field_f = r0
    //     0x35b650: stur            w0, [x1, #0xf]
    // 0x35b654: mov             x2, x1
    // 0x35b658: r1 = Function '<anonymous closure>':.
    //     0x35b658: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb8] AnonymousClosure: (0x28d3c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b65c: ldr             x1, [x1, #0xcb8]
    // 0x35b660: r0 = AllocateClosure()
    //     0x35b660: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b664: str             x0, [SP]
    // 0x35b668: r0 = resolveWith()
    //     0x35b668: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x35b66c: mov             x1, x0
    // 0x35b670: ldur            x0, [fp, #-0x18]
    // 0x35b674: r2 = LoadClassIdInstr(r0)
    //     0x35b674: ldur            x2, [x0, #-1]
    //     0x35b678: ubfx            x2, x2, #0xc, #0x14
    // 0x35b67c: stp             x1, x0, [SP]
    // 0x35b680: mov             x0, x2
    // 0x35b684: mov             lr, x0
    // 0x35b688: ldr             lr, [x21, lr, lsl #3]
    // 0x35b68c: blr             lr
    // 0x35b690: tbnz            w0, #4, #0x35be00
    // 0x35b694: ldur            x0, [fp, #-8]
    // 0x35b698: cmp             x0, #0x4cf
    // 0x35b69c: b.ne            #0x35b6b4
    // 0x35b6a0: ldr             x2, [fp, #0x10]
    // 0x35b6a4: LoadField: r1 = r2->field_3b
    //     0x35b6a4: ldur            w1, [x2, #0x3b]
    // 0x35b6a8: DecompressPointer r1
    //     0x35b6a8: add             x1, x1, HEAP, lsl #32
    // 0x35b6ac: mov             x2, x1
    // 0x35b6b0: b               #0x35b744
    // 0x35b6b4: ldr             x2, [fp, #0x10]
    // 0x35b6b8: cmp             x0, #0x4d0
    // 0x35b6bc: b.ne            #0x35b710
    // 0x35b6c0: mov             x1, x2
    // 0x35b6c4: LoadField: r0 = r1->field_8f
    //     0x35b6c4: ldur            w0, [x1, #0x8f]
    // 0x35b6c8: DecompressPointer r0
    //     0x35b6c8: add             x0, x0, HEAP, lsl #32
    // 0x35b6cc: r16 = Sentinel
    //     0x35b6cc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x35b6d0: cmp             w0, w16
    // 0x35b6d4: b.ne            #0x35b6e4
    // 0x35b6d8: r2 = _colors
    //     0x35b6d8: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x35b6dc: ldr             x2, [x2, #0xcc0]
    // 0x35b6e0: r0 = InitLateFinalInstanceField()
    //     0x35b6e0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x35b6e4: LoadField: r1 = r0->field_5f
    //     0x35b6e4: ldur            w1, [x0, #0x5f]
    // 0x35b6e8: DecompressPointer r1
    //     0x35b6e8: add             x1, x1, HEAP, lsl #32
    // 0x35b6ec: cmp             w1, NULL
    // 0x35b6f0: b.ne            #0x35b704
    // 0x35b6f4: LoadField: r1 = r0->field_57
    //     0x35b6f4: ldur            w1, [x0, #0x57]
    // 0x35b6f8: DecompressPointer r1
    //     0x35b6f8: add             x1, x1, HEAP, lsl #32
    // 0x35b6fc: mov             x0, x1
    // 0x35b700: b               #0x35b708
    // 0x35b704: mov             x0, x1
    // 0x35b708: mov             x2, x0
    // 0x35b70c: b               #0x35b744
    // 0x35b710: mov             x0, x2
    // 0x35b714: r1 = 1
    //     0x35b714: movz            x1, #0x1
    // 0x35b718: r0 = AllocateContext()
    //     0x35b718: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b71c: mov             x1, x0
    // 0x35b720: ldr             x0, [fp, #0x10]
    // 0x35b724: StoreField: r1->field_f = r0
    //     0x35b724: stur            w0, [x1, #0xf]
    // 0x35b728: mov             x2, x1
    // 0x35b72c: r1 = Function '<anonymous closure>':.
    //     0x35b72c: add             x1, PP, #0xa, lsl #12  ; [pp+0xacc8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b730: ldr             x1, [x1, #0xcc8]
    // 0x35b734: r0 = AllocateClosure()
    //     0x35b734: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b738: str             x0, [SP]
    // 0x35b73c: r0 = resolveWith()
    //     0x35b73c: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35b740: mov             x2, x0
    // 0x35b744: ldur            x0, [fp, #-0x10]
    // 0x35b748: stur            x2, [fp, #-0x18]
    // 0x35b74c: cmp             x0, #0x4cf
    // 0x35b750: b.ne            #0x35b768
    // 0x35b754: ldr             x3, [fp, #0x18]
    // 0x35b758: LoadField: r1 = r3->field_3b
    //     0x35b758: ldur            w1, [x3, #0x3b]
    // 0x35b75c: DecompressPointer r1
    //     0x35b75c: add             x1, x1, HEAP, lsl #32
    // 0x35b760: mov             x0, x2
    // 0x35b764: b               #0x35b800
    // 0x35b768: ldr             x3, [fp, #0x18]
    // 0x35b76c: cmp             x0, #0x4d0
    // 0x35b770: b.ne            #0x35b7c8
    // 0x35b774: mov             x1, x3
    // 0x35b778: LoadField: r0 = r1->field_8f
    //     0x35b778: ldur            w0, [x1, #0x8f]
    // 0x35b77c: DecompressPointer r0
    //     0x35b77c: add             x0, x0, HEAP, lsl #32
    // 0x35b780: r16 = Sentinel
    //     0x35b780: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x35b784: cmp             w0, w16
    // 0x35b788: b.ne            #0x35b798
    // 0x35b78c: r2 = _colors
    //     0x35b78c: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x35b790: ldr             x2, [x2, #0xcc0]
    // 0x35b794: r0 = InitLateFinalInstanceField()
    //     0x35b794: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x35b798: LoadField: r1 = r0->field_5f
    //     0x35b798: ldur            w1, [x0, #0x5f]
    // 0x35b79c: DecompressPointer r1
    //     0x35b79c: add             x1, x1, HEAP, lsl #32
    // 0x35b7a0: cmp             w1, NULL
    // 0x35b7a4: b.ne            #0x35b7b8
    // 0x35b7a8: LoadField: r1 = r0->field_57
    //     0x35b7a8: ldur            w1, [x0, #0x57]
    // 0x35b7ac: DecompressPointer r1
    //     0x35b7ac: add             x1, x1, HEAP, lsl #32
    // 0x35b7b0: mov             x0, x1
    // 0x35b7b4: b               #0x35b7bc
    // 0x35b7b8: mov             x0, x1
    // 0x35b7bc: mov             x1, x0
    // 0x35b7c0: ldur            x0, [fp, #-0x18]
    // 0x35b7c4: b               #0x35b800
    // 0x35b7c8: mov             x0, x3
    // 0x35b7cc: r1 = 1
    //     0x35b7cc: movz            x1, #0x1
    // 0x35b7d0: r0 = AllocateContext()
    //     0x35b7d0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b7d4: mov             x1, x0
    // 0x35b7d8: ldr             x0, [fp, #0x18]
    // 0x35b7dc: StoreField: r1->field_f = r0
    //     0x35b7dc: stur            w0, [x1, #0xf]
    // 0x35b7e0: mov             x2, x1
    // 0x35b7e4: r1 = Function '<anonymous closure>':.
    //     0x35b7e4: add             x1, PP, #0xa, lsl #12  ; [pp+0xacc8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b7e8: ldr             x1, [x1, #0xcc8]
    // 0x35b7ec: r0 = AllocateClosure()
    //     0x35b7ec: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b7f0: str             x0, [SP]
    // 0x35b7f4: r0 = resolveWith()
    //     0x35b7f4: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35b7f8: mov             x1, x0
    // 0x35b7fc: ldur            x0, [fp, #-0x18]
    // 0x35b800: r2 = LoadClassIdInstr(r0)
    //     0x35b800: ldur            x2, [x0, #-1]
    //     0x35b804: ubfx            x2, x2, #0xc, #0x14
    // 0x35b808: stp             x1, x0, [SP]
    // 0x35b80c: mov             x0, x2
    // 0x35b810: mov             lr, x0
    // 0x35b814: ldr             lr, [x21, lr, lsl #3]
    // 0x35b818: blr             lr
    // 0x35b81c: tbnz            w0, #4, #0x35be00
    // 0x35b820: ldur            x0, [fp, #-8]
    // 0x35b824: cmp             x0, #0x4cf
    // 0x35b828: b.ne            #0x35b840
    // 0x35b82c: ldr             x1, [fp, #0x10]
    // 0x35b830: LoadField: r2 = r1->field_43
    //     0x35b830: ldur            w2, [x1, #0x43]
    // 0x35b834: DecompressPointer r2
    //     0x35b834: add             x2, x2, HEAP, lsl #32
    // 0x35b838: mov             x1, x2
    // 0x35b83c: b               #0x35b8b4
    // 0x35b840: ldr             x1, [fp, #0x10]
    // 0x35b844: cmp             x0, #0x4d0
    // 0x35b848: b.ne            #0x35b880
    // 0x35b84c: r1 = 1
    //     0x35b84c: movz            x1, #0x1
    // 0x35b850: r0 = AllocateContext()
    //     0x35b850: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b854: mov             x1, x0
    // 0x35b858: ldr             x0, [fp, #0x10]
    // 0x35b85c: StoreField: r1->field_f = r0
    //     0x35b85c: stur            w0, [x1, #0xf]
    // 0x35b860: mov             x2, x1
    // 0x35b864: r1 = Function '<anonymous closure>':.
    //     0x35b864: add             x1, PP, #0xa, lsl #12  ; [pp+0xacd0] AnonymousClosure: (0x303fc0), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b868: ldr             x1, [x1, #0xcd0]
    // 0x35b86c: r0 = AllocateClosure()
    //     0x35b86c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b870: str             x0, [SP]
    // 0x35b874: r0 = resolveWith()
    //     0x35b874: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35b878: mov             x1, x0
    // 0x35b87c: b               #0x35b8b4
    // 0x35b880: mov             x0, x1
    // 0x35b884: r1 = 1
    //     0x35b884: movz            x1, #0x1
    // 0x35b888: r0 = AllocateContext()
    //     0x35b888: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b88c: mov             x1, x0
    // 0x35b890: ldr             x0, [fp, #0x10]
    // 0x35b894: StoreField: r1->field_f = r0
    //     0x35b894: stur            w0, [x1, #0xf]
    // 0x35b898: mov             x2, x1
    // 0x35b89c: r1 = Function '<anonymous closure>':.
    //     0x35b89c: add             x1, PP, #0xa, lsl #12  ; [pp+0xacd8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b8a0: ldr             x1, [x1, #0xcd8]
    // 0x35b8a4: r0 = AllocateClosure()
    //     0x35b8a4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b8a8: str             x0, [SP]
    // 0x35b8ac: r0 = resolveWith()
    //     0x35b8ac: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35b8b0: mov             x1, x0
    // 0x35b8b4: ldur            x0, [fp, #-0x10]
    // 0x35b8b8: stur            x1, [fp, #-0x18]
    // 0x35b8bc: cmp             x0, #0x4cf
    // 0x35b8c0: b.ne            #0x35b8dc
    // 0x35b8c4: ldr             x2, [fp, #0x18]
    // 0x35b8c8: LoadField: r3 = r2->field_43
    //     0x35b8c8: ldur            w3, [x2, #0x43]
    // 0x35b8cc: DecompressPointer r3
    //     0x35b8cc: add             x3, x3, HEAP, lsl #32
    // 0x35b8d0: mov             x0, x1
    // 0x35b8d4: mov             x1, x3
    // 0x35b8d8: b               #0x35b958
    // 0x35b8dc: ldr             x2, [fp, #0x18]
    // 0x35b8e0: cmp             x0, #0x4d0
    // 0x35b8e4: b.ne            #0x35b920
    // 0x35b8e8: r1 = 1
    //     0x35b8e8: movz            x1, #0x1
    // 0x35b8ec: r0 = AllocateContext()
    //     0x35b8ec: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b8f0: mov             x1, x0
    // 0x35b8f4: ldr             x0, [fp, #0x18]
    // 0x35b8f8: StoreField: r1->field_f = r0
    //     0x35b8f8: stur            w0, [x1, #0xf]
    // 0x35b8fc: mov             x2, x1
    // 0x35b900: r1 = Function '<anonymous closure>':.
    //     0x35b900: add             x1, PP, #0xa, lsl #12  ; [pp+0xacd0] AnonymousClosure: (0x303fc0), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b904: ldr             x1, [x1, #0xcd0]
    // 0x35b908: r0 = AllocateClosure()
    //     0x35b908: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b90c: str             x0, [SP]
    // 0x35b910: r0 = resolveWith()
    //     0x35b910: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35b914: mov             x1, x0
    // 0x35b918: ldur            x0, [fp, #-0x18]
    // 0x35b91c: b               #0x35b958
    // 0x35b920: mov             x0, x2
    // 0x35b924: r1 = 1
    //     0x35b924: movz            x1, #0x1
    // 0x35b928: r0 = AllocateContext()
    //     0x35b928: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b92c: mov             x1, x0
    // 0x35b930: ldr             x0, [fp, #0x18]
    // 0x35b934: StoreField: r1->field_f = r0
    //     0x35b934: stur            w0, [x1, #0xf]
    // 0x35b938: mov             x2, x1
    // 0x35b93c: r1 = Function '<anonymous closure>':.
    //     0x35b93c: add             x1, PP, #0xa, lsl #12  ; [pp+0xacd8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b940: ldr             x1, [x1, #0xcd8]
    // 0x35b944: r0 = AllocateClosure()
    //     0x35b944: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b948: str             x0, [SP]
    // 0x35b94c: r0 = resolveWith()
    //     0x35b94c: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35b950: mov             x1, x0
    // 0x35b954: ldur            x0, [fp, #-0x18]
    // 0x35b958: r2 = LoadClassIdInstr(r0)
    //     0x35b958: ldur            x2, [x0, #-1]
    //     0x35b95c: ubfx            x2, x2, #0xc, #0x14
    // 0x35b960: stp             x1, x0, [SP]
    // 0x35b964: mov             x0, x2
    // 0x35b968: mov             lr, x0
    // 0x35b96c: ldr             lr, [x21, lr, lsl #3]
    // 0x35b970: blr             lr
    // 0x35b974: tbnz            w0, #4, #0x35be00
    // 0x35b978: ldur            x0, [fp, #-8]
    // 0x35b97c: cmp             x0, #0x4cf
    // 0x35b980: b.ne            #0x35b998
    // 0x35b984: ldr             x1, [fp, #0x10]
    // 0x35b988: LoadField: r2 = r1->field_4b
    //     0x35b988: ldur            w2, [x1, #0x4b]
    // 0x35b98c: DecompressPointer r2
    //     0x35b98c: add             x2, x2, HEAP, lsl #32
    // 0x35b990: mov             x1, x2
    // 0x35b994: b               #0x35ba0c
    // 0x35b998: ldr             x1, [fp, #0x10]
    // 0x35b99c: cmp             x0, #0x4d0
    // 0x35b9a0: b.ne            #0x35b9d8
    // 0x35b9a4: r1 = 1
    //     0x35b9a4: movz            x1, #0x1
    // 0x35b9a8: r0 = AllocateContext()
    //     0x35b9a8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b9ac: mov             x1, x0
    // 0x35b9b0: ldr             x0, [fp, #0x10]
    // 0x35b9b4: StoreField: r1->field_f = r0
    //     0x35b9b4: stur            w0, [x1, #0xf]
    // 0x35b9b8: mov             x2, x1
    // 0x35b9bc: r1 = Function '<anonymous closure>':.
    //     0x35b9bc: add             x1, PP, #0xa, lsl #12  ; [pp+0xace0] AnonymousClosure: (0x303e3c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35b9c0: ldr             x1, [x1, #0xce0]
    // 0x35b9c4: r0 = AllocateClosure()
    //     0x35b9c4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35b9c8: str             x0, [SP]
    // 0x35b9cc: r0 = resolveWith()
    //     0x35b9cc: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35b9d0: mov             x1, x0
    // 0x35b9d4: b               #0x35ba0c
    // 0x35b9d8: mov             x0, x1
    // 0x35b9dc: r1 = 1
    //     0x35b9dc: movz            x1, #0x1
    // 0x35b9e0: r0 = AllocateContext()
    //     0x35b9e0: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35b9e4: mov             x1, x0
    // 0x35b9e8: ldr             x0, [fp, #0x10]
    // 0x35b9ec: StoreField: r1->field_f = r0
    //     0x35b9ec: stur            w0, [x1, #0xf]
    // 0x35b9f0: mov             x2, x1
    // 0x35b9f4: r1 = Function '<anonymous closure>':.
    //     0x35b9f4: add             x1, PP, #0xa, lsl #12  ; [pp+0xace8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35b9f8: ldr             x1, [x1, #0xce8]
    // 0x35b9fc: r0 = AllocateClosure()
    //     0x35b9fc: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35ba00: str             x0, [SP]
    // 0x35ba04: r0 = resolveWith()
    //     0x35ba04: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35ba08: mov             x1, x0
    // 0x35ba0c: ldur            x0, [fp, #-0x10]
    // 0x35ba10: stur            x1, [fp, #-0x18]
    // 0x35ba14: cmp             x0, #0x4cf
    // 0x35ba18: b.ne            #0x35ba34
    // 0x35ba1c: ldr             x2, [fp, #0x18]
    // 0x35ba20: LoadField: r3 = r2->field_4b
    //     0x35ba20: ldur            w3, [x2, #0x4b]
    // 0x35ba24: DecompressPointer r3
    //     0x35ba24: add             x3, x3, HEAP, lsl #32
    // 0x35ba28: mov             x0, x1
    // 0x35ba2c: mov             x1, x3
    // 0x35ba30: b               #0x35bab0
    // 0x35ba34: ldr             x2, [fp, #0x18]
    // 0x35ba38: cmp             x0, #0x4d0
    // 0x35ba3c: b.ne            #0x35ba78
    // 0x35ba40: r1 = 1
    //     0x35ba40: movz            x1, #0x1
    // 0x35ba44: r0 = AllocateContext()
    //     0x35ba44: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35ba48: mov             x1, x0
    // 0x35ba4c: ldr             x0, [fp, #0x18]
    // 0x35ba50: StoreField: r1->field_f = r0
    //     0x35ba50: stur            w0, [x1, #0xf]
    // 0x35ba54: mov             x2, x1
    // 0x35ba58: r1 = Function '<anonymous closure>':.
    //     0x35ba58: add             x1, PP, #0xa, lsl #12  ; [pp+0xace0] AnonymousClosure: (0x303e3c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35ba5c: ldr             x1, [x1, #0xce0]
    // 0x35ba60: r0 = AllocateClosure()
    //     0x35ba60: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35ba64: str             x0, [SP]
    // 0x35ba68: r0 = resolveWith()
    //     0x35ba68: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35ba6c: mov             x1, x0
    // 0x35ba70: ldur            x0, [fp, #-0x18]
    // 0x35ba74: b               #0x35bab0
    // 0x35ba78: mov             x0, x2
    // 0x35ba7c: r1 = 1
    //     0x35ba7c: movz            x1, #0x1
    // 0x35ba80: r0 = AllocateContext()
    //     0x35ba80: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35ba84: mov             x1, x0
    // 0x35ba88: ldr             x0, [fp, #0x18]
    // 0x35ba8c: StoreField: r1->field_f = r0
    //     0x35ba8c: stur            w0, [x1, #0xf]
    // 0x35ba90: mov             x2, x1
    // 0x35ba94: r1 = Function '<anonymous closure>':.
    //     0x35ba94: add             x1, PP, #0xa, lsl #12  ; [pp+0xace8] AnonymousClosure: (0x303cbc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35ba98: ldr             x1, [x1, #0xce8]
    // 0x35ba9c: r0 = AllocateClosure()
    //     0x35ba9c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35baa0: str             x0, [SP]
    // 0x35baa4: r0 = resolveWith()
    //     0x35baa4: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35baa8: mov             x1, x0
    // 0x35baac: ldur            x0, [fp, #-0x18]
    // 0x35bab0: r2 = LoadClassIdInstr(r0)
    //     0x35bab0: ldur            x2, [x0, #-1]
    //     0x35bab4: ubfx            x2, x2, #0xc, #0x14
    // 0x35bab8: stp             x1, x0, [SP]
    // 0x35babc: mov             x0, x2
    // 0x35bac0: mov             lr, x0
    // 0x35bac4: ldr             lr, [x21, lr, lsl #3]
    // 0x35bac8: blr             lr
    // 0x35bacc: tbnz            w0, #4, #0x35be00
    // 0x35bad0: ldur            x0, [fp, #-8]
    // 0x35bad4: cmp             x0, #0x4cf
    // 0x35bad8: b.ne            #0x35baf0
    // 0x35badc: ldr             x1, [fp, #0x10]
    // 0x35bae0: LoadField: r2 = r1->field_57
    //     0x35bae0: ldur            w2, [x1, #0x57]
    // 0x35bae4: DecompressPointer r2
    //     0x35bae4: add             x2, x2, HEAP, lsl #32
    // 0x35bae8: mov             x1, x2
    // 0x35baec: b               #0x35bb64
    // 0x35baf0: ldr             x1, [fp, #0x10]
    // 0x35baf4: cmp             x0, #0x4d0
    // 0x35baf8: b.ne            #0x35bb30
    // 0x35bafc: r1 = 1
    //     0x35bafc: movz            x1, #0x1
    // 0x35bb00: r0 = AllocateContext()
    //     0x35bb00: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bb04: mov             x1, x0
    // 0x35bb08: ldr             x0, [fp, #0x10]
    // 0x35bb0c: StoreField: r1->field_f = r0
    //     0x35bb0c: stur            w0, [x1, #0xf]
    // 0x35bb10: mov             x2, x1
    // 0x35bb14: r1 = Function '<anonymous closure>':.
    //     0x35bb14: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf0] AnonymousClosure: (0x28e828), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35bb18: ldr             x1, [x1, #0xcf0]
    // 0x35bb1c: r0 = AllocateClosure()
    //     0x35bb1c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bb20: str             x0, [SP]
    // 0x35bb24: r0 = resolveWith()
    //     0x35bb24: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35bb28: mov             x1, x0
    // 0x35bb2c: b               #0x35bb64
    // 0x35bb30: mov             x0, x1
    // 0x35bb34: r1 = 1
    //     0x35bb34: movz            x1, #0x1
    // 0x35bb38: r0 = AllocateContext()
    //     0x35bb38: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bb3c: mov             x1, x0
    // 0x35bb40: ldr             x0, [fp, #0x10]
    // 0x35bb44: StoreField: r1->field_f = r0
    //     0x35bb44: stur            w0, [x1, #0xf]
    // 0x35bb48: mov             x2, x1
    // 0x35bb4c: r1 = Function '<anonymous closure>':.
    //     0x35bb4c: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf8] AnonymousClosure: (0x28e710), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35bb50: ldr             x1, [x1, #0xcf8]
    // 0x35bb54: r0 = AllocateClosure()
    //     0x35bb54: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bb58: str             x0, [SP]
    // 0x35bb5c: r0 = resolveWith()
    //     0x35bb5c: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35bb60: mov             x1, x0
    // 0x35bb64: ldur            x0, [fp, #-0x10]
    // 0x35bb68: stur            x1, [fp, #-0x18]
    // 0x35bb6c: cmp             x0, #0x4cf
    // 0x35bb70: b.ne            #0x35bb8c
    // 0x35bb74: ldr             x2, [fp, #0x18]
    // 0x35bb78: LoadField: r3 = r2->field_57
    //     0x35bb78: ldur            w3, [x2, #0x57]
    // 0x35bb7c: DecompressPointer r3
    //     0x35bb7c: add             x3, x3, HEAP, lsl #32
    // 0x35bb80: mov             x0, x1
    // 0x35bb84: mov             x1, x3
    // 0x35bb88: b               #0x35bc08
    // 0x35bb8c: ldr             x2, [fp, #0x18]
    // 0x35bb90: cmp             x0, #0x4d0
    // 0x35bb94: b.ne            #0x35bbd0
    // 0x35bb98: r1 = 1
    //     0x35bb98: movz            x1, #0x1
    // 0x35bb9c: r0 = AllocateContext()
    //     0x35bb9c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bba0: mov             x1, x0
    // 0x35bba4: ldr             x0, [fp, #0x18]
    // 0x35bba8: StoreField: r1->field_f = r0
    //     0x35bba8: stur            w0, [x1, #0xf]
    // 0x35bbac: mov             x2, x1
    // 0x35bbb0: r1 = Function '<anonymous closure>':.
    //     0x35bbb0: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf0] AnonymousClosure: (0x28e828), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35bbb4: ldr             x1, [x1, #0xcf0]
    // 0x35bbb8: r0 = AllocateClosure()
    //     0x35bbb8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bbbc: str             x0, [SP]
    // 0x35bbc0: r0 = resolveWith()
    //     0x35bbc0: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35bbc4: mov             x1, x0
    // 0x35bbc8: ldur            x0, [fp, #-0x18]
    // 0x35bbcc: b               #0x35bc08
    // 0x35bbd0: mov             x0, x2
    // 0x35bbd4: r1 = 1
    //     0x35bbd4: movz            x1, #0x1
    // 0x35bbd8: r0 = AllocateContext()
    //     0x35bbd8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bbdc: mov             x1, x0
    // 0x35bbe0: ldr             x0, [fp, #0x18]
    // 0x35bbe4: StoreField: r1->field_f = r0
    //     0x35bbe4: stur            w0, [x1, #0xf]
    // 0x35bbe8: mov             x2, x1
    // 0x35bbec: r1 = Function '<anonymous closure>':.
    //     0x35bbec: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf8] AnonymousClosure: (0x28e710), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x35bbf0: ldr             x1, [x1, #0xcf8]
    // 0x35bbf4: r0 = AllocateClosure()
    //     0x35bbf4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bbf8: str             x0, [SP]
    // 0x35bbfc: r0 = resolveWith()
    //     0x35bbfc: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x35bc00: mov             x1, x0
    // 0x35bc04: ldur            x0, [fp, #-0x18]
    // 0x35bc08: r2 = LoadClassIdInstr(r0)
    //     0x35bc08: ldur            x2, [x0, #-1]
    //     0x35bc0c: ubfx            x2, x2, #0xc, #0x14
    // 0x35bc10: stp             x1, x0, [SP]
    // 0x35bc14: mov             x0, x2
    // 0x35bc18: mov             lr, x0
    // 0x35bc1c: ldr             lr, [x21, lr, lsl #3]
    // 0x35bc20: blr             lr
    // 0x35bc24: tbnz            w0, #4, #0x35be00
    // 0x35bc28: ldur            x0, [fp, #-8]
    // 0x35bc2c: cmp             x0, #0x4cf
    // 0x35bc30: b.eq            #0x35bc78
    // 0x35bc34: cmp             x0, #0x4d0
    // 0x35bc38: b.ne            #0x35bc78
    // 0x35bc3c: ldr             x1, [fp, #0x10]
    // 0x35bc40: r1 = 1
    //     0x35bc40: movz            x1, #0x1
    // 0x35bc44: r0 = AllocateContext()
    //     0x35bc44: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bc48: mov             x1, x0
    // 0x35bc4c: ldr             x0, [fp, #0x10]
    // 0x35bc50: StoreField: r1->field_f = r0
    //     0x35bc50: stur            w0, [x1, #0xf]
    // 0x35bc54: mov             x2, x1
    // 0x35bc58: r1 = Function '<anonymous closure>':.
    //     0x35bc58: add             x1, PP, #0xa, lsl #12  ; [pp+0xad00] AnonymousClosure: (0x28f7d0), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35bc5c: ldr             x1, [x1, #0xd00]
    // 0x35bc60: r0 = AllocateClosure()
    //     0x35bc60: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bc64: str             x0, [SP]
    // 0x35bc68: r0 = resolveWith()
    //     0x35bc68: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x35bc6c: mov             x2, x0
    // 0x35bc70: ldr             x0, [fp, #0x10]
    // 0x35bc74: b               #0x35bc88
    // 0x35bc78: ldr             x0, [fp, #0x10]
    // 0x35bc7c: LoadField: r1 = r0->field_5f
    //     0x35bc7c: ldur            w1, [x0, #0x5f]
    // 0x35bc80: DecompressPointer r1
    //     0x35bc80: add             x1, x1, HEAP, lsl #32
    // 0x35bc84: mov             x2, x1
    // 0x35bc88: ldur            x1, [fp, #-0x10]
    // 0x35bc8c: stur            x2, [fp, #-0x18]
    // 0x35bc90: cmp             x1, #0x4cf
    // 0x35bc94: b.eq            #0x35bcdc
    // 0x35bc98: cmp             x1, #0x4d0
    // 0x35bc9c: b.ne            #0x35bcdc
    // 0x35bca0: ldr             x3, [fp, #0x18]
    // 0x35bca4: r1 = 1
    //     0x35bca4: movz            x1, #0x1
    // 0x35bca8: r0 = AllocateContext()
    //     0x35bca8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bcac: mov             x1, x0
    // 0x35bcb0: ldr             x0, [fp, #0x18]
    // 0x35bcb4: StoreField: r1->field_f = r0
    //     0x35bcb4: stur            w0, [x1, #0xf]
    // 0x35bcb8: mov             x2, x1
    // 0x35bcbc: r1 = Function '<anonymous closure>':.
    //     0x35bcbc: add             x1, PP, #0xa, lsl #12  ; [pp+0xad00] AnonymousClosure: (0x28f7d0), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35bcc0: ldr             x1, [x1, #0xd00]
    // 0x35bcc4: r0 = AllocateClosure()
    //     0x35bcc4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bcc8: str             x0, [SP]
    // 0x35bccc: r0 = resolveWith()
    //     0x35bccc: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x35bcd0: mov             x2, x0
    // 0x35bcd4: ldr             x1, [fp, #0x18]
    // 0x35bcd8: b               #0x35bcec
    // 0x35bcdc: ldr             x1, [fp, #0x18]
    // 0x35bce0: LoadField: r0 = r1->field_5f
    //     0x35bce0: ldur            w0, [x1, #0x5f]
    // 0x35bce4: DecompressPointer r0
    //     0x35bce4: add             x0, x0, HEAP, lsl #32
    // 0x35bce8: mov             x2, x0
    // 0x35bcec: ldur            x0, [fp, #-0x18]
    // 0x35bcf0: r3 = LoadClassIdInstr(r0)
    //     0x35bcf0: ldur            x3, [x0, #-1]
    //     0x35bcf4: ubfx            x3, x3, #0xc, #0x14
    // 0x35bcf8: stp             x2, x0, [SP]
    // 0x35bcfc: mov             x0, x3
    // 0x35bd00: mov             lr, x0
    // 0x35bd04: ldr             lr, [x21, lr, lsl #3]
    // 0x35bd08: blr             lr
    // 0x35bd0c: tbnz            w0, #4, #0x35be00
    // 0x35bd10: ldur            x0, [fp, #-8]
    // 0x35bd14: cmp             x0, #0x4cf
    // 0x35bd18: b.ne            #0x35bd24
    // 0x35bd1c: ldr             x0, [fp, #0x10]
    // 0x35bd20: b               #0x35bd68
    // 0x35bd24: cmp             x0, #0x4d0
    // 0x35bd28: b.ne            #0x35bd64
    // 0x35bd2c: ldr             x0, [fp, #0x10]
    // 0x35bd30: r1 = 1
    //     0x35bd30: movz            x1, #0x1
    // 0x35bd34: r0 = AllocateContext()
    //     0x35bd34: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bd38: mov             x1, x0
    // 0x35bd3c: ldr             x0, [fp, #0x10]
    // 0x35bd40: StoreField: r1->field_f = r0
    //     0x35bd40: stur            w0, [x1, #0xf]
    // 0x35bd44: mov             x2, x1
    // 0x35bd48: r1 = Function '<anonymous closure>':.
    //     0x35bd48: add             x1, PP, #0xa, lsl #12  ; [pp+0xad08] AnonymousClosure: (0x28f254), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35bd4c: ldr             x1, [x1, #0xd08]
    // 0x35bd50: r0 = AllocateClosure()
    //     0x35bd50: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bd54: str             x0, [SP]
    // 0x35bd58: r0 = resolveWith()
    //     0x35bd58: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x35bd5c: mov             x1, x0
    // 0x35bd60: b               #0x35bd70
    // 0x35bd64: ldr             x0, [fp, #0x10]
    // 0x35bd68: LoadField: r1 = r0->field_5b
    //     0x35bd68: ldur            w1, [x0, #0x5b]
    // 0x35bd6c: DecompressPointer r1
    //     0x35bd6c: add             x1, x1, HEAP, lsl #32
    // 0x35bd70: ldur            x0, [fp, #-0x10]
    // 0x35bd74: stur            x1, [fp, #-0x18]
    // 0x35bd78: cmp             x0, #0x4cf
    // 0x35bd7c: b.ne            #0x35bd88
    // 0x35bd80: ldr             x0, [fp, #0x18]
    // 0x35bd84: b               #0x35bdcc
    // 0x35bd88: cmp             x0, #0x4d0
    // 0x35bd8c: b.ne            #0x35bdc8
    // 0x35bd90: ldr             x0, [fp, #0x18]
    // 0x35bd94: r1 = 1
    //     0x35bd94: movz            x1, #0x1
    // 0x35bd98: r0 = AllocateContext()
    //     0x35bd98: bl              #0x3e4e00  ; AllocateContextStub
    // 0x35bd9c: mov             x1, x0
    // 0x35bda0: ldr             x0, [fp, #0x18]
    // 0x35bda4: StoreField: r1->field_f = r0
    //     0x35bda4: stur            w0, [x1, #0xf]
    // 0x35bda8: mov             x2, x1
    // 0x35bdac: r1 = Function '<anonymous closure>':.
    //     0x35bdac: add             x1, PP, #0xa, lsl #12  ; [pp+0xad08] AnonymousClosure: (0x28f254), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x35bdb0: ldr             x1, [x1, #0xd08]
    // 0x35bdb4: r0 = AllocateClosure()
    //     0x35bdb4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x35bdb8: str             x0, [SP]
    // 0x35bdbc: r0 = resolveWith()
    //     0x35bdbc: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x35bdc0: mov             x1, x0
    // 0x35bdc4: b               #0x35bdd4
    // 0x35bdc8: ldr             x0, [fp, #0x18]
    // 0x35bdcc: LoadField: r1 = r0->field_5b
    //     0x35bdcc: ldur            w1, [x0, #0x5b]
    // 0x35bdd0: DecompressPointer r1
    //     0x35bdd0: add             x1, x1, HEAP, lsl #32
    // 0x35bdd4: ldur            x0, [fp, #-0x18]
    // 0x35bdd8: r2 = LoadClassIdInstr(r0)
    //     0x35bdd8: ldur            x2, [x0, #-1]
    //     0x35bddc: ubfx            x2, x2, #0xc, #0x14
    // 0x35bde0: stp             x1, x0, [SP]
    // 0x35bde4: mov             x0, x2
    // 0x35bde8: mov             lr, x0
    // 0x35bdec: ldr             lr, [x21, lr, lsl #3]
    // 0x35bdf0: blr             lr
    // 0x35bdf4: tbnz            w0, #4, #0x35be00
    // 0x35bdf8: r0 = true
    //     0x35bdf8: add             x0, NULL, #0x20  ; true
    // 0x35bdfc: b               #0x35be04
    // 0x35be00: r0 = false
    //     0x35be00: add             x0, NULL, #0x30  ; false
    // 0x35be04: LeaveFrame
    //     0x35be04: mov             SP, fp
    //     0x35be08: ldp             fp, lr, [SP], #0x10
    // 0x35be0c: ret
    //     0x35be0c: ret             
    // 0x35be10: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x35be10: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x35be14: b               #0x35af90
  }
}

// class id: 1232, size: 0x98, field offset: 0x8c
class _InputDecoratorDefaultsM3 extends InputDecorationTheme {

  late final ColorScheme _colors; // offset: 0x90
  late final TextTheme _textTheme; // offset: 0x94

  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28d4cc, size: 0xd0
    // 0x28d4cc: EnterFrame
    //     0x28d4cc: stp             fp, lr, [SP, #-0x10]!
    //     0x28d4d0: mov             fp, SP
    // 0x28d4d4: AllocStack(0x20)
    //     0x28d4d4: sub             SP, SP, #0x20
    // 0x28d4d8: SetupParameters()
    //     0x28d4d8: ldr             x0, [fp, #0x18]
    //     0x28d4dc: ldur            w2, [x0, #0x17]
    //     0x28d4e0: add             x2, x2, HEAP, lsl #32
    //     0x28d4e4: stur            x2, [fp, #-8]
    // 0x28d4e8: CheckStackOverflow
    //     0x28d4e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d4ec: cmp             SP, x16
    //     0x28d4f0: b.ls            #0x28d594
    // 0x28d4f4: LoadField: r1 = r2->field_f
    //     0x28d4f4: ldur            w1, [x2, #0xf]
    // 0x28d4f8: DecompressPointer r1
    //     0x28d4f8: add             x1, x1, HEAP, lsl #32
    // 0x28d4fc: LoadField: r0 = r1->field_93
    //     0x28d4fc: ldur            w0, [x1, #0x93]
    // 0x28d500: DecompressPointer r0
    //     0x28d500: add             x0, x0, HEAP, lsl #32
    // 0x28d504: r16 = Sentinel
    //     0x28d504: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28d508: cmp             w0, w16
    // 0x28d50c: b.ne            #0x28d51c
    // 0x28d510: r2 = _textTheme
    //     0x28d510: add             x2, PP, #0xa, lsl #12  ; [pp+0xad50] Field <_InputDecoratorDefaultsM3@73019562._textTheme@73019562>: late final (offset: 0x94)
    //     0x28d514: ldr             x2, [x2, #0xd50]
    // 0x28d518: r0 = InitLateFinalInstanceField()
    //     0x28d518: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28d51c: LoadField: r1 = r0->field_33
    //     0x28d51c: ldur            w1, [x0, #0x33]
    // 0x28d520: DecompressPointer r1
    //     0x28d520: add             x1, x1, HEAP, lsl #32
    // 0x28d524: cmp             w1, NULL
    // 0x28d528: b.ne            #0x28d538
    // 0x28d52c: r2 = Instance_TextStyle
    //     0x28d52c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad58] Obj!TextStyle@47b101
    //     0x28d530: ldr             x2, [x2, #0xd58]
    // 0x28d534: b               #0x28d53c
    // 0x28d538: mov             x2, x1
    // 0x28d53c: ldur            x0, [fp, #-8]
    // 0x28d540: stur            x2, [fp, #-0x10]
    // 0x28d544: LoadField: r1 = r0->field_f
    //     0x28d544: ldur            w1, [x0, #0xf]
    // 0x28d548: DecompressPointer r1
    //     0x28d548: add             x1, x1, HEAP, lsl #32
    // 0x28d54c: LoadField: r0 = r1->field_8f
    //     0x28d54c: ldur            w0, [x1, #0x8f]
    // 0x28d550: DecompressPointer r0
    //     0x28d550: add             x0, x0, HEAP, lsl #32
    // 0x28d554: r16 = Sentinel
    //     0x28d554: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28d558: cmp             w0, w16
    // 0x28d55c: b.ne            #0x28d56c
    // 0x28d560: r2 = _colors
    //     0x28d560: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28d564: ldr             x2, [x2, #0xcc0]
    // 0x28d568: r0 = InitLateFinalInstanceField()
    //     0x28d568: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28d56c: LoadField: r1 = r0->field_3b
    //     0x28d56c: ldur            w1, [x0, #0x3b]
    // 0x28d570: DecompressPointer r1
    //     0x28d570: add             x1, x1, HEAP, lsl #32
    // 0x28d574: ldur            x16, [fp, #-0x10]
    // 0x28d578: stp             x1, x16, [SP]
    // 0x28d57c: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28d57c: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28d580: ldr             x4, [x4, #0xac0]
    // 0x28d584: r0 = copyWith()
    //     0x28d584: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28d588: LeaveFrame
    //     0x28d588: mov             SP, fp
    //     0x28d58c: ldp             fp, lr, [SP], #0x10
    // 0x28d590: ret
    //     0x28d590: ret             
    // 0x28d594: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d594: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d598: b               #0x28d4f4
  }
  TextTheme _textTheme(_InputDecoratorDefaultsM3) {
    // ** addr: 0x28d59c, size: 0x4c
    // 0x28d59c: EnterFrame
    //     0x28d59c: stp             fp, lr, [SP, #-0x10]!
    //     0x28d5a0: mov             fp, SP
    // 0x28d5a4: AllocStack(0x8)
    //     0x28d5a4: sub             SP, SP, #8
    // 0x28d5a8: CheckStackOverflow
    //     0x28d5a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d5ac: cmp             SP, x16
    //     0x28d5b0: b.ls            #0x28d5e0
    // 0x28d5b4: ldr             x0, [fp, #0x10]
    // 0x28d5b8: LoadField: r1 = r0->field_8b
    //     0x28d5b8: ldur            w1, [x0, #0x8b]
    // 0x28d5bc: DecompressPointer r1
    //     0x28d5bc: add             x1, x1, HEAP, lsl #32
    // 0x28d5c0: str             x1, [SP]
    // 0x28d5c4: r0 = of()
    //     0x28d5c4: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28d5c8: LoadField: r1 = r0->field_93
    //     0x28d5c8: ldur            w1, [x0, #0x93]
    // 0x28d5cc: DecompressPointer r1
    //     0x28d5cc: add             x1, x1, HEAP, lsl #32
    // 0x28d5d0: mov             x0, x1
    // 0x28d5d4: LeaveFrame
    //     0x28d5d4: mov             SP, fp
    //     0x28d5d8: ldp             fp, lr, [SP], #0x10
    // 0x28d5dc: ret
    //     0x28d5dc: ret             
    // 0x28d5e0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d5e0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d5e4: b               #0x28d5b4
  }
  ColorScheme _colors(_InputDecoratorDefaultsM3) {
    // ** addr: 0x28d5e8, size: 0x4c
    // 0x28d5e8: EnterFrame
    //     0x28d5e8: stp             fp, lr, [SP, #-0x10]!
    //     0x28d5ec: mov             fp, SP
    // 0x28d5f0: AllocStack(0x8)
    //     0x28d5f0: sub             SP, SP, #8
    // 0x28d5f4: CheckStackOverflow
    //     0x28d5f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d5f8: cmp             SP, x16
    //     0x28d5fc: b.ls            #0x28d62c
    // 0x28d600: ldr             x0, [fp, #0x10]
    // 0x28d604: LoadField: r1 = r0->field_8b
    //     0x28d604: ldur            w1, [x0, #0x8b]
    // 0x28d608: DecompressPointer r1
    //     0x28d608: add             x1, x1, HEAP, lsl #32
    // 0x28d60c: str             x1, [SP]
    // 0x28d610: r0 = of()
    //     0x28d610: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28d614: LoadField: r1 = r0->field_3f
    //     0x28d614: ldur            w1, [x0, #0x3f]
    // 0x28d618: DecompressPointer r1
    //     0x28d618: add             x1, x1, HEAP, lsl #32
    // 0x28d61c: mov             x0, x1
    // 0x28d620: LeaveFrame
    //     0x28d620: mov             SP, fp
    //     0x28d624: ldp             fp, lr, [SP], #0x10
    // 0x28d628: ret
    //     0x28d628: ret             
    // 0x28d62c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d62c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d630: b               #0x28d600
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28d850, size: 0x17c
    // 0x28d850: EnterFrame
    //     0x28d850: stp             fp, lr, [SP, #-0x10]!
    //     0x28d854: mov             fp, SP
    // 0x28d858: AllocStack(0x20)
    //     0x28d858: sub             SP, SP, #0x20
    // 0x28d85c: SetupParameters()
    //     0x28d85c: ldr             x0, [fp, #0x18]
    //     0x28d860: ldur            w2, [x0, #0x17]
    //     0x28d864: add             x2, x2, HEAP, lsl #32
    //     0x28d868: stur            x2, [fp, #-8]
    // 0x28d86c: CheckStackOverflow
    //     0x28d86c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d870: cmp             SP, x16
    //     0x28d874: b.ls            #0x28d9c4
    // 0x28d878: LoadField: r1 = r2->field_f
    //     0x28d878: ldur            w1, [x2, #0xf]
    // 0x28d87c: DecompressPointer r1
    //     0x28d87c: add             x1, x1, HEAP, lsl #32
    // 0x28d880: LoadField: r0 = r1->field_93
    //     0x28d880: ldur            w0, [x1, #0x93]
    // 0x28d884: DecompressPointer r0
    //     0x28d884: add             x0, x0, HEAP, lsl #32
    // 0x28d888: r16 = Sentinel
    //     0x28d888: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28d88c: cmp             w0, w16
    // 0x28d890: b.ne            #0x28d8a0
    // 0x28d894: r2 = _textTheme
    //     0x28d894: add             x2, PP, #0xa, lsl #12  ; [pp+0xad50] Field <_InputDecoratorDefaultsM3@73019562._textTheme@73019562>: late final (offset: 0x94)
    //     0x28d898: ldr             x2, [x2, #0xd50]
    // 0x28d89c: r0 = InitLateFinalInstanceField()
    //     0x28d89c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28d8a0: LoadField: r1 = r0->field_33
    //     0x28d8a0: ldur            w1, [x0, #0x33]
    // 0x28d8a4: DecompressPointer r1
    //     0x28d8a4: add             x1, x1, HEAP, lsl #32
    // 0x28d8a8: cmp             w1, NULL
    // 0x28d8ac: b.ne            #0x28d8b8
    // 0x28d8b0: r1 = Instance_TextStyle
    //     0x28d8b0: add             x1, PP, #0xa, lsl #12  ; [pp+0xad58] Obj!TextStyle@47b101
    //     0x28d8b4: ldr             x1, [x1, #0xd58]
    // 0x28d8b8: ldr             x0, [fp, #0x10]
    // 0x28d8bc: stur            x1, [fp, #-0x10]
    // 0x28d8c0: r2 = LoadClassIdInstr(r0)
    //     0x28d8c0: ldur            x2, [x0, #-1]
    //     0x28d8c4: ubfx            x2, x2, #0xc, #0x14
    // 0x28d8c8: r16 = Instance_MaterialState
    //     0x28d8c8: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28d8cc: stp             x16, x0, [SP]
    // 0x28d8d0: mov             x0, x2
    // 0x28d8d4: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28d8d4: sub             lr, x0, #0xf4b
    //     0x28d8d8: ldr             lr, [x21, lr, lsl #3]
    //     0x28d8dc: blr             lr
    // 0x28d8e0: tbnz            w0, #4, #0x28d954
    // 0x28d8e4: ldur            x0, [fp, #-8]
    // 0x28d8e8: LoadField: r1 = r0->field_f
    //     0x28d8e8: ldur            w1, [x0, #0xf]
    // 0x28d8ec: DecompressPointer r1
    //     0x28d8ec: add             x1, x1, HEAP, lsl #32
    // 0x28d8f0: LoadField: r0 = r1->field_8f
    //     0x28d8f0: ldur            w0, [x1, #0x8f]
    // 0x28d8f4: DecompressPointer r0
    //     0x28d8f4: add             x0, x0, HEAP, lsl #32
    // 0x28d8f8: r16 = Sentinel
    //     0x28d8f8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28d8fc: cmp             w0, w16
    // 0x28d900: b.ne            #0x28d910
    // 0x28d904: r2 = _colors
    //     0x28d904: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28d908: ldr             x2, [x2, #0xcc0]
    // 0x28d90c: r0 = InitLateFinalInstanceField()
    //     0x28d90c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28d910: LoadField: r1 = r0->field_57
    //     0x28d910: ldur            w1, [x0, #0x57]
    // 0x28d914: DecompressPointer r1
    //     0x28d914: add             x1, x1, HEAP, lsl #32
    // 0x28d918: str             x1, [SP, #8]
    // 0x28d91c: d0 = 0.380000
    //     0x28d91c: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28d920: ldr             d0, [x17, #0xab0]
    // 0x28d924: d0 = 0.380000
    //     0x28d924: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28d928: ldr             d0, [x17, #0xab0]
    // 0x28d92c: str             d0, [SP]
    // 0x28d930: r0 = withOpacity()
    //     0x28d930: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x28d934: ldur            x16, [fp, #-0x10]
    // 0x28d938: stp             x0, x16, [SP]
    // 0x28d93c: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28d93c: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28d940: ldr             x4, [x4, #0xac0]
    // 0x28d944: r0 = copyWith()
    //     0x28d944: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28d948: LeaveFrame
    //     0x28d948: mov             SP, fp
    //     0x28d94c: ldp             fp, lr, [SP], #0x10
    // 0x28d950: ret
    //     0x28d950: ret             
    // 0x28d954: ldur            x0, [fp, #-8]
    // 0x28d958: LoadField: r1 = r0->field_f
    //     0x28d958: ldur            w1, [x0, #0xf]
    // 0x28d95c: DecompressPointer r1
    //     0x28d95c: add             x1, x1, HEAP, lsl #32
    // 0x28d960: LoadField: r0 = r1->field_8f
    //     0x28d960: ldur            w0, [x1, #0x8f]
    // 0x28d964: DecompressPointer r0
    //     0x28d964: add             x0, x0, HEAP, lsl #32
    // 0x28d968: r16 = Sentinel
    //     0x28d968: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28d96c: cmp             w0, w16
    // 0x28d970: b.ne            #0x28d980
    // 0x28d974: r2 = _colors
    //     0x28d974: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28d978: ldr             x2, [x2, #0xcc0]
    // 0x28d97c: r0 = InitLateFinalInstanceField()
    //     0x28d97c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28d980: LoadField: r1 = r0->field_5f
    //     0x28d980: ldur            w1, [x0, #0x5f]
    // 0x28d984: DecompressPointer r1
    //     0x28d984: add             x1, x1, HEAP, lsl #32
    // 0x28d988: cmp             w1, NULL
    // 0x28d98c: b.ne            #0x28d9a0
    // 0x28d990: LoadField: r1 = r0->field_57
    //     0x28d990: ldur            w1, [x0, #0x57]
    // 0x28d994: DecompressPointer r1
    //     0x28d994: add             x1, x1, HEAP, lsl #32
    // 0x28d998: mov             x0, x1
    // 0x28d99c: b               #0x28d9a4
    // 0x28d9a0: mov             x0, x1
    // 0x28d9a4: ldur            x16, [fp, #-0x10]
    // 0x28d9a8: stp             x0, x16, [SP]
    // 0x28d9ac: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28d9ac: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28d9b0: ldr             x4, [x4, #0xac0]
    // 0x28d9b4: r0 = copyWith()
    //     0x28d9b4: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28d9b8: LeaveFrame
    //     0x28d9b8: mov             SP, fp
    //     0x28d9bc: ldp             fp, lr, [SP], #0x10
    // 0x28d9c0: ret
    //     0x28d9c0: ret             
    // 0x28d9c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d9c4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d9c8: b               #0x28d878
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28de08, size: 0x44c
    // 0x28de08: EnterFrame
    //     0x28de08: stp             fp, lr, [SP, #-0x10]!
    //     0x28de0c: mov             fp, SP
    // 0x28de10: AllocStack(0x20)
    //     0x28de10: sub             SP, SP, #0x20
    // 0x28de14: SetupParameters()
    //     0x28de14: ldr             x0, [fp, #0x18]
    //     0x28de18: ldur            w2, [x0, #0x17]
    //     0x28de1c: add             x2, x2, HEAP, lsl #32
    //     0x28de20: stur            x2, [fp, #-8]
    // 0x28de24: CheckStackOverflow
    //     0x28de24: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28de28: cmp             SP, x16
    //     0x28de2c: b.ls            #0x28e24c
    // 0x28de30: LoadField: r1 = r2->field_f
    //     0x28de30: ldur            w1, [x2, #0xf]
    // 0x28de34: DecompressPointer r1
    //     0x28de34: add             x1, x1, HEAP, lsl #32
    // 0x28de38: LoadField: r0 = r1->field_93
    //     0x28de38: ldur            w0, [x1, #0x93]
    // 0x28de3c: DecompressPointer r0
    //     0x28de3c: add             x0, x0, HEAP, lsl #32
    // 0x28de40: r16 = Sentinel
    //     0x28de40: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28de44: cmp             w0, w16
    // 0x28de48: b.ne            #0x28de58
    // 0x28de4c: r2 = _textTheme
    //     0x28de4c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad50] Field <_InputDecoratorDefaultsM3@73019562._textTheme@73019562>: late final (offset: 0x94)
    //     0x28de50: ldr             x2, [x2, #0xd50]
    // 0x28de54: r0 = InitLateFinalInstanceField()
    //     0x28de54: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28de58: LoadField: r1 = r0->field_2b
    //     0x28de58: ldur            w1, [x0, #0x2b]
    // 0x28de5c: DecompressPointer r1
    //     0x28de5c: add             x1, x1, HEAP, lsl #32
    // 0x28de60: cmp             w1, NULL
    // 0x28de64: b.ne            #0x28de74
    // 0x28de68: r2 = Instance_TextStyle
    //     0x28de68: add             x2, PP, #0xa, lsl #12  ; [pp+0xad58] Obj!TextStyle@47b101
    //     0x28de6c: ldr             x2, [x2, #0xd58]
    // 0x28de70: b               #0x28de78
    // 0x28de74: mov             x2, x1
    // 0x28de78: ldr             x1, [fp, #0x10]
    // 0x28de7c: stur            x2, [fp, #-0x10]
    // 0x28de80: r0 = LoadClassIdInstr(r1)
    //     0x28de80: ldur            x0, [x1, #-1]
    //     0x28de84: ubfx            x0, x0, #0xc, #0x14
    // 0x28de88: r16 = Instance_MaterialState
    //     0x28de88: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28de8c: stp             x16, x1, [SP]
    // 0x28de90: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28de90: sub             lr, x0, #0xf4b
    //     0x28de94: ldr             lr, [x21, lr, lsl #3]
    //     0x28de98: blr             lr
    // 0x28de9c: tbnz            w0, #4, #0x28df14
    // 0x28dea0: ldur            x1, [fp, #-8]
    // 0x28dea4: LoadField: r0 = r1->field_f
    //     0x28dea4: ldur            w0, [x1, #0xf]
    // 0x28dea8: DecompressPointer r0
    //     0x28dea8: add             x0, x0, HEAP, lsl #32
    // 0x28deac: mov             x1, x0
    // 0x28deb0: LoadField: r0 = r1->field_8f
    //     0x28deb0: ldur            w0, [x1, #0x8f]
    // 0x28deb4: DecompressPointer r0
    //     0x28deb4: add             x0, x0, HEAP, lsl #32
    // 0x28deb8: r16 = Sentinel
    //     0x28deb8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28debc: cmp             w0, w16
    // 0x28dec0: b.ne            #0x28ded0
    // 0x28dec4: r2 = _colors
    //     0x28dec4: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28dec8: ldr             x2, [x2, #0xcc0]
    // 0x28decc: r0 = InitLateFinalInstanceField()
    //     0x28decc: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28ded0: LoadField: r1 = r0->field_57
    //     0x28ded0: ldur            w1, [x0, #0x57]
    // 0x28ded4: DecompressPointer r1
    //     0x28ded4: add             x1, x1, HEAP, lsl #32
    // 0x28ded8: str             x1, [SP, #8]
    // 0x28dedc: d0 = 0.380000
    //     0x28dedc: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28dee0: ldr             d0, [x17, #0xab0]
    // 0x28dee4: d0 = 0.380000
    //     0x28dee4: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28dee8: ldr             d0, [x17, #0xab0]
    // 0x28deec: str             d0, [SP]
    // 0x28def0: r0 = withOpacity()
    //     0x28def0: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x28def4: ldur            x16, [fp, #-0x10]
    // 0x28def8: stp             x0, x16, [SP]
    // 0x28defc: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28defc: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28df00: ldr             x4, [x4, #0xac0]
    // 0x28df04: r0 = copyWith()
    //     0x28df04: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28df08: LeaveFrame
    //     0x28df08: mov             SP, fp
    //     0x28df0c: ldp             fp, lr, [SP], #0x10
    // 0x28df10: ret
    //     0x28df10: ret             
    // 0x28df14: ldr             x2, [fp, #0x10]
    // 0x28df18: ldur            x1, [fp, #-8]
    // 0x28df1c: r0 = LoadClassIdInstr(r2)
    //     0x28df1c: ldur            x0, [x2, #-1]
    //     0x28df20: ubfx            x0, x0, #0xc, #0x14
    // 0x28df24: r16 = Instance_MaterialState
    //     0x28df24: add             x16, PP, #0xa, lsl #12  ; [pp+0xad18] Obj!MaterialState@4817e1
    //     0x28df28: ldr             x16, [x16, #0xd18]
    // 0x28df2c: stp             x16, x2, [SP]
    // 0x28df30: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28df30: sub             lr, x0, #0xf4b
    //     0x28df34: ldr             lr, [x21, lr, lsl #3]
    //     0x28df38: blr             lr
    // 0x28df3c: tbnz            w0, #4, #0x28e0b8
    // 0x28df40: ldr             x1, [fp, #0x10]
    // 0x28df44: r0 = LoadClassIdInstr(r1)
    //     0x28df44: ldur            x0, [x1, #-1]
    //     0x28df48: ubfx            x0, x0, #0xc, #0x14
    // 0x28df4c: r16 = Instance_MaterialState
    //     0x28df4c: add             x16, PP, #0xa, lsl #12  ; [pp+0xab10] Obj!MaterialState@481781
    //     0x28df50: ldr             x16, [x16, #0xb10]
    // 0x28df54: stp             x16, x1, [SP]
    // 0x28df58: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28df58: sub             lr, x0, #0xf4b
    //     0x28df5c: ldr             lr, [x21, lr, lsl #3]
    //     0x28df60: blr             lr
    // 0x28df64: tbnz            w0, #4, #0x28dfdc
    // 0x28df68: ldur            x1, [fp, #-8]
    // 0x28df6c: LoadField: r0 = r1->field_f
    //     0x28df6c: ldur            w0, [x1, #0xf]
    // 0x28df70: DecompressPointer r0
    //     0x28df70: add             x0, x0, HEAP, lsl #32
    // 0x28df74: mov             x1, x0
    // 0x28df78: LoadField: r0 = r1->field_8f
    //     0x28df78: ldur            w0, [x1, #0x8f]
    // 0x28df7c: DecompressPointer r0
    //     0x28df7c: add             x0, x0, HEAP, lsl #32
    // 0x28df80: r16 = Sentinel
    //     0x28df80: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28df84: cmp             w0, w16
    // 0x28df88: b.ne            #0x28df98
    // 0x28df8c: r2 = _colors
    //     0x28df8c: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28df90: ldr             x2, [x2, #0xcc0]
    // 0x28df94: r0 = InitLateFinalInstanceField()
    //     0x28df94: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28df98: LoadField: r1 = r0->field_47
    //     0x28df98: ldur            w1, [x0, #0x47]
    // 0x28df9c: DecompressPointer r1
    //     0x28df9c: add             x1, x1, HEAP, lsl #32
    // 0x28dfa0: cmp             w1, NULL
    // 0x28dfa4: b.ne            #0x28dfb8
    // 0x28dfa8: LoadField: r1 = r0->field_3f
    //     0x28dfa8: ldur            w1, [x0, #0x3f]
    // 0x28dfac: DecompressPointer r1
    //     0x28dfac: add             x1, x1, HEAP, lsl #32
    // 0x28dfb0: mov             x0, x1
    // 0x28dfb4: b               #0x28dfbc
    // 0x28dfb8: mov             x0, x1
    // 0x28dfbc: ldur            x16, [fp, #-0x10]
    // 0x28dfc0: stp             x0, x16, [SP]
    // 0x28dfc4: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28dfc4: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28dfc8: ldr             x4, [x4, #0xac0]
    // 0x28dfcc: r0 = copyWith()
    //     0x28dfcc: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28dfd0: LeaveFrame
    //     0x28dfd0: mov             SP, fp
    //     0x28dfd4: ldp             fp, lr, [SP], #0x10
    // 0x28dfd8: ret
    //     0x28dfd8: ret             
    // 0x28dfdc: ldr             x2, [fp, #0x10]
    // 0x28dfe0: ldur            x1, [fp, #-8]
    // 0x28dfe4: r0 = LoadClassIdInstr(r2)
    //     0x28dfe4: ldur            x0, [x2, #-1]
    //     0x28dfe8: ubfx            x0, x0, #0xc, #0x14
    // 0x28dfec: r16 = Instance_MaterialState
    //     0x28dfec: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28dff0: ldr             x16, [x16, #0xb18]
    // 0x28dff4: stp             x16, x2, [SP]
    // 0x28dff8: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28dff8: sub             lr, x0, #0xf4b
    //     0x28dffc: ldr             lr, [x21, lr, lsl #3]
    //     0x28e000: blr             lr
    // 0x28e004: tbnz            w0, #4, #0x28e060
    // 0x28e008: ldur            x1, [fp, #-8]
    // 0x28e00c: LoadField: r0 = r1->field_f
    //     0x28e00c: ldur            w0, [x1, #0xf]
    // 0x28e010: DecompressPointer r0
    //     0x28e010: add             x0, x0, HEAP, lsl #32
    // 0x28e014: mov             x1, x0
    // 0x28e018: LoadField: r0 = r1->field_8f
    //     0x28e018: ldur            w0, [x1, #0x8f]
    // 0x28e01c: DecompressPointer r0
    //     0x28e01c: add             x0, x0, HEAP, lsl #32
    // 0x28e020: r16 = Sentinel
    //     0x28e020: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28e024: cmp             w0, w16
    // 0x28e028: b.ne            #0x28e038
    // 0x28e02c: r2 = _colors
    //     0x28e02c: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28e030: ldr             x2, [x2, #0xcc0]
    // 0x28e034: r0 = InitLateFinalInstanceField()
    //     0x28e034: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28e038: LoadField: r1 = r0->field_3b
    //     0x28e038: ldur            w1, [x0, #0x3b]
    // 0x28e03c: DecompressPointer r1
    //     0x28e03c: add             x1, x1, HEAP, lsl #32
    // 0x28e040: ldur            x16, [fp, #-0x10]
    // 0x28e044: stp             x1, x16, [SP]
    // 0x28e048: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28e048: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28e04c: ldr             x4, [x4, #0xac0]
    // 0x28e050: r0 = copyWith()
    //     0x28e050: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28e054: LeaveFrame
    //     0x28e054: mov             SP, fp
    //     0x28e058: ldp             fp, lr, [SP], #0x10
    // 0x28e05c: ret
    //     0x28e05c: ret             
    // 0x28e060: ldur            x1, [fp, #-8]
    // 0x28e064: LoadField: r0 = r1->field_f
    //     0x28e064: ldur            w0, [x1, #0xf]
    // 0x28e068: DecompressPointer r0
    //     0x28e068: add             x0, x0, HEAP, lsl #32
    // 0x28e06c: mov             x1, x0
    // 0x28e070: LoadField: r0 = r1->field_8f
    //     0x28e070: ldur            w0, [x1, #0x8f]
    // 0x28e074: DecompressPointer r0
    //     0x28e074: add             x0, x0, HEAP, lsl #32
    // 0x28e078: r16 = Sentinel
    //     0x28e078: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28e07c: cmp             w0, w16
    // 0x28e080: b.ne            #0x28e090
    // 0x28e084: r2 = _colors
    //     0x28e084: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28e088: ldr             x2, [x2, #0xcc0]
    // 0x28e08c: r0 = InitLateFinalInstanceField()
    //     0x28e08c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28e090: LoadField: r1 = r0->field_3b
    //     0x28e090: ldur            w1, [x0, #0x3b]
    // 0x28e094: DecompressPointer r1
    //     0x28e094: add             x1, x1, HEAP, lsl #32
    // 0x28e098: ldur            x16, [fp, #-0x10]
    // 0x28e09c: stp             x1, x16, [SP]
    // 0x28e0a0: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28e0a0: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28e0a4: ldr             x4, [x4, #0xac0]
    // 0x28e0a8: r0 = copyWith()
    //     0x28e0a8: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28e0ac: LeaveFrame
    //     0x28e0ac: mov             SP, fp
    //     0x28e0b0: ldp             fp, lr, [SP], #0x10
    // 0x28e0b4: ret
    //     0x28e0b4: ret             
    // 0x28e0b8: ldr             x2, [fp, #0x10]
    // 0x28e0bc: ldur            x1, [fp, #-8]
    // 0x28e0c0: r0 = LoadClassIdInstr(r2)
    //     0x28e0c0: ldur            x0, [x2, #-1]
    //     0x28e0c4: ubfx            x0, x0, #0xc, #0x14
    // 0x28e0c8: r16 = Instance_MaterialState
    //     0x28e0c8: add             x16, PP, #0xa, lsl #12  ; [pp+0xab10] Obj!MaterialState@481781
    //     0x28e0cc: ldr             x16, [x16, #0xb10]
    // 0x28e0d0: stp             x16, x2, [SP]
    // 0x28e0d4: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28e0d4: sub             lr, x0, #0xf4b
    //     0x28e0d8: ldr             lr, [x21, lr, lsl #3]
    //     0x28e0dc: blr             lr
    // 0x28e0e0: tbnz            w0, #4, #0x28e158
    // 0x28e0e4: ldur            x1, [fp, #-8]
    // 0x28e0e8: LoadField: r0 = r1->field_f
    //     0x28e0e8: ldur            w0, [x1, #0xf]
    // 0x28e0ec: DecompressPointer r0
    //     0x28e0ec: add             x0, x0, HEAP, lsl #32
    // 0x28e0f0: mov             x1, x0
    // 0x28e0f4: LoadField: r0 = r1->field_8f
    //     0x28e0f4: ldur            w0, [x1, #0x8f]
    // 0x28e0f8: DecompressPointer r0
    //     0x28e0f8: add             x0, x0, HEAP, lsl #32
    // 0x28e0fc: r16 = Sentinel
    //     0x28e0fc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28e100: cmp             w0, w16
    // 0x28e104: b.ne            #0x28e114
    // 0x28e108: r2 = _colors
    //     0x28e108: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28e10c: ldr             x2, [x2, #0xcc0]
    // 0x28e110: r0 = InitLateFinalInstanceField()
    //     0x28e110: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28e114: LoadField: r1 = r0->field_5f
    //     0x28e114: ldur            w1, [x0, #0x5f]
    // 0x28e118: DecompressPointer r1
    //     0x28e118: add             x1, x1, HEAP, lsl #32
    // 0x28e11c: cmp             w1, NULL
    // 0x28e120: b.ne            #0x28e134
    // 0x28e124: LoadField: r1 = r0->field_57
    //     0x28e124: ldur            w1, [x0, #0x57]
    // 0x28e128: DecompressPointer r1
    //     0x28e128: add             x1, x1, HEAP, lsl #32
    // 0x28e12c: mov             x0, x1
    // 0x28e130: b               #0x28e138
    // 0x28e134: mov             x0, x1
    // 0x28e138: ldur            x16, [fp, #-0x10]
    // 0x28e13c: stp             x0, x16, [SP]
    // 0x28e140: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28e140: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28e144: ldr             x4, [x4, #0xac0]
    // 0x28e148: r0 = copyWith()
    //     0x28e148: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28e14c: LeaveFrame
    //     0x28e14c: mov             SP, fp
    //     0x28e150: ldp             fp, lr, [SP], #0x10
    // 0x28e154: ret
    //     0x28e154: ret             
    // 0x28e158: ldr             x0, [fp, #0x10]
    // 0x28e15c: ldur            x1, [fp, #-8]
    // 0x28e160: r2 = LoadClassIdInstr(r0)
    //     0x28e160: ldur            x2, [x0, #-1]
    //     0x28e164: ubfx            x2, x2, #0xc, #0x14
    // 0x28e168: r16 = Instance_MaterialState
    //     0x28e168: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28e16c: ldr             x16, [x16, #0xb18]
    // 0x28e170: stp             x16, x0, [SP]
    // 0x28e174: mov             x0, x2
    // 0x28e178: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28e178: sub             lr, x0, #0xf4b
    //     0x28e17c: ldr             lr, [x21, lr, lsl #3]
    //     0x28e180: blr             lr
    // 0x28e184: tbnz            w0, #4, #0x28e1dc
    // 0x28e188: ldur            x0, [fp, #-8]
    // 0x28e18c: LoadField: r1 = r0->field_f
    //     0x28e18c: ldur            w1, [x0, #0xf]
    // 0x28e190: DecompressPointer r1
    //     0x28e190: add             x1, x1, HEAP, lsl #32
    // 0x28e194: LoadField: r0 = r1->field_8f
    //     0x28e194: ldur            w0, [x1, #0x8f]
    // 0x28e198: DecompressPointer r0
    //     0x28e198: add             x0, x0, HEAP, lsl #32
    // 0x28e19c: r16 = Sentinel
    //     0x28e19c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28e1a0: cmp             w0, w16
    // 0x28e1a4: b.ne            #0x28e1b4
    // 0x28e1a8: r2 = _colors
    //     0x28e1a8: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28e1ac: ldr             x2, [x2, #0xcc0]
    // 0x28e1b0: r0 = InitLateFinalInstanceField()
    //     0x28e1b0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28e1b4: LoadField: r1 = r0->field_b
    //     0x28e1b4: ldur            w1, [x0, #0xb]
    // 0x28e1b8: DecompressPointer r1
    //     0x28e1b8: add             x1, x1, HEAP, lsl #32
    // 0x28e1bc: ldur            x16, [fp, #-0x10]
    // 0x28e1c0: stp             x1, x16, [SP]
    // 0x28e1c4: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28e1c4: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28e1c8: ldr             x4, [x4, #0xac0]
    // 0x28e1cc: r0 = copyWith()
    //     0x28e1cc: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28e1d0: LeaveFrame
    //     0x28e1d0: mov             SP, fp
    //     0x28e1d4: ldp             fp, lr, [SP], #0x10
    // 0x28e1d8: ret
    //     0x28e1d8: ret             
    // 0x28e1dc: ldur            x0, [fp, #-8]
    // 0x28e1e0: LoadField: r1 = r0->field_f
    //     0x28e1e0: ldur            w1, [x0, #0xf]
    // 0x28e1e4: DecompressPointer r1
    //     0x28e1e4: add             x1, x1, HEAP, lsl #32
    // 0x28e1e8: LoadField: r0 = r1->field_8f
    //     0x28e1e8: ldur            w0, [x1, #0x8f]
    // 0x28e1ec: DecompressPointer r0
    //     0x28e1ec: add             x0, x0, HEAP, lsl #32
    // 0x28e1f0: r16 = Sentinel
    //     0x28e1f0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28e1f4: cmp             w0, w16
    // 0x28e1f8: b.ne            #0x28e208
    // 0x28e1fc: r2 = _colors
    //     0x28e1fc: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28e200: ldr             x2, [x2, #0xcc0]
    // 0x28e204: r0 = InitLateFinalInstanceField()
    //     0x28e204: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28e208: LoadField: r1 = r0->field_5f
    //     0x28e208: ldur            w1, [x0, #0x5f]
    // 0x28e20c: DecompressPointer r1
    //     0x28e20c: add             x1, x1, HEAP, lsl #32
    // 0x28e210: cmp             w1, NULL
    // 0x28e214: b.ne            #0x28e228
    // 0x28e218: LoadField: r1 = r0->field_57
    //     0x28e218: ldur            w1, [x0, #0x57]
    // 0x28e21c: DecompressPointer r1
    //     0x28e21c: add             x1, x1, HEAP, lsl #32
    // 0x28e220: mov             x0, x1
    // 0x28e224: b               #0x28e22c
    // 0x28e228: mov             x0, x1
    // 0x28e22c: ldur            x16, [fp, #-0x10]
    // 0x28e230: stp             x0, x16, [SP]
    // 0x28e234: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28e234: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28e238: ldr             x4, [x4, #0xac0]
    // 0x28e23c: r0 = copyWith()
    //     0x28e23c: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28e240: LeaveFrame
    //     0x28e240: mov             SP, fp
    //     0x28e244: ldp             fp, lr, [SP], #0x10
    // 0x28e248: ret
    //     0x28e248: ret             
    // 0x28e24c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e24c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e250: b               #0x28de30
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28e828, size: 0x110
    // 0x28e828: EnterFrame
    //     0x28e828: stp             fp, lr, [SP, #-0x10]!
    //     0x28e82c: mov             fp, SP
    // 0x28e830: AllocStack(0x18)
    //     0x28e830: sub             SP, SP, #0x18
    // 0x28e834: SetupParameters()
    //     0x28e834: ldr             x0, [fp, #0x18]
    //     0x28e838: ldur            w1, [x0, #0x17]
    //     0x28e83c: add             x1, x1, HEAP, lsl #32
    //     0x28e840: stur            x1, [fp, #-8]
    // 0x28e844: CheckStackOverflow
    //     0x28e844: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e848: cmp             SP, x16
    //     0x28e84c: b.ls            #0x28e930
    // 0x28e850: ldr             x0, [fp, #0x10]
    // 0x28e854: r2 = LoadClassIdInstr(r0)
    //     0x28e854: ldur            x2, [x0, #-1]
    //     0x28e858: ubfx            x2, x2, #0xc, #0x14
    // 0x28e85c: r16 = Instance_MaterialState
    //     0x28e85c: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28e860: stp             x16, x0, [SP]
    // 0x28e864: mov             x0, x2
    // 0x28e868: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28e868: sub             lr, x0, #0xf4b
    //     0x28e86c: ldr             lr, [x21, lr, lsl #3]
    //     0x28e870: blr             lr
    // 0x28e874: tbnz            w0, #4, #0x28e8d4
    // 0x28e878: ldur            x0, [fp, #-8]
    // 0x28e87c: LoadField: r1 = r0->field_f
    //     0x28e87c: ldur            w1, [x0, #0xf]
    // 0x28e880: DecompressPointer r1
    //     0x28e880: add             x1, x1, HEAP, lsl #32
    // 0x28e884: LoadField: r0 = r1->field_8f
    //     0x28e884: ldur            w0, [x1, #0x8f]
    // 0x28e888: DecompressPointer r0
    //     0x28e888: add             x0, x0, HEAP, lsl #32
    // 0x28e88c: r16 = Sentinel
    //     0x28e88c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28e890: cmp             w0, w16
    // 0x28e894: b.ne            #0x28e8a4
    // 0x28e898: r2 = _colors
    //     0x28e898: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28e89c: ldr             x2, [x2, #0xcc0]
    // 0x28e8a0: r0 = InitLateFinalInstanceField()
    //     0x28e8a0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28e8a4: LoadField: r1 = r0->field_57
    //     0x28e8a4: ldur            w1, [x0, #0x57]
    // 0x28e8a8: DecompressPointer r1
    //     0x28e8a8: add             x1, x1, HEAP, lsl #32
    // 0x28e8ac: str             x1, [SP, #8]
    // 0x28e8b0: d0 = 0.040000
    //     0x28e8b0: add             x17, PP, #0xa, lsl #12  ; [pp+0xa478] IMM: double(0.04) from 0x3fa47ae147ae147b
    //     0x28e8b4: ldr             d0, [x17, #0x478]
    // 0x28e8b8: d0 = 0.040000
    //     0x28e8b8: add             x17, PP, #0xa, lsl #12  ; [pp+0xa478] IMM: double(0.04) from 0x3fa47ae147ae147b
    //     0x28e8bc: ldr             d0, [x17, #0x478]
    // 0x28e8c0: str             d0, [SP]
    // 0x28e8c4: r0 = withOpacity()
    //     0x28e8c4: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x28e8c8: LeaveFrame
    //     0x28e8c8: mov             SP, fp
    //     0x28e8cc: ldp             fp, lr, [SP], #0x10
    // 0x28e8d0: ret
    //     0x28e8d0: ret             
    // 0x28e8d4: ldur            x0, [fp, #-8]
    // 0x28e8d8: LoadField: r1 = r0->field_f
    //     0x28e8d8: ldur            w1, [x0, #0xf]
    // 0x28e8dc: DecompressPointer r1
    //     0x28e8dc: add             x1, x1, HEAP, lsl #32
    // 0x28e8e0: LoadField: r0 = r1->field_8f
    //     0x28e8e0: ldur            w0, [x1, #0x8f]
    // 0x28e8e4: DecompressPointer r0
    //     0x28e8e4: add             x0, x0, HEAP, lsl #32
    // 0x28e8e8: r16 = Sentinel
    //     0x28e8e8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28e8ec: cmp             w0, w16
    // 0x28e8f0: b.ne            #0x28e900
    // 0x28e8f4: r2 = _colors
    //     0x28e8f4: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28e8f8: ldr             x2, [x2, #0xcc0]
    // 0x28e8fc: r0 = InitLateFinalInstanceField()
    //     0x28e8fc: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28e900: LoadField: r1 = r0->field_5b
    //     0x28e900: ldur            w1, [x0, #0x5b]
    // 0x28e904: DecompressPointer r1
    //     0x28e904: add             x1, x1, HEAP, lsl #32
    // 0x28e908: cmp             w1, NULL
    // 0x28e90c: b.ne            #0x28e920
    // 0x28e910: LoadField: r2 = r0->field_53
    //     0x28e910: ldur            w2, [x0, #0x53]
    // 0x28e914: DecompressPointer r2
    //     0x28e914: add             x2, x2, HEAP, lsl #32
    // 0x28e918: mov             x0, x2
    // 0x28e91c: b               #0x28e924
    // 0x28e920: mov             x0, x1
    // 0x28e924: LeaveFrame
    //     0x28e924: mov             SP, fp
    //     0x28e928: ldp             fp, lr, [SP], #0x10
    // 0x28e92c: ret
    //     0x28e92c: ret             
    // 0x28e930: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e930: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e934: b               #0x28e850
  }
  [closure] BorderSide <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28f254, size: 0x57c
    // 0x28f254: EnterFrame
    //     0x28f254: stp             fp, lr, [SP, #-0x10]!
    //     0x28f258: mov             fp, SP
    // 0x28f25c: AllocStack(0x20)
    //     0x28f25c: sub             SP, SP, #0x20
    // 0x28f260: SetupParameters()
    //     0x28f260: ldr             x0, [fp, #0x18]
    //     0x28f264: ldur            w1, [x0, #0x17]
    //     0x28f268: add             x1, x1, HEAP, lsl #32
    //     0x28f26c: stur            x1, [fp, #-8]
    // 0x28f270: CheckStackOverflow
    //     0x28f270: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28f274: cmp             SP, x16
    //     0x28f278: b.ls            #0x28f7c8
    // 0x28f27c: ldr             x2, [fp, #0x10]
    // 0x28f280: r0 = LoadClassIdInstr(r2)
    //     0x28f280: ldur            x0, [x2, #-1]
    //     0x28f284: ubfx            x0, x0, #0xc, #0x14
    // 0x28f288: r16 = Instance_MaterialState
    //     0x28f288: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28f28c: stp             x16, x2, [SP]
    // 0x28f290: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f290: sub             lr, x0, #0xf4b
    //     0x28f294: ldr             lr, [x21, lr, lsl #3]
    //     0x28f298: blr             lr
    // 0x28f29c: tbnz            w0, #4, #0x28f33c
    // 0x28f2a0: ldur            x1, [fp, #-8]
    // 0x28f2a4: LoadField: r0 = r1->field_f
    //     0x28f2a4: ldur            w0, [x1, #0xf]
    // 0x28f2a8: DecompressPointer r0
    //     0x28f2a8: add             x0, x0, HEAP, lsl #32
    // 0x28f2ac: mov             x1, x0
    // 0x28f2b0: LoadField: r0 = r1->field_8f
    //     0x28f2b0: ldur            w0, [x1, #0x8f]
    // 0x28f2b4: DecompressPointer r0
    //     0x28f2b4: add             x0, x0, HEAP, lsl #32
    // 0x28f2b8: r16 = Sentinel
    //     0x28f2b8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f2bc: cmp             w0, w16
    // 0x28f2c0: b.ne            #0x28f2d0
    // 0x28f2c4: r2 = _colors
    //     0x28f2c4: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f2c8: ldr             x2, [x2, #0xcc0]
    // 0x28f2cc: r0 = InitLateFinalInstanceField()
    //     0x28f2cc: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f2d0: LoadField: r1 = r0->field_57
    //     0x28f2d0: ldur            w1, [x0, #0x57]
    // 0x28f2d4: DecompressPointer r1
    //     0x28f2d4: add             x1, x1, HEAP, lsl #32
    // 0x28f2d8: str             x1, [SP, #8]
    // 0x28f2dc: d0 = 0.120000
    //     0x28f2dc: add             x17, PP, #0xa, lsl #12  ; [pp+0xa468] IMM: double(0.12) from 0x3fbeb851eb851eb8
    //     0x28f2e0: ldr             d0, [x17, #0x468]
    // 0x28f2e4: d0 = 0.120000
    //     0x28f2e4: add             x17, PP, #0xa, lsl #12  ; [pp+0xa468] IMM: double(0.12) from 0x3fbeb851eb851eb8
    //     0x28f2e8: ldr             d0, [x17, #0x468]
    // 0x28f2ec: str             d0, [SP]
    // 0x28f2f0: r0 = withOpacity()
    //     0x28f2f0: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x28f2f4: stur            x0, [fp, #-0x10]
    // 0x28f2f8: r0 = BorderSide()
    //     0x28f2f8: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f2fc: mov             x1, x0
    // 0x28f300: ldur            x0, [fp, #-0x10]
    // 0x28f304: StoreField: r1->field_7 = r0
    //     0x28f304: stur            w0, [x1, #7]
    // 0x28f308: d0 = 1.000000
    //     0x28f308: fmov            d0, #1.00000000
    // 0x28f30c: d0 = 1.000000
    //     0x28f30c: fmov            d0, #1.00000000
    // 0x28f310: StoreField: r1->field_b = d0
    //     0x28f310: stur            d0, [x1, #0xb]
    // 0x28f314: r2 = Instance_BorderStyle
    //     0x28f314: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f318: ldr             x2, [x2, #0xd10]
    // 0x28f31c: StoreField: r1->field_13 = r2
    //     0x28f31c: stur            w2, [x1, #0x13]
    // 0x28f320: d1 = -1.000000
    //     0x28f320: fmov            d1, #-1.00000000
    // 0x28f324: d1 = -1.000000
    //     0x28f324: fmov            d1, #-1.00000000
    // 0x28f328: StoreField: r1->field_17 = d1
    //     0x28f328: stur            d1, [x1, #0x17]
    // 0x28f32c: mov             x0, x1
    // 0x28f330: LeaveFrame
    //     0x28f330: mov             SP, fp
    //     0x28f334: ldp             fp, lr, [SP], #0x10
    // 0x28f338: ret
    //     0x28f338: ret             
    // 0x28f33c: ldr             x3, [fp, #0x10]
    // 0x28f340: ldur            x1, [fp, #-8]
    // 0x28f344: r2 = Instance_BorderStyle
    //     0x28f344: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f348: ldr             x2, [x2, #0xd10]
    // 0x28f34c: d0 = 1.000000
    //     0x28f34c: fmov            d0, #1.00000000
    // 0x28f350: d0 = 1.000000
    //     0x28f350: fmov            d0, #1.00000000
    // 0x28f354: d1 = -1.000000
    //     0x28f354: fmov            d1, #-1.00000000
    // 0x28f358: d1 = -1.000000
    //     0x28f358: fmov            d1, #-1.00000000
    // 0x28f35c: r0 = LoadClassIdInstr(r3)
    //     0x28f35c: ldur            x0, [x3, #-1]
    //     0x28f360: ubfx            x0, x0, #0xc, #0x14
    // 0x28f364: r16 = Instance_MaterialState
    //     0x28f364: add             x16, PP, #0xa, lsl #12  ; [pp+0xad18] Obj!MaterialState@4817e1
    //     0x28f368: ldr             x16, [x16, #0xd18]
    // 0x28f36c: stp             x16, x3, [SP]
    // 0x28f370: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f370: sub             lr, x0, #0xf4b
    //     0x28f374: ldr             lr, [x21, lr, lsl #3]
    //     0x28f378: blr             lr
    // 0x28f37c: tbnz            w0, #4, #0x28f598
    // 0x28f380: ldr             x1, [fp, #0x10]
    // 0x28f384: r0 = LoadClassIdInstr(r1)
    //     0x28f384: ldur            x0, [x1, #-1]
    //     0x28f388: ubfx            x0, x0, #0xc, #0x14
    // 0x28f38c: r16 = Instance_MaterialState
    //     0x28f38c: add             x16, PP, #0xa, lsl #12  ; [pp+0xab10] Obj!MaterialState@481781
    //     0x28f390: ldr             x16, [x16, #0xb10]
    // 0x28f394: stp             x16, x1, [SP]
    // 0x28f398: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f398: sub             lr, x0, #0xf4b
    //     0x28f39c: ldr             lr, [x21, lr, lsl #3]
    //     0x28f3a0: blr             lr
    // 0x28f3a4: tbnz            w0, #4, #0x28f444
    // 0x28f3a8: ldur            x1, [fp, #-8]
    // 0x28f3ac: LoadField: r0 = r1->field_f
    //     0x28f3ac: ldur            w0, [x1, #0xf]
    // 0x28f3b0: DecompressPointer r0
    //     0x28f3b0: add             x0, x0, HEAP, lsl #32
    // 0x28f3b4: mov             x1, x0
    // 0x28f3b8: LoadField: r0 = r1->field_8f
    //     0x28f3b8: ldur            w0, [x1, #0x8f]
    // 0x28f3bc: DecompressPointer r0
    //     0x28f3bc: add             x0, x0, HEAP, lsl #32
    // 0x28f3c0: r16 = Sentinel
    //     0x28f3c0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f3c4: cmp             w0, w16
    // 0x28f3c8: b.ne            #0x28f3d8
    // 0x28f3cc: r2 = _colors
    //     0x28f3cc: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f3d0: ldr             x2, [x2, #0xcc0]
    // 0x28f3d4: r0 = InitLateFinalInstanceField()
    //     0x28f3d4: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f3d8: LoadField: r1 = r0->field_47
    //     0x28f3d8: ldur            w1, [x0, #0x47]
    // 0x28f3dc: DecompressPointer r1
    //     0x28f3dc: add             x1, x1, HEAP, lsl #32
    // 0x28f3e0: cmp             w1, NULL
    // 0x28f3e4: b.ne            #0x28f3f8
    // 0x28f3e8: LoadField: r1 = r0->field_3f
    //     0x28f3e8: ldur            w1, [x0, #0x3f]
    // 0x28f3ec: DecompressPointer r1
    //     0x28f3ec: add             x1, x1, HEAP, lsl #32
    // 0x28f3f0: mov             x0, x1
    // 0x28f3f4: b               #0x28f3fc
    // 0x28f3f8: mov             x0, x1
    // 0x28f3fc: stur            x0, [fp, #-0x10]
    // 0x28f400: r0 = BorderSide()
    //     0x28f400: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f404: mov             x1, x0
    // 0x28f408: ldur            x0, [fp, #-0x10]
    // 0x28f40c: StoreField: r1->field_7 = r0
    //     0x28f40c: stur            w0, [x1, #7]
    // 0x28f410: d0 = 1.000000
    //     0x28f410: fmov            d0, #1.00000000
    // 0x28f414: d0 = 1.000000
    //     0x28f414: fmov            d0, #1.00000000
    // 0x28f418: StoreField: r1->field_b = d0
    //     0x28f418: stur            d0, [x1, #0xb]
    // 0x28f41c: r2 = Instance_BorderStyle
    //     0x28f41c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f420: ldr             x2, [x2, #0xd10]
    // 0x28f424: StoreField: r1->field_13 = r2
    //     0x28f424: stur            w2, [x1, #0x13]
    // 0x28f428: d1 = -1.000000
    //     0x28f428: fmov            d1, #-1.00000000
    // 0x28f42c: d1 = -1.000000
    //     0x28f42c: fmov            d1, #-1.00000000
    // 0x28f430: StoreField: r1->field_17 = d1
    //     0x28f430: stur            d1, [x1, #0x17]
    // 0x28f434: mov             x0, x1
    // 0x28f438: LeaveFrame
    //     0x28f438: mov             SP, fp
    //     0x28f43c: ldp             fp, lr, [SP], #0x10
    // 0x28f440: ret
    //     0x28f440: ret             
    // 0x28f444: ldr             x3, [fp, #0x10]
    // 0x28f448: ldur            x1, [fp, #-8]
    // 0x28f44c: r2 = Instance_BorderStyle
    //     0x28f44c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f450: ldr             x2, [x2, #0xd10]
    // 0x28f454: d0 = 1.000000
    //     0x28f454: fmov            d0, #1.00000000
    // 0x28f458: d0 = 1.000000
    //     0x28f458: fmov            d0, #1.00000000
    // 0x28f45c: d1 = -1.000000
    //     0x28f45c: fmov            d1, #-1.00000000
    // 0x28f460: d1 = -1.000000
    //     0x28f460: fmov            d1, #-1.00000000
    // 0x28f464: r0 = LoadClassIdInstr(r3)
    //     0x28f464: ldur            x0, [x3, #-1]
    //     0x28f468: ubfx            x0, x0, #0xc, #0x14
    // 0x28f46c: r16 = Instance_MaterialState
    //     0x28f46c: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28f470: ldr             x16, [x16, #0xb18]
    // 0x28f474: stp             x16, x3, [SP]
    // 0x28f478: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f478: sub             lr, x0, #0xf4b
    //     0x28f47c: ldr             lr, [x21, lr, lsl #3]
    //     0x28f480: blr             lr
    // 0x28f484: tbnz            w0, #4, #0x28f508
    // 0x28f488: ldur            x1, [fp, #-8]
    // 0x28f48c: LoadField: r0 = r1->field_f
    //     0x28f48c: ldur            w0, [x1, #0xf]
    // 0x28f490: DecompressPointer r0
    //     0x28f490: add             x0, x0, HEAP, lsl #32
    // 0x28f494: mov             x1, x0
    // 0x28f498: LoadField: r0 = r1->field_8f
    //     0x28f498: ldur            w0, [x1, #0x8f]
    // 0x28f49c: DecompressPointer r0
    //     0x28f49c: add             x0, x0, HEAP, lsl #32
    // 0x28f4a0: r16 = Sentinel
    //     0x28f4a0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f4a4: cmp             w0, w16
    // 0x28f4a8: b.ne            #0x28f4b8
    // 0x28f4ac: r2 = _colors
    //     0x28f4ac: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f4b0: ldr             x2, [x2, #0xcc0]
    // 0x28f4b4: r0 = InitLateFinalInstanceField()
    //     0x28f4b4: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f4b8: LoadField: r1 = r0->field_3b
    //     0x28f4b8: ldur            w1, [x0, #0x3b]
    // 0x28f4bc: DecompressPointer r1
    //     0x28f4bc: add             x1, x1, HEAP, lsl #32
    // 0x28f4c0: stur            x1, [fp, #-0x10]
    // 0x28f4c4: r0 = BorderSide()
    //     0x28f4c4: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f4c8: mov             x1, x0
    // 0x28f4cc: ldur            x0, [fp, #-0x10]
    // 0x28f4d0: StoreField: r1->field_7 = r0
    //     0x28f4d0: stur            w0, [x1, #7]
    // 0x28f4d4: d0 = 2.000000
    //     0x28f4d4: fmov            d0, #2.00000000
    // 0x28f4d8: d0 = 2.000000
    //     0x28f4d8: fmov            d0, #2.00000000
    // 0x28f4dc: StoreField: r1->field_b = d0
    //     0x28f4dc: stur            d0, [x1, #0xb]
    // 0x28f4e0: r0 = Instance_BorderStyle
    //     0x28f4e0: add             x0, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f4e4: ldr             x0, [x0, #0xd10]
    // 0x28f4e8: StoreField: r1->field_13 = r0
    //     0x28f4e8: stur            w0, [x1, #0x13]
    // 0x28f4ec: d0 = -1.000000
    //     0x28f4ec: fmov            d0, #-1.00000000
    // 0x28f4f0: d0 = -1.000000
    //     0x28f4f0: fmov            d0, #-1.00000000
    // 0x28f4f4: StoreField: r1->field_17 = d0
    //     0x28f4f4: stur            d0, [x1, #0x17]
    // 0x28f4f8: mov             x0, x1
    // 0x28f4fc: LeaveFrame
    //     0x28f4fc: mov             SP, fp
    //     0x28f500: ldp             fp, lr, [SP], #0x10
    // 0x28f504: ret
    //     0x28f504: ret             
    // 0x28f508: ldur            x1, [fp, #-8]
    // 0x28f50c: r0 = Instance_BorderStyle
    //     0x28f50c: add             x0, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f510: ldr             x0, [x0, #0xd10]
    // 0x28f514: d0 = -1.000000
    //     0x28f514: fmov            d0, #-1.00000000
    // 0x28f518: d0 = -1.000000
    //     0x28f518: fmov            d0, #-1.00000000
    // 0x28f51c: LoadField: r2 = r1->field_f
    //     0x28f51c: ldur            w2, [x1, #0xf]
    // 0x28f520: DecompressPointer r2
    //     0x28f520: add             x2, x2, HEAP, lsl #32
    // 0x28f524: mov             x1, x2
    // 0x28f528: LoadField: r0 = r1->field_8f
    //     0x28f528: ldur            w0, [x1, #0x8f]
    // 0x28f52c: DecompressPointer r0
    //     0x28f52c: add             x0, x0, HEAP, lsl #32
    // 0x28f530: r16 = Sentinel
    //     0x28f530: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f534: cmp             w0, w16
    // 0x28f538: b.ne            #0x28f548
    // 0x28f53c: r2 = _colors
    //     0x28f53c: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f540: ldr             x2, [x2, #0xcc0]
    // 0x28f544: r0 = InitLateFinalInstanceField()
    //     0x28f544: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f548: LoadField: r1 = r0->field_3b
    //     0x28f548: ldur            w1, [x0, #0x3b]
    // 0x28f54c: DecompressPointer r1
    //     0x28f54c: add             x1, x1, HEAP, lsl #32
    // 0x28f550: stur            x1, [fp, #-0x10]
    // 0x28f554: r0 = BorderSide()
    //     0x28f554: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f558: mov             x1, x0
    // 0x28f55c: ldur            x0, [fp, #-0x10]
    // 0x28f560: StoreField: r1->field_7 = r0
    //     0x28f560: stur            w0, [x1, #7]
    // 0x28f564: d1 = 1.000000
    //     0x28f564: fmov            d1, #1.00000000
    // 0x28f568: d1 = 1.000000
    //     0x28f568: fmov            d1, #1.00000000
    // 0x28f56c: StoreField: r1->field_b = d1
    //     0x28f56c: stur            d1, [x1, #0xb]
    // 0x28f570: r2 = Instance_BorderStyle
    //     0x28f570: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f574: ldr             x2, [x2, #0xd10]
    // 0x28f578: StoreField: r1->field_13 = r2
    //     0x28f578: stur            w2, [x1, #0x13]
    // 0x28f57c: d2 = -1.000000
    //     0x28f57c: fmov            d2, #-1.00000000
    // 0x28f580: d2 = -1.000000
    //     0x28f580: fmov            d2, #-1.00000000
    // 0x28f584: StoreField: r1->field_17 = d2
    //     0x28f584: stur            d2, [x1, #0x17]
    // 0x28f588: mov             x0, x1
    // 0x28f58c: LeaveFrame
    //     0x28f58c: mov             SP, fp
    //     0x28f590: ldp             fp, lr, [SP], #0x10
    // 0x28f594: ret
    //     0x28f594: ret             
    // 0x28f598: ldr             x3, [fp, #0x10]
    // 0x28f59c: ldur            x1, [fp, #-8]
    // 0x28f5a0: r2 = Instance_BorderStyle
    //     0x28f5a0: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f5a4: ldr             x2, [x2, #0xd10]
    // 0x28f5a8: d1 = 1.000000
    //     0x28f5a8: fmov            d1, #1.00000000
    // 0x28f5ac: d1 = 1.000000
    //     0x28f5ac: fmov            d1, #1.00000000
    // 0x28f5b0: d2 = -1.000000
    //     0x28f5b0: fmov            d2, #-1.00000000
    // 0x28f5b4: d2 = -1.000000
    //     0x28f5b4: fmov            d2, #-1.00000000
    // 0x28f5b8: d0 = 2.000000
    //     0x28f5b8: fmov            d0, #2.00000000
    // 0x28f5bc: d0 = 2.000000
    //     0x28f5bc: fmov            d0, #2.00000000
    // 0x28f5c0: r0 = LoadClassIdInstr(r3)
    //     0x28f5c0: ldur            x0, [x3, #-1]
    //     0x28f5c4: ubfx            x0, x0, #0xc, #0x14
    // 0x28f5c8: r16 = Instance_MaterialState
    //     0x28f5c8: add             x16, PP, #0xa, lsl #12  ; [pp+0xab10] Obj!MaterialState@481781
    //     0x28f5cc: ldr             x16, [x16, #0xb10]
    // 0x28f5d0: stp             x16, x3, [SP]
    // 0x28f5d4: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f5d4: sub             lr, x0, #0xf4b
    //     0x28f5d8: ldr             lr, [x21, lr, lsl #3]
    //     0x28f5dc: blr             lr
    // 0x28f5e0: tbnz            w0, #4, #0x28f664
    // 0x28f5e4: ldur            x1, [fp, #-8]
    // 0x28f5e8: LoadField: r0 = r1->field_f
    //     0x28f5e8: ldur            w0, [x1, #0xf]
    // 0x28f5ec: DecompressPointer r0
    //     0x28f5ec: add             x0, x0, HEAP, lsl #32
    // 0x28f5f0: mov             x1, x0
    // 0x28f5f4: LoadField: r0 = r1->field_8f
    //     0x28f5f4: ldur            w0, [x1, #0x8f]
    // 0x28f5f8: DecompressPointer r0
    //     0x28f5f8: add             x0, x0, HEAP, lsl #32
    // 0x28f5fc: r16 = Sentinel
    //     0x28f5fc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f600: cmp             w0, w16
    // 0x28f604: b.ne            #0x28f614
    // 0x28f608: r2 = _colors
    //     0x28f608: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f60c: ldr             x2, [x2, #0xcc0]
    // 0x28f610: r0 = InitLateFinalInstanceField()
    //     0x28f610: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f614: LoadField: r1 = r0->field_57
    //     0x28f614: ldur            w1, [x0, #0x57]
    // 0x28f618: DecompressPointer r1
    //     0x28f618: add             x1, x1, HEAP, lsl #32
    // 0x28f61c: stur            x1, [fp, #-0x10]
    // 0x28f620: r0 = BorderSide()
    //     0x28f620: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f624: mov             x1, x0
    // 0x28f628: ldur            x0, [fp, #-0x10]
    // 0x28f62c: StoreField: r1->field_7 = r0
    //     0x28f62c: stur            w0, [x1, #7]
    // 0x28f630: d0 = 1.000000
    //     0x28f630: fmov            d0, #1.00000000
    // 0x28f634: d0 = 1.000000
    //     0x28f634: fmov            d0, #1.00000000
    // 0x28f638: StoreField: r1->field_b = d0
    //     0x28f638: stur            d0, [x1, #0xb]
    // 0x28f63c: r2 = Instance_BorderStyle
    //     0x28f63c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f640: ldr             x2, [x2, #0xd10]
    // 0x28f644: StoreField: r1->field_13 = r2
    //     0x28f644: stur            w2, [x1, #0x13]
    // 0x28f648: d1 = -1.000000
    //     0x28f648: fmov            d1, #-1.00000000
    // 0x28f64c: d1 = -1.000000
    //     0x28f64c: fmov            d1, #-1.00000000
    // 0x28f650: StoreField: r1->field_17 = d1
    //     0x28f650: stur            d1, [x1, #0x17]
    // 0x28f654: mov             x0, x1
    // 0x28f658: LeaveFrame
    //     0x28f658: mov             SP, fp
    //     0x28f65c: ldp             fp, lr, [SP], #0x10
    // 0x28f660: ret
    //     0x28f660: ret             
    // 0x28f664: ldr             x0, [fp, #0x10]
    // 0x28f668: ldur            x1, [fp, #-8]
    // 0x28f66c: r2 = Instance_BorderStyle
    //     0x28f66c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f670: ldr             x2, [x2, #0xd10]
    // 0x28f674: d0 = 1.000000
    //     0x28f674: fmov            d0, #1.00000000
    // 0x28f678: d0 = 1.000000
    //     0x28f678: fmov            d0, #1.00000000
    // 0x28f67c: d1 = -1.000000
    //     0x28f67c: fmov            d1, #-1.00000000
    // 0x28f680: d1 = -1.000000
    //     0x28f680: fmov            d1, #-1.00000000
    // 0x28f684: r3 = LoadClassIdInstr(r0)
    //     0x28f684: ldur            x3, [x0, #-1]
    //     0x28f688: ubfx            x3, x3, #0xc, #0x14
    // 0x28f68c: r16 = Instance_MaterialState
    //     0x28f68c: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28f690: ldr             x16, [x16, #0xb18]
    // 0x28f694: stp             x16, x0, [SP]
    // 0x28f698: mov             x0, x3
    // 0x28f69c: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f69c: sub             lr, x0, #0xf4b
    //     0x28f6a0: ldr             lr, [x21, lr, lsl #3]
    //     0x28f6a4: blr             lr
    // 0x28f6a8: tbnz            w0, #4, #0x28f728
    // 0x28f6ac: ldur            x0, [fp, #-8]
    // 0x28f6b0: LoadField: r1 = r0->field_f
    //     0x28f6b0: ldur            w1, [x0, #0xf]
    // 0x28f6b4: DecompressPointer r1
    //     0x28f6b4: add             x1, x1, HEAP, lsl #32
    // 0x28f6b8: LoadField: r0 = r1->field_8f
    //     0x28f6b8: ldur            w0, [x1, #0x8f]
    // 0x28f6bc: DecompressPointer r0
    //     0x28f6bc: add             x0, x0, HEAP, lsl #32
    // 0x28f6c0: r16 = Sentinel
    //     0x28f6c0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f6c4: cmp             w0, w16
    // 0x28f6c8: b.ne            #0x28f6d8
    // 0x28f6cc: r2 = _colors
    //     0x28f6cc: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f6d0: ldr             x2, [x2, #0xcc0]
    // 0x28f6d4: r0 = InitLateFinalInstanceField()
    //     0x28f6d4: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f6d8: LoadField: r1 = r0->field_b
    //     0x28f6d8: ldur            w1, [x0, #0xb]
    // 0x28f6dc: DecompressPointer r1
    //     0x28f6dc: add             x1, x1, HEAP, lsl #32
    // 0x28f6e0: stur            x1, [fp, #-0x10]
    // 0x28f6e4: r0 = BorderSide()
    //     0x28f6e4: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f6e8: mov             x1, x0
    // 0x28f6ec: ldur            x0, [fp, #-0x10]
    // 0x28f6f0: StoreField: r1->field_7 = r0
    //     0x28f6f0: stur            w0, [x1, #7]
    // 0x28f6f4: d0 = 2.000000
    //     0x28f6f4: fmov            d0, #2.00000000
    // 0x28f6f8: d0 = 2.000000
    //     0x28f6f8: fmov            d0, #2.00000000
    // 0x28f6fc: StoreField: r1->field_b = d0
    //     0x28f6fc: stur            d0, [x1, #0xb]
    // 0x28f700: r2 = Instance_BorderStyle
    //     0x28f700: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f704: ldr             x2, [x2, #0xd10]
    // 0x28f708: StoreField: r1->field_13 = r2
    //     0x28f708: stur            w2, [x1, #0x13]
    // 0x28f70c: d0 = -1.000000
    //     0x28f70c: fmov            d0, #-1.00000000
    // 0x28f710: d0 = -1.000000
    //     0x28f710: fmov            d0, #-1.00000000
    // 0x28f714: StoreField: r1->field_17 = d0
    //     0x28f714: stur            d0, [x1, #0x17]
    // 0x28f718: mov             x0, x1
    // 0x28f71c: LeaveFrame
    //     0x28f71c: mov             SP, fp
    //     0x28f720: ldp             fp, lr, [SP], #0x10
    // 0x28f724: ret
    //     0x28f724: ret             
    // 0x28f728: ldur            x0, [fp, #-8]
    // 0x28f72c: r2 = Instance_BorderStyle
    //     0x28f72c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f730: ldr             x2, [x2, #0xd10]
    // 0x28f734: d0 = -1.000000
    //     0x28f734: fmov            d0, #-1.00000000
    // 0x28f738: d0 = -1.000000
    //     0x28f738: fmov            d0, #-1.00000000
    // 0x28f73c: LoadField: r1 = r0->field_f
    //     0x28f73c: ldur            w1, [x0, #0xf]
    // 0x28f740: DecompressPointer r1
    //     0x28f740: add             x1, x1, HEAP, lsl #32
    // 0x28f744: LoadField: r0 = r1->field_8f
    //     0x28f744: ldur            w0, [x1, #0x8f]
    // 0x28f748: DecompressPointer r0
    //     0x28f748: add             x0, x0, HEAP, lsl #32
    // 0x28f74c: r16 = Sentinel
    //     0x28f74c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f750: cmp             w0, w16
    // 0x28f754: b.ne            #0x28f764
    // 0x28f758: r2 = _colors
    //     0x28f758: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f75c: ldr             x2, [x2, #0xcc0]
    // 0x28f760: r0 = InitLateFinalInstanceField()
    //     0x28f760: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f764: LoadField: r1 = r0->field_63
    //     0x28f764: ldur            w1, [x0, #0x63]
    // 0x28f768: DecompressPointer r1
    //     0x28f768: add             x1, x1, HEAP, lsl #32
    // 0x28f76c: cmp             w1, NULL
    // 0x28f770: b.ne            #0x28f784
    // 0x28f774: LoadField: r1 = r0->field_4f
    //     0x28f774: ldur            w1, [x0, #0x4f]
    // 0x28f778: DecompressPointer r1
    //     0x28f778: add             x1, x1, HEAP, lsl #32
    // 0x28f77c: mov             x0, x1
    // 0x28f780: b               #0x28f788
    // 0x28f784: mov             x0, x1
    // 0x28f788: stur            x0, [fp, #-8]
    // 0x28f78c: r0 = BorderSide()
    //     0x28f78c: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f790: ldur            x1, [fp, #-8]
    // 0x28f794: StoreField: r0->field_7 = r1
    //     0x28f794: stur            w1, [x0, #7]
    // 0x28f798: d0 = 1.000000
    //     0x28f798: fmov            d0, #1.00000000
    // 0x28f79c: d0 = 1.000000
    //     0x28f79c: fmov            d0, #1.00000000
    // 0x28f7a0: StoreField: r0->field_b = d0
    //     0x28f7a0: stur            d0, [x0, #0xb]
    // 0x28f7a4: r1 = Instance_BorderStyle
    //     0x28f7a4: add             x1, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f7a8: ldr             x1, [x1, #0xd10]
    // 0x28f7ac: StoreField: r0->field_13 = r1
    //     0x28f7ac: stur            w1, [x0, #0x13]
    // 0x28f7b0: d0 = -1.000000
    //     0x28f7b0: fmov            d0, #-1.00000000
    // 0x28f7b4: d0 = -1.000000
    //     0x28f7b4: fmov            d0, #-1.00000000
    // 0x28f7b8: StoreField: r0->field_17 = d0
    //     0x28f7b8: stur            d0, [x0, #0x17]
    // 0x28f7bc: LeaveFrame
    //     0x28f7bc: mov             SP, fp
    //     0x28f7c0: ldp             fp, lr, [SP], #0x10
    // 0x28f7c4: ret
    //     0x28f7c4: ret             
    // 0x28f7c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28f7c8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28f7cc: b               #0x28f27c
  }
  [closure] BorderSide <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28f7d0, size: 0x57c
    // 0x28f7d0: EnterFrame
    //     0x28f7d0: stp             fp, lr, [SP, #-0x10]!
    //     0x28f7d4: mov             fp, SP
    // 0x28f7d8: AllocStack(0x20)
    //     0x28f7d8: sub             SP, SP, #0x20
    // 0x28f7dc: SetupParameters()
    //     0x28f7dc: ldr             x0, [fp, #0x18]
    //     0x28f7e0: ldur            w1, [x0, #0x17]
    //     0x28f7e4: add             x1, x1, HEAP, lsl #32
    //     0x28f7e8: stur            x1, [fp, #-8]
    // 0x28f7ec: CheckStackOverflow
    //     0x28f7ec: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28f7f0: cmp             SP, x16
    //     0x28f7f4: b.ls            #0x28fd44
    // 0x28f7f8: ldr             x2, [fp, #0x10]
    // 0x28f7fc: r0 = LoadClassIdInstr(r2)
    //     0x28f7fc: ldur            x0, [x2, #-1]
    //     0x28f800: ubfx            x0, x0, #0xc, #0x14
    // 0x28f804: r16 = Instance_MaterialState
    //     0x28f804: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28f808: stp             x16, x2, [SP]
    // 0x28f80c: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f80c: sub             lr, x0, #0xf4b
    //     0x28f810: ldr             lr, [x21, lr, lsl #3]
    //     0x28f814: blr             lr
    // 0x28f818: tbnz            w0, #4, #0x28f8b8
    // 0x28f81c: ldur            x1, [fp, #-8]
    // 0x28f820: LoadField: r0 = r1->field_f
    //     0x28f820: ldur            w0, [x1, #0xf]
    // 0x28f824: DecompressPointer r0
    //     0x28f824: add             x0, x0, HEAP, lsl #32
    // 0x28f828: mov             x1, x0
    // 0x28f82c: LoadField: r0 = r1->field_8f
    //     0x28f82c: ldur            w0, [x1, #0x8f]
    // 0x28f830: DecompressPointer r0
    //     0x28f830: add             x0, x0, HEAP, lsl #32
    // 0x28f834: r16 = Sentinel
    //     0x28f834: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f838: cmp             w0, w16
    // 0x28f83c: b.ne            #0x28f84c
    // 0x28f840: r2 = _colors
    //     0x28f840: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f844: ldr             x2, [x2, #0xcc0]
    // 0x28f848: r0 = InitLateFinalInstanceField()
    //     0x28f848: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f84c: LoadField: r1 = r0->field_57
    //     0x28f84c: ldur            w1, [x0, #0x57]
    // 0x28f850: DecompressPointer r1
    //     0x28f850: add             x1, x1, HEAP, lsl #32
    // 0x28f854: str             x1, [SP, #8]
    // 0x28f858: d0 = 0.380000
    //     0x28f858: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28f85c: ldr             d0, [x17, #0xab0]
    // 0x28f860: d0 = 0.380000
    //     0x28f860: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28f864: ldr             d0, [x17, #0xab0]
    // 0x28f868: str             d0, [SP]
    // 0x28f86c: r0 = withOpacity()
    //     0x28f86c: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x28f870: stur            x0, [fp, #-0x10]
    // 0x28f874: r0 = BorderSide()
    //     0x28f874: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f878: mov             x1, x0
    // 0x28f87c: ldur            x0, [fp, #-0x10]
    // 0x28f880: StoreField: r1->field_7 = r0
    //     0x28f880: stur            w0, [x1, #7]
    // 0x28f884: d0 = 1.000000
    //     0x28f884: fmov            d0, #1.00000000
    // 0x28f888: d0 = 1.000000
    //     0x28f888: fmov            d0, #1.00000000
    // 0x28f88c: StoreField: r1->field_b = d0
    //     0x28f88c: stur            d0, [x1, #0xb]
    // 0x28f890: r2 = Instance_BorderStyle
    //     0x28f890: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f894: ldr             x2, [x2, #0xd10]
    // 0x28f898: StoreField: r1->field_13 = r2
    //     0x28f898: stur            w2, [x1, #0x13]
    // 0x28f89c: d1 = -1.000000
    //     0x28f89c: fmov            d1, #-1.00000000
    // 0x28f8a0: d1 = -1.000000
    //     0x28f8a0: fmov            d1, #-1.00000000
    // 0x28f8a4: StoreField: r1->field_17 = d1
    //     0x28f8a4: stur            d1, [x1, #0x17]
    // 0x28f8a8: mov             x0, x1
    // 0x28f8ac: LeaveFrame
    //     0x28f8ac: mov             SP, fp
    //     0x28f8b0: ldp             fp, lr, [SP], #0x10
    // 0x28f8b4: ret
    //     0x28f8b4: ret             
    // 0x28f8b8: ldr             x3, [fp, #0x10]
    // 0x28f8bc: ldur            x1, [fp, #-8]
    // 0x28f8c0: r2 = Instance_BorderStyle
    //     0x28f8c0: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f8c4: ldr             x2, [x2, #0xd10]
    // 0x28f8c8: d0 = 1.000000
    //     0x28f8c8: fmov            d0, #1.00000000
    // 0x28f8cc: d0 = 1.000000
    //     0x28f8cc: fmov            d0, #1.00000000
    // 0x28f8d0: d1 = -1.000000
    //     0x28f8d0: fmov            d1, #-1.00000000
    // 0x28f8d4: d1 = -1.000000
    //     0x28f8d4: fmov            d1, #-1.00000000
    // 0x28f8d8: r0 = LoadClassIdInstr(r3)
    //     0x28f8d8: ldur            x0, [x3, #-1]
    //     0x28f8dc: ubfx            x0, x0, #0xc, #0x14
    // 0x28f8e0: r16 = Instance_MaterialState
    //     0x28f8e0: add             x16, PP, #0xa, lsl #12  ; [pp+0xad18] Obj!MaterialState@4817e1
    //     0x28f8e4: ldr             x16, [x16, #0xd18]
    // 0x28f8e8: stp             x16, x3, [SP]
    // 0x28f8ec: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f8ec: sub             lr, x0, #0xf4b
    //     0x28f8f0: ldr             lr, [x21, lr, lsl #3]
    //     0x28f8f4: blr             lr
    // 0x28f8f8: tbnz            w0, #4, #0x28fb14
    // 0x28f8fc: ldr             x1, [fp, #0x10]
    // 0x28f900: r0 = LoadClassIdInstr(r1)
    //     0x28f900: ldur            x0, [x1, #-1]
    //     0x28f904: ubfx            x0, x0, #0xc, #0x14
    // 0x28f908: r16 = Instance_MaterialState
    //     0x28f908: add             x16, PP, #0xa, lsl #12  ; [pp+0xab10] Obj!MaterialState@481781
    //     0x28f90c: ldr             x16, [x16, #0xb10]
    // 0x28f910: stp             x16, x1, [SP]
    // 0x28f914: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f914: sub             lr, x0, #0xf4b
    //     0x28f918: ldr             lr, [x21, lr, lsl #3]
    //     0x28f91c: blr             lr
    // 0x28f920: tbnz            w0, #4, #0x28f9c0
    // 0x28f924: ldur            x1, [fp, #-8]
    // 0x28f928: LoadField: r0 = r1->field_f
    //     0x28f928: ldur            w0, [x1, #0xf]
    // 0x28f92c: DecompressPointer r0
    //     0x28f92c: add             x0, x0, HEAP, lsl #32
    // 0x28f930: mov             x1, x0
    // 0x28f934: LoadField: r0 = r1->field_8f
    //     0x28f934: ldur            w0, [x1, #0x8f]
    // 0x28f938: DecompressPointer r0
    //     0x28f938: add             x0, x0, HEAP, lsl #32
    // 0x28f93c: r16 = Sentinel
    //     0x28f93c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28f940: cmp             w0, w16
    // 0x28f944: b.ne            #0x28f954
    // 0x28f948: r2 = _colors
    //     0x28f948: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28f94c: ldr             x2, [x2, #0xcc0]
    // 0x28f950: r0 = InitLateFinalInstanceField()
    //     0x28f950: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28f954: LoadField: r1 = r0->field_47
    //     0x28f954: ldur            w1, [x0, #0x47]
    // 0x28f958: DecompressPointer r1
    //     0x28f958: add             x1, x1, HEAP, lsl #32
    // 0x28f95c: cmp             w1, NULL
    // 0x28f960: b.ne            #0x28f974
    // 0x28f964: LoadField: r1 = r0->field_3f
    //     0x28f964: ldur            w1, [x0, #0x3f]
    // 0x28f968: DecompressPointer r1
    //     0x28f968: add             x1, x1, HEAP, lsl #32
    // 0x28f96c: mov             x0, x1
    // 0x28f970: b               #0x28f978
    // 0x28f974: mov             x0, x1
    // 0x28f978: stur            x0, [fp, #-0x10]
    // 0x28f97c: r0 = BorderSide()
    //     0x28f97c: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28f980: mov             x1, x0
    // 0x28f984: ldur            x0, [fp, #-0x10]
    // 0x28f988: StoreField: r1->field_7 = r0
    //     0x28f988: stur            w0, [x1, #7]
    // 0x28f98c: d0 = 1.000000
    //     0x28f98c: fmov            d0, #1.00000000
    // 0x28f990: d0 = 1.000000
    //     0x28f990: fmov            d0, #1.00000000
    // 0x28f994: StoreField: r1->field_b = d0
    //     0x28f994: stur            d0, [x1, #0xb]
    // 0x28f998: r2 = Instance_BorderStyle
    //     0x28f998: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f99c: ldr             x2, [x2, #0xd10]
    // 0x28f9a0: StoreField: r1->field_13 = r2
    //     0x28f9a0: stur            w2, [x1, #0x13]
    // 0x28f9a4: d1 = -1.000000
    //     0x28f9a4: fmov            d1, #-1.00000000
    // 0x28f9a8: d1 = -1.000000
    //     0x28f9a8: fmov            d1, #-1.00000000
    // 0x28f9ac: StoreField: r1->field_17 = d1
    //     0x28f9ac: stur            d1, [x1, #0x17]
    // 0x28f9b0: mov             x0, x1
    // 0x28f9b4: LeaveFrame
    //     0x28f9b4: mov             SP, fp
    //     0x28f9b8: ldp             fp, lr, [SP], #0x10
    // 0x28f9bc: ret
    //     0x28f9bc: ret             
    // 0x28f9c0: ldr             x3, [fp, #0x10]
    // 0x28f9c4: ldur            x1, [fp, #-8]
    // 0x28f9c8: r2 = Instance_BorderStyle
    //     0x28f9c8: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28f9cc: ldr             x2, [x2, #0xd10]
    // 0x28f9d0: d0 = 1.000000
    //     0x28f9d0: fmov            d0, #1.00000000
    // 0x28f9d4: d0 = 1.000000
    //     0x28f9d4: fmov            d0, #1.00000000
    // 0x28f9d8: d1 = -1.000000
    //     0x28f9d8: fmov            d1, #-1.00000000
    // 0x28f9dc: d1 = -1.000000
    //     0x28f9dc: fmov            d1, #-1.00000000
    // 0x28f9e0: r0 = LoadClassIdInstr(r3)
    //     0x28f9e0: ldur            x0, [x3, #-1]
    //     0x28f9e4: ubfx            x0, x0, #0xc, #0x14
    // 0x28f9e8: r16 = Instance_MaterialState
    //     0x28f9e8: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28f9ec: ldr             x16, [x16, #0xb18]
    // 0x28f9f0: stp             x16, x3, [SP]
    // 0x28f9f4: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28f9f4: sub             lr, x0, #0xf4b
    //     0x28f9f8: ldr             lr, [x21, lr, lsl #3]
    //     0x28f9fc: blr             lr
    // 0x28fa00: tbnz            w0, #4, #0x28fa84
    // 0x28fa04: ldur            x1, [fp, #-8]
    // 0x28fa08: LoadField: r0 = r1->field_f
    //     0x28fa08: ldur            w0, [x1, #0xf]
    // 0x28fa0c: DecompressPointer r0
    //     0x28fa0c: add             x0, x0, HEAP, lsl #32
    // 0x28fa10: mov             x1, x0
    // 0x28fa14: LoadField: r0 = r1->field_8f
    //     0x28fa14: ldur            w0, [x1, #0x8f]
    // 0x28fa18: DecompressPointer r0
    //     0x28fa18: add             x0, x0, HEAP, lsl #32
    // 0x28fa1c: r16 = Sentinel
    //     0x28fa1c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28fa20: cmp             w0, w16
    // 0x28fa24: b.ne            #0x28fa34
    // 0x28fa28: r2 = _colors
    //     0x28fa28: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28fa2c: ldr             x2, [x2, #0xcc0]
    // 0x28fa30: r0 = InitLateFinalInstanceField()
    //     0x28fa30: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28fa34: LoadField: r1 = r0->field_3b
    //     0x28fa34: ldur            w1, [x0, #0x3b]
    // 0x28fa38: DecompressPointer r1
    //     0x28fa38: add             x1, x1, HEAP, lsl #32
    // 0x28fa3c: stur            x1, [fp, #-0x10]
    // 0x28fa40: r0 = BorderSide()
    //     0x28fa40: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28fa44: mov             x1, x0
    // 0x28fa48: ldur            x0, [fp, #-0x10]
    // 0x28fa4c: StoreField: r1->field_7 = r0
    //     0x28fa4c: stur            w0, [x1, #7]
    // 0x28fa50: d0 = 2.000000
    //     0x28fa50: fmov            d0, #2.00000000
    // 0x28fa54: d0 = 2.000000
    //     0x28fa54: fmov            d0, #2.00000000
    // 0x28fa58: StoreField: r1->field_b = d0
    //     0x28fa58: stur            d0, [x1, #0xb]
    // 0x28fa5c: r0 = Instance_BorderStyle
    //     0x28fa5c: add             x0, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fa60: ldr             x0, [x0, #0xd10]
    // 0x28fa64: StoreField: r1->field_13 = r0
    //     0x28fa64: stur            w0, [x1, #0x13]
    // 0x28fa68: d0 = -1.000000
    //     0x28fa68: fmov            d0, #-1.00000000
    // 0x28fa6c: d0 = -1.000000
    //     0x28fa6c: fmov            d0, #-1.00000000
    // 0x28fa70: StoreField: r1->field_17 = d0
    //     0x28fa70: stur            d0, [x1, #0x17]
    // 0x28fa74: mov             x0, x1
    // 0x28fa78: LeaveFrame
    //     0x28fa78: mov             SP, fp
    //     0x28fa7c: ldp             fp, lr, [SP], #0x10
    // 0x28fa80: ret
    //     0x28fa80: ret             
    // 0x28fa84: ldur            x1, [fp, #-8]
    // 0x28fa88: r0 = Instance_BorderStyle
    //     0x28fa88: add             x0, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fa8c: ldr             x0, [x0, #0xd10]
    // 0x28fa90: d0 = -1.000000
    //     0x28fa90: fmov            d0, #-1.00000000
    // 0x28fa94: d0 = -1.000000
    //     0x28fa94: fmov            d0, #-1.00000000
    // 0x28fa98: LoadField: r2 = r1->field_f
    //     0x28fa98: ldur            w2, [x1, #0xf]
    // 0x28fa9c: DecompressPointer r2
    //     0x28fa9c: add             x2, x2, HEAP, lsl #32
    // 0x28faa0: mov             x1, x2
    // 0x28faa4: LoadField: r0 = r1->field_8f
    //     0x28faa4: ldur            w0, [x1, #0x8f]
    // 0x28faa8: DecompressPointer r0
    //     0x28faa8: add             x0, x0, HEAP, lsl #32
    // 0x28faac: r16 = Sentinel
    //     0x28faac: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28fab0: cmp             w0, w16
    // 0x28fab4: b.ne            #0x28fac4
    // 0x28fab8: r2 = _colors
    //     0x28fab8: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28fabc: ldr             x2, [x2, #0xcc0]
    // 0x28fac0: r0 = InitLateFinalInstanceField()
    //     0x28fac0: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28fac4: LoadField: r1 = r0->field_3b
    //     0x28fac4: ldur            w1, [x0, #0x3b]
    // 0x28fac8: DecompressPointer r1
    //     0x28fac8: add             x1, x1, HEAP, lsl #32
    // 0x28facc: stur            x1, [fp, #-0x10]
    // 0x28fad0: r0 = BorderSide()
    //     0x28fad0: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28fad4: mov             x1, x0
    // 0x28fad8: ldur            x0, [fp, #-0x10]
    // 0x28fadc: StoreField: r1->field_7 = r0
    //     0x28fadc: stur            w0, [x1, #7]
    // 0x28fae0: d1 = 1.000000
    //     0x28fae0: fmov            d1, #1.00000000
    // 0x28fae4: d1 = 1.000000
    //     0x28fae4: fmov            d1, #1.00000000
    // 0x28fae8: StoreField: r1->field_b = d1
    //     0x28fae8: stur            d1, [x1, #0xb]
    // 0x28faec: r2 = Instance_BorderStyle
    //     0x28faec: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28faf0: ldr             x2, [x2, #0xd10]
    // 0x28faf4: StoreField: r1->field_13 = r2
    //     0x28faf4: stur            w2, [x1, #0x13]
    // 0x28faf8: d2 = -1.000000
    //     0x28faf8: fmov            d2, #-1.00000000
    // 0x28fafc: d2 = -1.000000
    //     0x28fafc: fmov            d2, #-1.00000000
    // 0x28fb00: StoreField: r1->field_17 = d2
    //     0x28fb00: stur            d2, [x1, #0x17]
    // 0x28fb04: mov             x0, x1
    // 0x28fb08: LeaveFrame
    //     0x28fb08: mov             SP, fp
    //     0x28fb0c: ldp             fp, lr, [SP], #0x10
    // 0x28fb10: ret
    //     0x28fb10: ret             
    // 0x28fb14: ldr             x3, [fp, #0x10]
    // 0x28fb18: ldur            x1, [fp, #-8]
    // 0x28fb1c: r2 = Instance_BorderStyle
    //     0x28fb1c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fb20: ldr             x2, [x2, #0xd10]
    // 0x28fb24: d1 = 1.000000
    //     0x28fb24: fmov            d1, #1.00000000
    // 0x28fb28: d1 = 1.000000
    //     0x28fb28: fmov            d1, #1.00000000
    // 0x28fb2c: d2 = -1.000000
    //     0x28fb2c: fmov            d2, #-1.00000000
    // 0x28fb30: d2 = -1.000000
    //     0x28fb30: fmov            d2, #-1.00000000
    // 0x28fb34: d0 = 2.000000
    //     0x28fb34: fmov            d0, #2.00000000
    // 0x28fb38: d0 = 2.000000
    //     0x28fb38: fmov            d0, #2.00000000
    // 0x28fb3c: r0 = LoadClassIdInstr(r3)
    //     0x28fb3c: ldur            x0, [x3, #-1]
    //     0x28fb40: ubfx            x0, x0, #0xc, #0x14
    // 0x28fb44: r16 = Instance_MaterialState
    //     0x28fb44: add             x16, PP, #0xa, lsl #12  ; [pp+0xab10] Obj!MaterialState@481781
    //     0x28fb48: ldr             x16, [x16, #0xb10]
    // 0x28fb4c: stp             x16, x3, [SP]
    // 0x28fb50: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28fb50: sub             lr, x0, #0xf4b
    //     0x28fb54: ldr             lr, [x21, lr, lsl #3]
    //     0x28fb58: blr             lr
    // 0x28fb5c: tbnz            w0, #4, #0x28fbe0
    // 0x28fb60: ldur            x1, [fp, #-8]
    // 0x28fb64: LoadField: r0 = r1->field_f
    //     0x28fb64: ldur            w0, [x1, #0xf]
    // 0x28fb68: DecompressPointer r0
    //     0x28fb68: add             x0, x0, HEAP, lsl #32
    // 0x28fb6c: mov             x1, x0
    // 0x28fb70: LoadField: r0 = r1->field_8f
    //     0x28fb70: ldur            w0, [x1, #0x8f]
    // 0x28fb74: DecompressPointer r0
    //     0x28fb74: add             x0, x0, HEAP, lsl #32
    // 0x28fb78: r16 = Sentinel
    //     0x28fb78: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28fb7c: cmp             w0, w16
    // 0x28fb80: b.ne            #0x28fb90
    // 0x28fb84: r2 = _colors
    //     0x28fb84: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28fb88: ldr             x2, [x2, #0xcc0]
    // 0x28fb8c: r0 = InitLateFinalInstanceField()
    //     0x28fb8c: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28fb90: LoadField: r1 = r0->field_57
    //     0x28fb90: ldur            w1, [x0, #0x57]
    // 0x28fb94: DecompressPointer r1
    //     0x28fb94: add             x1, x1, HEAP, lsl #32
    // 0x28fb98: stur            x1, [fp, #-0x10]
    // 0x28fb9c: r0 = BorderSide()
    //     0x28fb9c: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28fba0: mov             x1, x0
    // 0x28fba4: ldur            x0, [fp, #-0x10]
    // 0x28fba8: StoreField: r1->field_7 = r0
    //     0x28fba8: stur            w0, [x1, #7]
    // 0x28fbac: d0 = 1.000000
    //     0x28fbac: fmov            d0, #1.00000000
    // 0x28fbb0: d0 = 1.000000
    //     0x28fbb0: fmov            d0, #1.00000000
    // 0x28fbb4: StoreField: r1->field_b = d0
    //     0x28fbb4: stur            d0, [x1, #0xb]
    // 0x28fbb8: r2 = Instance_BorderStyle
    //     0x28fbb8: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fbbc: ldr             x2, [x2, #0xd10]
    // 0x28fbc0: StoreField: r1->field_13 = r2
    //     0x28fbc0: stur            w2, [x1, #0x13]
    // 0x28fbc4: d1 = -1.000000
    //     0x28fbc4: fmov            d1, #-1.00000000
    // 0x28fbc8: d1 = -1.000000
    //     0x28fbc8: fmov            d1, #-1.00000000
    // 0x28fbcc: StoreField: r1->field_17 = d1
    //     0x28fbcc: stur            d1, [x1, #0x17]
    // 0x28fbd0: mov             x0, x1
    // 0x28fbd4: LeaveFrame
    //     0x28fbd4: mov             SP, fp
    //     0x28fbd8: ldp             fp, lr, [SP], #0x10
    // 0x28fbdc: ret
    //     0x28fbdc: ret             
    // 0x28fbe0: ldr             x0, [fp, #0x10]
    // 0x28fbe4: ldur            x1, [fp, #-8]
    // 0x28fbe8: r2 = Instance_BorderStyle
    //     0x28fbe8: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fbec: ldr             x2, [x2, #0xd10]
    // 0x28fbf0: d0 = 1.000000
    //     0x28fbf0: fmov            d0, #1.00000000
    // 0x28fbf4: d0 = 1.000000
    //     0x28fbf4: fmov            d0, #1.00000000
    // 0x28fbf8: d1 = -1.000000
    //     0x28fbf8: fmov            d1, #-1.00000000
    // 0x28fbfc: d1 = -1.000000
    //     0x28fbfc: fmov            d1, #-1.00000000
    // 0x28fc00: r3 = LoadClassIdInstr(r0)
    //     0x28fc00: ldur            x3, [x0, #-1]
    //     0x28fc04: ubfx            x3, x3, #0xc, #0x14
    // 0x28fc08: r16 = Instance_MaterialState
    //     0x28fc08: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28fc0c: ldr             x16, [x16, #0xb18]
    // 0x28fc10: stp             x16, x0, [SP]
    // 0x28fc14: mov             x0, x3
    // 0x28fc18: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28fc18: sub             lr, x0, #0xf4b
    //     0x28fc1c: ldr             lr, [x21, lr, lsl #3]
    //     0x28fc20: blr             lr
    // 0x28fc24: tbnz            w0, #4, #0x28fca4
    // 0x28fc28: ldur            x0, [fp, #-8]
    // 0x28fc2c: LoadField: r1 = r0->field_f
    //     0x28fc2c: ldur            w1, [x0, #0xf]
    // 0x28fc30: DecompressPointer r1
    //     0x28fc30: add             x1, x1, HEAP, lsl #32
    // 0x28fc34: LoadField: r0 = r1->field_8f
    //     0x28fc34: ldur            w0, [x1, #0x8f]
    // 0x28fc38: DecompressPointer r0
    //     0x28fc38: add             x0, x0, HEAP, lsl #32
    // 0x28fc3c: r16 = Sentinel
    //     0x28fc3c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28fc40: cmp             w0, w16
    // 0x28fc44: b.ne            #0x28fc54
    // 0x28fc48: r2 = _colors
    //     0x28fc48: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28fc4c: ldr             x2, [x2, #0xcc0]
    // 0x28fc50: r0 = InitLateFinalInstanceField()
    //     0x28fc50: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28fc54: LoadField: r1 = r0->field_b
    //     0x28fc54: ldur            w1, [x0, #0xb]
    // 0x28fc58: DecompressPointer r1
    //     0x28fc58: add             x1, x1, HEAP, lsl #32
    // 0x28fc5c: stur            x1, [fp, #-0x10]
    // 0x28fc60: r0 = BorderSide()
    //     0x28fc60: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28fc64: mov             x1, x0
    // 0x28fc68: ldur            x0, [fp, #-0x10]
    // 0x28fc6c: StoreField: r1->field_7 = r0
    //     0x28fc6c: stur            w0, [x1, #7]
    // 0x28fc70: d0 = 2.000000
    //     0x28fc70: fmov            d0, #2.00000000
    // 0x28fc74: d0 = 2.000000
    //     0x28fc74: fmov            d0, #2.00000000
    // 0x28fc78: StoreField: r1->field_b = d0
    //     0x28fc78: stur            d0, [x1, #0xb]
    // 0x28fc7c: r2 = Instance_BorderStyle
    //     0x28fc7c: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fc80: ldr             x2, [x2, #0xd10]
    // 0x28fc84: StoreField: r1->field_13 = r2
    //     0x28fc84: stur            w2, [x1, #0x13]
    // 0x28fc88: d0 = -1.000000
    //     0x28fc88: fmov            d0, #-1.00000000
    // 0x28fc8c: d0 = -1.000000
    //     0x28fc8c: fmov            d0, #-1.00000000
    // 0x28fc90: StoreField: r1->field_17 = d0
    //     0x28fc90: stur            d0, [x1, #0x17]
    // 0x28fc94: mov             x0, x1
    // 0x28fc98: LeaveFrame
    //     0x28fc98: mov             SP, fp
    //     0x28fc9c: ldp             fp, lr, [SP], #0x10
    // 0x28fca0: ret
    //     0x28fca0: ret             
    // 0x28fca4: ldur            x0, [fp, #-8]
    // 0x28fca8: r2 = Instance_BorderStyle
    //     0x28fca8: add             x2, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fcac: ldr             x2, [x2, #0xd10]
    // 0x28fcb0: d0 = -1.000000
    //     0x28fcb0: fmov            d0, #-1.00000000
    // 0x28fcb4: d0 = -1.000000
    //     0x28fcb4: fmov            d0, #-1.00000000
    // 0x28fcb8: LoadField: r1 = r0->field_f
    //     0x28fcb8: ldur            w1, [x0, #0xf]
    // 0x28fcbc: DecompressPointer r1
    //     0x28fcbc: add             x1, x1, HEAP, lsl #32
    // 0x28fcc0: LoadField: r0 = r1->field_8f
    //     0x28fcc0: ldur            w0, [x1, #0x8f]
    // 0x28fcc4: DecompressPointer r0
    //     0x28fcc4: add             x0, x0, HEAP, lsl #32
    // 0x28fcc8: r16 = Sentinel
    //     0x28fcc8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28fccc: cmp             w0, w16
    // 0x28fcd0: b.ne            #0x28fce0
    // 0x28fcd4: r2 = _colors
    //     0x28fcd4: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x28fcd8: ldr             x2, [x2, #0xcc0]
    // 0x28fcdc: r0 = InitLateFinalInstanceField()
    //     0x28fcdc: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x28fce0: LoadField: r1 = r0->field_5f
    //     0x28fce0: ldur            w1, [x0, #0x5f]
    // 0x28fce4: DecompressPointer r1
    //     0x28fce4: add             x1, x1, HEAP, lsl #32
    // 0x28fce8: cmp             w1, NULL
    // 0x28fcec: b.ne            #0x28fd00
    // 0x28fcf0: LoadField: r1 = r0->field_57
    //     0x28fcf0: ldur            w1, [x0, #0x57]
    // 0x28fcf4: DecompressPointer r1
    //     0x28fcf4: add             x1, x1, HEAP, lsl #32
    // 0x28fcf8: mov             x0, x1
    // 0x28fcfc: b               #0x28fd04
    // 0x28fd00: mov             x0, x1
    // 0x28fd04: stur            x0, [fp, #-8]
    // 0x28fd08: r0 = BorderSide()
    //     0x28fd08: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28fd0c: ldur            x1, [fp, #-8]
    // 0x28fd10: StoreField: r0->field_7 = r1
    //     0x28fd10: stur            w1, [x0, #7]
    // 0x28fd14: d0 = 1.000000
    //     0x28fd14: fmov            d0, #1.00000000
    // 0x28fd18: d0 = 1.000000
    //     0x28fd18: fmov            d0, #1.00000000
    // 0x28fd1c: StoreField: r0->field_b = d0
    //     0x28fd1c: stur            d0, [x0, #0xb]
    // 0x28fd20: r1 = Instance_BorderStyle
    //     0x28fd20: add             x1, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28fd24: ldr             x1, [x1, #0xd10]
    // 0x28fd28: StoreField: r0->field_13 = r1
    //     0x28fd28: stur            w1, [x0, #0x13]
    // 0x28fd2c: d0 = -1.000000
    //     0x28fd2c: fmov            d0, #-1.00000000
    // 0x28fd30: d0 = -1.000000
    //     0x28fd30: fmov            d0, #-1.00000000
    // 0x28fd34: StoreField: r0->field_17 = d0
    //     0x28fd34: stur            d0, [x0, #0x17]
    // 0x28fd38: LeaveFrame
    //     0x28fd38: mov             SP, fp
    //     0x28fd3c: ldp             fp, lr, [SP], #0x10
    // 0x28fd40: ret
    //     0x28fd40: ret             
    // 0x28fd44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28fd44: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28fd48: b               #0x28f7f8
  }
  _ _InputDecoratorDefaultsM3(/* No info */) {
    // ** addr: 0x2901d0, size: 0x6c
    // 0x2901d0: r4 = Sentinel
    //     0x2901d0: ldr             x4, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2901d4: r3 = Instance_FloatingLabelBehavior
    //     0x2901d4: add             x3, PP, #0xa, lsl #12  ; [pp+0xad60] Obj!FloatingLabelBehavior@481a01
    //     0x2901d8: ldr             x3, [x3, #0xd60]
    // 0x2901dc: r2 = Instance_FloatingLabelAlignment
    //     0x2901dc: add             x2, PP, #0xa, lsl #12  ; [pp+0xad68] Obj!FloatingLabelAlignment@473731
    //     0x2901e0: ldr             x2, [x2, #0xd68]
    // 0x2901e4: r1 = false
    //     0x2901e4: add             x1, NULL, #0x30  ; false
    // 0x2901e8: ldr             x5, [SP, #8]
    // 0x2901ec: StoreField: r5->field_8f = r4
    //     0x2901ec: stur            w4, [x5, #0x8f]
    // 0x2901f0: StoreField: r5->field_93 = r4
    //     0x2901f0: stur            w4, [x5, #0x93]
    // 0x2901f4: ldr             x0, [SP]
    // 0x2901f8: StoreField: r5->field_8b = r0
    //     0x2901f8: stur            w0, [x5, #0x8b]
    //     0x2901fc: ldurb           w16, [x5, #-1]
    //     0x290200: ldurb           w17, [x0, #-1]
    //     0x290204: and             x16, x17, x16, lsr #2
    //     0x290208: tst             x16, HEAP, lsr #32
    //     0x29020c: b.eq            #0x29021c
    //     0x290210: str             lr, [SP, #-8]!
    //     0x290214: bl              #0x3e4688
    //     0x290218: ldr             lr, [SP], #8
    // 0x29021c: StoreField: r5->field_27 = r3
    //     0x29021c: stur            w3, [x5, #0x27]
    // 0x290220: StoreField: r5->field_2b = r2
    //     0x290220: stur            w2, [x5, #0x2b]
    // 0x290224: StoreField: r5->field_2f = r1
    //     0x290224: stur            w1, [x5, #0x2f]
    // 0x290228: StoreField: r5->field_37 = r1
    //     0x290228: stur            w1, [x5, #0x37]
    // 0x29022c: StoreField: r5->field_53 = r1
    //     0x29022c: stur            w1, [x5, #0x53]
    // 0x290230: StoreField: r5->field_83 = r1
    //     0x290230: stur            w1, [x5, #0x83]
    // 0x290234: r0 = Null
    //     0x290234: mov             x0, NULL
    // 0x290238: ret
    //     0x290238: ret             
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x303e3c, size: 0x184
    // 0x303e3c: EnterFrame
    //     0x303e3c: stp             fp, lr, [SP, #-0x10]!
    //     0x303e40: mov             fp, SP
    // 0x303e44: AllocStack(0x18)
    //     0x303e44: sub             SP, SP, #0x18
    // 0x303e48: SetupParameters()
    //     0x303e48: ldr             x0, [fp, #0x18]
    //     0x303e4c: ldur            w1, [x0, #0x17]
    //     0x303e50: add             x1, x1, HEAP, lsl #32
    //     0x303e54: stur            x1, [fp, #-8]
    // 0x303e58: CheckStackOverflow
    //     0x303e58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x303e5c: cmp             SP, x16
    //     0x303e60: b.ls            #0x303fb8
    // 0x303e64: ldr             x2, [fp, #0x10]
    // 0x303e68: r0 = LoadClassIdInstr(r2)
    //     0x303e68: ldur            x0, [x2, #-1]
    //     0x303e6c: ubfx            x0, x0, #0xc, #0x14
    // 0x303e70: r16 = Instance_MaterialState
    //     0x303e70: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x303e74: stp             x16, x2, [SP]
    // 0x303e78: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x303e78: sub             lr, x0, #0xf4b
    //     0x303e7c: ldr             lr, [x21, lr, lsl #3]
    //     0x303e80: blr             lr
    // 0x303e84: tbnz            w0, #4, #0x303ee8
    // 0x303e88: ldur            x1, [fp, #-8]
    // 0x303e8c: LoadField: r0 = r1->field_f
    //     0x303e8c: ldur            w0, [x1, #0xf]
    // 0x303e90: DecompressPointer r0
    //     0x303e90: add             x0, x0, HEAP, lsl #32
    // 0x303e94: mov             x1, x0
    // 0x303e98: LoadField: r0 = r1->field_8f
    //     0x303e98: ldur            w0, [x1, #0x8f]
    // 0x303e9c: DecompressPointer r0
    //     0x303e9c: add             x0, x0, HEAP, lsl #32
    // 0x303ea0: r16 = Sentinel
    //     0x303ea0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x303ea4: cmp             w0, w16
    // 0x303ea8: b.ne            #0x303eb8
    // 0x303eac: r2 = _colors
    //     0x303eac: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x303eb0: ldr             x2, [x2, #0xcc0]
    // 0x303eb4: r0 = InitLateFinalInstanceField()
    //     0x303eb4: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x303eb8: LoadField: r1 = r0->field_57
    //     0x303eb8: ldur            w1, [x0, #0x57]
    // 0x303ebc: DecompressPointer r1
    //     0x303ebc: add             x1, x1, HEAP, lsl #32
    // 0x303ec0: str             x1, [SP, #8]
    // 0x303ec4: d0 = 0.380000
    //     0x303ec4: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x303ec8: ldr             d0, [x17, #0xab0]
    // 0x303ecc: d0 = 0.380000
    //     0x303ecc: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x303ed0: ldr             d0, [x17, #0xab0]
    // 0x303ed4: str             d0, [SP]
    // 0x303ed8: r0 = withOpacity()
    //     0x303ed8: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x303edc: LeaveFrame
    //     0x303edc: mov             SP, fp
    //     0x303ee0: ldp             fp, lr, [SP], #0x10
    // 0x303ee4: ret
    //     0x303ee4: ret             
    // 0x303ee8: ldr             x0, [fp, #0x10]
    // 0x303eec: ldur            x1, [fp, #-8]
    // 0x303ef0: r2 = LoadClassIdInstr(r0)
    //     0x303ef0: ldur            x2, [x0, #-1]
    //     0x303ef4: ubfx            x2, x2, #0xc, #0x14
    // 0x303ef8: r16 = Instance_MaterialState
    //     0x303ef8: add             x16, PP, #0xa, lsl #12  ; [pp+0xad18] Obj!MaterialState@4817e1
    //     0x303efc: ldr             x16, [x16, #0xd18]
    // 0x303f00: stp             x16, x0, [SP]
    // 0x303f04: mov             x0, x2
    // 0x303f08: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x303f08: sub             lr, x0, #0xf4b
    //     0x303f0c: ldr             lr, [x21, lr, lsl #3]
    //     0x303f10: blr             lr
    // 0x303f14: tbnz            w0, #4, #0x303f5c
    // 0x303f18: ldur            x0, [fp, #-8]
    // 0x303f1c: LoadField: r1 = r0->field_f
    //     0x303f1c: ldur            w1, [x0, #0xf]
    // 0x303f20: DecompressPointer r1
    //     0x303f20: add             x1, x1, HEAP, lsl #32
    // 0x303f24: LoadField: r0 = r1->field_8f
    //     0x303f24: ldur            w0, [x1, #0x8f]
    // 0x303f28: DecompressPointer r0
    //     0x303f28: add             x0, x0, HEAP, lsl #32
    // 0x303f2c: r16 = Sentinel
    //     0x303f2c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x303f30: cmp             w0, w16
    // 0x303f34: b.ne            #0x303f44
    // 0x303f38: r2 = _colors
    //     0x303f38: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x303f3c: ldr             x2, [x2, #0xcc0]
    // 0x303f40: r0 = InitLateFinalInstanceField()
    //     0x303f40: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x303f44: LoadField: r1 = r0->field_3b
    //     0x303f44: ldur            w1, [x0, #0x3b]
    // 0x303f48: DecompressPointer r1
    //     0x303f48: add             x1, x1, HEAP, lsl #32
    // 0x303f4c: mov             x0, x1
    // 0x303f50: LeaveFrame
    //     0x303f50: mov             SP, fp
    //     0x303f54: ldp             fp, lr, [SP], #0x10
    // 0x303f58: ret
    //     0x303f58: ret             
    // 0x303f5c: ldur            x0, [fp, #-8]
    // 0x303f60: LoadField: r1 = r0->field_f
    //     0x303f60: ldur            w1, [x0, #0xf]
    // 0x303f64: DecompressPointer r1
    //     0x303f64: add             x1, x1, HEAP, lsl #32
    // 0x303f68: LoadField: r0 = r1->field_8f
    //     0x303f68: ldur            w0, [x1, #0x8f]
    // 0x303f6c: DecompressPointer r0
    //     0x303f6c: add             x0, x0, HEAP, lsl #32
    // 0x303f70: r16 = Sentinel
    //     0x303f70: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x303f74: cmp             w0, w16
    // 0x303f78: b.ne            #0x303f88
    // 0x303f7c: r2 = _colors
    //     0x303f7c: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x303f80: ldr             x2, [x2, #0xcc0]
    // 0x303f84: r0 = InitLateFinalInstanceField()
    //     0x303f84: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x303f88: LoadField: r1 = r0->field_5f
    //     0x303f88: ldur            w1, [x0, #0x5f]
    // 0x303f8c: DecompressPointer r1
    //     0x303f8c: add             x1, x1, HEAP, lsl #32
    // 0x303f90: cmp             w1, NULL
    // 0x303f94: b.ne            #0x303fa8
    // 0x303f98: LoadField: r2 = r0->field_57
    //     0x303f98: ldur            w2, [x0, #0x57]
    // 0x303f9c: DecompressPointer r2
    //     0x303f9c: add             x2, x2, HEAP, lsl #32
    // 0x303fa0: mov             x0, x2
    // 0x303fa4: b               #0x303fac
    // 0x303fa8: mov             x0, x1
    // 0x303fac: LeaveFrame
    //     0x303fac: mov             SP, fp
    //     0x303fb0: ldp             fp, lr, [SP], #0x10
    // 0x303fb4: ret
    //     0x303fb4: ret             
    // 0x303fb8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x303fb8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x303fbc: b               #0x303e64
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x303fc0, size: 0x84
    // 0x303fc0: EnterFrame
    //     0x303fc0: stp             fp, lr, [SP, #-0x10]!
    //     0x303fc4: mov             fp, SP
    // 0x303fc8: ldr             x0, [fp, #0x18]
    // 0x303fcc: LoadField: r1 = r0->field_17
    //     0x303fcc: ldur            w1, [x0, #0x17]
    // 0x303fd0: DecompressPointer r1
    //     0x303fd0: add             x1, x1, HEAP, lsl #32
    // 0x303fd4: CheckStackOverflow
    //     0x303fd4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x303fd8: cmp             SP, x16
    //     0x303fdc: b.ls            #0x30403c
    // 0x303fe0: LoadField: r0 = r1->field_f
    //     0x303fe0: ldur            w0, [x1, #0xf]
    // 0x303fe4: DecompressPointer r0
    //     0x303fe4: add             x0, x0, HEAP, lsl #32
    // 0x303fe8: mov             x1, x0
    // 0x303fec: LoadField: r0 = r1->field_8f
    //     0x303fec: ldur            w0, [x1, #0x8f]
    // 0x303ff0: DecompressPointer r0
    //     0x303ff0: add             x0, x0, HEAP, lsl #32
    // 0x303ff4: r16 = Sentinel
    //     0x303ff4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x303ff8: cmp             w0, w16
    // 0x303ffc: b.ne            #0x30400c
    // 0x304000: r2 = _colors
    //     0x304000: add             x2, PP, #0xa, lsl #12  ; [pp+0xacc0] Field <_InputDecoratorDefaultsM3@73019562._colors@73019562>: late final (offset: 0x90)
    //     0x304004: ldr             x2, [x2, #0xcc0]
    // 0x304008: r0 = InitLateFinalInstanceField()
    //     0x304008: bl              #0x3e3f28  ; InitLateFinalInstanceFieldStub
    // 0x30400c: LoadField: r1 = r0->field_5f
    //     0x30400c: ldur            w1, [x0, #0x5f]
    // 0x304010: DecompressPointer r1
    //     0x304010: add             x1, x1, HEAP, lsl #32
    // 0x304014: cmp             w1, NULL
    // 0x304018: b.ne            #0x30402c
    // 0x30401c: LoadField: r2 = r0->field_57
    //     0x30401c: ldur            w2, [x0, #0x57]
    // 0x304020: DecompressPointer r2
    //     0x304020: add             x2, x2, HEAP, lsl #32
    // 0x304024: mov             x0, x2
    // 0x304028: b               #0x304030
    // 0x30402c: mov             x0, x1
    // 0x304030: LeaveFrame
    //     0x304030: mov             SP, fp
    //     0x304034: ldp             fp, lr, [SP], #0x10
    // 0x304038: ret
    //     0x304038: ret             
    // 0x30403c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x30403c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x304040: b               #0x303fe0
  }
}

// class id: 1233, size: 0x90, field offset: 0x8c
//   const constructor, 
class _InputDecoratorDefaultsM2 extends InputDecorationTheme {

  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28d3c8, size: 0x104
    // 0x28d3c8: EnterFrame
    //     0x28d3c8: stp             fp, lr, [SP, #-0x10]!
    //     0x28d3cc: mov             fp, SP
    // 0x28d3d0: AllocStack(0x18)
    //     0x28d3d0: sub             SP, SP, #0x18
    // 0x28d3d4: SetupParameters()
    //     0x28d3d4: ldr             x0, [fp, #0x18]
    //     0x28d3d8: ldur            w1, [x0, #0x17]
    //     0x28d3dc: add             x1, x1, HEAP, lsl #32
    // 0x28d3e0: CheckStackOverflow
    //     0x28d3e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d3e4: cmp             SP, x16
    //     0x28d3e8: b.ls            #0x28d4bc
    // 0x28d3ec: LoadField: r0 = r1->field_f
    //     0x28d3ec: ldur            w0, [x1, #0xf]
    // 0x28d3f0: DecompressPointer r0
    //     0x28d3f0: add             x0, x0, HEAP, lsl #32
    // 0x28d3f4: LoadField: r1 = r0->field_8b
    //     0x28d3f4: ldur            w1, [x0, #0x8b]
    // 0x28d3f8: DecompressPointer r1
    //     0x28d3f8: add             x1, x1, HEAP, lsl #32
    // 0x28d3fc: str             x1, [SP]
    // 0x28d400: r0 = of()
    //     0x28d400: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28d404: mov             x1, x0
    // 0x28d408: ldr             x0, [fp, #0x10]
    // 0x28d40c: stur            x1, [fp, #-8]
    // 0x28d410: r2 = LoadClassIdInstr(r0)
    //     0x28d410: ldur            x2, [x0, #-1]
    //     0x28d414: ubfx            x2, x2, #0xc, #0x14
    // 0x28d418: r16 = Instance_MaterialState
    //     0x28d418: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28d41c: stp             x16, x0, [SP]
    // 0x28d420: mov             x0, x2
    // 0x28d424: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28d424: sub             lr, x0, #0xf4b
    //     0x28d428: ldr             lr, [x21, lr, lsl #3]
    //     0x28d42c: blr             lr
    // 0x28d430: tbnz            w0, #4, #0x28d474
    // 0x28d434: ldur            x0, [fp, #-8]
    // 0x28d438: LoadField: r1 = r0->field_93
    //     0x28d438: ldur            w1, [x0, #0x93]
    // 0x28d43c: DecompressPointer r1
    //     0x28d43c: add             x1, x1, HEAP, lsl #32
    // 0x28d440: LoadField: r0 = r1->field_33
    //     0x28d440: ldur            w0, [x1, #0x33]
    // 0x28d444: DecompressPointer r0
    //     0x28d444: add             x0, x0, HEAP, lsl #32
    // 0x28d448: cmp             w0, NULL
    // 0x28d44c: b.eq            #0x28d4c4
    // 0x28d450: r16 = Instance_Color
    //     0x28d450: add             x16, PP, #0xa, lsl #12  ; [pp+0xad48] Obj!Color@47cc81
    //     0x28d454: ldr             x16, [x16, #0xd48]
    // 0x28d458: stp             x16, x0, [SP]
    // 0x28d45c: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28d45c: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28d460: ldr             x4, [x4, #0xac0]
    // 0x28d464: r0 = copyWith()
    //     0x28d464: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28d468: LeaveFrame
    //     0x28d468: mov             SP, fp
    //     0x28d46c: ldp             fp, lr, [SP], #0x10
    // 0x28d470: ret
    //     0x28d470: ret             
    // 0x28d474: ldur            x0, [fp, #-8]
    // 0x28d478: LoadField: r1 = r0->field_93
    //     0x28d478: ldur            w1, [x0, #0x93]
    // 0x28d47c: DecompressPointer r1
    //     0x28d47c: add             x1, x1, HEAP, lsl #32
    // 0x28d480: LoadField: r2 = r1->field_33
    //     0x28d480: ldur            w2, [x1, #0x33]
    // 0x28d484: DecompressPointer r2
    //     0x28d484: add             x2, x2, HEAP, lsl #32
    // 0x28d488: cmp             w2, NULL
    // 0x28d48c: b.eq            #0x28d4c8
    // 0x28d490: LoadField: r1 = r0->field_3f
    //     0x28d490: ldur            w1, [x0, #0x3f]
    // 0x28d494: DecompressPointer r1
    //     0x28d494: add             x1, x1, HEAP, lsl #32
    // 0x28d498: LoadField: r0 = r1->field_3b
    //     0x28d498: ldur            w0, [x1, #0x3b]
    // 0x28d49c: DecompressPointer r0
    //     0x28d49c: add             x0, x0, HEAP, lsl #32
    // 0x28d4a0: stp             x0, x2, [SP]
    // 0x28d4a4: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28d4a4: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28d4a8: ldr             x4, [x4, #0xac0]
    // 0x28d4ac: r0 = copyWith()
    //     0x28d4ac: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28d4b0: LeaveFrame
    //     0x28d4b0: mov             SP, fp
    //     0x28d4b4: ldp             fp, lr, [SP], #0x10
    // 0x28d4b8: ret
    //     0x28d4b8: ret             
    // 0x28d4bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d4bc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d4c0: b               #0x28d3ec
    // 0x28d4c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d4c4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d4c8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d4c8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28d754, size: 0xfc
    // 0x28d754: EnterFrame
    //     0x28d754: stp             fp, lr, [SP, #-0x10]!
    //     0x28d758: mov             fp, SP
    // 0x28d75c: AllocStack(0x18)
    //     0x28d75c: sub             SP, SP, #0x18
    // 0x28d760: SetupParameters()
    //     0x28d760: ldr             x0, [fp, #0x18]
    //     0x28d764: ldur            w1, [x0, #0x17]
    //     0x28d768: add             x1, x1, HEAP, lsl #32
    // 0x28d76c: CheckStackOverflow
    //     0x28d76c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d770: cmp             SP, x16
    //     0x28d774: b.ls            #0x28d840
    // 0x28d778: LoadField: r0 = r1->field_f
    //     0x28d778: ldur            w0, [x1, #0xf]
    // 0x28d77c: DecompressPointer r0
    //     0x28d77c: add             x0, x0, HEAP, lsl #32
    // 0x28d780: LoadField: r1 = r0->field_8b
    //     0x28d780: ldur            w1, [x0, #0x8b]
    // 0x28d784: DecompressPointer r1
    //     0x28d784: add             x1, x1, HEAP, lsl #32
    // 0x28d788: str             x1, [SP]
    // 0x28d78c: r0 = of()
    //     0x28d78c: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28d790: mov             x1, x0
    // 0x28d794: ldr             x0, [fp, #0x10]
    // 0x28d798: stur            x1, [fp, #-8]
    // 0x28d79c: r2 = LoadClassIdInstr(r0)
    //     0x28d79c: ldur            x2, [x0, #-1]
    //     0x28d7a0: ubfx            x2, x2, #0xc, #0x14
    // 0x28d7a4: r16 = Instance_MaterialState
    //     0x28d7a4: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28d7a8: stp             x16, x0, [SP]
    // 0x28d7ac: mov             x0, x2
    // 0x28d7b0: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28d7b0: sub             lr, x0, #0xf4b
    //     0x28d7b4: ldr             lr, [x21, lr, lsl #3]
    //     0x28d7b8: blr             lr
    // 0x28d7bc: tbnz            w0, #4, #0x28d800
    // 0x28d7c0: ldur            x0, [fp, #-8]
    // 0x28d7c4: LoadField: r1 = r0->field_93
    //     0x28d7c4: ldur            w1, [x0, #0x93]
    // 0x28d7c8: DecompressPointer r1
    //     0x28d7c8: add             x1, x1, HEAP, lsl #32
    // 0x28d7cc: LoadField: r0 = r1->field_33
    //     0x28d7cc: ldur            w0, [x1, #0x33]
    // 0x28d7d0: DecompressPointer r0
    //     0x28d7d0: add             x0, x0, HEAP, lsl #32
    // 0x28d7d4: cmp             w0, NULL
    // 0x28d7d8: b.eq            #0x28d848
    // 0x28d7dc: r16 = Instance_Color
    //     0x28d7dc: add             x16, PP, #0xa, lsl #12  ; [pp+0xad48] Obj!Color@47cc81
    //     0x28d7e0: ldr             x16, [x16, #0xd48]
    // 0x28d7e4: stp             x16, x0, [SP]
    // 0x28d7e8: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28d7e8: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28d7ec: ldr             x4, [x4, #0xac0]
    // 0x28d7f0: r0 = copyWith()
    //     0x28d7f0: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28d7f4: LeaveFrame
    //     0x28d7f4: mov             SP, fp
    //     0x28d7f8: ldp             fp, lr, [SP], #0x10
    // 0x28d7fc: ret
    //     0x28d7fc: ret             
    // 0x28d800: ldur            x0, [fp, #-8]
    // 0x28d804: LoadField: r1 = r0->field_93
    //     0x28d804: ldur            w1, [x0, #0x93]
    // 0x28d808: DecompressPointer r1
    //     0x28d808: add             x1, x1, HEAP, lsl #32
    // 0x28d80c: LoadField: r2 = r1->field_33
    //     0x28d80c: ldur            w2, [x1, #0x33]
    // 0x28d810: DecompressPointer r2
    //     0x28d810: add             x2, x2, HEAP, lsl #32
    // 0x28d814: cmp             w2, NULL
    // 0x28d818: b.eq            #0x28d84c
    // 0x28d81c: LoadField: r1 = r0->field_57
    //     0x28d81c: ldur            w1, [x0, #0x57]
    // 0x28d820: DecompressPointer r1
    //     0x28d820: add             x1, x1, HEAP, lsl #32
    // 0x28d824: stp             x1, x2, [SP]
    // 0x28d828: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x28d828: add             x4, PP, #0xa, lsl #12  ; [pp+0xaac0] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x28d82c: ldr             x4, [x4, #0xac0]
    // 0x28d830: r0 = copyWith()
    //     0x28d830: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28d834: LeaveFrame
    //     0x28d834: mov             SP, fp
    //     0x28d838: ldp             fp, lr, [SP], #0x10
    // 0x28d83c: ret
    //     0x28d83c: ret             
    // 0x28d840: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d840: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d844: b               #0x28d778
    // 0x28d848: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d848: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d84c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d84c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28dc1c, size: 0x1ec
    // 0x28dc1c: EnterFrame
    //     0x28dc1c: stp             fp, lr, [SP, #-0x10]!
    //     0x28dc20: mov             fp, SP
    // 0x28dc24: AllocStack(0x20)
    //     0x28dc24: sub             SP, SP, #0x20
    // 0x28dc28: SetupParameters()
    //     0x28dc28: ldr             x0, [fp, #0x18]
    //     0x28dc2c: ldur            w1, [x0, #0x17]
    //     0x28dc30: add             x1, x1, HEAP, lsl #32
    //     0x28dc34: stur            x1, [fp, #-8]
    // 0x28dc38: CheckStackOverflow
    //     0x28dc38: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28dc3c: cmp             SP, x16
    //     0x28dc40: b.ls            #0x28de00
    // 0x28dc44: ldr             x2, [fp, #0x10]
    // 0x28dc48: r0 = LoadClassIdInstr(r2)
    //     0x28dc48: ldur            x0, [x2, #-1]
    //     0x28dc4c: ubfx            x0, x0, #0xc, #0x14
    // 0x28dc50: r16 = Instance_MaterialState
    //     0x28dc50: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28dc54: stp             x16, x2, [SP]
    // 0x28dc58: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28dc58: sub             lr, x0, #0xf4b
    //     0x28dc5c: ldr             lr, [x21, lr, lsl #3]
    //     0x28dc60: blr             lr
    // 0x28dc64: tbnz            w0, #4, #0x28dcb0
    // 0x28dc68: ldur            x1, [fp, #-8]
    // 0x28dc6c: LoadField: r0 = r1->field_f
    //     0x28dc6c: ldur            w0, [x1, #0xf]
    // 0x28dc70: DecompressPointer r0
    //     0x28dc70: add             x0, x0, HEAP, lsl #32
    // 0x28dc74: LoadField: r1 = r0->field_8b
    //     0x28dc74: ldur            w1, [x0, #0x8b]
    // 0x28dc78: DecompressPointer r1
    //     0x28dc78: add             x1, x1, HEAP, lsl #32
    // 0x28dc7c: str             x1, [SP]
    // 0x28dc80: r0 = of()
    //     0x28dc80: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28dc84: LoadField: r1 = r0->field_47
    //     0x28dc84: ldur            w1, [x0, #0x47]
    // 0x28dc88: DecompressPointer r1
    //     0x28dc88: add             x1, x1, HEAP, lsl #32
    // 0x28dc8c: stur            x1, [fp, #-0x10]
    // 0x28dc90: r0 = TextStyle()
    //     0x28dc90: bl              #0x21b308  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x28dc94: r2 = true
    //     0x28dc94: add             x2, NULL, #0x20  ; true
    // 0x28dc98: StoreField: r0->field_7 = r2
    //     0x28dc98: stur            w2, [x0, #7]
    // 0x28dc9c: ldur            x1, [fp, #-0x10]
    // 0x28dca0: StoreField: r0->field_b = r1
    //     0x28dca0: stur            w1, [x0, #0xb]
    // 0x28dca4: LeaveFrame
    //     0x28dca4: mov             SP, fp
    //     0x28dca8: ldp             fp, lr, [SP], #0x10
    // 0x28dcac: ret
    //     0x28dcac: ret             
    // 0x28dcb0: ldr             x3, [fp, #0x10]
    // 0x28dcb4: ldur            x1, [fp, #-8]
    // 0x28dcb8: r2 = true
    //     0x28dcb8: add             x2, NULL, #0x20  ; true
    // 0x28dcbc: r0 = LoadClassIdInstr(r3)
    //     0x28dcbc: ldur            x0, [x3, #-1]
    //     0x28dcc0: ubfx            x0, x0, #0xc, #0x14
    // 0x28dcc4: r16 = Instance_MaterialState
    //     0x28dcc4: add             x16, PP, #0xa, lsl #12  ; [pp+0xad18] Obj!MaterialState@4817e1
    //     0x28dcc8: ldr             x16, [x16, #0xd18]
    // 0x28dccc: stp             x16, x3, [SP]
    // 0x28dcd0: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28dcd0: sub             lr, x0, #0xf4b
    //     0x28dcd4: ldr             lr, [x21, lr, lsl #3]
    //     0x28dcd8: blr             lr
    // 0x28dcdc: tbnz            w0, #4, #0x28dd30
    // 0x28dce0: ldur            x1, [fp, #-8]
    // 0x28dce4: LoadField: r0 = r1->field_f
    //     0x28dce4: ldur            w0, [x1, #0xf]
    // 0x28dce8: DecompressPointer r0
    //     0x28dce8: add             x0, x0, HEAP, lsl #32
    // 0x28dcec: LoadField: r1 = r0->field_8b
    //     0x28dcec: ldur            w1, [x0, #0x8b]
    // 0x28dcf0: DecompressPointer r1
    //     0x28dcf0: add             x1, x1, HEAP, lsl #32
    // 0x28dcf4: str             x1, [SP]
    // 0x28dcf8: r0 = of()
    //     0x28dcf8: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28dcfc: LoadField: r1 = r0->field_3f
    //     0x28dcfc: ldur            w1, [x0, #0x3f]
    // 0x28dd00: DecompressPointer r1
    //     0x28dd00: add             x1, x1, HEAP, lsl #32
    // 0x28dd04: LoadField: r0 = r1->field_3b
    //     0x28dd04: ldur            w0, [x1, #0x3b]
    // 0x28dd08: DecompressPointer r0
    //     0x28dd08: add             x0, x0, HEAP, lsl #32
    // 0x28dd0c: stur            x0, [fp, #-0x10]
    // 0x28dd10: r0 = TextStyle()
    //     0x28dd10: bl              #0x21b308  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x28dd14: r2 = true
    //     0x28dd14: add             x2, NULL, #0x20  ; true
    // 0x28dd18: StoreField: r0->field_7 = r2
    //     0x28dd18: stur            w2, [x0, #7]
    // 0x28dd1c: ldur            x1, [fp, #-0x10]
    // 0x28dd20: StoreField: r0->field_b = r1
    //     0x28dd20: stur            w1, [x0, #0xb]
    // 0x28dd24: LeaveFrame
    //     0x28dd24: mov             SP, fp
    //     0x28dd28: ldp             fp, lr, [SP], #0x10
    // 0x28dd2c: ret
    //     0x28dd2c: ret             
    // 0x28dd30: ldr             x0, [fp, #0x10]
    // 0x28dd34: ldur            x1, [fp, #-8]
    // 0x28dd38: r2 = true
    //     0x28dd38: add             x2, NULL, #0x20  ; true
    // 0x28dd3c: r3 = LoadClassIdInstr(r0)
    //     0x28dd3c: ldur            x3, [x0, #-1]
    //     0x28dd40: ubfx            x3, x3, #0xc, #0x14
    // 0x28dd44: r16 = Instance_MaterialState
    //     0x28dd44: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28dd48: ldr             x16, [x16, #0xb18]
    // 0x28dd4c: stp             x16, x0, [SP]
    // 0x28dd50: mov             x0, x3
    // 0x28dd54: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28dd54: sub             lr, x0, #0xf4b
    //     0x28dd58: ldr             lr, [x21, lr, lsl #3]
    //     0x28dd5c: blr             lr
    // 0x28dd60: tbnz            w0, #4, #0x28ddb4
    // 0x28dd64: ldur            x0, [fp, #-8]
    // 0x28dd68: LoadField: r1 = r0->field_f
    //     0x28dd68: ldur            w1, [x0, #0xf]
    // 0x28dd6c: DecompressPointer r1
    //     0x28dd6c: add             x1, x1, HEAP, lsl #32
    // 0x28dd70: LoadField: r0 = r1->field_8b
    //     0x28dd70: ldur            w0, [x1, #0x8b]
    // 0x28dd74: DecompressPointer r0
    //     0x28dd74: add             x0, x0, HEAP, lsl #32
    // 0x28dd78: str             x0, [SP]
    // 0x28dd7c: r0 = of()
    //     0x28dd7c: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28dd80: LoadField: r1 = r0->field_3f
    //     0x28dd80: ldur            w1, [x0, #0x3f]
    // 0x28dd84: DecompressPointer r1
    //     0x28dd84: add             x1, x1, HEAP, lsl #32
    // 0x28dd88: LoadField: r0 = r1->field_b
    //     0x28dd88: ldur            w0, [x1, #0xb]
    // 0x28dd8c: DecompressPointer r0
    //     0x28dd8c: add             x0, x0, HEAP, lsl #32
    // 0x28dd90: stur            x0, [fp, #-0x10]
    // 0x28dd94: r0 = TextStyle()
    //     0x28dd94: bl              #0x21b308  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x28dd98: r1 = true
    //     0x28dd98: add             x1, NULL, #0x20  ; true
    // 0x28dd9c: StoreField: r0->field_7 = r1
    //     0x28dd9c: stur            w1, [x0, #7]
    // 0x28dda0: ldur            x1, [fp, #-0x10]
    // 0x28dda4: StoreField: r0->field_b = r1
    //     0x28dda4: stur            w1, [x0, #0xb]
    // 0x28dda8: LeaveFrame
    //     0x28dda8: mov             SP, fp
    //     0x28ddac: ldp             fp, lr, [SP], #0x10
    // 0x28ddb0: ret
    //     0x28ddb0: ret             
    // 0x28ddb4: ldur            x0, [fp, #-8]
    // 0x28ddb8: r1 = true
    //     0x28ddb8: add             x1, NULL, #0x20  ; true
    // 0x28ddbc: LoadField: r2 = r0->field_f
    //     0x28ddbc: ldur            w2, [x0, #0xf]
    // 0x28ddc0: DecompressPointer r2
    //     0x28ddc0: add             x2, x2, HEAP, lsl #32
    // 0x28ddc4: LoadField: r0 = r2->field_8b
    //     0x28ddc4: ldur            w0, [x2, #0x8b]
    // 0x28ddc8: DecompressPointer r0
    //     0x28ddc8: add             x0, x0, HEAP, lsl #32
    // 0x28ddcc: str             x0, [SP]
    // 0x28ddd0: r0 = of()
    //     0x28ddd0: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28ddd4: LoadField: r1 = r0->field_57
    //     0x28ddd4: ldur            w1, [x0, #0x57]
    // 0x28ddd8: DecompressPointer r1
    //     0x28ddd8: add             x1, x1, HEAP, lsl #32
    // 0x28dddc: stur            x1, [fp, #-8]
    // 0x28dde0: r0 = TextStyle()
    //     0x28dde0: bl              #0x21b308  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x28dde4: r1 = true
    //     0x28dde4: add             x1, NULL, #0x20  ; true
    // 0x28dde8: StoreField: r0->field_7 = r1
    //     0x28dde8: stur            w1, [x0, #7]
    // 0x28ddec: ldur            x1, [fp, #-8]
    // 0x28ddf0: StoreField: r0->field_b = r1
    //     0x28ddf0: stur            w1, [x0, #0xb]
    // 0x28ddf4: LeaveFrame
    //     0x28ddf4: mov             SP, fp
    //     0x28ddf8: ldp             fp, lr, [SP], #0x10
    // 0x28ddfc: ret
    //     0x28ddfc: ret             
    // 0x28de00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28de00: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28de04: b               #0x28dc44
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28e710, size: 0x118
    // 0x28e710: EnterFrame
    //     0x28e710: stp             fp, lr, [SP, #-0x10]!
    //     0x28e714: mov             fp, SP
    // 0x28e718: AllocStack(0x18)
    //     0x28e718: sub             SP, SP, #0x18
    // 0x28e71c: SetupParameters()
    //     0x28e71c: ldr             x0, [fp, #0x18]
    //     0x28e720: ldur            w1, [x0, #0x17]
    //     0x28e724: add             x1, x1, HEAP, lsl #32
    //     0x28e728: stur            x1, [fp, #-8]
    // 0x28e72c: CheckStackOverflow
    //     0x28e72c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e730: cmp             SP, x16
    //     0x28e734: b.ls            #0x28e820
    // 0x28e738: ldr             x0, [fp, #0x10]
    // 0x28e73c: r2 = LoadClassIdInstr(r0)
    //     0x28e73c: ldur            x2, [x0, #-1]
    //     0x28e740: ubfx            x2, x2, #0xc, #0x14
    // 0x28e744: r16 = Instance_MaterialState
    //     0x28e744: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28e748: stp             x16, x0, [SP]
    // 0x28e74c: mov             x0, x2
    // 0x28e750: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28e750: sub             lr, x0, #0xf4b
    //     0x28e754: ldr             lr, [x21, lr, lsl #3]
    //     0x28e758: blr             lr
    // 0x28e75c: tbnz            w0, #4, #0x28e7c0
    // 0x28e760: ldur            x0, [fp, #-8]
    // 0x28e764: LoadField: r1 = r0->field_f
    //     0x28e764: ldur            w1, [x0, #0xf]
    // 0x28e768: DecompressPointer r1
    //     0x28e768: add             x1, x1, HEAP, lsl #32
    // 0x28e76c: LoadField: r0 = r1->field_8b
    //     0x28e76c: ldur            w0, [x1, #0x8b]
    // 0x28e770: DecompressPointer r0
    //     0x28e770: add             x0, x0, HEAP, lsl #32
    // 0x28e774: str             x0, [SP]
    // 0x28e778: r0 = of()
    //     0x28e778: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28e77c: LoadField: r1 = r0->field_3f
    //     0x28e77c: ldur            w1, [x0, #0x3f]
    // 0x28e780: DecompressPointer r1
    //     0x28e780: add             x1, x1, HEAP, lsl #32
    // 0x28e784: LoadField: r0 = r1->field_7
    //     0x28e784: ldur            w0, [x1, #7]
    // 0x28e788: DecompressPointer r0
    //     0x28e788: add             x0, x0, HEAP, lsl #32
    // 0x28e78c: LoadField: r1 = r0->field_7
    //     0x28e78c: ldur            x1, [x0, #7]
    // 0x28e790: cmp             x1, #0
    // 0x28e794: b.gt            #0x28e7ac
    // 0x28e798: r0 = Instance_Color
    //     0x28e798: add             x0, PP, #0xa, lsl #12  ; [pp+0xad20] Obj!Color@47ce11
    //     0x28e79c: ldr             x0, [x0, #0xd20]
    // 0x28e7a0: LeaveFrame
    //     0x28e7a0: mov             SP, fp
    //     0x28e7a4: ldp             fp, lr, [SP], #0x10
    // 0x28e7a8: ret
    //     0x28e7a8: ret             
    // 0x28e7ac: r0 = Instance_Color
    //     0x28e7ac: add             x0, PP, #0xa, lsl #12  ; [pp+0xad28] Obj!Color@47ce01
    //     0x28e7b0: ldr             x0, [x0, #0xd28]
    // 0x28e7b4: LeaveFrame
    //     0x28e7b4: mov             SP, fp
    //     0x28e7b8: ldp             fp, lr, [SP], #0x10
    // 0x28e7bc: ret
    //     0x28e7bc: ret             
    // 0x28e7c0: ldur            x0, [fp, #-8]
    // 0x28e7c4: LoadField: r1 = r0->field_f
    //     0x28e7c4: ldur            w1, [x0, #0xf]
    // 0x28e7c8: DecompressPointer r1
    //     0x28e7c8: add             x1, x1, HEAP, lsl #32
    // 0x28e7cc: LoadField: r0 = r1->field_8b
    //     0x28e7cc: ldur            w0, [x1, #0x8b]
    // 0x28e7d0: DecompressPointer r0
    //     0x28e7d0: add             x0, x0, HEAP, lsl #32
    // 0x28e7d4: str             x0, [SP]
    // 0x28e7d8: r0 = of()
    //     0x28e7d8: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28e7dc: LoadField: r1 = r0->field_3f
    //     0x28e7dc: ldur            w1, [x0, #0x3f]
    // 0x28e7e0: DecompressPointer r1
    //     0x28e7e0: add             x1, x1, HEAP, lsl #32
    // 0x28e7e4: LoadField: r2 = r1->field_7
    //     0x28e7e4: ldur            w2, [x1, #7]
    // 0x28e7e8: DecompressPointer r2
    //     0x28e7e8: add             x2, x2, HEAP, lsl #32
    // 0x28e7ec: LoadField: r1 = r2->field_7
    //     0x28e7ec: ldur            x1, [x2, #7]
    // 0x28e7f0: cmp             x1, #0
    // 0x28e7f4: b.gt            #0x28e80c
    // 0x28e7f8: r0 = Instance_Color
    //     0x28e7f8: add             x0, PP, #0xa, lsl #12  ; [pp+0xad30] Obj!Color@47cdf1
    //     0x28e7fc: ldr             x0, [x0, #0xd30]
    // 0x28e800: LeaveFrame
    //     0x28e800: mov             SP, fp
    //     0x28e804: ldp             fp, lr, [SP], #0x10
    // 0x28e808: ret
    //     0x28e808: ret             
    // 0x28e80c: r0 = Instance_Color
    //     0x28e80c: add             x0, PP, #0xa, lsl #12  ; [pp+0xad38] Obj!Color@47cde1
    //     0x28e810: ldr             x0, [x0, #0xd38]
    // 0x28e814: LeaveFrame
    //     0x28e814: mov             SP, fp
    //     0x28e818: ldp             fp, lr, [SP], #0x10
    // 0x28e81c: ret
    //     0x28e81c: ret             
    // 0x28e820: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e820: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e824: b               #0x28e738
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x28ff2c, size: 0xec
    // 0x28ff2c: EnterFrame
    //     0x28ff2c: stp             fp, lr, [SP, #-0x10]!
    //     0x28ff30: mov             fp, SP
    // 0x28ff34: AllocStack(0x20)
    //     0x28ff34: sub             SP, SP, #0x20
    // 0x28ff38: SetupParameters()
    //     0x28ff38: ldr             x0, [fp, #0x18]
    //     0x28ff3c: ldur            w1, [x0, #0x17]
    //     0x28ff40: add             x1, x1, HEAP, lsl #32
    //     0x28ff44: stur            x1, [fp, #-8]
    // 0x28ff48: CheckStackOverflow
    //     0x28ff48: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28ff4c: cmp             SP, x16
    //     0x28ff50: b.ls            #0x290010
    // 0x28ff54: ldr             x0, [fp, #0x10]
    // 0x28ff58: r2 = LoadClassIdInstr(r0)
    //     0x28ff58: ldur            x2, [x0, #-1]
    //     0x28ff5c: ubfx            x2, x2, #0xc, #0x14
    // 0x28ff60: r16 = Instance_MaterialState
    //     0x28ff60: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x28ff64: stp             x16, x0, [SP]
    // 0x28ff68: mov             x0, x2
    // 0x28ff6c: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x28ff6c: sub             lr, x0, #0xf4b
    //     0x28ff70: ldr             lr, [x21, lr, lsl #3]
    //     0x28ff74: blr             lr
    // 0x28ff78: tbnz            w0, #4, #0x28ffc4
    // 0x28ff7c: ldur            x0, [fp, #-8]
    // 0x28ff80: LoadField: r1 = r0->field_f
    //     0x28ff80: ldur            w1, [x0, #0xf]
    // 0x28ff84: DecompressPointer r1
    //     0x28ff84: add             x1, x1, HEAP, lsl #32
    // 0x28ff88: LoadField: r0 = r1->field_8b
    //     0x28ff88: ldur            w0, [x1, #0x8b]
    // 0x28ff8c: DecompressPointer r0
    //     0x28ff8c: add             x0, x0, HEAP, lsl #32
    // 0x28ff90: str             x0, [SP]
    // 0x28ff94: r0 = of()
    //     0x28ff94: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28ff98: LoadField: r1 = r0->field_47
    //     0x28ff98: ldur            w1, [x0, #0x47]
    // 0x28ff9c: DecompressPointer r1
    //     0x28ff9c: add             x1, x1, HEAP, lsl #32
    // 0x28ffa0: stur            x1, [fp, #-0x10]
    // 0x28ffa4: r0 = TextStyle()
    //     0x28ffa4: bl              #0x21b308  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x28ffa8: r1 = true
    //     0x28ffa8: add             x1, NULL, #0x20  ; true
    // 0x28ffac: StoreField: r0->field_7 = r1
    //     0x28ffac: stur            w1, [x0, #7]
    // 0x28ffb0: ldur            x1, [fp, #-0x10]
    // 0x28ffb4: StoreField: r0->field_b = r1
    //     0x28ffb4: stur            w1, [x0, #0xb]
    // 0x28ffb8: LeaveFrame
    //     0x28ffb8: mov             SP, fp
    //     0x28ffbc: ldp             fp, lr, [SP], #0x10
    // 0x28ffc0: ret
    //     0x28ffc0: ret             
    // 0x28ffc4: ldur            x0, [fp, #-8]
    // 0x28ffc8: r1 = true
    //     0x28ffc8: add             x1, NULL, #0x20  ; true
    // 0x28ffcc: LoadField: r2 = r0->field_f
    //     0x28ffcc: ldur            w2, [x0, #0xf]
    // 0x28ffd0: DecompressPointer r2
    //     0x28ffd0: add             x2, x2, HEAP, lsl #32
    // 0x28ffd4: LoadField: r0 = r2->field_8b
    //     0x28ffd4: ldur            w0, [x2, #0x8b]
    // 0x28ffd8: DecompressPointer r0
    //     0x28ffd8: add             x0, x0, HEAP, lsl #32
    // 0x28ffdc: str             x0, [SP]
    // 0x28ffe0: r0 = of()
    //     0x28ffe0: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28ffe4: LoadField: r1 = r0->field_57
    //     0x28ffe4: ldur            w1, [x0, #0x57]
    // 0x28ffe8: DecompressPointer r1
    //     0x28ffe8: add             x1, x1, HEAP, lsl #32
    // 0x28ffec: stur            x1, [fp, #-8]
    // 0x28fff0: r0 = TextStyle()
    //     0x28fff0: bl              #0x21b308  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x28fff4: r1 = true
    //     0x28fff4: add             x1, NULL, #0x20  ; true
    // 0x28fff8: StoreField: r0->field_7 = r1
    //     0x28fff8: stur            w1, [x0, #7]
    // 0x28fffc: ldur            x1, [fp, #-8]
    // 0x290000: StoreField: r0->field_b = r1
    //     0x290000: stur            w1, [x0, #0xb]
    // 0x290004: LeaveFrame
    //     0x290004: mov             SP, fp
    //     0x290008: ldp             fp, lr, [SP], #0x10
    // 0x29000c: ret
    //     0x29000c: ret             
    // 0x290010: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x290010: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x290014: b               #0x28ff54
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x303cbc, size: 0x180
    // 0x303cbc: EnterFrame
    //     0x303cbc: stp             fp, lr, [SP, #-0x10]!
    //     0x303cc0: mov             fp, SP
    // 0x303cc4: AllocStack(0x18)
    //     0x303cc4: sub             SP, SP, #0x18
    // 0x303cc8: SetupParameters()
    //     0x303cc8: ldr             x0, [fp, #0x18]
    //     0x303ccc: ldur            w1, [x0, #0x17]
    //     0x303cd0: add             x1, x1, HEAP, lsl #32
    //     0x303cd4: stur            x1, [fp, #-8]
    // 0x303cd8: CheckStackOverflow
    //     0x303cd8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x303cdc: cmp             SP, x16
    //     0x303ce0: b.ls            #0x303e34
    // 0x303ce4: ldr             x2, [fp, #0x10]
    // 0x303ce8: r0 = LoadClassIdInstr(r2)
    //     0x303ce8: ldur            x0, [x2, #-1]
    //     0x303cec: ubfx            x0, x0, #0xc, #0x14
    // 0x303cf0: r16 = Instance_MaterialState
    //     0x303cf0: ldr             x16, [PP, #0x2a88]  ; [pp+0x2a88] Obj!MaterialState@481741
    // 0x303cf4: stp             x16, x2, [SP]
    // 0x303cf8: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x303cf8: sub             lr, x0, #0xf4b
    //     0x303cfc: ldr             lr, [x21, lr, lsl #3]
    //     0x303d00: blr             lr
    // 0x303d04: tbnz            w0, #4, #0x303d6c
    // 0x303d08: ldr             x1, [fp, #0x10]
    // 0x303d0c: r0 = LoadClassIdInstr(r1)
    //     0x303d0c: ldur            x0, [x1, #-1]
    //     0x303d10: ubfx            x0, x0, #0xc, #0x14
    // 0x303d14: r16 = Instance_MaterialState
    //     0x303d14: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x303d18: ldr             x16, [x16, #0xb18]
    // 0x303d1c: stp             x16, x1, [SP]
    // 0x303d20: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x303d20: sub             lr, x0, #0xf4b
    //     0x303d24: ldr             lr, [x21, lr, lsl #3]
    //     0x303d28: blr             lr
    // 0x303d2c: tbz             w0, #4, #0x303d64
    // 0x303d30: ldur            x1, [fp, #-8]
    // 0x303d34: LoadField: r0 = r1->field_f
    //     0x303d34: ldur            w0, [x1, #0xf]
    // 0x303d38: DecompressPointer r0
    //     0x303d38: add             x0, x0, HEAP, lsl #32
    // 0x303d3c: LoadField: r1 = r0->field_8b
    //     0x303d3c: ldur            w1, [x0, #0x8b]
    // 0x303d40: DecompressPointer r1
    //     0x303d40: add             x1, x1, HEAP, lsl #32
    // 0x303d44: str             x1, [SP]
    // 0x303d48: r0 = of()
    //     0x303d48: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x303d4c: LoadField: r1 = r0->field_47
    //     0x303d4c: ldur            w1, [x0, #0x47]
    // 0x303d50: DecompressPointer r1
    //     0x303d50: add             x1, x1, HEAP, lsl #32
    // 0x303d54: mov             x0, x1
    // 0x303d58: LeaveFrame
    //     0x303d58: mov             SP, fp
    //     0x303d5c: ldp             fp, lr, [SP], #0x10
    // 0x303d60: ret
    //     0x303d60: ret             
    // 0x303d64: ldur            x1, [fp, #-8]
    // 0x303d68: b               #0x303d70
    // 0x303d6c: ldur            x1, [fp, #-8]
    // 0x303d70: ldr             x0, [fp, #0x10]
    // 0x303d74: r2 = LoadClassIdInstr(r0)
    //     0x303d74: ldur            x2, [x0, #-1]
    //     0x303d78: ubfx            x2, x2, #0xc, #0x14
    // 0x303d7c: r16 = Instance_MaterialState
    //     0x303d7c: add             x16, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x303d80: ldr             x16, [x16, #0xb18]
    // 0x303d84: stp             x16, x0, [SP]
    // 0x303d88: mov             x0, x2
    // 0x303d8c: r0 = GDT[cid_x0 + -0xf4b]()
    //     0x303d8c: sub             lr, x0, #0xf4b
    //     0x303d90: ldr             lr, [x21, lr, lsl #3]
    //     0x303d94: blr             lr
    // 0x303d98: tbnz            w0, #4, #0x303dd4
    // 0x303d9c: ldur            x0, [fp, #-8]
    // 0x303da0: LoadField: r1 = r0->field_f
    //     0x303da0: ldur            w1, [x0, #0xf]
    // 0x303da4: DecompressPointer r1
    //     0x303da4: add             x1, x1, HEAP, lsl #32
    // 0x303da8: LoadField: r0 = r1->field_8b
    //     0x303da8: ldur            w0, [x1, #0x8b]
    // 0x303dac: DecompressPointer r0
    //     0x303dac: add             x0, x0, HEAP, lsl #32
    // 0x303db0: str             x0, [SP]
    // 0x303db4: r0 = of()
    //     0x303db4: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x303db8: LoadField: r1 = r0->field_3f
    //     0x303db8: ldur            w1, [x0, #0x3f]
    // 0x303dbc: DecompressPointer r1
    //     0x303dbc: add             x1, x1, HEAP, lsl #32
    // 0x303dc0: LoadField: r0 = r1->field_b
    //     0x303dc0: ldur            w0, [x1, #0xb]
    // 0x303dc4: DecompressPointer r0
    //     0x303dc4: add             x0, x0, HEAP, lsl #32
    // 0x303dc8: LeaveFrame
    //     0x303dc8: mov             SP, fp
    //     0x303dcc: ldp             fp, lr, [SP], #0x10
    // 0x303dd0: ret
    //     0x303dd0: ret             
    // 0x303dd4: ldur            x0, [fp, #-8]
    // 0x303dd8: LoadField: r1 = r0->field_f
    //     0x303dd8: ldur            w1, [x0, #0xf]
    // 0x303ddc: DecompressPointer r1
    //     0x303ddc: add             x1, x1, HEAP, lsl #32
    // 0x303de0: LoadField: r0 = r1->field_8b
    //     0x303de0: ldur            w0, [x1, #0x8b]
    // 0x303de4: DecompressPointer r0
    //     0x303de4: add             x0, x0, HEAP, lsl #32
    // 0x303de8: str             x0, [SP]
    // 0x303dec: r0 = of()
    //     0x303dec: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x303df0: LoadField: r1 = r0->field_3f
    //     0x303df0: ldur            w1, [x0, #0x3f]
    // 0x303df4: DecompressPointer r1
    //     0x303df4: add             x1, x1, HEAP, lsl #32
    // 0x303df8: LoadField: r2 = r1->field_7
    //     0x303df8: ldur            w2, [x1, #7]
    // 0x303dfc: DecompressPointer r2
    //     0x303dfc: add             x2, x2, HEAP, lsl #32
    // 0x303e00: LoadField: r1 = r2->field_7
    //     0x303e00: ldur            x1, [x2, #7]
    // 0x303e04: cmp             x1, #0
    // 0x303e08: b.gt            #0x303e20
    // 0x303e0c: r0 = Instance_Color
    //     0x303e0c: add             x0, PP, #0xa, lsl #12  ; [pp+0xa498] Obj!Color@47c7d1
    //     0x303e10: ldr             x0, [x0, #0x498]
    // 0x303e14: LeaveFrame
    //     0x303e14: mov             SP, fp
    //     0x303e18: ldp             fp, lr, [SP], #0x10
    // 0x303e1c: ret
    //     0x303e1c: ret             
    // 0x303e20: r0 = Instance_Color
    //     0x303e20: add             x0, PP, #0xa, lsl #12  ; [pp+0xad40] Obj!Color@47ce41
    //     0x303e24: ldr             x0, [x0, #0xd40]
    // 0x303e28: LeaveFrame
    //     0x303e28: mov             SP, fp
    //     0x303e2c: ldp             fp, lr, [SP], #0x10
    // 0x303e30: ret
    //     0x303e30: ret             
    // 0x303e34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x303e34: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x303e38: b               #0x303ce4
  }
}

// class id: 1449, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __InputDecoratorState&State&TickerProviderStateMixin extends State<dynamic>
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x1c09c8, size: 0x180
    // 0x1c09c8: EnterFrame
    //     0x1c09c8: stp             fp, lr, [SP, #-0x10]!
    //     0x1c09cc: mov             fp, SP
    // 0x1c09d0: AllocStack(0x20)
    //     0x1c09d0: sub             SP, SP, #0x20
    // 0x1c09d4: CheckStackOverflow
    //     0x1c09d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c09d8: cmp             SP, x16
    //     0x1c09dc: b.ls            #0x1c0b38
    // 0x1c09e0: ldr             x0, [fp, #0x18]
    // 0x1c09e4: LoadField: r1 = r0->field_17
    //     0x1c09e4: ldur            w1, [x0, #0x17]
    // 0x1c09e8: DecompressPointer r1
    //     0x1c09e8: add             x1, x1, HEAP, lsl #32
    // 0x1c09ec: cmp             w1, NULL
    // 0x1c09f0: b.ne            #0x1c09fc
    // 0x1c09f4: str             x0, [SP]
    // 0x1c09f8: r0 = _updateTickerModeNotifier()
    //     0x1c09f8: bl              #0x1c0b68  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x1c09fc: ldr             x0, [fp, #0x18]
    // 0x1c0a00: LoadField: r1 = r0->field_13
    //     0x1c0a00: ldur            w1, [x0, #0x13]
    // 0x1c0a04: DecompressPointer r1
    //     0x1c0a04: add             x1, x1, HEAP, lsl #32
    // 0x1c0a08: cmp             w1, NULL
    // 0x1c0a0c: b.ne            #0x1c0aa0
    // 0x1c0a10: r0 = InitLateStaticField(0x4d8) // [dart:collection] ::_uninitializedIndex
    //     0x1c0a10: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1c0a14: ldr             x0, [x0, #0x9b0]
    //     0x1c0a18: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1c0a1c: cmp             w0, w16
    //     0x1c0a20: b.ne            #0x1c0a2c
    //     0x1c0a24: ldr             x2, [PP, #0x348]  ; [pp+0x348] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x4d8)
    //     0x1c0a28: bl              #0x3e406c
    // 0x1c0a2c: r1 = <_WidgetTicker>
    //     0x1c0a2c: ldr             x1, [PP, #0x5aa0]  ; [pp+0x5aa0] TypeArguments: <_WidgetTicker>
    // 0x1c0a30: stur            x0, [fp, #-8]
    // 0x1c0a34: r0 = _Set()
    //     0x1c0a34: bl              #0x191298  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x1c0a38: mov             x1, x0
    // 0x1c0a3c: ldur            x0, [fp, #-8]
    // 0x1c0a40: stur            x1, [fp, #-0x10]
    // 0x1c0a44: StoreField: r1->field_1b = r0
    //     0x1c0a44: stur            w0, [x1, #0x1b]
    // 0x1c0a48: StoreField: r1->field_b = rZR
    //     0x1c0a48: stur            wzr, [x1, #0xb]
    // 0x1c0a4c: r0 = InitLateStaticField(0x4dc) // [dart:collection] ::_uninitializedData
    //     0x1c0a4c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1c0a50: ldr             x0, [x0, #0x9b8]
    //     0x1c0a54: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1c0a58: cmp             w0, w16
    //     0x1c0a5c: b.ne            #0x1c0a68
    //     0x1c0a60: ldr             x2, [PP, #0x358]  ; [pp+0x358] Field <::._uninitializedData@3220832>: static late final (offset: 0x4dc)
    //     0x1c0a64: bl              #0x3e406c
    // 0x1c0a68: mov             x1, x0
    // 0x1c0a6c: ldur            x0, [fp, #-0x10]
    // 0x1c0a70: StoreField: r0->field_f = r1
    //     0x1c0a70: stur            w1, [x0, #0xf]
    // 0x1c0a74: StoreField: r0->field_13 = rZR
    //     0x1c0a74: stur            wzr, [x0, #0x13]
    // 0x1c0a78: StoreField: r0->field_17 = rZR
    //     0x1c0a78: stur            wzr, [x0, #0x17]
    // 0x1c0a7c: ldr             x1, [fp, #0x18]
    // 0x1c0a80: StoreField: r1->field_13 = r0
    //     0x1c0a80: stur            w0, [x1, #0x13]
    //     0x1c0a84: ldurb           w16, [x1, #-1]
    //     0x1c0a88: ldurb           w17, [x0, #-1]
    //     0x1c0a8c: and             x16, x17, x16, lsr #2
    //     0x1c0a90: tst             x16, HEAP, lsr #32
    //     0x1c0a94: b.eq            #0x1c0a9c
    //     0x1c0a98: bl              #0x3e4608
    // 0x1c0a9c: b               #0x1c0aa4
    // 0x1c0aa0: mov             x1, x0
    // 0x1c0aa4: ldr             x0, [fp, #0x10]
    // 0x1c0aa8: r0 = _WidgetTicker()
    //     0x1c0aa8: bl              #0x1bfbb4  ; Allocate_WidgetTickerStub -> _WidgetTicker (size=0x20)
    // 0x1c0aac: mov             x2, x0
    // 0x1c0ab0: ldr             x1, [fp, #0x18]
    // 0x1c0ab4: stur            x2, [fp, #-8]
    // 0x1c0ab8: StoreField: r2->field_1b = r1
    //     0x1c0ab8: stur            w1, [x2, #0x1b]
    // 0x1c0abc: r0 = false
    //     0x1c0abc: add             x0, NULL, #0x30  ; false
    // 0x1c0ac0: StoreField: r2->field_b = r0
    //     0x1c0ac0: stur            w0, [x2, #0xb]
    // 0x1c0ac4: ldr             x0, [fp, #0x10]
    // 0x1c0ac8: StoreField: r2->field_13 = r0
    //     0x1c0ac8: stur            w0, [x2, #0x13]
    // 0x1c0acc: LoadField: r0 = r1->field_17
    //     0x1c0acc: ldur            w0, [x1, #0x17]
    // 0x1c0ad0: DecompressPointer r0
    //     0x1c0ad0: add             x0, x0, HEAP, lsl #32
    // 0x1c0ad4: cmp             w0, NULL
    // 0x1c0ad8: b.eq            #0x1c0b40
    // 0x1c0adc: r3 = LoadClassIdInstr(r0)
    //     0x1c0adc: ldur            x3, [x0, #-1]
    //     0x1c0ae0: ubfx            x3, x3, #0xc, #0x14
    // 0x1c0ae4: str             x0, [SP]
    // 0x1c0ae8: mov             x0, x3
    // 0x1c0aec: r0 = GDT[cid_x0 + -0xfff]()
    //     0x1c0aec: sub             lr, x0, #0xfff
    //     0x1c0af0: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0af4: blr             lr
    // 0x1c0af8: eor             x1, x0, #0x10
    // 0x1c0afc: ldur            x16, [fp, #-8]
    // 0x1c0b00: stp             x1, x16, [SP]
    // 0x1c0b04: r0 = muted=()
    //     0x1c0b04: bl              #0x189680  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x1c0b08: ldr             x0, [fp, #0x18]
    // 0x1c0b0c: LoadField: r1 = r0->field_13
    //     0x1c0b0c: ldur            w1, [x0, #0x13]
    // 0x1c0b10: DecompressPointer r1
    //     0x1c0b10: add             x1, x1, HEAP, lsl #32
    // 0x1c0b14: cmp             w1, NULL
    // 0x1c0b18: b.eq            #0x1c0b44
    // 0x1c0b1c: ldur            x16, [fp, #-8]
    // 0x1c0b20: stp             x16, x1, [SP]
    // 0x1c0b24: r0 = add()
    //     0x1c0b24: bl              #0x3d8c30  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x1c0b28: ldur            x0, [fp, #-8]
    // 0x1c0b2c: LeaveFrame
    //     0x1c0b2c: mov             SP, fp
    //     0x1c0b30: ldp             fp, lr, [SP], #0x10
    // 0x1c0b34: ret
    //     0x1c0b34: ret             
    // 0x1c0b38: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c0b38: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c0b3c: b               #0x1c09e0
    // 0x1c0b40: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c0b40: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c0b44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c0b44: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x1c0b68, size: 0x140
    // 0x1c0b68: EnterFrame
    //     0x1c0b68: stp             fp, lr, [SP, #-0x10]!
    //     0x1c0b6c: mov             fp, SP
    // 0x1c0b70: AllocStack(0x20)
    //     0x1c0b70: sub             SP, SP, #0x20
    // 0x1c0b74: CheckStackOverflow
    //     0x1c0b74: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0b78: cmp             SP, x16
    //     0x1c0b7c: b.ls            #0x1c0c9c
    // 0x1c0b80: ldr             x0, [fp, #0x10]
    // 0x1c0b84: LoadField: r1 = r0->field_f
    //     0x1c0b84: ldur            w1, [x0, #0xf]
    // 0x1c0b88: DecompressPointer r1
    //     0x1c0b88: add             x1, x1, HEAP, lsl #32
    // 0x1c0b8c: cmp             w1, NULL
    // 0x1c0b90: b.eq            #0x1c0ca4
    // 0x1c0b94: str             x1, [SP]
    // 0x1c0b98: r0 = getNotifier()
    //     0x1c0b98: bl              #0x1bf5f0  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x1c0b9c: mov             x1, x0
    // 0x1c0ba0: ldr             x0, [fp, #0x10]
    // 0x1c0ba4: stur            x1, [fp, #-0x10]
    // 0x1c0ba8: LoadField: r2 = r0->field_17
    //     0x1c0ba8: ldur            w2, [x0, #0x17]
    // 0x1c0bac: DecompressPointer r2
    //     0x1c0bac: add             x2, x2, HEAP, lsl #32
    // 0x1c0bb0: stur            x2, [fp, #-8]
    // 0x1c0bb4: cmp             w1, w2
    // 0x1c0bb8: b.ne            #0x1c0bcc
    // 0x1c0bbc: r0 = Null
    //     0x1c0bbc: mov             x0, NULL
    // 0x1c0bc0: LeaveFrame
    //     0x1c0bc0: mov             SP, fp
    //     0x1c0bc4: ldp             fp, lr, [SP], #0x10
    // 0x1c0bc8: ret
    //     0x1c0bc8: ret             
    // 0x1c0bcc: cmp             w2, NULL
    // 0x1c0bd0: b.eq            #0x1c0c24
    // 0x1c0bd4: r1 = 1
    //     0x1c0bd4: movz            x1, #0x1
    // 0x1c0bd8: r0 = AllocateContext()
    //     0x1c0bd8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c0bdc: mov             x1, x0
    // 0x1c0be0: ldr             x0, [fp, #0x10]
    // 0x1c0be4: StoreField: r1->field_f = r0
    //     0x1c0be4: stur            w0, [x1, #0xf]
    // 0x1c0be8: mov             x2, x1
    // 0x1c0bec: r1 = Function '_updateTickers@216311458':.
    //     0x1c0bec: add             x1, PP, #0x11, lsl #12  ; [pp+0x11c30] AnonymousClosure: (0x1c0ca8), in [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers (0x1c0cf0)
    //     0x1c0bf0: ldr             x1, [x1, #0xc30]
    // 0x1c0bf4: r0 = AllocateClosure()
    //     0x1c0bf4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c0bf8: mov             x1, x0
    // 0x1c0bfc: ldur            x0, [fp, #-8]
    // 0x1c0c00: r2 = LoadClassIdInstr(r0)
    //     0x1c0c00: ldur            x2, [x0, #-1]
    //     0x1c0c04: ubfx            x2, x2, #0xc, #0x14
    // 0x1c0c08: stp             x1, x0, [SP]
    // 0x1c0c0c: mov             x0, x2
    // 0x1c0c10: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x1c0c10: sub             lr, x0, #0xd8f
    //     0x1c0c14: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0c18: blr             lr
    // 0x1c0c1c: ldr             x0, [fp, #0x10]
    // 0x1c0c20: ldur            x1, [fp, #-0x10]
    // 0x1c0c24: r1 = 1
    //     0x1c0c24: movz            x1, #0x1
    // 0x1c0c28: r0 = AllocateContext()
    //     0x1c0c28: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c0c2c: mov             x1, x0
    // 0x1c0c30: ldr             x0, [fp, #0x10]
    // 0x1c0c34: StoreField: r1->field_f = r0
    //     0x1c0c34: stur            w0, [x1, #0xf]
    // 0x1c0c38: mov             x2, x1
    // 0x1c0c3c: r1 = Function '_updateTickers@216311458':.
    //     0x1c0c3c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11c30] AnonymousClosure: (0x1c0ca8), in [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers (0x1c0cf0)
    //     0x1c0c40: ldr             x1, [x1, #0xc30]
    // 0x1c0c44: r0 = AllocateClosure()
    //     0x1c0c44: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c0c48: ldur            x1, [fp, #-0x10]
    // 0x1c0c4c: r2 = LoadClassIdInstr(r1)
    //     0x1c0c4c: ldur            x2, [x1, #-1]
    //     0x1c0c50: ubfx            x2, x2, #0xc, #0x14
    // 0x1c0c54: stp             x0, x1, [SP]
    // 0x1c0c58: mov             x0, x2
    // 0x1c0c5c: r0 = GDT[cid_x0 + -0x7f2]()
    //     0x1c0c5c: sub             lr, x0, #0x7f2
    //     0x1c0c60: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0c64: blr             lr
    // 0x1c0c68: ldur            x0, [fp, #-0x10]
    // 0x1c0c6c: ldr             x1, [fp, #0x10]
    // 0x1c0c70: StoreField: r1->field_17 = r0
    //     0x1c0c70: stur            w0, [x1, #0x17]
    //     0x1c0c74: ldurb           w16, [x1, #-1]
    //     0x1c0c78: ldurb           w17, [x0, #-1]
    //     0x1c0c7c: and             x16, x17, x16, lsr #2
    //     0x1c0c80: tst             x16, HEAP, lsr #32
    //     0x1c0c84: b.eq            #0x1c0c8c
    //     0x1c0c88: bl              #0x3e4608
    // 0x1c0c8c: r0 = Null
    //     0x1c0c8c: mov             x0, NULL
    // 0x1c0c90: LeaveFrame
    //     0x1c0c90: mov             SP, fp
    //     0x1c0c94: ldp             fp, lr, [SP], #0x10
    // 0x1c0c98: ret
    //     0x1c0c98: ret             
    // 0x1c0c9c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c0c9c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c0ca0: b               #0x1c0b80
    // 0x1c0ca4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c0ca4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTickers(dynamic) {
    // ** addr: 0x1c0ca8, size: 0x48
    // 0x1c0ca8: EnterFrame
    //     0x1c0ca8: stp             fp, lr, [SP, #-0x10]!
    //     0x1c0cac: mov             fp, SP
    // 0x1c0cb0: AllocStack(0x8)
    //     0x1c0cb0: sub             SP, SP, #8
    // 0x1c0cb4: SetupParameters()
    //     0x1c0cb4: ldr             x0, [fp, #0x10]
    //     0x1c0cb8: ldur            w1, [x0, #0x17]
    //     0x1c0cbc: add             x1, x1, HEAP, lsl #32
    // 0x1c0cc0: CheckStackOverflow
    //     0x1c0cc0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0cc4: cmp             SP, x16
    //     0x1c0cc8: b.ls            #0x1c0ce8
    // 0x1c0ccc: LoadField: r0 = r1->field_f
    //     0x1c0ccc: ldur            w0, [x1, #0xf]
    // 0x1c0cd0: DecompressPointer r0
    //     0x1c0cd0: add             x0, x0, HEAP, lsl #32
    // 0x1c0cd4: str             x0, [SP]
    // 0x1c0cd8: r0 = _updateTickers()
    //     0x1c0cd8: bl              #0x1c0cf0  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers
    // 0x1c0cdc: LeaveFrame
    //     0x1c0cdc: mov             SP, fp
    //     0x1c0ce0: ldp             fp, lr, [SP], #0x10
    // 0x1c0ce4: ret
    //     0x1c0ce4: ret             
    // 0x1c0ce8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c0ce8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c0cec: b               #0x1c0ccc
  }
  _ _updateTickers(/* No info */) {
    // ** addr: 0x1c0cf0, size: 0x168
    // 0x1c0cf0: EnterFrame
    //     0x1c0cf0: stp             fp, lr, [SP, #-0x10]!
    //     0x1c0cf4: mov             fp, SP
    // 0x1c0cf8: AllocStack(0x28)
    //     0x1c0cf8: sub             SP, SP, #0x28
    // 0x1c0cfc: CheckStackOverflow
    //     0x1c0cfc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0d00: cmp             SP, x16
    //     0x1c0d04: b.ls            #0x1c0e40
    // 0x1c0d08: ldr             x1, [fp, #0x10]
    // 0x1c0d0c: LoadField: r0 = r1->field_13
    //     0x1c0d0c: ldur            w0, [x1, #0x13]
    // 0x1c0d10: DecompressPointer r0
    //     0x1c0d10: add             x0, x0, HEAP, lsl #32
    // 0x1c0d14: cmp             w0, NULL
    // 0x1c0d18: b.eq            #0x1c0e30
    // 0x1c0d1c: LoadField: r0 = r1->field_17
    //     0x1c0d1c: ldur            w0, [x1, #0x17]
    // 0x1c0d20: DecompressPointer r0
    //     0x1c0d20: add             x0, x0, HEAP, lsl #32
    // 0x1c0d24: cmp             w0, NULL
    // 0x1c0d28: b.eq            #0x1c0e48
    // 0x1c0d2c: r2 = LoadClassIdInstr(r0)
    //     0x1c0d2c: ldur            x2, [x0, #-1]
    //     0x1c0d30: ubfx            x2, x2, #0xc, #0x14
    // 0x1c0d34: str             x0, [SP]
    // 0x1c0d38: mov             x0, x2
    // 0x1c0d3c: r0 = GDT[cid_x0 + -0xfff]()
    //     0x1c0d3c: sub             lr, x0, #0xfff
    //     0x1c0d40: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0d44: blr             lr
    // 0x1c0d48: eor             x1, x0, #0x10
    // 0x1c0d4c: ldr             x0, [fp, #0x10]
    // 0x1c0d50: stur            x1, [fp, #-8]
    // 0x1c0d54: LoadField: r2 = r0->field_13
    //     0x1c0d54: ldur            w2, [x0, #0x13]
    // 0x1c0d58: DecompressPointer r2
    //     0x1c0d58: add             x2, x2, HEAP, lsl #32
    // 0x1c0d5c: cmp             w2, NULL
    // 0x1c0d60: b.eq            #0x1c0e4c
    // 0x1c0d64: str             x2, [SP]
    // 0x1c0d68: r0 = iterator()
    //     0x1c0d68: bl              #0x34cfcc  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x1c0d6c: stur            x0, [fp, #-0x18]
    // 0x1c0d70: LoadField: r2 = r0->field_7
    //     0x1c0d70: ldur            w2, [x0, #7]
    // 0x1c0d74: DecompressPointer r2
    //     0x1c0d74: add             x2, x2, HEAP, lsl #32
    // 0x1c0d78: stur            x2, [fp, #-0x10]
    // 0x1c0d7c: ldur            x1, [fp, #-8]
    // 0x1c0d80: CheckStackOverflow
    //     0x1c0d80: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0d84: cmp             SP, x16
    //     0x1c0d88: b.ls            #0x1c0e50
    // 0x1c0d8c: str             x0, [SP]
    // 0x1c0d90: r0 = moveNext()
    //     0x1c0d90: bl              #0x39b2b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x1c0d94: tbnz            w0, #4, #0x1c0e30
    // 0x1c0d98: ldur            x3, [fp, #-0x18]
    // 0x1c0d9c: LoadField: r4 = r3->field_33
    //     0x1c0d9c: ldur            w4, [x3, #0x33]
    // 0x1c0da0: DecompressPointer r4
    //     0x1c0da0: add             x4, x4, HEAP, lsl #32
    // 0x1c0da4: stur            x4, [fp, #-0x20]
    // 0x1c0da8: cmp             w4, NULL
    // 0x1c0dac: b.ne            #0x1c0de0
    // 0x1c0db0: mov             x0, x4
    // 0x1c0db4: ldur            x2, [fp, #-0x10]
    // 0x1c0db8: r1 = Null
    //     0x1c0db8: mov             x1, NULL
    // 0x1c0dbc: cmp             w2, NULL
    // 0x1c0dc0: b.eq            #0x1c0de0
    // 0x1c0dc4: LoadField: r4 = r2->field_17
    //     0x1c0dc4: ldur            w4, [x2, #0x17]
    // 0x1c0dc8: DecompressPointer r4
    //     0x1c0dc8: add             x4, x4, HEAP, lsl #32
    // 0x1c0dcc: r8 = X0
    //     0x1c0dcc: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x1c0dd0: LoadField: r9 = r4->field_7
    //     0x1c0dd0: ldur            x9, [x4, #7]
    // 0x1c0dd4: r3 = Null
    //     0x1c0dd4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11c20] Null
    //     0x1c0dd8: ldr             x3, [x3, #0xc20]
    // 0x1c0ddc: blr             x9
    // 0x1c0de0: ldur            x1, [fp, #-8]
    // 0x1c0de4: ldur            x0, [fp, #-0x20]
    // 0x1c0de8: LoadField: r2 = r0->field_b
    //     0x1c0de8: ldur            w2, [x0, #0xb]
    // 0x1c0dec: DecompressPointer r2
    //     0x1c0dec: add             x2, x2, HEAP, lsl #32
    // 0x1c0df0: cmp             w1, w2
    // 0x1c0df4: b.eq            #0x1c0e24
    // 0x1c0df8: StoreField: r0->field_b = r1
    //     0x1c0df8: stur            w1, [x0, #0xb]
    // 0x1c0dfc: tbnz            w1, #4, #0x1c0e0c
    // 0x1c0e00: str             x0, [SP]
    // 0x1c0e04: r0 = unscheduleTick()
    //     0x1c0e04: bl              #0x1bf3c4  ; [package:flutter/src/scheduler/ticker.dart] Ticker::unscheduleTick
    // 0x1c0e08: b               #0x1c0e24
    // 0x1c0e0c: str             x0, [SP]
    // 0x1c0e10: r0 = shouldScheduleTick()
    //     0x1c0e10: bl              #0x1bf37c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::shouldScheduleTick
    // 0x1c0e14: tbnz            w0, #4, #0x1c0e24
    // 0x1c0e18: ldur            x16, [fp, #-0x20]
    // 0x1c0e1c: str             x16, [SP]
    // 0x1c0e20: r0 = scheduleTick()
    //     0x1c0e20: bl              #0x189704  ; [package:flutter/src/scheduler/ticker.dart] Ticker::scheduleTick
    // 0x1c0e24: ldur            x0, [fp, #-0x18]
    // 0x1c0e28: ldur            x2, [fp, #-0x10]
    // 0x1c0e2c: b               #0x1c0d7c
    // 0x1c0e30: r0 = Null
    //     0x1c0e30: mov             x0, NULL
    // 0x1c0e34: LeaveFrame
    //     0x1c0e34: mov             SP, fp
    //     0x1c0e38: ldp             fp, lr, [SP], #0x10
    // 0x1c0e3c: ret
    //     0x1c0e3c: ret             
    // 0x1c0e40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c0e40: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c0e44: b               #0x1c0d08
    // 0x1c0e48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c0e48: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c0e4c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c0e4c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c0e50: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c0e50: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c0e54: b               #0x1c0d8c
  }
  _ activate(/* No info */) {
    // ** addr: 0x263cf4, size: 0x48
    // 0x263cf4: EnterFrame
    //     0x263cf4: stp             fp, lr, [SP, #-0x10]!
    //     0x263cf8: mov             fp, SP
    // 0x263cfc: AllocStack(0x8)
    //     0x263cfc: sub             SP, SP, #8
    // 0x263d00: CheckStackOverflow
    //     0x263d00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x263d04: cmp             SP, x16
    //     0x263d08: b.ls            #0x263d34
    // 0x263d0c: ldr             x16, [fp, #0x10]
    // 0x263d10: str             x16, [SP]
    // 0x263d14: r0 = _updateTickerModeNotifier()
    //     0x263d14: bl              #0x1c0b68  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x263d18: ldr             x16, [fp, #0x10]
    // 0x263d1c: str             x16, [SP]
    // 0x263d20: r0 = _updateTickers()
    //     0x263d20: bl              #0x1c0cf0  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers
    // 0x263d24: r0 = Null
    //     0x263d24: mov             x0, NULL
    // 0x263d28: LeaveFrame
    //     0x263d28: mov             SP, fp
    //     0x263d2c: ldp             fp, lr, [SP], #0x10
    // 0x263d30: ret
    //     0x263d30: ret             
    // 0x263d34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x263d34: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x263d38: b               #0x263d0c
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2aed40, size: 0xa0
    // 0x2aed40: EnterFrame
    //     0x2aed40: stp             fp, lr, [SP, #-0x10]!
    //     0x2aed44: mov             fp, SP
    // 0x2aed48: AllocStack(0x18)
    //     0x2aed48: sub             SP, SP, #0x18
    // 0x2aed4c: CheckStackOverflow
    //     0x2aed4c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2aed50: cmp             SP, x16
    //     0x2aed54: b.ls            #0x2aedd8
    // 0x2aed58: ldr             x0, [fp, #0x10]
    // 0x2aed5c: LoadField: r1 = r0->field_17
    //     0x2aed5c: ldur            w1, [x0, #0x17]
    // 0x2aed60: DecompressPointer r1
    //     0x2aed60: add             x1, x1, HEAP, lsl #32
    // 0x2aed64: stur            x1, [fp, #-8]
    // 0x2aed68: cmp             w1, NULL
    // 0x2aed6c: b.ne            #0x2aed78
    // 0x2aed70: mov             x1, x0
    // 0x2aed74: b               #0x2aedc4
    // 0x2aed78: r1 = 1
    //     0x2aed78: movz            x1, #0x1
    // 0x2aed7c: r0 = AllocateContext()
    //     0x2aed7c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2aed80: mov             x1, x0
    // 0x2aed84: ldr             x0, [fp, #0x10]
    // 0x2aed88: StoreField: r1->field_f = r0
    //     0x2aed88: stur            w0, [x1, #0xf]
    // 0x2aed8c: mov             x2, x1
    // 0x2aed90: r1 = Function '_updateTickers@216311458':.
    //     0x2aed90: add             x1, PP, #0x11, lsl #12  ; [pp+0x11c30] AnonymousClosure: (0x1c0ca8), in [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers (0x1c0cf0)
    //     0x2aed94: ldr             x1, [x1, #0xc30]
    // 0x2aed98: r0 = AllocateClosure()
    //     0x2aed98: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2aed9c: mov             x1, x0
    // 0x2aeda0: ldur            x0, [fp, #-8]
    // 0x2aeda4: r2 = LoadClassIdInstr(r0)
    //     0x2aeda4: ldur            x2, [x0, #-1]
    //     0x2aeda8: ubfx            x2, x2, #0xc, #0x14
    // 0x2aedac: stp             x1, x0, [SP]
    // 0x2aedb0: mov             x0, x2
    // 0x2aedb4: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x2aedb4: sub             lr, x0, #0xd8f
    //     0x2aedb8: ldr             lr, [x21, lr, lsl #3]
    //     0x2aedbc: blr             lr
    // 0x2aedc0: ldr             x1, [fp, #0x10]
    // 0x2aedc4: StoreField: r1->field_17 = rNULL
    //     0x2aedc4: stur            NULL, [x1, #0x17]
    // 0x2aedc8: r0 = Null
    //     0x2aedc8: mov             x0, NULL
    // 0x2aedcc: LeaveFrame
    //     0x2aedcc: mov             SP, fp
    //     0x2aedd0: ldp             fp, lr, [SP], #0x10
    // 0x2aedd4: ret
    //     0x2aedd4: ret             
    // 0x2aedd8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2aedd8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2aeddc: b               #0x2aed58
  }
}

// class id: 1450, size: 0x30, field offset: 0x1c
class _InputDecoratorState extends __InputDecoratorState&State&TickerProviderStateMixin {

  late final Animation<double> _floatingLabelAnimation; // offset: 0x20
  late final AnimationController _shakingLabelController; // offset: 0x24
  late final AnimationController _floatingLabelController; // offset: 0x1c

  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x267ef4, size: 0x2a8
    // 0x267ef4: EnterFrame
    //     0x267ef4: stp             fp, lr, [SP, #-0x10]!
    //     0x267ef8: mov             fp, SP
    // 0x267efc: AllocStack(0x18)
    //     0x267efc: sub             SP, SP, #0x18
    // 0x267f00: CheckStackOverflow
    //     0x267f00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x267f04: cmp             SP, x16
    //     0x267f08: b.ls            #0x26815c
    // 0x267f0c: ldr             x0, [fp, #0x10]
    // 0x267f10: r2 = Null
    //     0x267f10: mov             x2, NULL
    // 0x267f14: r1 = Null
    //     0x267f14: mov             x1, NULL
    // 0x267f18: r4 = 59
    //     0x267f18: movz            x4, #0x3b
    // 0x267f1c: branchIfSmi(r0, 0x267f28)
    //     0x267f1c: tbz             w0, #0, #0x267f28
    // 0x267f20: r4 = LoadClassIdInstr(r0)
    //     0x267f20: ldur            x4, [x0, #-1]
    //     0x267f24: ubfx            x4, x4, #0xc, #0x14
    // 0x267f28: cmp             x4, #0x6c2
    // 0x267f2c: b.eq            #0x267f44
    // 0x267f30: r8 = InputDecorator
    //     0x267f30: add             x8, PP, #0x11, lsl #12  ; [pp+0x11bc0] Type: InputDecorator
    //     0x267f34: ldr             x8, [x8, #0xbc0]
    // 0x267f38: r3 = Null
    //     0x267f38: add             x3, PP, #0x11, lsl #12  ; [pp+0x11bc8] Null
    //     0x267f3c: ldr             x3, [x3, #0xbc8]
    // 0x267f40: r0 = InputDecorator()
    //     0x267f40: bl              #0x1c0b48  ; IsType_InputDecorator_Stub
    // 0x267f44: ldr             x3, [fp, #0x18]
    // 0x267f48: LoadField: r2 = r3->field_7
    //     0x267f48: ldur            w2, [x3, #7]
    // 0x267f4c: DecompressPointer r2
    //     0x267f4c: add             x2, x2, HEAP, lsl #32
    // 0x267f50: ldr             x0, [fp, #0x10]
    // 0x267f54: r1 = Null
    //     0x267f54: mov             x1, NULL
    // 0x267f58: cmp             w2, NULL
    // 0x267f5c: b.eq            #0x267f80
    // 0x267f60: LoadField: r4 = r2->field_17
    //     0x267f60: ldur            w4, [x2, #0x17]
    // 0x267f64: DecompressPointer r4
    //     0x267f64: add             x4, x4, HEAP, lsl #32
    // 0x267f68: r8 = X0 bound StatefulWidget
    //     0x267f68: add             x8, PP, #9, lsl #12  ; [pp+0x9ce0] TypeParameter: X0 bound StatefulWidget
    //     0x267f6c: ldr             x8, [x8, #0xce0]
    // 0x267f70: LoadField: r9 = r4->field_7
    //     0x267f70: ldur            x9, [x4, #7]
    // 0x267f74: r3 = Null
    //     0x267f74: add             x3, PP, #0x11, lsl #12  ; [pp+0x11bd8] Null
    //     0x267f78: ldr             x3, [x3, #0xbd8]
    // 0x267f7c: blr             x9
    // 0x267f80: ldr             x0, [fp, #0x18]
    // 0x267f84: LoadField: r1 = r0->field_b
    //     0x267f84: ldur            w1, [x0, #0xb]
    // 0x267f88: DecompressPointer r1
    //     0x267f88: add             x1, x1, HEAP, lsl #32
    // 0x267f8c: cmp             w1, NULL
    // 0x267f90: b.eq            #0x268164
    // 0x267f94: LoadField: r2 = r1->field_b
    //     0x267f94: ldur            w2, [x1, #0xb]
    // 0x267f98: DecompressPointer r2
    //     0x267f98: add             x2, x2, HEAP, lsl #32
    // 0x267f9c: ldr             x1, [fp, #0x10]
    // 0x267fa0: LoadField: r3 = r1->field_b
    //     0x267fa0: ldur            w3, [x1, #0xb]
    // 0x267fa4: DecompressPointer r3
    //     0x267fa4: add             x3, x3, HEAP, lsl #32
    // 0x267fa8: stur            x3, [fp, #-8]
    // 0x267fac: stp             x3, x2, [SP]
    // 0x267fb0: r0 = ==()
    //     0x267fb0: bl              #0x365490  ; [package:flutter/src/material/input_decorator.dart] InputDecoration::==
    // 0x267fb4: tbz             w0, #4, #0x267fc4
    // 0x267fb8: ldr             x0, [fp, #0x18]
    // 0x267fbc: StoreField: r0->field_2b = rNULL
    //     0x267fbc: stur            NULL, [x0, #0x2b]
    // 0x267fc0: b               #0x267fc8
    // 0x267fc4: ldr             x0, [fp, #0x18]
    // 0x267fc8: ldur            x1, [fp, #-8]
    // 0x267fcc: LoadField: r2 = r0->field_b
    //     0x267fcc: ldur            w2, [x0, #0xb]
    // 0x267fd0: DecompressPointer r2
    //     0x267fd0: add             x2, x2, HEAP, lsl #32
    // 0x267fd4: cmp             w2, NULL
    // 0x267fd8: b.eq            #0x268168
    // 0x267fdc: LoadField: r3 = r2->field_b
    //     0x267fdc: ldur            w3, [x2, #0xb]
    // 0x267fe0: DecompressPointer r3
    //     0x267fe0: add             x3, x3, HEAP, lsl #32
    // 0x267fe4: LoadField: r4 = r3->field_4f
    //     0x267fe4: ldur            w4, [x3, #0x4f]
    // 0x267fe8: DecompressPointer r4
    //     0x267fe8: add             x4, x4, HEAP, lsl #32
    // 0x267fec: LoadField: r3 = r1->field_4f
    //     0x267fec: ldur            w3, [x1, #0x4f]
    // 0x267ff0: DecompressPointer r3
    //     0x267ff0: add             x3, x3, HEAP, lsl #32
    // 0x267ff4: LoadField: r1 = r2->field_27
    //     0x267ff4: ldur            w1, [x2, #0x27]
    // 0x267ff8: DecompressPointer r1
    //     0x267ff8: add             x1, x1, HEAP, lsl #32
    // 0x267ffc: tbz             w1, #4, #0x268008
    // 0x268000: r2 = true
    //     0x268000: add             x2, NULL, #0x20  ; true
    // 0x268004: b               #0x268020
    // 0x268008: LoadField: r1 = r2->field_1b
    //     0x268008: ldur            w1, [x2, #0x1b]
    // 0x26800c: DecompressPointer r1
    //     0x26800c: add             x1, x1, HEAP, lsl #32
    // 0x268010: tbnz            w1, #4, #0x26801c
    // 0x268014: r2 = true
    //     0x268014: add             x2, NULL, #0x20  ; true
    // 0x268018: b               #0x268020
    // 0x26801c: r2 = false
    //     0x26801c: add             x2, NULL, #0x30  ; false
    // 0x268020: ldr             x1, [fp, #0x10]
    // 0x268024: LoadField: r5 = r1->field_27
    //     0x268024: ldur            w5, [x1, #0x27]
    // 0x268028: DecompressPointer r5
    //     0x268028: add             x5, x5, HEAP, lsl #32
    // 0x26802c: tbz             w5, #4, #0x268038
    // 0x268030: r1 = true
    //     0x268030: add             x1, NULL, #0x20  ; true
    // 0x268034: b               #0x268050
    // 0x268038: LoadField: r5 = r1->field_1b
    //     0x268038: ldur            w5, [x1, #0x1b]
    // 0x26803c: DecompressPointer r5
    //     0x26803c: add             x5, x5, HEAP, lsl #32
    // 0x268040: tbnz            w5, #4, #0x26804c
    // 0x268044: r1 = true
    //     0x268044: add             x1, NULL, #0x20  ; true
    // 0x268048: b               #0x268050
    // 0x26804c: r1 = false
    //     0x26804c: add             x1, NULL, #0x30  ; false
    // 0x268050: cmp             w2, w1
    // 0x268054: b.ne            #0x268060
    // 0x268058: cmp             w4, w3
    // 0x26805c: b.eq            #0x268114
    // 0x268060: str             x0, [SP]
    // 0x268064: r0 = decoration()
    //     0x268064: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x268068: LoadField: r1 = r0->field_4f
    //     0x268068: ldur            w1, [x0, #0x4f]
    // 0x26806c: DecompressPointer r1
    //     0x26806c: add             x1, x1, HEAP, lsl #32
    // 0x268070: r16 = Instance_FloatingLabelBehavior
    //     0x268070: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b98] Obj!FloatingLabelBehavior@481a41
    //     0x268074: ldr             x16, [x16, #0xb98]
    // 0x268078: cmp             w1, w16
    // 0x26807c: b.eq            #0x2680f0
    // 0x268080: ldr             x0, [fp, #0x18]
    // 0x268084: LoadField: r1 = r0->field_b
    //     0x268084: ldur            w1, [x0, #0xb]
    // 0x268088: DecompressPointer r1
    //     0x268088: add             x1, x1, HEAP, lsl #32
    // 0x26808c: cmp             w1, NULL
    // 0x268090: b.eq            #0x26816c
    // 0x268094: LoadField: r2 = r1->field_27
    //     0x268094: ldur            w2, [x1, #0x27]
    // 0x268098: DecompressPointer r2
    //     0x268098: add             x2, x2, HEAP, lsl #32
    // 0x26809c: tbnz            w2, #4, #0x2680cc
    // 0x2680a0: LoadField: r2 = r1->field_1b
    //     0x2680a0: ldur            w2, [x1, #0x1b]
    // 0x2680a4: DecompressPointer r2
    //     0x2680a4: add             x2, x2, HEAP, lsl #32
    // 0x2680a8: tbz             w2, #4, #0x2680cc
    // 0x2680ac: LoadField: r2 = r1->field_b
    //     0x2680ac: ldur            w2, [x1, #0xb]
    // 0x2680b0: DecompressPointer r2
    //     0x2680b0: add             x2, x2, HEAP, lsl #32
    // 0x2680b4: LoadField: r1 = r2->field_4f
    //     0x2680b4: ldur            w1, [x2, #0x4f]
    // 0x2680b8: DecompressPointer r1
    //     0x2680b8: add             x1, x1, HEAP, lsl #32
    // 0x2680bc: r16 = Instance_FloatingLabelBehavior
    //     0x2680bc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ba0] Obj!FloatingLabelBehavior@481a21
    //     0x2680c0: ldr             x16, [x16, #0xba0]
    // 0x2680c4: cmp             w1, w16
    // 0x2680c8: b.ne            #0x2680f0
    // 0x2680cc: LoadField: r1 = r0->field_1b
    //     0x2680cc: ldur            w1, [x0, #0x1b]
    // 0x2680d0: DecompressPointer r1
    //     0x2680d0: add             x1, x1, HEAP, lsl #32
    // 0x2680d4: r16 = Sentinel
    //     0x2680d4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2680d8: cmp             w1, w16
    // 0x2680dc: b.eq            #0x268170
    // 0x2680e0: str             x1, [SP]
    // 0x2680e4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x2680e4: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x2680e8: r0 = forward()
    //     0x2680e8: bl              #0x208e88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x2680ec: b               #0x268114
    // 0x2680f0: ldr             x0, [fp, #0x18]
    // 0x2680f4: LoadField: r1 = r0->field_1b
    //     0x2680f4: ldur            w1, [x0, #0x1b]
    // 0x2680f8: DecompressPointer r1
    //     0x2680f8: add             x1, x1, HEAP, lsl #32
    // 0x2680fc: r16 = Sentinel
    //     0x2680fc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x268100: cmp             w1, w16
    // 0x268104: b.eq            #0x26817c
    // 0x268108: str             x1, [SP]
    // 0x26810c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x26810c: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x268110: r0 = reverse()
    //     0x268110: bl              #0x23e360  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::reverse
    // 0x268114: ldr             x0, [fp, #0x18]
    // 0x268118: str             x0, [SP]
    // 0x26811c: r0 = decoration()
    //     0x26811c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x268120: ldr             x1, [fp, #0x18]
    // 0x268124: LoadField: r2 = r1->field_1b
    //     0x268124: ldur            w2, [x1, #0x1b]
    // 0x268128: DecompressPointer r2
    //     0x268128: add             x2, x2, HEAP, lsl #32
    // 0x26812c: r16 = Sentinel
    //     0x26812c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x268130: cmp             w2, w16
    // 0x268134: b.eq            #0x268188
    // 0x268138: LoadField: r1 = r2->field_43
    //     0x268138: ldur            w1, [x2, #0x43]
    // 0x26813c: DecompressPointer r1
    //     0x26813c: add             x1, x1, HEAP, lsl #32
    // 0x268140: r16 = Sentinel
    //     0x268140: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x268144: cmp             w1, w16
    // 0x268148: b.eq            #0x268194
    // 0x26814c: r0 = Null
    //     0x26814c: mov             x0, NULL
    // 0x268150: LeaveFrame
    //     0x268150: mov             SP, fp
    //     0x268154: ldp             fp, lr, [SP], #0x10
    // 0x268158: ret
    //     0x268158: ret             
    // 0x26815c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26815c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x268160: b               #0x267f0c
    // 0x268164: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x268164: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x268168: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x268168: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x26816c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x26816c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x268170: r9 = _floatingLabelController
    //     0x268170: add             x9, PP, #0x11, lsl #12  ; [pp+0x11be8] Field <_InputDecoratorState@73019562._floatingLabelController@73019562>: late final (offset: 0x1c)
    //     0x268174: ldr             x9, [x9, #0xbe8]
    // 0x268178: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x268178: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x26817c: r9 = _floatingLabelController
    //     0x26817c: add             x9, PP, #0x11, lsl #12  ; [pp+0x11be8] Field <_InputDecoratorState@73019562._floatingLabelController@73019562>: late final (offset: 0x1c)
    //     0x268180: ldr             x9, [x9, #0xbe8]
    // 0x268184: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x268184: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x268188: r9 = _floatingLabelController
    //     0x268188: add             x9, PP, #0x11, lsl #12  ; [pp+0x11be8] Field <_InputDecoratorState@73019562._floatingLabelController@73019562>: late final (offset: 0x1c)
    //     0x26818c: ldr             x9, [x9, #0xbe8]
    // 0x268190: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x268190: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x268194: r9 = _status
    //     0x268194: ldr             x9, [PP, #0x5668]  ; [pp+0x5668] Field <AnimationController._status@337066280>: late (offset: 0x44)
    // 0x268198: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x268198: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  get _ _floatingLabelEnabled(/* No info */) {
    // ** addr: 0x26819c, size: 0x58
    // 0x26819c: EnterFrame
    //     0x26819c: stp             fp, lr, [SP, #-0x10]!
    //     0x2681a0: mov             fp, SP
    // 0x2681a4: AllocStack(0x8)
    //     0x2681a4: sub             SP, SP, #8
    // 0x2681a8: CheckStackOverflow
    //     0x2681a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2681ac: cmp             SP, x16
    //     0x2681b0: b.ls            #0x2681ec
    // 0x2681b4: ldr             x16, [fp, #0x10]
    // 0x2681b8: str             x16, [SP]
    // 0x2681bc: r0 = decoration()
    //     0x2681bc: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x2681c0: LoadField: r1 = r0->field_4f
    //     0x2681c0: ldur            w1, [x0, #0x4f]
    // 0x2681c4: DecompressPointer r1
    //     0x2681c4: add             x1, x1, HEAP, lsl #32
    // 0x2681c8: r16 = Instance_FloatingLabelBehavior
    //     0x2681c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b98] Obj!FloatingLabelBehavior@481a41
    //     0x2681cc: ldr             x16, [x16, #0xb98]
    // 0x2681d0: cmp             w1, w16
    // 0x2681d4: r16 = true
    //     0x2681d4: add             x16, NULL, #0x20  ; true
    // 0x2681d8: r17 = false
    //     0x2681d8: add             x17, NULL, #0x30  ; false
    // 0x2681dc: csel            x0, x16, x17, ne
    // 0x2681e0: LeaveFrame
    //     0x2681e0: mov             SP, fp
    //     0x2681e4: ldp             fp, lr, [SP], #0x10
    // 0x2681e8: ret
    //     0x2681e8: ret             
    // 0x2681ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2681ec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2681f0: b               #0x2681b4
  }
  get _ decoration(/* No info */) {
    // ** addr: 0x2681f4, size: 0xb8
    // 0x2681f4: EnterFrame
    //     0x2681f4: stp             fp, lr, [SP, #-0x10]!
    //     0x2681f8: mov             fp, SP
    // 0x2681fc: AllocStack(0x10)
    //     0x2681fc: sub             SP, SP, #0x10
    // 0x268200: CheckStackOverflow
    //     0x268200: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x268204: cmp             SP, x16
    //     0x268208: b.ls            #0x26829c
    // 0x26820c: ldr             x0, [fp, #0x10]
    // 0x268210: LoadField: r1 = r0->field_2b
    //     0x268210: ldur            w1, [x0, #0x2b]
    // 0x268214: DecompressPointer r1
    //     0x268214: add             x1, x1, HEAP, lsl #32
    // 0x268218: cmp             w1, NULL
    // 0x26821c: b.ne            #0x26828c
    // 0x268220: LoadField: r1 = r0->field_b
    //     0x268220: ldur            w1, [x0, #0xb]
    // 0x268224: DecompressPointer r1
    //     0x268224: add             x1, x1, HEAP, lsl #32
    // 0x268228: cmp             w1, NULL
    // 0x26822c: b.eq            #0x2682a4
    // 0x268230: LoadField: r2 = r1->field_b
    //     0x268230: ldur            w2, [x1, #0xb]
    // 0x268234: DecompressPointer r2
    //     0x268234: add             x2, x2, HEAP, lsl #32
    // 0x268238: stur            x2, [fp, #-8]
    // 0x26823c: LoadField: r1 = r0->field_f
    //     0x26823c: ldur            w1, [x0, #0xf]
    // 0x268240: DecompressPointer r1
    //     0x268240: add             x1, x1, HEAP, lsl #32
    // 0x268244: cmp             w1, NULL
    // 0x268248: b.eq            #0x2682a8
    // 0x26824c: str             x1, [SP]
    // 0x268250: r0 = of()
    //     0x268250: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x268254: ldur            x16, [fp, #-8]
    // 0x268258: str             x16, [SP]
    // 0x26825c: r0 = applyDefaults()
    //     0x26825c: bl              #0x2682ac  ; [package:flutter/src/material/input_decorator.dart] InputDecoration::applyDefaults
    // 0x268260: mov             x1, x0
    // 0x268264: ldr             x2, [fp, #0x10]
    // 0x268268: StoreField: r2->field_2b = r0
    //     0x268268: stur            w0, [x2, #0x2b]
    //     0x26826c: ldurb           w16, [x2, #-1]
    //     0x268270: ldurb           w17, [x0, #-1]
    //     0x268274: and             x16, x17, x16, lsr #2
    //     0x268278: tst             x16, HEAP, lsr #32
    //     0x26827c: b.eq            #0x268284
    //     0x268280: bl              #0x3e4628
    // 0x268284: mov             x0, x1
    // 0x268288: b               #0x268290
    // 0x26828c: mov             x0, x1
    // 0x268290: LeaveFrame
    //     0x268290: mov             SP, fp
    //     0x268294: ldp             fp, lr, [SP], #0x10
    // 0x268298: ret
    //     0x268298: ret             
    // 0x26829c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x26829c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2682a0: b               #0x26820c
    // 0x2682a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2682a4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2682a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2682a8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x28c7f4, size: 0x870
    // 0x28c7f4: EnterFrame
    //     0x28c7f4: stp             fp, lr, [SP, #-0x10]!
    //     0x28c7f8: mov             fp, SP
    // 0x28c7fc: AllocStack(0x80)
    //     0x28c7fc: sub             SP, SP, #0x80
    // 0x28c800: CheckStackOverflow
    //     0x28c800: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28c804: cmp             SP, x16
    //     0x28c808: b.ls            #0x28d018
    // 0x28c80c: ldr             x16, [fp, #0x10]
    // 0x28c810: str             x16, [SP]
    // 0x28c814: r0 = of()
    //     0x28c814: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28c818: stur            x0, [fp, #-8]
    // 0x28c81c: ldr             x16, [fp, #0x10]
    // 0x28c820: str             x16, [SP]
    // 0x28c824: r0 = of()
    //     0x28c824: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x28c828: LoadField: r1 = r0->field_2b
    //     0x28c828: ldur            w1, [x0, #0x2b]
    // 0x28c82c: DecompressPointer r1
    //     0x28c82c: add             x1, x1, HEAP, lsl #32
    // 0x28c830: tbnz            w1, #4, #0x28c860
    // 0x28c834: r0 = _InputDecoratorDefaultsM3()
    //     0x28c834: bl              #0x29023c  ; Allocate_InputDecoratorDefaultsM3Stub -> _InputDecoratorDefaultsM3 (size=0x98)
    // 0x28c838: stur            x0, [fp, #-0x10]
    // 0x28c83c: ldr             x16, [fp, #0x10]
    // 0x28c840: stp             x16, x0, [SP]
    // 0x28c844: r0 = _InputDecoratorDefaultsM3()
    //     0x28c844: bl              #0x2901d0  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3::_InputDecoratorDefaultsM3
    // 0x28c848: ldur            x4, [fp, #-0x10]
    // 0x28c84c: ldr             x0, [fp, #0x10]
    // 0x28c850: r3 = false
    //     0x28c850: add             x3, NULL, #0x30  ; false
    // 0x28c854: r2 = Instance_FloatingLabelAlignment
    //     0x28c854: add             x2, PP, #0xa, lsl #12  ; [pp+0xad68] Obj!FloatingLabelAlignment@473731
    //     0x28c858: ldr             x2, [x2, #0xd68]
    // 0x28c85c: b               #0x28c8a4
    // 0x28c860: ldr             x0, [fp, #0x10]
    // 0x28c864: r0 = _InputDecoratorDefaultsM2()
    //     0x28c864: bl              #0x2901c4  ; Allocate_InputDecoratorDefaultsM2Stub -> _InputDecoratorDefaultsM2 (size=0x90)
    // 0x28c868: mov             x1, x0
    // 0x28c86c: ldr             x0, [fp, #0x10]
    // 0x28c870: StoreField: r1->field_8b = r0
    //     0x28c870: stur            w0, [x1, #0x8b]
    // 0x28c874: r2 = Instance_FloatingLabelBehavior
    //     0x28c874: add             x2, PP, #0xa, lsl #12  ; [pp+0xad60] Obj!FloatingLabelBehavior@481a01
    //     0x28c878: ldr             x2, [x2, #0xd60]
    // 0x28c87c: StoreField: r1->field_27 = r2
    //     0x28c87c: stur            w2, [x1, #0x27]
    // 0x28c880: r2 = Instance_FloatingLabelAlignment
    //     0x28c880: add             x2, PP, #0xa, lsl #12  ; [pp+0xad68] Obj!FloatingLabelAlignment@473731
    //     0x28c884: ldr             x2, [x2, #0xd68]
    // 0x28c888: StoreField: r1->field_2b = r2
    //     0x28c888: stur            w2, [x1, #0x2b]
    // 0x28c88c: r3 = false
    //     0x28c88c: add             x3, NULL, #0x30  ; false
    // 0x28c890: StoreField: r1->field_2f = r3
    //     0x28c890: stur            w3, [x1, #0x2f]
    // 0x28c894: StoreField: r1->field_37 = r3
    //     0x28c894: stur            w3, [x1, #0x37]
    // 0x28c898: StoreField: r1->field_53 = r3
    //     0x28c898: stur            w3, [x1, #0x53]
    // 0x28c89c: StoreField: r1->field_83 = r3
    //     0x28c89c: stur            w3, [x1, #0x83]
    // 0x28c8a0: mov             x4, x1
    // 0x28c8a4: ldr             x1, [fp, #0x18]
    // 0x28c8a8: stur            x4, [fp, #-0x10]
    // 0x28c8ac: ldur            x16, [fp, #-8]
    // 0x28c8b0: stp             x16, x1, [SP, #8]
    // 0x28c8b4: str             x4, [SP]
    // 0x28c8b8: r0 = _getInlineLabelStyle()
    //     0x28c8b8: bl              #0x290018  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getInlineLabelStyle
    // 0x28c8bc: stur            x0, [fp, #-0x20]
    // 0x28c8c0: LoadField: r1 = r0->field_33
    //     0x28c8c0: ldur            w1, [x0, #0x33]
    // 0x28c8c4: DecompressPointer r1
    //     0x28c8c4: add             x1, x1, HEAP, lsl #32
    // 0x28c8c8: stur            x1, [fp, #-0x18]
    // 0x28c8cc: cmp             w1, NULL
    // 0x28c8d0: b.eq            #0x28d020
    // 0x28c8d4: ldr             x16, [fp, #0x18]
    // 0x28c8d8: ldur            lr, [fp, #-8]
    // 0x28c8dc: stp             lr, x16, [SP, #8]
    // 0x28c8e0: ldur            x16, [fp, #-0x10]
    // 0x28c8e4: str             x16, [SP]
    // 0x28c8e8: r0 = _getInlineHintStyle()
    //     0x28c8e8: bl              #0x28fd94  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getInlineHintStyle
    // 0x28c8ec: ldr             x16, [fp, #0x18]
    // 0x28c8f0: str             x16, [SP]
    // 0x28c8f4: r0 = decoration()
    //     0x28c8f4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28c8f8: ldr             x16, [fp, #0x18]
    // 0x28c8fc: str             x16, [SP]
    // 0x28c900: r0 = decoration()
    //     0x28c900: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28c904: ldr             x0, [fp, #0x18]
    // 0x28c908: LoadField: r1 = r0->field_b
    //     0x28c908: ldur            w1, [x0, #0xb]
    // 0x28c90c: DecompressPointer r1
    //     0x28c90c: add             x1, x1, HEAP, lsl #32
    // 0x28c910: cmp             w1, NULL
    // 0x28c914: b.eq            #0x28d024
    // 0x28c918: LoadField: r2 = r1->field_1b
    //     0x28c918: ldur            w2, [x1, #0x1b]
    // 0x28c91c: DecompressPointer r2
    //     0x28c91c: add             x2, x2, HEAP, lsl #32
    // 0x28c920: tbnz            w2, #4, #0x28c948
    // 0x28c924: str             x0, [SP]
    // 0x28c928: r0 = decoration()
    //     0x28c928: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28c92c: ldr             x16, [fp, #0x18]
    // 0x28c930: str             x16, [SP]
    // 0x28c934: r0 = decoration()
    //     0x28c934: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28c938: ldr             x16, [fp, #0x18]
    // 0x28c93c: str             x16, [SP]
    // 0x28c940: r0 = decoration()
    //     0x28c940: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28c944: b               #0x28c960
    // 0x28c948: ldr             x16, [fp, #0x18]
    // 0x28c94c: str             x16, [SP]
    // 0x28c950: r0 = _hasError()
    //     0x28c950: bl              #0x28fd4c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_hasError
    // 0x28c954: ldr             x16, [fp, #0x18]
    // 0x28c958: str             x16, [SP]
    // 0x28c95c: r0 = decoration()
    //     0x28c95c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28c960: ldr             x0, [fp, #0x18]
    // 0x28c964: ldur            x16, [fp, #-8]
    // 0x28c968: stp             x16, x0, [SP, #8]
    // 0x28c96c: ldur            x16, [fp, #-0x10]
    // 0x28c970: str             x16, [SP]
    // 0x28c974: r0 = _getDefaultBorder()
    //     0x28c974: bl              #0x28e938  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getDefaultBorder
    // 0x28c978: mov             x1, x0
    // 0x28c97c: ldr             x0, [fp, #0x18]
    // 0x28c980: stur            x1, [fp, #-0x38]
    // 0x28c984: LoadField: r2 = r0->field_27
    //     0x28c984: ldur            w2, [x0, #0x27]
    // 0x28c988: DecompressPointer r2
    //     0x28c988: add             x2, x2, HEAP, lsl #32
    // 0x28c98c: stur            x2, [fp, #-0x30]
    // 0x28c990: LoadField: r3 = r0->field_1f
    //     0x28c990: ldur            w3, [x0, #0x1f]
    // 0x28c994: DecompressPointer r3
    //     0x28c994: add             x3, x3, HEAP, lsl #32
    // 0x28c998: r16 = Sentinel
    //     0x28c998: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c99c: cmp             w3, w16
    // 0x28c9a0: b.eq            #0x28d028
    // 0x28c9a4: stur            x3, [fp, #-0x28]
    // 0x28c9a8: ldur            x16, [fp, #-0x10]
    // 0x28c9ac: stp             x16, x0, [SP]
    // 0x28c9b0: r0 = _getFillColor()
    //     0x28c9b0: bl              #0x28e490  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getFillColor
    // 0x28c9b4: stur            x0, [fp, #-0x40]
    // 0x28c9b8: ldr             x16, [fp, #0x18]
    // 0x28c9bc: ldur            lr, [fp, #-8]
    // 0x28c9c0: stp             lr, x16, [SP]
    // 0x28c9c4: r0 = _getHoverColor()
    //     0x28c9c4: bl              #0x28e3c8  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getHoverColor
    // 0x28c9c8: stur            x0, [fp, #-0x48]
    // 0x28c9cc: ldr             x16, [fp, #0x18]
    // 0x28c9d0: str             x16, [SP]
    // 0x28c9d4: r0 = isHovering()
    //     0x28c9d4: bl              #0x28e364  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isHovering
    // 0x28c9d8: stur            x0, [fp, #-0x50]
    // 0x28c9dc: r0 = _BorderContainer()
    //     0x28c9dc: bl              #0x28e358  ; Allocate_BorderContainerStub -> _BorderContainer (size=0x24)
    // 0x28c9e0: mov             x1, x0
    // 0x28c9e4: ldur            x0, [fp, #-0x38]
    // 0x28c9e8: stur            x1, [fp, #-0x58]
    // 0x28c9ec: StoreField: r1->field_b = r0
    //     0x28c9ec: stur            w0, [x1, #0xb]
    // 0x28c9f0: ldur            x2, [fp, #-0x30]
    // 0x28c9f4: StoreField: r1->field_f = r2
    //     0x28c9f4: stur            w2, [x1, #0xf]
    // 0x28c9f8: ldur            x3, [fp, #-0x28]
    // 0x28c9fc: StoreField: r1->field_13 = r3
    //     0x28c9fc: stur            w3, [x1, #0x13]
    // 0x28ca00: ldur            x3, [fp, #-0x40]
    // 0x28ca04: StoreField: r1->field_17 = r3
    //     0x28ca04: stur            w3, [x1, #0x17]
    // 0x28ca08: ldur            x3, [fp, #-0x48]
    // 0x28ca0c: StoreField: r1->field_1b = r3
    //     0x28ca0c: stur            w3, [x1, #0x1b]
    // 0x28ca10: ldur            x3, [fp, #-0x50]
    // 0x28ca14: StoreField: r1->field_1f = r3
    //     0x28ca14: stur            w3, [x1, #0x1f]
    // 0x28ca18: ldr             x16, [fp, #0x18]
    // 0x28ca1c: str             x16, [SP]
    // 0x28ca20: r0 = decoration()
    //     0x28ca20: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ca24: LoadField: r1 = r0->field_13
    //     0x28ca24: ldur            w1, [x0, #0x13]
    // 0x28ca28: DecompressPointer r1
    //     0x28ca28: add             x1, x1, HEAP, lsl #32
    // 0x28ca2c: cmp             w1, NULL
    // 0x28ca30: b.ne            #0x28ca48
    // 0x28ca34: ldr             x16, [fp, #0x18]
    // 0x28ca38: str             x16, [SP]
    // 0x28ca3c: r0 = decoration()
    //     0x28ca3c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ca40: r1 = Null
    //     0x28ca40: mov             x1, NULL
    // 0x28ca44: b               #0x28cbe8
    // 0x28ca48: ldr             x0, [fp, #0x18]
    // 0x28ca4c: LoadField: r1 = r0->field_23
    //     0x28ca4c: ldur            w1, [x0, #0x23]
    // 0x28ca50: DecompressPointer r1
    //     0x28ca50: add             x1, x1, HEAP, lsl #32
    // 0x28ca54: r16 = Sentinel
    //     0x28ca54: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28ca58: cmp             w1, w16
    // 0x28ca5c: b.eq            #0x28d034
    // 0x28ca60: stur            x1, [fp, #-0x28]
    // 0x28ca64: str             x0, [SP]
    // 0x28ca68: r0 = _shouldShowLabel()
    //     0x28ca68: bl              #0x28e254  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_shouldShowLabel
    // 0x28ca6c: tbnz            w0, #4, #0x28ca7c
    // 0x28ca70: d0 = 1.000000
    //     0x28ca70: fmov            d0, #1.00000000
    // 0x28ca74: d0 = 1.000000
    //     0x28ca74: fmov            d0, #1.00000000
    // 0x28ca78: b               #0x28ca84
    // 0x28ca7c: d0 = 0.000000
    //     0x28ca7c: eor             v0.16b, v0.16b, v0.16b
    // 0x28ca80: d0 = 0.000000
    //     0x28ca80: eor             v0.16b, v0.16b, v0.16b
    // 0x28ca84: ldr             x0, [fp, #0x18]
    // 0x28ca88: stur            d0, [fp, #-0x60]
    // 0x28ca8c: LoadField: r1 = r0->field_b
    //     0x28ca8c: ldur            w1, [x0, #0xb]
    // 0x28ca90: DecompressPointer r1
    //     0x28ca90: add             x1, x1, HEAP, lsl #32
    // 0x28ca94: cmp             w1, NULL
    // 0x28ca98: b.eq            #0x28d040
    // 0x28ca9c: LoadField: r2 = r1->field_27
    //     0x28ca9c: ldur            w2, [x1, #0x27]
    // 0x28caa0: DecompressPointer r2
    //     0x28caa0: add             x2, x2, HEAP, lsl #32
    // 0x28caa4: tbnz            w2, #4, #0x28cab4
    // 0x28caa8: LoadField: r2 = r1->field_1b
    //     0x28caa8: ldur            w2, [x1, #0x1b]
    // 0x28caac: DecompressPointer r2
    //     0x28caac: add             x2, x2, HEAP, lsl #32
    // 0x28cab0: tbnz            w2, #4, #0x28cad0
    // 0x28cab4: ldur            x16, [fp, #-8]
    // 0x28cab8: stp             x16, x0, [SP, #8]
    // 0x28cabc: ldur            x16, [fp, #-0x10]
    // 0x28cac0: str             x16, [SP]
    // 0x28cac4: r0 = _getFloatingLabelStyle()
    //     0x28cac4: bl              #0x28da30  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getFloatingLabelStyle
    // 0x28cac8: mov             x2, x0
    // 0x28cacc: b               #0x28cad4
    // 0x28cad0: ldur            x2, [fp, #-0x20]
    // 0x28cad4: ldr             x0, [fp, #0x18]
    // 0x28cad8: ldur            d0, [fp, #-0x60]
    // 0x28cadc: ldur            x1, [fp, #-0x28]
    // 0x28cae0: stur            x2, [fp, #-0x40]
    // 0x28cae4: str             x0, [SP]
    // 0x28cae8: r0 = decoration()
    //     0x28cae8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28caec: ldr             x16, [fp, #0x18]
    // 0x28caf0: str             x16, [SP]
    // 0x28caf4: r0 = decoration()
    //     0x28caf4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28caf8: LoadField: r1 = r0->field_13
    //     0x28caf8: ldur            w1, [x0, #0x13]
    // 0x28cafc: DecompressPointer r1
    //     0x28cafc: add             x1, x1, HEAP, lsl #32
    // 0x28cb00: stur            x1, [fp, #-0x48]
    // 0x28cb04: cmp             w1, NULL
    // 0x28cb08: b.eq            #0x28d044
    // 0x28cb0c: ldr             x0, [fp, #0x18]
    // 0x28cb10: LoadField: r2 = r0->field_b
    //     0x28cb10: ldur            w2, [x0, #0xb]
    // 0x28cb14: DecompressPointer r2
    //     0x28cb14: add             x2, x2, HEAP, lsl #32
    // 0x28cb18: cmp             w2, NULL
    // 0x28cb1c: b.eq            #0x28d048
    // 0x28cb20: r0 = Text()
    //     0x28cb20: bl              #0x27958c  ; AllocateTextStub -> Text (size=0x4c)
    // 0x28cb24: mov             x1, x0
    // 0x28cb28: ldur            x0, [fp, #-0x48]
    // 0x28cb2c: stur            x1, [fp, #-0x50]
    // 0x28cb30: StoreField: r1->field_b = r0
    //     0x28cb30: stur            w0, [x1, #0xb]
    // 0x28cb34: r0 = Instance_TextAlign
    //     0x28cb34: ldr             x0, [PP, #0x52b0]  ; [pp+0x52b0] Obj!TextAlign@482301
    // 0x28cb38: StoreField: r1->field_1b = r0
    //     0x28cb38: stur            w0, [x1, #0x1b]
    // 0x28cb3c: r0 = Instance_TextOverflow
    //     0x28cb3c: add             x0, PP, #0xc, lsl #12  ; [pp+0xc898] Obj!TextOverflow@481201
    //     0x28cb40: ldr             x0, [x0, #0x898]
    // 0x28cb44: StoreField: r1->field_2b = r0
    //     0x28cb44: stur            w0, [x1, #0x2b]
    // 0x28cb48: r0 = AnimatedDefaultTextStyle()
    //     0x28cb48: bl              #0x28da04  ; AllocateAnimatedDefaultTextStyleStub -> AnimatedDefaultTextStyle (size=0x38)
    // 0x28cb4c: mov             x1, x0
    // 0x28cb50: ldur            x0, [fp, #-0x50]
    // 0x28cb54: stur            x1, [fp, #-0x48]
    // 0x28cb58: StoreField: r1->field_17 = r0
    //     0x28cb58: stur            w0, [x1, #0x17]
    // 0x28cb5c: ldur            x0, [fp, #-0x40]
    // 0x28cb60: StoreField: r1->field_1b = r0
    //     0x28cb60: stur            w0, [x1, #0x1b]
    // 0x28cb64: r0 = true
    //     0x28cb64: add             x0, NULL, #0x20  ; true
    // 0x28cb68: StoreField: r1->field_23 = r0
    //     0x28cb68: stur            w0, [x1, #0x23]
    // 0x28cb6c: r0 = Instance_TextOverflow
    //     0x28cb6c: add             x0, PP, #0xd, lsl #12  ; [pp+0xdb00] Obj!TextOverflow@481221
    //     0x28cb70: ldr             x0, [x0, #0xb00]
    // 0x28cb74: StoreField: r1->field_27 = r0
    //     0x28cb74: stur            w0, [x1, #0x27]
    // 0x28cb78: r0 = Instance_TextWidthBasis
    //     0x28cb78: add             x0, PP, #0xc, lsl #12  ; [pp+0xc050] Obj!TextWidthBasis@4811e1
    //     0x28cb7c: ldr             x0, [x0, #0x50]
    // 0x28cb80: StoreField: r1->field_2f = r0
    //     0x28cb80: stur            w0, [x1, #0x2f]
    // 0x28cb84: r0 = Instance_Cubic
    //     0x28cb84: ldr             x0, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x28cb88: StoreField: r1->field_b = r0
    //     0x28cb88: stur            w0, [x1, #0xb]
    // 0x28cb8c: r2 = Instance_Duration
    //     0x28cb8c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b50] Obj!Duration@482ca1
    //     0x28cb90: ldr             x2, [x2, #0xb50]
    // 0x28cb94: StoreField: r1->field_f = r2
    //     0x28cb94: stur            w2, [x1, #0xf]
    // 0x28cb98: r0 = AnimatedOpacity()
    //     0x28cb98: bl              #0x28d9d8  ; AllocateAnimatedOpacityStub -> AnimatedOpacity (size=0x28)
    // 0x28cb9c: mov             x1, x0
    // 0x28cba0: ldur            x0, [fp, #-0x48]
    // 0x28cba4: stur            x1, [fp, #-0x40]
    // 0x28cba8: StoreField: r1->field_17 = r0
    //     0x28cba8: stur            w0, [x1, #0x17]
    // 0x28cbac: ldur            d0, [fp, #-0x60]
    // 0x28cbb0: StoreField: r1->field_1b = d0
    //     0x28cbb0: stur            d0, [x1, #0x1b]
    // 0x28cbb4: r0 = false
    //     0x28cbb4: add             x0, NULL, #0x30  ; false
    // 0x28cbb8: StoreField: r1->field_23 = r0
    //     0x28cbb8: stur            w0, [x1, #0x23]
    // 0x28cbbc: r2 = Instance_Cubic
    //     0x28cbbc: ldr             x2, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x28cbc0: StoreField: r1->field_b = r2
    //     0x28cbc0: stur            w2, [x1, #0xb]
    // 0x28cbc4: r2 = Instance_Duration
    //     0x28cbc4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b50] Obj!Duration@482ca1
    //     0x28cbc8: ldr             x2, [x2, #0xb50]
    // 0x28cbcc: StoreField: r1->field_f = r2
    //     0x28cbcc: stur            w2, [x1, #0xf]
    // 0x28cbd0: r0 = _Shaker()
    //     0x28cbd0: bl              #0x28d9cc  ; Allocate_ShakerStub -> _Shaker (size=0x14)
    // 0x28cbd4: mov             x1, x0
    // 0x28cbd8: ldur            x0, [fp, #-0x40]
    // 0x28cbdc: StoreField: r1->field_f = r0
    //     0x28cbdc: stur            w0, [x1, #0xf]
    // 0x28cbe0: ldur            x0, [fp, #-0x28]
    // 0x28cbe4: StoreField: r1->field_b = r0
    //     0x28cbe4: stur            w0, [x1, #0xb]
    // 0x28cbe8: ldr             x0, [fp, #0x18]
    // 0x28cbec: stur            x1, [fp, #-0x28]
    // 0x28cbf0: str             x0, [SP]
    // 0x28cbf4: r0 = decoration()
    //     0x28cbf4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cbf8: ldr             x16, [fp, #0x18]
    // 0x28cbfc: str             x16, [SP]
    // 0x28cc00: r0 = decoration()
    //     0x28cc00: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cc04: ldr             x16, [fp, #0x18]
    // 0x28cc08: str             x16, [SP]
    // 0x28cc0c: r0 = decoration()
    //     0x28cc0c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cc10: ldr             x16, [fp, #0x18]
    // 0x28cc14: str             x16, [SP]
    // 0x28cc18: r0 = decoration()
    //     0x28cc18: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cc1c: ldr             x0, [fp, #0x18]
    // 0x28cc20: LoadField: r1 = r0->field_b
    //     0x28cc20: ldur            w1, [x0, #0xb]
    // 0x28cc24: DecompressPointer r1
    //     0x28cc24: add             x1, x1, HEAP, lsl #32
    // 0x28cc28: cmp             w1, NULL
    // 0x28cc2c: b.eq            #0x28d04c
    // 0x28cc30: LoadField: r2 = r1->field_2b
    //     0x28cc30: ldur            w2, [x1, #0x2b]
    // 0x28cc34: DecompressPointer r2
    //     0x28cc34: add             x2, x2, HEAP, lsl #32
    // 0x28cc38: stur            x2, [fp, #-0x40]
    // 0x28cc3c: LoadField: r3 = r1->field_27
    //     0x28cc3c: ldur            w3, [x1, #0x27]
    // 0x28cc40: DecompressPointer r3
    //     0x28cc40: add             x3, x3, HEAP, lsl #32
    // 0x28cc44: tbnz            w3, #4, #0x28cc54
    // 0x28cc48: LoadField: r3 = r1->field_1b
    //     0x28cc48: ldur            w3, [x1, #0x1b]
    // 0x28cc4c: DecompressPointer r3
    //     0x28cc4c: add             x3, x3, HEAP, lsl #32
    // 0x28cc50: tbz             w3, #4, #0x28cc54
    // 0x28cc54: str             x0, [SP]
    // 0x28cc58: r0 = decoration()
    //     0x28cc58: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cc5c: LoadField: r1 = r0->field_57
    //     0x28cc5c: ldur            w1, [x0, #0x57]
    // 0x28cc60: DecompressPointer r1
    //     0x28cc60: add             x1, x1, HEAP, lsl #32
    // 0x28cc64: cmp             w1, NULL
    // 0x28cc68: b.ne            #0x28cc70
    // 0x28cc6c: r1 = false
    //     0x28cc6c: add             x1, NULL, #0x30  ; false
    // 0x28cc70: ldr             x0, [fp, #0x18]
    // 0x28cc74: stur            x1, [fp, #-0x48]
    // 0x28cc78: str             x0, [SP]
    // 0x28cc7c: r0 = decoration()
    //     0x28cc7c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cc80: ldr             x16, [fp, #0x18]
    // 0x28cc84: str             x16, [SP]
    // 0x28cc88: r0 = decoration()
    //     0x28cc88: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cc8c: ldr             x16, [fp, #0x18]
    // 0x28cc90: str             x16, [SP]
    // 0x28cc94: r0 = decoration()
    //     0x28cc94: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cc98: ldr             x0, [fp, #0x18]
    // 0x28cc9c: LoadField: r1 = r0->field_b
    //     0x28cc9c: ldur            w1, [x0, #0xb]
    // 0x28cca0: DecompressPointer r1
    //     0x28cca0: add             x1, x1, HEAP, lsl #32
    // 0x28cca4: cmp             w1, NULL
    // 0x28cca8: b.eq            #0x28d050
    // 0x28ccac: str             x0, [SP]
    // 0x28ccb0: r0 = decoration()
    //     0x28ccb0: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ccb4: ldr             x16, [fp, #0x18]
    // 0x28ccb8: ldur            lr, [fp, #-0x10]
    // 0x28ccbc: stp             lr, x16, [SP]
    // 0x28ccc0: r0 = _getHelperStyle()
    //     0x28ccc0: bl              #0x28d634  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getHelperStyle
    // 0x28ccc4: ldr             x16, [fp, #0x18]
    // 0x28ccc8: str             x16, [SP]
    // 0x28cccc: r0 = decoration()
    //     0x28cccc: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ccd0: ldr             x16, [fp, #0x18]
    // 0x28ccd4: str             x16, [SP]
    // 0x28ccd8: r0 = decoration()
    //     0x28ccd8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ccdc: ldr             x16, [fp, #0x18]
    // 0x28cce0: str             x16, [SP]
    // 0x28cce4: r0 = decoration()
    //     0x28cce4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cce8: ldr             x16, [fp, #0x18]
    // 0x28ccec: ldur            lr, [fp, #-0x10]
    // 0x28ccf0: stp             lr, x16, [SP]
    // 0x28ccf4: r0 = _getErrorStyle()
    //     0x28ccf4: bl              #0x28d160  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getErrorStyle
    // 0x28ccf8: ldr             x16, [fp, #0x18]
    // 0x28ccfc: str             x16, [SP]
    // 0x28cd00: r0 = decoration()
    //     0x28cd00: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cd04: ldr             x16, [fp, #0x18]
    // 0x28cd08: str             x16, [SP]
    // 0x28cd0c: r0 = decoration()
    //     0x28cd0c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cd10: ldr             x16, [fp, #0x18]
    // 0x28cd14: str             x16, [SP]
    // 0x28cd18: r0 = decoration()
    //     0x28cd18: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cd1c: ldr             x16, [fp, #0x10]
    // 0x28cd20: str             x16, [SP]
    // 0x28cd24: r0 = of()
    //     0x28cd24: bl              #0x243f24  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x28cd28: ldr             x16, [fp, #0x18]
    // 0x28cd2c: str             x16, [SP]
    // 0x28cd30: r0 = decoration()
    //     0x28cd30: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cd34: ldr             x16, [fp, #0x18]
    // 0x28cd38: str             x16, [SP]
    // 0x28cd3c: r0 = decoration()
    //     0x28cd3c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cd40: LoadField: r1 = r0->field_5f
    //     0x28cd40: ldur            w1, [x0, #0x5f]
    // 0x28cd44: DecompressPointer r1
    //     0x28cd44: add             x1, x1, HEAP, lsl #32
    // 0x28cd48: cmp             w1, NULL
    // 0x28cd4c: b.eq            #0x28cd54
    // 0x28cd50: tbz             w1, #4, #0x28d00c
    // 0x28cd54: ldur            x1, [fp, #-0x38]
    // 0x28cd58: r0 = LoadClassIdInstr(r1)
    //     0x28cd58: ldur            x0, [x1, #-1]
    //     0x28cd5c: ubfx            x0, x0, #0xc, #0x14
    // 0x28cd60: str             x1, [SP]
    // 0x28cd64: r0 = GDT[cid_x0 + -0x1000]()
    //     0x28cd64: sub             lr, x0, #1, lsl #12
    //     0x28cd68: ldr             lr, [x21, lr, lsl #3]
    //     0x28cd6c: blr             lr
    // 0x28cd70: tbz             w0, #4, #0x28ce34
    // 0x28cd74: ldur            x0, [fp, #-0x20]
    // 0x28cd78: d1 = 0.750000
    //     0x28cd78: fmov            d1, #0.75000000
    // 0x28cd7c: d1 = 0.750000
    //     0x28cd7c: fmov            d1, #0.75000000
    // 0x28cd80: d0 = 4.000000
    //     0x28cd80: fmov            d0, #4.00000000
    // 0x28cd84: d0 = 4.000000
    //     0x28cd84: fmov            d0, #4.00000000
    // 0x28cd88: LoadField: r1 = r0->field_1f
    //     0x28cd88: ldur            w1, [x0, #0x1f]
    // 0x28cd8c: DecompressPointer r1
    //     0x28cd8c: add             x1, x1, HEAP, lsl #32
    // 0x28cd90: cmp             w1, NULL
    // 0x28cd94: b.eq            #0x28d054
    // 0x28cd98: LoadField: d2 = r1->field_7
    //     0x28cd98: ldur            d2, [x1, #7]
    // 0x28cd9c: fmul            d3, d1, d2
    // 0x28cda0: fadd            d1, d0, d3
    // 0x28cda4: stur            d1, [fp, #-0x60]
    // 0x28cda8: ldr             x16, [fp, #0x10]
    // 0x28cdac: str             x16, [SP]
    // 0x28cdb0: r0 = textScalerOf()
    //     0x28cdb0: bl              #0x28d0bc  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::textScalerOf
    // 0x28cdb4: LoadField: d0 = r0->field_7
    //     0x28cdb4: ldur            d0, [x0, #7]
    // 0x28cdb8: ldur            d1, [fp, #-0x60]
    // 0x28cdbc: fmul            d2, d1, d0
    // 0x28cdc0: stur            d2, [fp, #-0x68]
    // 0x28cdc4: ldr             x16, [fp, #0x18]
    // 0x28cdc8: str             x16, [SP]
    // 0x28cdcc: r0 = decoration()
    //     0x28cdcc: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cdd0: LoadField: r1 = r0->field_9f
    //     0x28cdd0: ldur            w1, [x0, #0x9f]
    // 0x28cdd4: DecompressPointer r1
    //     0x28cdd4: add             x1, x1, HEAP, lsl #32
    // 0x28cdd8: cmp             w1, NULL
    // 0x28cddc: b.ne            #0x28cde8
    // 0x28cde0: ldur            x0, [fp, #-0x48]
    // 0x28cde4: b               #0x28ce10
    // 0x28cde8: tbnz            w1, #4, #0x28ce0c
    // 0x28cdec: ldur            x0, [fp, #-0x48]
    // 0x28cdf0: tbnz            w0, #4, #0x28ce00
    // 0x28cdf4: r0 = Instance_EdgeInsets
    //     0x28cdf4: add             x0, PP, #0xf, lsl #12  ; [pp+0xfbe8] Obj!EdgeInsets@4731b1
    //     0x28cdf8: ldr             x0, [x0, #0xbe8]
    // 0x28cdfc: b               #0x28ce28
    // 0x28ce00: r0 = Instance_EdgeInsets
    //     0x28ce00: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b58] Obj!EdgeInsets@473181
    //     0x28ce04: ldr             x0, [x0, #0xb58]
    // 0x28ce08: b               #0x28ce28
    // 0x28ce0c: ldur            x0, [fp, #-0x48]
    // 0x28ce10: tbnz            w0, #4, #0x28ce20
    // 0x28ce14: r0 = Instance_EdgeInsets
    //     0x28ce14: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b60] Obj!EdgeInsets@473151
    //     0x28ce18: ldr             x0, [x0, #0xb60]
    // 0x28ce1c: b               #0x28ce28
    // 0x28ce20: r0 = Instance_EdgeInsets
    //     0x28ce20: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b68] Obj!EdgeInsets@473121
    //     0x28ce24: ldr             x0, [x0, #0xb68]
    // 0x28ce28: mov             x8, x0
    // 0x28ce2c: ldur            d0, [fp, #-0x68]
    // 0x28ce30: b               #0x28ce5c
    // 0x28ce34: ldur            x0, [fp, #-0x48]
    // 0x28ce38: tbnz            w0, #4, #0x28ce48
    // 0x28ce3c: r0 = Instance_EdgeInsets
    //     0x28ce3c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b70] Obj!EdgeInsets@4730f1
    //     0x28ce40: ldr             x0, [x0, #0xb70]
    // 0x28ce44: b               #0x28ce50
    // 0x28ce48: r0 = Instance_EdgeInsets
    //     0x28ce48: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b78] Obj!EdgeInsets@4730c1
    //     0x28ce4c: ldr             x0, [x0, #0xb78]
    // 0x28ce50: mov             x8, x0
    // 0x28ce54: d0 = 0.000000
    //     0x28ce54: eor             v0.16b, v0.16b, v0.16b
    // 0x28ce58: d0 = 0.000000
    //     0x28ce58: eor             v0.16b, v0.16b, v0.16b
    // 0x28ce5c: ldr             x1, [fp, #0x18]
    // 0x28ce60: ldur            x7, [fp, #-8]
    // 0x28ce64: ldur            x6, [fp, #-0x18]
    // 0x28ce68: ldur            x5, [fp, #-0x30]
    // 0x28ce6c: ldur            x4, [fp, #-0x58]
    // 0x28ce70: ldur            x3, [fp, #-0x28]
    // 0x28ce74: ldur            x2, [fp, #-0x40]
    // 0x28ce78: ldur            x0, [fp, #-0x38]
    // 0x28ce7c: stur            x8, [fp, #-0x10]
    // 0x28ce80: stur            d0, [fp, #-0x60]
    // 0x28ce84: str             x1, [SP]
    // 0x28ce88: r0 = decoration()
    //     0x28ce88: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ce8c: ldr             x16, [fp, #0x18]
    // 0x28ce90: str             x16, [SP]
    // 0x28ce94: r0 = decoration()
    //     0x28ce94: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ce98: LoadField: r1 = r0->field_53
    //     0x28ce98: ldur            w1, [x0, #0x53]
    // 0x28ce9c: DecompressPointer r1
    //     0x28ce9c: add             x1, x1, HEAP, lsl #32
    // 0x28cea0: cmp             w1, NULL
    // 0x28cea4: b.eq            #0x28d058
    // 0x28cea8: ldr             x0, [fp, #0x18]
    // 0x28ceac: LoadField: r1 = r0->field_1f
    //     0x28ceac: ldur            w1, [x0, #0x1f]
    // 0x28ceb0: DecompressPointer r1
    //     0x28ceb0: add             x1, x1, HEAP, lsl #32
    // 0x28ceb4: str             x1, [SP]
    // 0x28ceb8: r0 = value()
    //     0x28ceb8: bl              #0x3a8e50  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::value
    // 0x28cebc: stur            x0, [fp, #-0x20]
    // 0x28cec0: ldr             x16, [fp, #0x18]
    // 0x28cec4: str             x16, [SP]
    // 0x28cec8: r0 = decoration()
    //     0x28cec8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cecc: ldr             x16, [fp, #0x18]
    // 0x28ced0: str             x16, [SP]
    // 0x28ced4: r0 = decoration()
    //     0x28ced4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ced8: LoadField: r1 = r0->field_57
    //     0x28ced8: ldur            w1, [x0, #0x57]
    // 0x28cedc: DecompressPointer r1
    //     0x28cedc: add             x1, x1, HEAP, lsl #32
    // 0x28cee0: ldur            x0, [fp, #-8]
    // 0x28cee4: stur            x1, [fp, #-0x50]
    // 0x28cee8: LoadField: r2 = r0->field_2f
    //     0x28cee8: ldur            w2, [x0, #0x2f]
    // 0x28ceec: DecompressPointer r2
    //     0x28ceec: add             x2, x2, HEAP, lsl #32
    // 0x28cef0: stur            x2, [fp, #-0x48]
    // 0x28cef4: r0 = _Decoration()
    //     0x28cef4: bl              #0x28d0b0  ; Allocate_DecorationStub -> _Decoration (size=0x64)
    // 0x28cef8: mov             x1, x0
    // 0x28cefc: ldur            x0, [fp, #-0x10]
    // 0x28cf00: stur            x1, [fp, #-8]
    // 0x28cf04: StoreField: r1->field_7 = r0
    //     0x28cf04: stur            w0, [x1, #7]
    // 0x28cf08: r0 = false
    //     0x28cf08: add             x0, NULL, #0x30  ; false
    // 0x28cf0c: StoreField: r1->field_b = r0
    //     0x28cf0c: stur            w0, [x1, #0xb]
    // 0x28cf10: ldur            d0, [fp, #-0x60]
    // 0x28cf14: StoreField: r1->field_f = d0
    //     0x28cf14: stur            d0, [x1, #0xf]
    // 0x28cf18: ldur            x2, [fp, #-0x20]
    // 0x28cf1c: LoadField: d0 = r2->field_7
    //     0x28cf1c: ldur            d0, [x2, #7]
    // 0x28cf20: StoreField: r1->field_17 = d0
    //     0x28cf20: stur            d0, [x1, #0x17]
    // 0x28cf24: r2 = Instance_FloatingLabelAlignment
    //     0x28cf24: add             x2, PP, #0xa, lsl #12  ; [pp+0xad68] Obj!FloatingLabelAlignment@473731
    //     0x28cf28: ldr             x2, [x2, #0xd68]
    // 0x28cf2c: StoreField: r1->field_1f = r2
    //     0x28cf2c: stur            w2, [x1, #0x1f]
    // 0x28cf30: ldur            x2, [fp, #-0x38]
    // 0x28cf34: StoreField: r1->field_23 = r2
    //     0x28cf34: stur            w2, [x1, #0x23]
    // 0x28cf38: ldur            x2, [fp, #-0x30]
    // 0x28cf3c: StoreField: r1->field_27 = r2
    //     0x28cf3c: stur            w2, [x1, #0x27]
    // 0x28cf40: StoreField: r1->field_2b = r0
    //     0x28cf40: stur            w0, [x1, #0x2b]
    // 0x28cf44: ldur            x2, [fp, #-0x50]
    // 0x28cf48: StoreField: r1->field_2f = r2
    //     0x28cf48: stur            w2, [x1, #0x2f]
    // 0x28cf4c: ldur            x2, [fp, #-0x48]
    // 0x28cf50: StoreField: r1->field_33 = r2
    //     0x28cf50: stur            w2, [x1, #0x33]
    // 0x28cf54: ldur            x2, [fp, #-0x40]
    // 0x28cf58: StoreField: r1->field_3b = r2
    //     0x28cf58: stur            w2, [x1, #0x3b]
    // 0x28cf5c: ldur            x2, [fp, #-0x28]
    // 0x28cf60: StoreField: r1->field_3f = r2
    //     0x28cf60: stur            w2, [x1, #0x3f]
    // 0x28cf64: r0 = _HelperError()
    //     0x28cf64: bl              #0x28d0a4  ; Allocate_HelperErrorStub -> _HelperError (size=0x18)
    // 0x28cf68: mov             x1, x0
    // 0x28cf6c: ldur            x0, [fp, #-8]
    // 0x28cf70: StoreField: r0->field_57 = r1
    //     0x28cf70: stur            w1, [x0, #0x57]
    // 0x28cf74: ldur            x1, [fp, #-0x58]
    // 0x28cf78: StoreField: r0->field_5f = r1
    //     0x28cf78: stur            w1, [x0, #0x5f]
    // 0x28cf7c: ldr             x1, [fp, #0x18]
    // 0x28cf80: LoadField: r2 = r1->field_b
    //     0x28cf80: ldur            w2, [x1, #0xb]
    // 0x28cf84: DecompressPointer r2
    //     0x28cf84: add             x2, x2, HEAP, lsl #32
    // 0x28cf88: cmp             w2, NULL
    // 0x28cf8c: b.eq            #0x28d05c
    // 0x28cf90: str             x1, [SP]
    // 0x28cf94: r0 = isFocused()
    //     0x28cf94: bl              #0x28d070  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isFocused
    // 0x28cf98: mov             x2, x0
    // 0x28cf9c: ldr             x0, [fp, #0x18]
    // 0x28cfa0: stur            x2, [fp, #-0x10]
    // 0x28cfa4: LoadField: r1 = r0->field_b
    //     0x28cfa4: ldur            w1, [x0, #0xb]
    // 0x28cfa8: DecompressPointer r1
    //     0x28cfa8: add             x1, x1, HEAP, lsl #32
    // 0x28cfac: cmp             w1, NULL
    // 0x28cfb0: b.eq            #0x28d060
    // 0x28cfb4: r1 = <_DecorationSlot, RenderBox>
    //     0x28cfb4: add             x1, PP, #0x11, lsl #12  ; [pp+0x11b80] TypeArguments: <_DecorationSlot, RenderBox>
    //     0x28cfb8: ldr             x1, [x1, #0xb80]
    // 0x28cfbc: r0 = _Decorator()
    //     0x28cfbc: bl              #0x28d064  ; Allocate_DecoratorStub -> _Decorator (size=0x28)
    // 0x28cfc0: mov             x1, x0
    // 0x28cfc4: ldur            x0, [fp, #-8]
    // 0x28cfc8: stur            x1, [fp, #-0x20]
    // 0x28cfcc: StoreField: r1->field_f = r0
    //     0x28cfcc: stur            w0, [x1, #0xf]
    // 0x28cfd0: r0 = Instance_TextDirection
    //     0x28cfd0: ldr             x0, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x28cfd4: StoreField: r1->field_13 = r0
    //     0x28cfd4: stur            w0, [x1, #0x13]
    // 0x28cfd8: ldur            x0, [fp, #-0x18]
    // 0x28cfdc: StoreField: r1->field_17 = r0
    //     0x28cfdc: stur            w0, [x1, #0x17]
    // 0x28cfe0: ldur            x0, [fp, #-0x10]
    // 0x28cfe4: StoreField: r1->field_1f = r0
    //     0x28cfe4: stur            w0, [x1, #0x1f]
    // 0x28cfe8: r0 = false
    //     0x28cfe8: add             x0, NULL, #0x30  ; false
    // 0x28cfec: StoreField: r1->field_23 = r0
    //     0x28cfec: stur            w0, [x1, #0x23]
    // 0x28cff0: ldr             x16, [fp, #0x18]
    // 0x28cff4: str             x16, [SP]
    // 0x28cff8: r0 = decoration()
    //     0x28cff8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28cffc: ldur            x0, [fp, #-0x20]
    // 0x28d000: LeaveFrame
    //     0x28d000: mov             SP, fp
    //     0x28d004: ldp             fp, lr, [SP], #0x10
    // 0x28d008: ret
    //     0x28d008: ret             
    // 0x28d00c: r0 = "Attempt to execute code removed by Dart AOT compiler (TFA)"
    //     0x28d00c: ldr             x0, [PP, #0x670]  ; [pp+0x670] "Attempt to execute code removed by Dart AOT compiler (TFA)"
    // 0x28d010: r0 = Throw()
    //     0x28d010: bl              #0x3e41c8  ; ThrowStub
    // 0x28d014: brk             #0
    // 0x28d018: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d018: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d01c: b               #0x28c80c
    // 0x28d020: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d020: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d024: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d024: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d028: r9 = _floatingLabelAnimation
    //     0x28d028: add             x9, PP, #0x11, lsl #12  ; [pp+0x11b88] Field <_InputDecoratorState@73019562._floatingLabelAnimation@73019562>: late final (offset: 0x20)
    //     0x28d02c: ldr             x9, [x9, #0xb88]
    // 0x28d030: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28d030: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28d034: r9 = _shakingLabelController
    //     0x28d034: add             x9, PP, #0x11, lsl #12  ; [pp+0x11b90] Field <_InputDecoratorState@73019562._shakingLabelController@73019562>: late final (offset: 0x24)
    //     0x28d038: ldr             x9, [x9, #0xb90]
    // 0x28d03c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28d03c: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28d040: r0 = NullCastErrorSharedWithFPURegs()
    //     0x28d040: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x28d044: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d044: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d048: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d048: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d04c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d04c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d050: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d050: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d054: r0 = NullCastErrorSharedWithFPURegs()
    //     0x28d054: bl              #0x3e62c8  ; NullCastErrorSharedWithFPURegsStub
    // 0x28d058: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d058: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d05c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d05c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d060: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d060: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ isFocused(/* No info */) {
    // ** addr: 0x28d070, size: 0x34
    // 0x28d070: EnterFrame
    //     0x28d070: stp             fp, lr, [SP, #-0x10]!
    //     0x28d074: mov             fp, SP
    // 0x28d078: ldr             x1, [fp, #0x10]
    // 0x28d07c: LoadField: r2 = r1->field_b
    //     0x28d07c: ldur            w2, [x1, #0xb]
    // 0x28d080: DecompressPointer r2
    //     0x28d080: add             x2, x2, HEAP, lsl #32
    // 0x28d084: cmp             w2, NULL
    // 0x28d088: b.eq            #0x28d0a0
    // 0x28d08c: LoadField: r0 = r2->field_1b
    //     0x28d08c: ldur            w0, [x2, #0x1b]
    // 0x28d090: DecompressPointer r0
    //     0x28d090: add             x0, x0, HEAP, lsl #32
    // 0x28d094: LeaveFrame
    //     0x28d094: mov             SP, fp
    //     0x28d098: ldp             fp, lr, [SP], #0x10
    // 0x28d09c: ret
    //     0x28d09c: ret             
    // 0x28d0a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d0a0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getErrorStyle(/* No info */) {
    // ** addr: 0x28d160, size: 0xfc
    // 0x28d160: EnterFrame
    //     0x28d160: stp             fp, lr, [SP, #-0x10]!
    //     0x28d164: mov             fp, SP
    // 0x28d168: AllocStack(0x20)
    //     0x28d168: sub             SP, SP, #0x20
    // 0x28d16c: CheckStackOverflow
    //     0x28d16c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d170: cmp             SP, x16
    //     0x28d174: b.ls            #0x28d254
    // 0x28d178: ldr             x0, [fp, #0x10]
    // 0x28d17c: r1 = LoadClassIdInstr(r0)
    //     0x28d17c: ldur            x1, [x0, #-1]
    //     0x28d180: ubfx            x1, x1, #0xc, #0x14
    // 0x28d184: cmp             x1, #0x4cf
    // 0x28d188: b.ne            #0x28d19c
    // 0x28d18c: LoadField: r1 = r0->field_1f
    //     0x28d18c: ldur            w1, [x0, #0x1f]
    // 0x28d190: DecompressPointer r1
    //     0x28d190: add             x1, x1, HEAP, lsl #32
    // 0x28d194: mov             x0, x1
    // 0x28d198: b               #0x28d200
    // 0x28d19c: cmp             x1, #0x4d0
    // 0x28d1a0: b.ne            #0x28d1d4
    // 0x28d1a4: r1 = 1
    //     0x28d1a4: movz            x1, #0x1
    // 0x28d1a8: r0 = AllocateContext()
    //     0x28d1a8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28d1ac: mov             x1, x0
    // 0x28d1b0: ldr             x0, [fp, #0x10]
    // 0x28d1b4: StoreField: r1->field_f = r0
    //     0x28d1b4: stur            w0, [x1, #0xf]
    // 0x28d1b8: mov             x2, x1
    // 0x28d1bc: r1 = Function '<anonymous closure>':.
    //     0x28d1bc: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb0] AnonymousClosure: (0x28d4cc), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x28d1c0: ldr             x1, [x1, #0xcb0]
    // 0x28d1c4: r0 = AllocateClosure()
    //     0x28d1c4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28d1c8: str             x0, [SP]
    // 0x28d1cc: r0 = resolveWith()
    //     0x28d1cc: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28d1d0: b               #0x28d200
    // 0x28d1d4: r1 = 1
    //     0x28d1d4: movz            x1, #0x1
    // 0x28d1d8: r0 = AllocateContext()
    //     0x28d1d8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28d1dc: mov             x1, x0
    // 0x28d1e0: ldr             x0, [fp, #0x10]
    // 0x28d1e4: StoreField: r1->field_f = r0
    //     0x28d1e4: stur            w0, [x1, #0xf]
    // 0x28d1e8: mov             x2, x1
    // 0x28d1ec: r1 = Function '<anonymous closure>':.
    //     0x28d1ec: add             x1, PP, #0xa, lsl #12  ; [pp+0xacb8] AnonymousClosure: (0x28d3c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x28d1f0: ldr             x1, [x1, #0xcb8]
    // 0x28d1f4: r0 = AllocateClosure()
    //     0x28d1f4: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28d1f8: str             x0, [SP]
    // 0x28d1fc: r0 = resolveWith()
    //     0x28d1fc: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28d200: stur            x0, [fp, #-8]
    // 0x28d204: ldr             x16, [fp, #0x18]
    // 0x28d208: str             x16, [SP]
    // 0x28d20c: r0 = materialState()
    //     0x28d20c: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28d210: r16 = <TextStyle>
    //     0x28d210: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd30] TypeArguments: <TextStyle>
    //     0x28d214: ldr             x16, [x16, #0xd30]
    // 0x28d218: ldur            lr, [fp, #-8]
    // 0x28d21c: stp             lr, x16, [SP, #8]
    // 0x28d220: str             x0, [SP]
    // 0x28d224: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28d224: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28d228: r0 = resolveAs()
    //     0x28d228: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28d22c: stur            x0, [fp, #-8]
    // 0x28d230: ldr             x16, [fp, #0x18]
    // 0x28d234: str             x16, [SP]
    // 0x28d238: r0 = decoration()
    //     0x28d238: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28d23c: ldur            x16, [fp, #-8]
    // 0x28d240: stp             NULL, x16, [SP]
    // 0x28d244: r0 = merge()
    //     0x28d244: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28d248: LeaveFrame
    //     0x28d248: mov             SP, fp
    //     0x28d24c: ldp             fp, lr, [SP], #0x10
    // 0x28d250: ret
    //     0x28d250: ret             
    // 0x28d254: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d254: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d258: b               #0x28d178
  }
  get _ materialState(/* No info */) {
    // ** addr: 0x28d25c, size: 0x138
    // 0x28d25c: EnterFrame
    //     0x28d25c: stp             fp, lr, [SP, #-0x10]!
    //     0x28d260: mov             fp, SP
    // 0x28d264: AllocStack(0x20)
    //     0x28d264: sub             SP, SP, #0x20
    // 0x28d268: CheckStackOverflow
    //     0x28d268: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d26c: cmp             SP, x16
    //     0x28d270: b.ls            #0x28d384
    // 0x28d274: r0 = InitLateStaticField(0x4d8) // [dart:collection] ::_uninitializedIndex
    //     0x28d274: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x28d278: ldr             x0, [x0, #0x9b0]
    //     0x28d27c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x28d280: cmp             w0, w16
    //     0x28d284: b.ne            #0x28d290
    //     0x28d288: ldr             x2, [PP, #0x348]  ; [pp+0x348] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x4d8)
    //     0x28d28c: bl              #0x3e406c
    // 0x28d290: r1 = <MaterialState>
    //     0x28d290: ldr             x1, [PP, #0x2a80]  ; [pp+0x2a80] TypeArguments: <MaterialState>
    // 0x28d294: stur            x0, [fp, #-8]
    // 0x28d298: r0 = _Set()
    //     0x28d298: bl              #0x191298  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x28d29c: mov             x1, x0
    // 0x28d2a0: ldur            x0, [fp, #-8]
    // 0x28d2a4: stur            x1, [fp, #-0x10]
    // 0x28d2a8: StoreField: r1->field_1b = r0
    //     0x28d2a8: stur            w0, [x1, #0x1b]
    // 0x28d2ac: StoreField: r1->field_b = rZR
    //     0x28d2ac: stur            wzr, [x1, #0xb]
    // 0x28d2b0: r0 = InitLateStaticField(0x4dc) // [dart:collection] ::_uninitializedData
    //     0x28d2b0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x28d2b4: ldr             x0, [x0, #0x9b8]
    //     0x28d2b8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x28d2bc: cmp             w0, w16
    //     0x28d2c0: b.ne            #0x28d2cc
    //     0x28d2c4: ldr             x2, [PP, #0x358]  ; [pp+0x358] Field <::._uninitializedData@3220832>: static late final (offset: 0x4dc)
    //     0x28d2c8: bl              #0x3e406c
    // 0x28d2cc: mov             x1, x0
    // 0x28d2d0: ldur            x0, [fp, #-0x10]
    // 0x28d2d4: StoreField: r0->field_f = r1
    //     0x28d2d4: stur            w1, [x0, #0xf]
    // 0x28d2d8: StoreField: r0->field_13 = rZR
    //     0x28d2d8: stur            wzr, [x0, #0x13]
    // 0x28d2dc: StoreField: r0->field_17 = rZR
    //     0x28d2dc: stur            wzr, [x0, #0x17]
    // 0x28d2e0: ldr             x16, [fp, #0x10]
    // 0x28d2e4: str             x16, [SP]
    // 0x28d2e8: r0 = decoration()
    //     0x28d2e8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28d2ec: ldr             x0, [fp, #0x10]
    // 0x28d2f0: LoadField: r1 = r0->field_b
    //     0x28d2f0: ldur            w1, [x0, #0xb]
    // 0x28d2f4: DecompressPointer r1
    //     0x28d2f4: add             x1, x1, HEAP, lsl #32
    // 0x28d2f8: cmp             w1, NULL
    // 0x28d2fc: b.eq            #0x28d38c
    // 0x28d300: LoadField: r2 = r1->field_1b
    //     0x28d300: ldur            w2, [x1, #0x1b]
    // 0x28d304: DecompressPointer r2
    //     0x28d304: add             x2, x2, HEAP, lsl #32
    // 0x28d308: tbnz            w2, #4, #0x28d320
    // 0x28d30c: ldur            x16, [fp, #-0x10]
    // 0x28d310: r30 = Instance_MaterialState
    //     0x28d310: add             lr, PP, #0xa, lsl #12  ; [pp+0xab18] Obj!MaterialState@4817c1
    //     0x28d314: ldr             lr, [lr, #0xb18]
    // 0x28d318: stp             lr, x16, [SP]
    // 0x28d31c: r0 = add()
    //     0x28d31c: bl              #0x3d8c30  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x28d320: ldr             x0, [fp, #0x10]
    // 0x28d324: LoadField: r1 = r0->field_b
    //     0x28d324: ldur            w1, [x0, #0xb]
    // 0x28d328: DecompressPointer r1
    //     0x28d328: add             x1, x1, HEAP, lsl #32
    // 0x28d32c: cmp             w1, NULL
    // 0x28d330: b.eq            #0x28d390
    // 0x28d334: LoadField: r2 = r1->field_1f
    //     0x28d334: ldur            w2, [x1, #0x1f]
    // 0x28d338: DecompressPointer r2
    //     0x28d338: add             x2, x2, HEAP, lsl #32
    // 0x28d33c: tbnz            w2, #4, #0x28d35c
    // 0x28d340: str             x0, [SP]
    // 0x28d344: r0 = decoration()
    //     0x28d344: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28d348: ldur            x16, [fp, #-0x10]
    // 0x28d34c: r30 = Instance_MaterialState
    //     0x28d34c: add             lr, PP, #0xa, lsl #12  ; [pp+0xab10] Obj!MaterialState@481781
    //     0x28d350: ldr             lr, [lr, #0xb10]
    // 0x28d354: stp             lr, x16, [SP]
    // 0x28d358: r0 = add()
    //     0x28d358: bl              #0x3d8c30  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x28d35c: ldr             x16, [fp, #0x10]
    // 0x28d360: str             x16, [SP]
    // 0x28d364: r0 = decoration()
    //     0x28d364: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28d368: ldr             x16, [fp, #0x10]
    // 0x28d36c: str             x16, [SP]
    // 0x28d370: r0 = decoration()
    //     0x28d370: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28d374: ldur            x0, [fp, #-0x10]
    // 0x28d378: LeaveFrame
    //     0x28d378: mov             SP, fp
    //     0x28d37c: ldp             fp, lr, [SP], #0x10
    // 0x28d380: ret
    //     0x28d380: ret             
    // 0x28d384: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d384: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d388: b               #0x28d274
    // 0x28d38c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d38c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28d390: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28d390: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getHelperStyle(/* No info */) {
    // ** addr: 0x28d634, size: 0x120
    // 0x28d634: EnterFrame
    //     0x28d634: stp             fp, lr, [SP, #-0x10]!
    //     0x28d638: mov             fp, SP
    // 0x28d63c: AllocStack(0x20)
    //     0x28d63c: sub             SP, SP, #0x20
    // 0x28d640: CheckStackOverflow
    //     0x28d640: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28d644: cmp             SP, x16
    //     0x28d648: b.ls            #0x28d74c
    // 0x28d64c: ldr             x0, [fp, #0x10]
    // 0x28d650: r1 = LoadClassIdInstr(r0)
    //     0x28d650: ldur            x1, [x0, #-1]
    //     0x28d654: ubfx            x1, x1, #0xc, #0x14
    // 0x28d658: cmp             x1, #0x4cf
    // 0x28d65c: b.ne            #0x28d670
    // 0x28d660: LoadField: r1 = r0->field_f
    //     0x28d660: ldur            w1, [x0, #0xf]
    // 0x28d664: DecompressPointer r1
    //     0x28d664: add             x1, x1, HEAP, lsl #32
    // 0x28d668: mov             x0, x1
    // 0x28d66c: b               #0x28d6d4
    // 0x28d670: cmp             x1, #0x4d0
    // 0x28d674: b.ne            #0x28d6a8
    // 0x28d678: r1 = 1
    //     0x28d678: movz            x1, #0x1
    // 0x28d67c: r0 = AllocateContext()
    //     0x28d67c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28d680: mov             x1, x0
    // 0x28d684: ldr             x0, [fp, #0x10]
    // 0x28d688: StoreField: r1->field_f = r0
    //     0x28d688: stur            w0, [x1, #0xf]
    // 0x28d68c: mov             x2, x1
    // 0x28d690: r1 = Function '<anonymous closure>':.
    //     0x28d690: add             x1, PP, #0xa, lsl #12  ; [pp+0xac90] AnonymousClosure: (0x28d850), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x28d694: ldr             x1, [x1, #0xc90]
    // 0x28d698: r0 = AllocateClosure()
    //     0x28d698: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28d69c: str             x0, [SP]
    // 0x28d6a0: r0 = resolveWith()
    //     0x28d6a0: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28d6a4: b               #0x28d6d4
    // 0x28d6a8: r1 = 1
    //     0x28d6a8: movz            x1, #0x1
    // 0x28d6ac: r0 = AllocateContext()
    //     0x28d6ac: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28d6b0: mov             x1, x0
    // 0x28d6b4: ldr             x0, [fp, #0x10]
    // 0x28d6b8: StoreField: r1->field_f = r0
    //     0x28d6b8: stur            w0, [x1, #0xf]
    // 0x28d6bc: mov             x2, x1
    // 0x28d6c0: r1 = Function '<anonymous closure>':.
    //     0x28d6c0: add             x1, PP, #0xa, lsl #12  ; [pp+0xac98] AnonymousClosure: (0x28d754), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x28d6c4: ldr             x1, [x1, #0xc98]
    // 0x28d6c8: r0 = AllocateClosure()
    //     0x28d6c8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28d6cc: str             x0, [SP]
    // 0x28d6d0: r0 = resolveWith()
    //     0x28d6d0: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28d6d4: stur            x0, [fp, #-8]
    // 0x28d6d8: ldr             x16, [fp, #0x18]
    // 0x28d6dc: str             x16, [SP]
    // 0x28d6e0: r0 = materialState()
    //     0x28d6e0: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28d6e4: r16 = <TextStyle>
    //     0x28d6e4: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd30] TypeArguments: <TextStyle>
    //     0x28d6e8: ldr             x16, [x16, #0xd30]
    // 0x28d6ec: ldur            lr, [fp, #-8]
    // 0x28d6f0: stp             lr, x16, [SP, #8]
    // 0x28d6f4: str             x0, [SP]
    // 0x28d6f8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28d6f8: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28d6fc: r0 = resolveAs()
    //     0x28d6fc: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28d700: stur            x0, [fp, #-8]
    // 0x28d704: ldr             x16, [fp, #0x18]
    // 0x28d708: str             x16, [SP]
    // 0x28d70c: r0 = decoration()
    //     0x28d70c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28d710: ldr             x16, [fp, #0x18]
    // 0x28d714: str             x16, [SP]
    // 0x28d718: r0 = materialState()
    //     0x28d718: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28d71c: r16 = <TextStyle?>
    //     0x28d71c: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd88] TypeArguments: <TextStyle?>
    //     0x28d720: ldr             x16, [x16, #0xd88]
    // 0x28d724: stp             NULL, x16, [SP, #8]
    // 0x28d728: str             x0, [SP]
    // 0x28d72c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28d72c: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28d730: r0 = resolveAs()
    //     0x28d730: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28d734: ldur            x16, [fp, #-8]
    // 0x28d738: stp             NULL, x16, [SP]
    // 0x28d73c: r0 = merge()
    //     0x28d73c: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28d740: LeaveFrame
    //     0x28d740: mov             SP, fp
    //     0x28d744: ldp             fp, lr, [SP], #0x10
    // 0x28d748: ret
    //     0x28d748: ret             
    // 0x28d74c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28d74c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28d750: b               #0x28d64c
  }
  _ _getFloatingLabelStyle(/* No info */) {
    // ** addr: 0x28da30, size: 0x1ec
    // 0x28da30: EnterFrame
    //     0x28da30: stp             fp, lr, [SP, #-0x10]!
    //     0x28da34: mov             fp, SP
    // 0x28da38: AllocStack(0x20)
    //     0x28da38: sub             SP, SP, #0x20
    // 0x28da3c: CheckStackOverflow
    //     0x28da3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28da40: cmp             SP, x16
    //     0x28da44: b.ls            #0x28dc0c
    // 0x28da48: ldr             x0, [fp, #0x10]
    // 0x28da4c: r1 = LoadClassIdInstr(r0)
    //     0x28da4c: ldur            x1, [x0, #-1]
    //     0x28da50: ubfx            x1, x1, #0xc, #0x14
    // 0x28da54: cmp             x1, #0x4cf
    // 0x28da58: b.ne            #0x28da6c
    // 0x28da5c: LoadField: r1 = r0->field_b
    //     0x28da5c: ldur            w1, [x0, #0xb]
    // 0x28da60: DecompressPointer r1
    //     0x28da60: add             x1, x1, HEAP, lsl #32
    // 0x28da64: mov             x2, x1
    // 0x28da68: b               #0x28dad8
    // 0x28da6c: cmp             x1, #0x4d0
    // 0x28da70: b.ne            #0x28daa8
    // 0x28da74: r1 = 1
    //     0x28da74: movz            x1, #0x1
    // 0x28da78: r0 = AllocateContext()
    //     0x28da78: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28da7c: mov             x1, x0
    // 0x28da80: ldr             x0, [fp, #0x10]
    // 0x28da84: StoreField: r1->field_f = r0
    //     0x28da84: stur            w0, [x1, #0xf]
    // 0x28da88: mov             x2, x1
    // 0x28da8c: r1 = Function '<anonymous closure>':.
    //     0x28da8c: add             x1, PP, #0xa, lsl #12  ; [pp+0xac80] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x28da90: ldr             x1, [x1, #0xc80]
    // 0x28da94: r0 = AllocateClosure()
    //     0x28da94: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28da98: str             x0, [SP]
    // 0x28da9c: r0 = resolveWith()
    //     0x28da9c: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28daa0: mov             x2, x0
    // 0x28daa4: b               #0x28dad8
    // 0x28daa8: r1 = 1
    //     0x28daa8: movz            x1, #0x1
    // 0x28daac: r0 = AllocateContext()
    //     0x28daac: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28dab0: mov             x1, x0
    // 0x28dab4: ldr             x0, [fp, #0x10]
    // 0x28dab8: StoreField: r1->field_f = r0
    //     0x28dab8: stur            w0, [x1, #0xf]
    // 0x28dabc: mov             x2, x1
    // 0x28dac0: r1 = Function '<anonymous closure>':.
    //     0x28dac0: add             x1, PP, #0xa, lsl #12  ; [pp+0xac88] AnonymousClosure: (0x28dc1c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x28dac4: ldr             x1, [x1, #0xc88]
    // 0x28dac8: r0 = AllocateClosure()
    //     0x28dac8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28dacc: str             x0, [SP]
    // 0x28dad0: r0 = resolveWith()
    //     0x28dad0: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28dad4: mov             x2, x0
    // 0x28dad8: ldr             x1, [fp, #0x20]
    // 0x28dadc: ldr             x0, [fp, #0x18]
    // 0x28dae0: stur            x2, [fp, #-8]
    // 0x28dae4: str             x1, [SP]
    // 0x28dae8: r0 = materialState()
    //     0x28dae8: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28daec: r16 = <TextStyle>
    //     0x28daec: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd30] TypeArguments: <TextStyle>
    //     0x28daf0: ldr             x16, [x16, #0xd30]
    // 0x28daf4: ldur            lr, [fp, #-8]
    // 0x28daf8: stp             lr, x16, [SP, #8]
    // 0x28dafc: str             x0, [SP]
    // 0x28db00: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28db00: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28db04: r0 = resolveAs()
    //     0x28db04: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28db08: stur            x0, [fp, #-8]
    // 0x28db0c: ldr             x16, [fp, #0x20]
    // 0x28db10: str             x16, [SP]
    // 0x28db14: r0 = decoration()
    //     0x28db14: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28db18: ldr             x16, [fp, #0x20]
    // 0x28db1c: str             x16, [SP]
    // 0x28db20: r0 = decoration()
    //     0x28db20: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28db24: ldr             x16, [fp, #0x20]
    // 0x28db28: str             x16, [SP]
    // 0x28db2c: r0 = decoration()
    //     0x28db2c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28db30: ldr             x16, [fp, #0x20]
    // 0x28db34: str             x16, [SP]
    // 0x28db38: r0 = decoration()
    //     0x28db38: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28db3c: ldur            x16, [fp, #-8]
    // 0x28db40: stp             NULL, x16, [SP]
    // 0x28db44: r0 = merge()
    //     0x28db44: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28db48: stur            x0, [fp, #-8]
    // 0x28db4c: ldr             x16, [fp, #0x20]
    // 0x28db50: str             x16, [SP]
    // 0x28db54: r0 = decoration()
    //     0x28db54: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28db58: ldr             x16, [fp, #0x20]
    // 0x28db5c: str             x16, [SP]
    // 0x28db60: r0 = materialState()
    //     0x28db60: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28db64: r16 = <TextStyle?>
    //     0x28db64: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd88] TypeArguments: <TextStyle?>
    //     0x28db68: ldr             x16, [x16, #0xd88]
    // 0x28db6c: stp             NULL, x16, [SP, #8]
    // 0x28db70: str             x0, [SP]
    // 0x28db74: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28db74: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28db78: r0 = resolveAs()
    //     0x28db78: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28db7c: ldr             x16, [fp, #0x20]
    // 0x28db80: str             x16, [SP]
    // 0x28db84: r0 = materialState()
    //     0x28db84: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28db88: r16 = <TextStyle?>
    //     0x28db88: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd88] TypeArguments: <TextStyle?>
    //     0x28db8c: ldr             x16, [x16, #0xd88]
    // 0x28db90: stp             NULL, x16, [SP, #8]
    // 0x28db94: str             x0, [SP]
    // 0x28db98: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28db98: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28db9c: r0 = resolveAs()
    //     0x28db9c: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28dba0: ldr             x0, [fp, #0x18]
    // 0x28dba4: LoadField: r1 = r0->field_93
    //     0x28dba4: ldur            w1, [x0, #0x93]
    // 0x28dba8: DecompressPointer r1
    //     0x28dba8: add             x1, x1, HEAP, lsl #32
    // 0x28dbac: LoadField: r0 = r1->field_23
    //     0x28dbac: ldur            w0, [x1, #0x23]
    // 0x28dbb0: DecompressPointer r0
    //     0x28dbb0: add             x0, x0, HEAP, lsl #32
    // 0x28dbb4: cmp             w0, NULL
    // 0x28dbb8: b.eq            #0x28dc14
    // 0x28dbbc: ldr             x1, [fp, #0x20]
    // 0x28dbc0: LoadField: r2 = r1->field_b
    //     0x28dbc0: ldur            w2, [x1, #0xb]
    // 0x28dbc4: DecompressPointer r2
    //     0x28dbc4: add             x2, x2, HEAP, lsl #32
    // 0x28dbc8: cmp             w2, NULL
    // 0x28dbcc: b.eq            #0x28dc18
    // 0x28dbd0: stp             NULL, x0, [SP]
    // 0x28dbd4: r0 = merge()
    //     0x28dbd4: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28dbd8: r16 = 1.000000
    //     0x28dbd8: ldr             x16, [PP, #0x5298]  ; [pp+0x5298] 1
    // 0x28dbdc: stp             x16, x0, [SP]
    // 0x28dbe0: r4 = const [0, 0x2, 0x2, 0x1, height, 0x1, null]
    //     0x28dbe0: add             x4, PP, #0x10, lsl #12  ; [pp+0x10748] List(7) [0, 0x2, 0x2, 0x1, "height", 0x1, Null]
    //     0x28dbe4: ldr             x4, [x4, #0x748]
    // 0x28dbe8: r0 = copyWith()
    //     0x28dbe8: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x28dbec: ldur            x16, [fp, #-8]
    // 0x28dbf0: stp             x16, x0, [SP]
    // 0x28dbf4: r0 = merge()
    //     0x28dbf4: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28dbf8: stp             NULL, x0, [SP]
    // 0x28dbfc: r0 = merge()
    //     0x28dbfc: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28dc00: LeaveFrame
    //     0x28dc00: mov             SP, fp
    //     0x28dc04: ldp             fp, lr, [SP], #0x10
    // 0x28dc08: ret
    //     0x28dc08: ret             
    // 0x28dc0c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28dc0c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28dc10: b               #0x28da48
    // 0x28dc14: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28dc14: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28dc18: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28dc18: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _shouldShowLabel(/* No info */) {
    // ** addr: 0x28e254, size: 0x50
    // 0x28e254: EnterFrame
    //     0x28e254: stp             fp, lr, [SP, #-0x10]!
    //     0x28e258: mov             fp, SP
    // 0x28e25c: AllocStack(0x8)
    //     0x28e25c: sub             SP, SP, #8
    // 0x28e260: CheckStackOverflow
    //     0x28e260: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e264: cmp             SP, x16
    //     0x28e268: b.ls            #0x28e29c
    // 0x28e26c: ldr             x16, [fp, #0x10]
    // 0x28e270: str             x16, [SP]
    // 0x28e274: r0 = _hasInlineLabel()
    //     0x28e274: bl              #0x28e2a4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_hasInlineLabel
    // 0x28e278: tbnz            w0, #4, #0x28e284
    // 0x28e27c: r0 = true
    //     0x28e27c: add             x0, NULL, #0x20  ; true
    // 0x28e280: b               #0x28e290
    // 0x28e284: ldr             x16, [fp, #0x10]
    // 0x28e288: str             x16, [SP]
    // 0x28e28c: r0 = _floatingLabelEnabled()
    //     0x28e28c: bl              #0x26819c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_floatingLabelEnabled
    // 0x28e290: LeaveFrame
    //     0x28e290: mov             SP, fp
    //     0x28e294: ldp             fp, lr, [SP], #0x10
    // 0x28e298: ret
    //     0x28e298: ret             
    // 0x28e29c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e29c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e2a0: b               #0x28e26c
  }
  get _ _hasInlineLabel(/* No info */) {
    // ** addr: 0x28e2a4, size: 0xb4
    // 0x28e2a4: EnterFrame
    //     0x28e2a4: stp             fp, lr, [SP, #-0x10]!
    //     0x28e2a8: mov             fp, SP
    // 0x28e2ac: AllocStack(0x8)
    //     0x28e2ac: sub             SP, SP, #8
    // 0x28e2b0: CheckStackOverflow
    //     0x28e2b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e2b4: cmp             SP, x16
    //     0x28e2b8: b.ls            #0x28e34c
    // 0x28e2bc: ldr             x0, [fp, #0x10]
    // 0x28e2c0: LoadField: r1 = r0->field_b
    //     0x28e2c0: ldur            w1, [x0, #0xb]
    // 0x28e2c4: DecompressPointer r1
    //     0x28e2c4: add             x1, x1, HEAP, lsl #32
    // 0x28e2c8: cmp             w1, NULL
    // 0x28e2cc: b.eq            #0x28e354
    // 0x28e2d0: LoadField: r2 = r1->field_27
    //     0x28e2d0: ldur            w2, [x1, #0x27]
    // 0x28e2d4: DecompressPointer r2
    //     0x28e2d4: add             x2, x2, HEAP, lsl #32
    // 0x28e2d8: tbnz            w2, #4, #0x28e33c
    // 0x28e2dc: LoadField: r2 = r1->field_1b
    //     0x28e2dc: ldur            w2, [x1, #0x1b]
    // 0x28e2e0: DecompressPointer r2
    //     0x28e2e0: add             x2, x2, HEAP, lsl #32
    // 0x28e2e4: tbz             w2, #4, #0x28e33c
    // 0x28e2e8: str             x0, [SP]
    // 0x28e2ec: r0 = decoration()
    //     0x28e2ec: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e2f0: LoadField: r1 = r0->field_13
    //     0x28e2f0: ldur            w1, [x0, #0x13]
    // 0x28e2f4: DecompressPointer r1
    //     0x28e2f4: add             x1, x1, HEAP, lsl #32
    // 0x28e2f8: cmp             w1, NULL
    // 0x28e2fc: b.eq            #0x28e330
    // 0x28e300: ldr             x16, [fp, #0x10]
    // 0x28e304: str             x16, [SP]
    // 0x28e308: r0 = decoration()
    //     0x28e308: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e30c: LoadField: r1 = r0->field_4f
    //     0x28e30c: ldur            w1, [x0, #0x4f]
    // 0x28e310: DecompressPointer r1
    //     0x28e310: add             x1, x1, HEAP, lsl #32
    // 0x28e314: r16 = Instance_FloatingLabelBehavior
    //     0x28e314: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ba0] Obj!FloatingLabelBehavior@481a21
    //     0x28e318: ldr             x16, [x16, #0xba0]
    // 0x28e31c: cmp             w1, w16
    // 0x28e320: r16 = true
    //     0x28e320: add             x16, NULL, #0x20  ; true
    // 0x28e324: r17 = false
    //     0x28e324: add             x17, NULL, #0x30  ; false
    // 0x28e328: csel            x0, x16, x17, ne
    // 0x28e32c: b               #0x28e340
    // 0x28e330: ldr             x16, [fp, #0x10]
    // 0x28e334: str             x16, [SP]
    // 0x28e338: r0 = decoration()
    //     0x28e338: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e33c: r0 = false
    //     0x28e33c: add             x0, NULL, #0x30  ; false
    // 0x28e340: LeaveFrame
    //     0x28e340: mov             SP, fp
    //     0x28e344: ldp             fp, lr, [SP], #0x10
    // 0x28e348: ret
    //     0x28e348: ret             
    // 0x28e34c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e34c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e350: b               #0x28e2bc
    // 0x28e354: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28e354: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ isHovering(/* No info */) {
    // ** addr: 0x28e364, size: 0x64
    // 0x28e364: EnterFrame
    //     0x28e364: stp             fp, lr, [SP, #-0x10]!
    //     0x28e368: mov             fp, SP
    // 0x28e36c: AllocStack(0x8)
    //     0x28e36c: sub             SP, SP, #8
    // 0x28e370: CheckStackOverflow
    //     0x28e370: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e374: cmp             SP, x16
    //     0x28e378: b.ls            #0x28e3bc
    // 0x28e37c: ldr             x0, [fp, #0x10]
    // 0x28e380: LoadField: r1 = r0->field_b
    //     0x28e380: ldur            w1, [x0, #0xb]
    // 0x28e384: DecompressPointer r1
    //     0x28e384: add             x1, x1, HEAP, lsl #32
    // 0x28e388: cmp             w1, NULL
    // 0x28e38c: b.eq            #0x28e3c4
    // 0x28e390: LoadField: r2 = r1->field_1f
    //     0x28e390: ldur            w2, [x1, #0x1f]
    // 0x28e394: DecompressPointer r2
    //     0x28e394: add             x2, x2, HEAP, lsl #32
    // 0x28e398: tbnz            w2, #4, #0x28e3ac
    // 0x28e39c: str             x0, [SP]
    // 0x28e3a0: r0 = decoration()
    //     0x28e3a0: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e3a4: r0 = true
    //     0x28e3a4: add             x0, NULL, #0x20  ; true
    // 0x28e3a8: b               #0x28e3b0
    // 0x28e3ac: r0 = false
    //     0x28e3ac: add             x0, NULL, #0x30  ; false
    // 0x28e3b0: LeaveFrame
    //     0x28e3b0: mov             SP, fp
    //     0x28e3b4: ldp             fp, lr, [SP], #0x10
    // 0x28e3b8: ret
    //     0x28e3b8: ret             
    // 0x28e3bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e3bc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e3c0: b               #0x28e37c
    // 0x28e3c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28e3c4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getHoverColor(/* No info */) {
    // ** addr: 0x28e3c8, size: 0xc8
    // 0x28e3c8: EnterFrame
    //     0x28e3c8: stp             fp, lr, [SP, #-0x10]!
    //     0x28e3cc: mov             fp, SP
    // 0x28e3d0: AllocStack(0x8)
    //     0x28e3d0: sub             SP, SP, #8
    // 0x28e3d4: CheckStackOverflow
    //     0x28e3d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e3d8: cmp             SP, x16
    //     0x28e3dc: b.ls            #0x28e480
    // 0x28e3e0: ldr             x16, [fp, #0x18]
    // 0x28e3e4: str             x16, [SP]
    // 0x28e3e8: r0 = decoration()
    //     0x28e3e8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e3ec: LoadField: r1 = r0->field_9f
    //     0x28e3ec: ldur            w1, [x0, #0x9f]
    // 0x28e3f0: DecompressPointer r1
    //     0x28e3f0: add             x1, x1, HEAP, lsl #32
    // 0x28e3f4: cmp             w1, NULL
    // 0x28e3f8: b.eq            #0x28e43c
    // 0x28e3fc: ldr             x16, [fp, #0x18]
    // 0x28e400: str             x16, [SP]
    // 0x28e404: r0 = decoration()
    //     0x28e404: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e408: LoadField: r1 = r0->field_9f
    //     0x28e408: ldur            w1, [x0, #0x9f]
    // 0x28e40c: DecompressPointer r1
    //     0x28e40c: add             x1, x1, HEAP, lsl #32
    // 0x28e410: cmp             w1, NULL
    // 0x28e414: b.eq            #0x28e488
    // 0x28e418: tbnz            w1, #4, #0x28e43c
    // 0x28e41c: ldr             x0, [fp, #0x18]
    // 0x28e420: LoadField: r1 = r0->field_b
    //     0x28e420: ldur            w1, [x0, #0xb]
    // 0x28e424: DecompressPointer r1
    //     0x28e424: add             x1, x1, HEAP, lsl #32
    // 0x28e428: cmp             w1, NULL
    // 0x28e42c: b.eq            #0x28e48c
    // 0x28e430: LoadField: r2 = r1->field_1b
    //     0x28e430: ldur            w2, [x1, #0x1b]
    // 0x28e434: DecompressPointer r2
    //     0x28e434: add             x2, x2, HEAP, lsl #32
    // 0x28e438: tbnz            w2, #4, #0x28e450
    // 0x28e43c: r0 = Instance_Color
    //     0x28e43c: add             x0, PP, #0xa, lsl #12  ; [pp+0xad48] Obj!Color@47cc81
    //     0x28e440: ldr             x0, [x0, #0xd48]
    // 0x28e444: LeaveFrame
    //     0x28e444: mov             SP, fp
    //     0x28e448: ldp             fp, lr, [SP], #0x10
    // 0x28e44c: ret
    //     0x28e44c: ret             
    // 0x28e450: ldr             x1, [fp, #0x10]
    // 0x28e454: str             x0, [SP]
    // 0x28e458: r0 = decoration()
    //     0x28e458: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e45c: ldr             x16, [fp, #0x18]
    // 0x28e460: str             x16, [SP]
    // 0x28e464: r0 = decoration()
    //     0x28e464: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e468: ldr             x1, [fp, #0x10]
    // 0x28e46c: LoadField: r0 = r1->field_5b
    //     0x28e46c: ldur            w0, [x1, #0x5b]
    // 0x28e470: DecompressPointer r0
    //     0x28e470: add             x0, x0, HEAP, lsl #32
    // 0x28e474: LeaveFrame
    //     0x28e474: mov             SP, fp
    //     0x28e478: ldp             fp, lr, [SP], #0x10
    // 0x28e47c: ret
    //     0x28e47c: ret             
    // 0x28e480: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e480: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e484: b               #0x28e3e0
    // 0x28e488: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28e488: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28e48c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28e48c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getFillColor(/* No info */) {
    // ** addr: 0x28e490, size: 0x190
    // 0x28e490: EnterFrame
    //     0x28e490: stp             fp, lr, [SP, #-0x10]!
    //     0x28e494: mov             fp, SP
    // 0x28e498: AllocStack(0x20)
    //     0x28e498: sub             SP, SP, #0x20
    // 0x28e49c: CheckStackOverflow
    //     0x28e49c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e4a0: cmp             SP, x16
    //     0x28e4a4: b.ls            #0x28e614
    // 0x28e4a8: ldr             x16, [fp, #0x18]
    // 0x28e4ac: str             x16, [SP]
    // 0x28e4b0: r0 = decoration()
    //     0x28e4b0: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e4b4: LoadField: r1 = r0->field_9f
    //     0x28e4b4: ldur            w1, [x0, #0x9f]
    // 0x28e4b8: DecompressPointer r1
    //     0x28e4b8: add             x1, x1, HEAP, lsl #32
    // 0x28e4bc: r16 = true
    //     0x28e4bc: add             x16, NULL, #0x20  ; true
    // 0x28e4c0: cmp             w1, w16
    // 0x28e4c4: b.eq            #0x28e4dc
    // 0x28e4c8: r0 = Instance_Color
    //     0x28e4c8: add             x0, PP, #0xa, lsl #12  ; [pp+0xad48] Obj!Color@47cc81
    //     0x28e4cc: ldr             x0, [x0, #0xd48]
    // 0x28e4d0: LeaveFrame
    //     0x28e4d0: mov             SP, fp
    //     0x28e4d4: ldp             fp, lr, [SP], #0x10
    // 0x28e4d8: ret
    //     0x28e4d8: ret             
    // 0x28e4dc: ldr             x16, [fp, #0x18]
    // 0x28e4e0: str             x16, [SP]
    // 0x28e4e4: r0 = decoration()
    //     0x28e4e4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e4e8: LoadField: r1 = r0->field_a3
    //     0x28e4e8: ldur            w1, [x0, #0xa3]
    // 0x28e4ec: DecompressPointer r1
    //     0x28e4ec: add             x1, x1, HEAP, lsl #32
    // 0x28e4f0: cmp             w1, NULL
    // 0x28e4f4: b.eq            #0x28e554
    // 0x28e4f8: ldr             x16, [fp, #0x18]
    // 0x28e4fc: str             x16, [SP]
    // 0x28e500: r0 = decoration()
    //     0x28e500: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e504: LoadField: r1 = r0->field_a3
    //     0x28e504: ldur            w1, [x0, #0xa3]
    // 0x28e508: DecompressPointer r1
    //     0x28e508: add             x1, x1, HEAP, lsl #32
    // 0x28e50c: stur            x1, [fp, #-8]
    // 0x28e510: cmp             w1, NULL
    // 0x28e514: b.eq            #0x28e61c
    // 0x28e518: ldr             x16, [fp, #0x18]
    // 0x28e51c: str             x16, [SP]
    // 0x28e520: r0 = materialState()
    //     0x28e520: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28e524: r16 = <Color>
    //     0x28e524: add             x16, PP, #0xc, lsl #12  ; [pp+0xcb00] TypeArguments: <Color>
    //     0x28e528: ldr             x16, [x16, #0xb00]
    // 0x28e52c: ldur            lr, [fp, #-8]
    // 0x28e530: stp             lr, x16, [SP, #8]
    // 0x28e534: str             x0, [SP]
    // 0x28e538: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28e538: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28e53c: r0 = resolveAs()
    //     0x28e53c: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28e540: r0 = Instance_Color
    //     0x28e540: add             x0, PP, #0xa, lsl #12  ; [pp+0xa470] Obj!Color@47c8a1
    //     0x28e544: ldr             x0, [x0, #0x470]
    // 0x28e548: LeaveFrame
    //     0x28e548: mov             SP, fp
    //     0x28e54c: ldp             fp, lr, [SP], #0x10
    // 0x28e550: ret
    //     0x28e550: ret             
    // 0x28e554: ldr             x0, [fp, #0x10]
    // 0x28e558: r1 = LoadClassIdInstr(r0)
    //     0x28e558: ldur            x1, [x0, #-1]
    //     0x28e55c: ubfx            x1, x1, #0xc, #0x14
    // 0x28e560: cmp             x1, #0x4cf
    // 0x28e564: b.ne            #0x28e578
    // 0x28e568: LoadField: r1 = r0->field_57
    //     0x28e568: ldur            w1, [x0, #0x57]
    // 0x28e56c: DecompressPointer r1
    //     0x28e56c: add             x1, x1, HEAP, lsl #32
    // 0x28e570: mov             x0, x1
    // 0x28e574: b               #0x28e5dc
    // 0x28e578: cmp             x1, #0x4d0
    // 0x28e57c: b.ne            #0x28e5b0
    // 0x28e580: r1 = 1
    //     0x28e580: movz            x1, #0x1
    // 0x28e584: r0 = AllocateContext()
    //     0x28e584: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28e588: mov             x1, x0
    // 0x28e58c: ldr             x0, [fp, #0x10]
    // 0x28e590: StoreField: r1->field_f = r0
    //     0x28e590: stur            w0, [x1, #0xf]
    // 0x28e594: mov             x2, x1
    // 0x28e598: r1 = Function '<anonymous closure>':.
    //     0x28e598: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf0] AnonymousClosure: (0x28e828), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x28e59c: ldr             x1, [x1, #0xcf0]
    // 0x28e5a0: r0 = AllocateClosure()
    //     0x28e5a0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28e5a4: str             x0, [SP]
    // 0x28e5a8: r0 = resolveWith()
    //     0x28e5a8: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x28e5ac: b               #0x28e5dc
    // 0x28e5b0: r1 = 1
    //     0x28e5b0: movz            x1, #0x1
    // 0x28e5b4: r0 = AllocateContext()
    //     0x28e5b4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28e5b8: mov             x1, x0
    // 0x28e5bc: ldr             x0, [fp, #0x10]
    // 0x28e5c0: StoreField: r1->field_f = r0
    //     0x28e5c0: stur            w0, [x1, #0xf]
    // 0x28e5c4: mov             x2, x1
    // 0x28e5c8: r1 = Function '<anonymous closure>':.
    //     0x28e5c8: add             x1, PP, #0xa, lsl #12  ; [pp+0xacf8] AnonymousClosure: (0x28e710), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x28e5cc: ldr             x1, [x1, #0xcf8]
    // 0x28e5d0: r0 = AllocateClosure()
    //     0x28e5d0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28e5d4: str             x0, [SP]
    // 0x28e5d8: r0 = resolveWith()
    //     0x28e5d8: bl              #0x28e620  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x28e5dc: stur            x0, [fp, #-8]
    // 0x28e5e0: ldr             x16, [fp, #0x18]
    // 0x28e5e4: str             x16, [SP]
    // 0x28e5e8: r0 = materialState()
    //     0x28e5e8: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28e5ec: r16 = <Color>
    //     0x28e5ec: add             x16, PP, #0xc, lsl #12  ; [pp+0xcb00] TypeArguments: <Color>
    //     0x28e5f0: ldr             x16, [x16, #0xb00]
    // 0x28e5f4: ldur            lr, [fp, #-8]
    // 0x28e5f8: stp             lr, x16, [SP, #8]
    // 0x28e5fc: str             x0, [SP]
    // 0x28e600: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28e600: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28e604: r0 = resolveAs()
    //     0x28e604: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28e608: LeaveFrame
    //     0x28e608: mov             SP, fp
    //     0x28e60c: ldp             fp, lr, [SP], #0x10
    // 0x28e610: ret
    //     0x28e610: ret             
    // 0x28e614: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28e614: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28e618: b               #0x28e4a8
    // 0x28e61c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28e61c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getDefaultBorder(/* No info */) {
    // ** addr: 0x28e938, size: 0x374
    // 0x28e938: EnterFrame
    //     0x28e938: stp             fp, lr, [SP, #-0x10]!
    //     0x28e93c: mov             fp, SP
    // 0x28e940: AllocStack(0x30)
    //     0x28e940: sub             SP, SP, #0x30
    // 0x28e944: CheckStackOverflow
    //     0x28e944: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28e948: cmp             SP, x16
    //     0x28e94c: b.ls            #0x28ec9c
    // 0x28e950: ldr             x16, [fp, #0x20]
    // 0x28e954: str             x16, [SP]
    // 0x28e958: r0 = decoration()
    //     0x28e958: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e95c: LoadField: r1 = r0->field_c3
    //     0x28e95c: ldur            w1, [x0, #0xc3]
    // 0x28e960: DecompressPointer r1
    //     0x28e960: add             x1, x1, HEAP, lsl #32
    // 0x28e964: stur            x1, [fp, #-8]
    // 0x28e968: ldr             x16, [fp, #0x20]
    // 0x28e96c: str             x16, [SP]
    // 0x28e970: r0 = materialState()
    //     0x28e970: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28e974: r16 = <InputBorder?>
    //     0x28e974: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ba8] TypeArguments: <InputBorder?>
    //     0x28e978: ldr             x16, [x16, #0xba8]
    // 0x28e97c: ldur            lr, [fp, #-8]
    // 0x28e980: stp             lr, x16, [SP, #8]
    // 0x28e984: str             x0, [SP]
    // 0x28e988: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28e988: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28e98c: r0 = resolveAs()
    //     0x28e98c: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28e990: cmp             w0, NULL
    // 0x28e994: b.ne            #0x28e9a0
    // 0x28e998: r0 = Instance_UnderlineInputBorder
    //     0x28e998: add             x0, PP, #0x11, lsl #12  ; [pp+0x11bb0] Obj!UnderlineInputBorder@4737f1
    //     0x28e99c: ldr             x0, [x0, #0xbb0]
    // 0x28e9a0: stur            x0, [fp, #-8]
    // 0x28e9a4: ldr             x16, [fp, #0x20]
    // 0x28e9a8: str             x16, [SP]
    // 0x28e9ac: r0 = decoration()
    //     0x28e9ac: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e9b0: ldur            x0, [fp, #-8]
    // 0x28e9b4: LoadField: r1 = r0->field_7
    //     0x28e9b4: ldur            w1, [x0, #7]
    // 0x28e9b8: DecompressPointer r1
    //     0x28e9b8: add             x1, x1, HEAP, lsl #32
    // 0x28e9bc: r16 = Instance_BorderSide
    //     0x28e9bc: add             x16, PP, #0xc, lsl #12  ; [pp+0xca80] Obj!BorderSide@47b201
    //     0x28e9c0: ldr             x16, [x16, #0xa80]
    // 0x28e9c4: stp             x16, x1, [SP]
    // 0x28e9c8: r0 = ==()
    //     0x28e9c8: bl              #0x35bf88  ; [package:flutter/src/painting/borders.dart] BorderSide::==
    // 0x28e9cc: tbnz            w0, #4, #0x28e9e0
    // 0x28e9d0: ldur            x0, [fp, #-8]
    // 0x28e9d4: LeaveFrame
    //     0x28e9d4: mov             SP, fp
    //     0x28e9d8: ldp             fp, lr, [SP], #0x10
    // 0x28e9dc: ret
    //     0x28e9dc: ret             
    // 0x28e9e0: ldr             x0, [fp, #0x18]
    // 0x28e9e4: LoadField: r1 = r0->field_2b
    //     0x28e9e4: ldur            w1, [x0, #0x2b]
    // 0x28e9e8: DecompressPointer r1
    //     0x28e9e8: add             x1, x1, HEAP, lsl #32
    // 0x28e9ec: tbnz            w1, #4, #0x28eb7c
    // 0x28e9f0: ldr             x16, [fp, #0x20]
    // 0x28e9f4: str             x16, [SP]
    // 0x28e9f8: r0 = decoration()
    //     0x28e9f8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28e9fc: LoadField: r1 = r0->field_9f
    //     0x28e9fc: ldur            w1, [x0, #0x9f]
    // 0x28ea00: DecompressPointer r1
    //     0x28ea00: add             x1, x1, HEAP, lsl #32
    // 0x28ea04: cmp             w1, NULL
    // 0x28ea08: b.eq            #0x28eca4
    // 0x28ea0c: tbnz            w1, #4, #0x28eac4
    // 0x28ea10: ldr             x0, [fp, #0x10]
    // 0x28ea14: r1 = LoadClassIdInstr(r0)
    //     0x28ea14: ldur            x1, [x0, #-1]
    //     0x28ea18: ubfx            x1, x1, #0xc, #0x14
    // 0x28ea1c: cmp             x1, #0x4cf
    // 0x28ea20: b.eq            #0x28ea60
    // 0x28ea24: cmp             x1, #0x4d0
    // 0x28ea28: b.ne            #0x28ea60
    // 0x28ea2c: r1 = 1
    //     0x28ea2c: movz            x1, #0x1
    // 0x28ea30: r0 = AllocateContext()
    //     0x28ea30: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28ea34: mov             x1, x0
    // 0x28ea38: ldr             x0, [fp, #0x10]
    // 0x28ea3c: StoreField: r1->field_f = r0
    //     0x28ea3c: stur            w0, [x1, #0xf]
    // 0x28ea40: mov             x2, x1
    // 0x28ea44: r1 = Function '<anonymous closure>':.
    //     0x28ea44: add             x1, PP, #0xa, lsl #12  ; [pp+0xad00] AnonymousClosure: (0x28f7d0), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x28ea48: ldr             x1, [x1, #0xd00]
    // 0x28ea4c: r0 = AllocateClosure()
    //     0x28ea4c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28ea50: str             x0, [SP]
    // 0x28ea54: r0 = resolveWith()
    //     0x28ea54: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x28ea58: mov             x1, x0
    // 0x28ea5c: b               #0x28ea68
    // 0x28ea60: LoadField: r1 = r0->field_5f
    //     0x28ea60: ldur            w1, [x0, #0x5f]
    // 0x28ea64: DecompressPointer r1
    //     0x28ea64: add             x1, x1, HEAP, lsl #32
    // 0x28ea68: ldur            x0, [fp, #-8]
    // 0x28ea6c: stur            x1, [fp, #-0x10]
    // 0x28ea70: ldr             x16, [fp, #0x20]
    // 0x28ea74: str             x16, [SP]
    // 0x28ea78: r0 = materialState()
    //     0x28ea78: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28ea7c: r16 = <BorderSide?>
    //     0x28ea7c: add             x16, PP, #0xe, lsl #12  ; [pp+0xe438] TypeArguments: <BorderSide?>
    //     0x28ea80: ldr             x16, [x16, #0x438]
    // 0x28ea84: ldur            lr, [fp, #-0x10]
    // 0x28ea88: stp             lr, x16, [SP, #8]
    // 0x28ea8c: str             x0, [SP]
    // 0x28ea90: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28ea90: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28ea94: r0 = resolveAs()
    //     0x28ea94: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28ea98: ldur            x1, [fp, #-8]
    // 0x28ea9c: r2 = LoadClassIdInstr(r1)
    //     0x28ea9c: ldur            x2, [x1, #-1]
    //     0x28eaa0: ubfx            x2, x2, #0xc, #0x14
    // 0x28eaa4: stp             x0, x1, [SP]
    // 0x28eaa8: mov             x0, x2
    // 0x28eaac: r0 = GDT[cid_x0 + -0xffe]()
    //     0x28eaac: sub             lr, x0, #0xffe
    //     0x28eab0: ldr             lr, [x21, lr, lsl #3]
    //     0x28eab4: blr             lr
    // 0x28eab8: LeaveFrame
    //     0x28eab8: mov             SP, fp
    //     0x28eabc: ldp             fp, lr, [SP], #0x10
    // 0x28eac0: ret
    //     0x28eac0: ret             
    // 0x28eac4: ldr             x0, [fp, #0x10]
    // 0x28eac8: ldur            x1, [fp, #-8]
    // 0x28eacc: r2 = LoadClassIdInstr(r0)
    //     0x28eacc: ldur            x2, [x0, #-1]
    //     0x28ead0: ubfx            x2, x2, #0xc, #0x14
    // 0x28ead4: cmp             x2, #0x4cf
    // 0x28ead8: b.eq            #0x28eb18
    // 0x28eadc: cmp             x2, #0x4d0
    // 0x28eae0: b.ne            #0x28eb18
    // 0x28eae4: r1 = 1
    //     0x28eae4: movz            x1, #0x1
    // 0x28eae8: r0 = AllocateContext()
    //     0x28eae8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28eaec: mov             x1, x0
    // 0x28eaf0: ldr             x0, [fp, #0x10]
    // 0x28eaf4: StoreField: r1->field_f = r0
    //     0x28eaf4: stur            w0, [x1, #0xf]
    // 0x28eaf8: mov             x2, x1
    // 0x28eafc: r1 = Function '<anonymous closure>':.
    //     0x28eafc: add             x1, PP, #0xa, lsl #12  ; [pp+0xad08] AnonymousClosure: (0x28f254), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x28eb00: ldr             x1, [x1, #0xd08]
    // 0x28eb04: r0 = AllocateClosure()
    //     0x28eb04: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28eb08: str             x0, [SP]
    // 0x28eb0c: r0 = resolveWith()
    //     0x28eb0c: bl              #0x28f1f8  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x28eb10: mov             x1, x0
    // 0x28eb14: b               #0x28eb20
    // 0x28eb18: LoadField: r1 = r0->field_5b
    //     0x28eb18: ldur            w1, [x0, #0x5b]
    // 0x28eb1c: DecompressPointer r1
    //     0x28eb1c: add             x1, x1, HEAP, lsl #32
    // 0x28eb20: ldur            x0, [fp, #-8]
    // 0x28eb24: stur            x1, [fp, #-0x10]
    // 0x28eb28: ldr             x16, [fp, #0x20]
    // 0x28eb2c: str             x16, [SP]
    // 0x28eb30: r0 = materialState()
    //     0x28eb30: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28eb34: r16 = <BorderSide?>
    //     0x28eb34: add             x16, PP, #0xe, lsl #12  ; [pp+0xe438] TypeArguments: <BorderSide?>
    //     0x28eb38: ldr             x16, [x16, #0x438]
    // 0x28eb3c: ldur            lr, [fp, #-0x10]
    // 0x28eb40: stp             lr, x16, [SP, #8]
    // 0x28eb44: str             x0, [SP]
    // 0x28eb48: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28eb48: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28eb4c: r0 = resolveAs()
    //     0x28eb4c: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28eb50: ldur            x1, [fp, #-8]
    // 0x28eb54: r2 = LoadClassIdInstr(r1)
    //     0x28eb54: ldur            x2, [x1, #-1]
    //     0x28eb58: ubfx            x2, x2, #0xc, #0x14
    // 0x28eb5c: stp             x0, x1, [SP]
    // 0x28eb60: mov             x0, x2
    // 0x28eb64: r0 = GDT[cid_x0 + -0xffe]()
    //     0x28eb64: sub             lr, x0, #0xffe
    //     0x28eb68: ldr             lr, [x21, lr, lsl #3]
    //     0x28eb6c: blr             lr
    // 0x28eb70: LeaveFrame
    //     0x28eb70: mov             SP, fp
    //     0x28eb74: ldp             fp, lr, [SP], #0x10
    // 0x28eb78: ret
    //     0x28eb78: ret             
    // 0x28eb7c: ldur            x1, [fp, #-8]
    // 0x28eb80: ldr             x16, [fp, #0x20]
    // 0x28eb84: stp             x0, x16, [SP]
    // 0x28eb88: r0 = _getDefaultM2BorderColor()
    //     0x28eb88: bl              #0x28ecb8  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getDefaultM2BorderColor
    // 0x28eb8c: stur            x0, [fp, #-0x10]
    // 0x28eb90: ldr             x16, [fp, #0x20]
    // 0x28eb94: str             x16, [SP]
    // 0x28eb98: r0 = decoration()
    //     0x28eb98: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28eb9c: LoadField: r1 = r0->field_5f
    //     0x28eb9c: ldur            w1, [x0, #0x5f]
    // 0x28eba0: DecompressPointer r1
    //     0x28eba0: add             x1, x1, HEAP, lsl #32
    // 0x28eba4: cmp             w1, NULL
    // 0x28eba8: b.eq            #0x28ebb0
    // 0x28ebac: tbz             w1, #4, #0x28ebe8
    // 0x28ebb0: ldr             x16, [fp, #0x20]
    // 0x28ebb4: str             x16, [SP]
    // 0x28ebb8: r0 = decoration()
    //     0x28ebb8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ebbc: LoadField: r1 = r0->field_c3
    //     0x28ebbc: ldur            w1, [x0, #0xc3]
    // 0x28ebc0: DecompressPointer r1
    //     0x28ebc0: add             x1, x1, HEAP, lsl #32
    // 0x28ebc4: r0 = LoadClassIdInstr(r1)
    //     0x28ebc4: ldur            x0, [x1, #-1]
    //     0x28ebc8: ubfx            x0, x0, #0xc, #0x14
    // 0x28ebcc: r16 = Instance__NoInputBorder
    //     0x28ebcc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11bb8] Obj!_NoInputBorder@473801
    //     0x28ebd0: ldr             x16, [x16, #0xbb8]
    // 0x28ebd4: stp             x16, x1, [SP]
    // 0x28ebd8: mov             lr, x0
    // 0x28ebdc: ldr             lr, [x21, lr, lsl #3]
    // 0x28ebe0: blr             lr
    // 0x28ebe4: tbnz            w0, #4, #0x28ebf4
    // 0x28ebe8: d0 = 0.000000
    //     0x28ebe8: eor             v0.16b, v0.16b, v0.16b
    // 0x28ebec: d0 = 0.000000
    //     0x28ebec: eor             v0.16b, v0.16b, v0.16b
    // 0x28ebf0: b               #0x28ec34
    // 0x28ebf4: ldr             x0, [fp, #0x20]
    // 0x28ebf8: str             x0, [SP]
    // 0x28ebfc: r0 = decoration()
    //     0x28ebfc: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ec00: ldr             x0, [fp, #0x20]
    // 0x28ec04: LoadField: r1 = r0->field_b
    //     0x28ec04: ldur            w1, [x0, #0xb]
    // 0x28ec08: DecompressPointer r1
    //     0x28ec08: add             x1, x1, HEAP, lsl #32
    // 0x28ec0c: cmp             w1, NULL
    // 0x28ec10: b.eq            #0x28eca8
    // 0x28ec14: LoadField: r0 = r1->field_1b
    //     0x28ec14: ldur            w0, [x1, #0x1b]
    // 0x28ec18: DecompressPointer r0
    //     0x28ec18: add             x0, x0, HEAP, lsl #32
    // 0x28ec1c: tbnz            w0, #4, #0x28ec2c
    // 0x28ec20: d0 = 2.000000
    //     0x28ec20: fmov            d0, #2.00000000
    // 0x28ec24: d0 = 2.000000
    //     0x28ec24: fmov            d0, #2.00000000
    // 0x28ec28: b               #0x28ec34
    // 0x28ec2c: d0 = 1.000000
    //     0x28ec2c: fmov            d0, #1.00000000
    // 0x28ec30: d0 = 1.000000
    //     0x28ec30: fmov            d0, #1.00000000
    // 0x28ec34: ldur            x1, [fp, #-8]
    // 0x28ec38: ldur            x0, [fp, #-0x10]
    // 0x28ec3c: stur            d0, [fp, #-0x18]
    // 0x28ec40: r0 = BorderSide()
    //     0x28ec40: bl              #0x28ecac  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x28ec44: mov             x1, x0
    // 0x28ec48: ldur            x0, [fp, #-0x10]
    // 0x28ec4c: StoreField: r1->field_7 = r0
    //     0x28ec4c: stur            w0, [x1, #7]
    // 0x28ec50: ldur            d0, [fp, #-0x18]
    // 0x28ec54: StoreField: r1->field_b = d0
    //     0x28ec54: stur            d0, [x1, #0xb]
    // 0x28ec58: r0 = Instance_BorderStyle
    //     0x28ec58: add             x0, PP, #0xa, lsl #12  ; [pp+0xad10] Obj!BorderStyle@4812c1
    //     0x28ec5c: ldr             x0, [x0, #0xd10]
    // 0x28ec60: StoreField: r1->field_13 = r0
    //     0x28ec60: stur            w0, [x1, #0x13]
    // 0x28ec64: d0 = -1.000000
    //     0x28ec64: fmov            d0, #-1.00000000
    // 0x28ec68: d0 = -1.000000
    //     0x28ec68: fmov            d0, #-1.00000000
    // 0x28ec6c: StoreField: r1->field_17 = d0
    //     0x28ec6c: stur            d0, [x1, #0x17]
    // 0x28ec70: ldur            x0, [fp, #-8]
    // 0x28ec74: r2 = LoadClassIdInstr(r0)
    //     0x28ec74: ldur            x2, [x0, #-1]
    //     0x28ec78: ubfx            x2, x2, #0xc, #0x14
    // 0x28ec7c: stp             x1, x0, [SP]
    // 0x28ec80: mov             x0, x2
    // 0x28ec84: r0 = GDT[cid_x0 + -0xffe]()
    //     0x28ec84: sub             lr, x0, #0xffe
    //     0x28ec88: ldr             lr, [x21, lr, lsl #3]
    //     0x28ec8c: blr             lr
    // 0x28ec90: LeaveFrame
    //     0x28ec90: mov             SP, fp
    //     0x28ec94: ldp             fp, lr, [SP], #0x10
    // 0x28ec98: ret
    //     0x28ec98: ret             
    // 0x28ec9c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28ec9c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28eca0: b               #0x28e950
    // 0x28eca4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28eca4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28eca8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28eca8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getDefaultM2BorderColor(/* No info */) {
    // ** addr: 0x28ecb8, size: 0x170
    // 0x28ecb8: EnterFrame
    //     0x28ecb8: stp             fp, lr, [SP, #-0x10]!
    //     0x28ecbc: mov             fp, SP
    // 0x28ecc0: AllocStack(0x18)
    //     0x28ecc0: sub             SP, SP, #0x18
    // 0x28ecc4: CheckStackOverflow
    //     0x28ecc4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28ecc8: cmp             SP, x16
    //     0x28eccc: b.ls            #0x28ee18
    // 0x28ecd0: ldr             x16, [fp, #0x18]
    // 0x28ecd4: str             x16, [SP]
    // 0x28ecd8: r0 = decoration()
    //     0x28ecd8: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ecdc: ldr             x16, [fp, #0x18]
    // 0x28ece0: str             x16, [SP]
    // 0x28ece4: r0 = decoration()
    //     0x28ece4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ece8: ldr             x16, [fp, #0x18]
    // 0x28ecec: str             x16, [SP]
    // 0x28ecf0: r0 = decoration()
    //     0x28ecf0: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ecf4: ldr             x0, [fp, #0x18]
    // 0x28ecf8: LoadField: r1 = r0->field_b
    //     0x28ecf8: ldur            w1, [x0, #0xb]
    // 0x28ecfc: DecompressPointer r1
    //     0x28ecfc: add             x1, x1, HEAP, lsl #32
    // 0x28ed00: cmp             w1, NULL
    // 0x28ed04: b.eq            #0x28ee20
    // 0x28ed08: LoadField: r2 = r1->field_1b
    //     0x28ed08: ldur            w2, [x1, #0x1b]
    // 0x28ed0c: DecompressPointer r2
    //     0x28ed0c: add             x2, x2, HEAP, lsl #32
    // 0x28ed10: tbnz            w2, #4, #0x28ed38
    // 0x28ed14: ldr             x1, [fp, #0x10]
    // 0x28ed18: LoadField: r0 = r1->field_3f
    //     0x28ed18: ldur            w0, [x1, #0x3f]
    // 0x28ed1c: DecompressPointer r0
    //     0x28ed1c: add             x0, x0, HEAP, lsl #32
    // 0x28ed20: LoadField: r1 = r0->field_b
    //     0x28ed20: ldur            w1, [x0, #0xb]
    // 0x28ed24: DecompressPointer r1
    //     0x28ed24: add             x1, x1, HEAP, lsl #32
    // 0x28ed28: mov             x0, x1
    // 0x28ed2c: LeaveFrame
    //     0x28ed2c: mov             SP, fp
    //     0x28ed30: ldp             fp, lr, [SP], #0x10
    // 0x28ed34: ret
    //     0x28ed34: ret             
    // 0x28ed38: ldr             x1, [fp, #0x10]
    // 0x28ed3c: str             x0, [SP]
    // 0x28ed40: r0 = decoration()
    //     0x28ed40: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28ed44: LoadField: r1 = r0->field_9f
    //     0x28ed44: ldur            w1, [x0, #0x9f]
    // 0x28ed48: DecompressPointer r1
    //     0x28ed48: add             x1, x1, HEAP, lsl #32
    // 0x28ed4c: cmp             w1, NULL
    // 0x28ed50: b.eq            #0x28ee24
    // 0x28ed54: tbnz            w1, #4, #0x28ed74
    // 0x28ed58: ldr             x0, [fp, #0x10]
    // 0x28ed5c: LoadField: r1 = r0->field_57
    //     0x28ed5c: ldur            w1, [x0, #0x57]
    // 0x28ed60: DecompressPointer r1
    //     0x28ed60: add             x1, x1, HEAP, lsl #32
    // 0x28ed64: mov             x0, x1
    // 0x28ed68: LeaveFrame
    //     0x28ed68: mov             SP, fp
    //     0x28ed6c: ldp             fp, lr, [SP], #0x10
    // 0x28ed70: ret
    //     0x28ed70: ret             
    // 0x28ed74: ldr             x0, [fp, #0x10]
    // 0x28ed78: d0 = 0.380000
    //     0x28ed78: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28ed7c: ldr             d0, [x17, #0xab0]
    // 0x28ed80: d0 = 0.380000
    //     0x28ed80: add             x17, PP, #0xa, lsl #12  ; [pp+0xaab0] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x28ed84: ldr             d0, [x17, #0xab0]
    // 0x28ed88: LoadField: r1 = r0->field_3f
    //     0x28ed88: ldur            w1, [x0, #0x3f]
    // 0x28ed8c: DecompressPointer r1
    //     0x28ed8c: add             x1, x1, HEAP, lsl #32
    // 0x28ed90: LoadField: r2 = r1->field_57
    //     0x28ed90: ldur            w2, [x1, #0x57]
    // 0x28ed94: DecompressPointer r2
    //     0x28ed94: add             x2, x2, HEAP, lsl #32
    // 0x28ed98: str             x2, [SP, #8]
    // 0x28ed9c: str             d0, [SP]
    // 0x28eda0: r0 = withOpacity()
    //     0x28eda0: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x28eda4: stur            x0, [fp, #-8]
    // 0x28eda8: ldr             x16, [fp, #0x18]
    // 0x28edac: str             x16, [SP]
    // 0x28edb0: r0 = isHovering()
    //     0x28edb0: bl              #0x28e364  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isHovering
    // 0x28edb4: tbnz            w0, #4, #0x28ee08
    // 0x28edb8: ldr             x0, [fp, #0x10]
    // 0x28edbc: ldr             x16, [fp, #0x18]
    // 0x28edc0: str             x16, [SP]
    // 0x28edc4: r0 = decoration()
    //     0x28edc4: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28edc8: ldr             x0, [fp, #0x10]
    // 0x28edcc: LoadField: r1 = r0->field_5b
    //     0x28edcc: ldur            w1, [x0, #0x5b]
    // 0x28edd0: DecompressPointer r1
    //     0x28edd0: add             x1, x1, HEAP, lsl #32
    // 0x28edd4: str             x1, [SP, #8]
    // 0x28edd8: d0 = 0.120000
    //     0x28edd8: add             x17, PP, #0xa, lsl #12  ; [pp+0xa468] IMM: double(0.12) from 0x3fbeb851eb851eb8
    //     0x28eddc: ldr             d0, [x17, #0x468]
    // 0x28ede0: d0 = 0.120000
    //     0x28ede0: add             x17, PP, #0xa, lsl #12  ; [pp+0xa468] IMM: double(0.12) from 0x3fbeb851eb851eb8
    //     0x28ede4: ldr             d0, [x17, #0x468]
    // 0x28ede8: str             d0, [SP]
    // 0x28edec: r0 = withOpacity()
    //     0x28edec: bl              #0x21ec38  ; [dart:ui] Color::withOpacity
    // 0x28edf0: ldur            x16, [fp, #-8]
    // 0x28edf4: stp             x16, x0, [SP]
    // 0x28edf8: r0 = alphaBlend()
    //     0x28edf8: bl              #0x28ee28  ; [dart:ui] Color::alphaBlend
    // 0x28edfc: LeaveFrame
    //     0x28edfc: mov             SP, fp
    //     0x28ee00: ldp             fp, lr, [SP], #0x10
    // 0x28ee04: ret
    //     0x28ee04: ret             
    // 0x28ee08: ldur            x0, [fp, #-8]
    // 0x28ee0c: LeaveFrame
    //     0x28ee0c: mov             SP, fp
    //     0x28ee10: ldp             fp, lr, [SP], #0x10
    // 0x28ee14: ret
    //     0x28ee14: ret             
    // 0x28ee18: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28ee18: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28ee1c: b               #0x28ecd0
    // 0x28ee20: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28ee20: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28ee24: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28ee24: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _hasError(/* No info */) {
    // ** addr: 0x28fd4c, size: 0x48
    // 0x28fd4c: EnterFrame
    //     0x28fd4c: stp             fp, lr, [SP, #-0x10]!
    //     0x28fd50: mov             fp, SP
    // 0x28fd54: AllocStack(0x8)
    //     0x28fd54: sub             SP, SP, #8
    // 0x28fd58: CheckStackOverflow
    //     0x28fd58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28fd5c: cmp             SP, x16
    //     0x28fd60: b.ls            #0x28fd8c
    // 0x28fd64: ldr             x16, [fp, #0x10]
    // 0x28fd68: str             x16, [SP]
    // 0x28fd6c: r0 = decoration()
    //     0x28fd6c: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28fd70: ldr             x16, [fp, #0x10]
    // 0x28fd74: str             x16, [SP]
    // 0x28fd78: r0 = decoration()
    //     0x28fd78: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28fd7c: r0 = false
    //     0x28fd7c: add             x0, NULL, #0x30  ; false
    // 0x28fd80: LeaveFrame
    //     0x28fd80: mov             SP, fp
    //     0x28fd84: ldp             fp, lr, [SP], #0x10
    // 0x28fd88: ret
    //     0x28fd88: ret             
    // 0x28fd8c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28fd8c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28fd90: b               #0x28fd64
  }
  _ _getInlineHintStyle(/* No info */) {
    // ** addr: 0x28fd94, size: 0x198
    // 0x28fd94: EnterFrame
    //     0x28fd94: stp             fp, lr, [SP, #-0x10]!
    //     0x28fd98: mov             fp, SP
    // 0x28fd9c: AllocStack(0x20)
    //     0x28fd9c: sub             SP, SP, #0x20
    // 0x28fda0: CheckStackOverflow
    //     0x28fda0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28fda4: cmp             SP, x16
    //     0x28fda8: b.ls            #0x28ff1c
    // 0x28fdac: ldr             x0, [fp, #0x10]
    // 0x28fdb0: r1 = LoadClassIdInstr(r0)
    //     0x28fdb0: ldur            x1, [x0, #-1]
    //     0x28fdb4: ubfx            x1, x1, #0xc, #0x14
    // 0x28fdb8: cmp             x1, #0x4cf
    // 0x28fdbc: b.ne            #0x28fdd0
    // 0x28fdc0: LoadField: r1 = r0->field_17
    //     0x28fdc0: ldur            w1, [x0, #0x17]
    // 0x28fdc4: DecompressPointer r1
    //     0x28fdc4: add             x1, x1, HEAP, lsl #32
    // 0x28fdc8: mov             x2, x1
    // 0x28fdcc: b               #0x28fe3c
    // 0x28fdd0: cmp             x1, #0x4d0
    // 0x28fdd4: b.ne            #0x28fe0c
    // 0x28fdd8: r1 = 1
    //     0x28fdd8: movz            x1, #0x1
    // 0x28fddc: r0 = AllocateContext()
    //     0x28fddc: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28fde0: mov             x1, x0
    // 0x28fde4: ldr             x0, [fp, #0x10]
    // 0x28fde8: StoreField: r1->field_f = r0
    //     0x28fde8: stur            w0, [x1, #0xf]
    // 0x28fdec: mov             x2, x1
    // 0x28fdf0: r1 = Function '<anonymous closure>':.
    //     0x28fdf0: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca0] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x28fdf4: ldr             x1, [x1, #0xca0]
    // 0x28fdf8: r0 = AllocateClosure()
    //     0x28fdf8: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28fdfc: str             x0, [SP]
    // 0x28fe00: r0 = resolveWith()
    //     0x28fe00: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28fe04: mov             x2, x0
    // 0x28fe08: b               #0x28fe3c
    // 0x28fe0c: r1 = 1
    //     0x28fe0c: movz            x1, #0x1
    // 0x28fe10: r0 = AllocateContext()
    //     0x28fe10: bl              #0x3e4e00  ; AllocateContextStub
    // 0x28fe14: mov             x1, x0
    // 0x28fe18: ldr             x0, [fp, #0x10]
    // 0x28fe1c: StoreField: r1->field_f = r0
    //     0x28fe1c: stur            w0, [x1, #0xf]
    // 0x28fe20: mov             x2, x1
    // 0x28fe24: r1 = Function '<anonymous closure>':.
    //     0x28fe24: add             x1, PP, #0xa, lsl #12  ; [pp+0xaca8] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x28fe28: ldr             x1, [x1, #0xca8]
    // 0x28fe2c: r0 = AllocateClosure()
    //     0x28fe2c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x28fe30: str             x0, [SP]
    // 0x28fe34: r0 = resolveWith()
    //     0x28fe34: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x28fe38: mov             x2, x0
    // 0x28fe3c: ldr             x1, [fp, #0x20]
    // 0x28fe40: ldr             x0, [fp, #0x18]
    // 0x28fe44: stur            x2, [fp, #-8]
    // 0x28fe48: str             x1, [SP]
    // 0x28fe4c: r0 = materialState()
    //     0x28fe4c: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28fe50: r16 = <TextStyle>
    //     0x28fe50: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd30] TypeArguments: <TextStyle>
    //     0x28fe54: ldr             x16, [x16, #0xd30]
    // 0x28fe58: ldur            lr, [fp, #-8]
    // 0x28fe5c: stp             lr, x16, [SP, #8]
    // 0x28fe60: str             x0, [SP]
    // 0x28fe64: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28fe64: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28fe68: r0 = resolveAs()
    //     0x28fe68: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28fe6c: stur            x0, [fp, #-8]
    // 0x28fe70: ldr             x16, [fp, #0x20]
    // 0x28fe74: str             x16, [SP]
    // 0x28fe78: r0 = decoration()
    //     0x28fe78: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x28fe7c: ldr             x16, [fp, #0x20]
    // 0x28fe80: str             x16, [SP]
    // 0x28fe84: r0 = materialState()
    //     0x28fe84: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28fe88: r16 = <TextStyle?>
    //     0x28fe88: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd88] TypeArguments: <TextStyle?>
    //     0x28fe8c: ldr             x16, [x16, #0xd88]
    // 0x28fe90: stp             NULL, x16, [SP, #8]
    // 0x28fe94: str             x0, [SP]
    // 0x28fe98: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28fe98: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28fe9c: r0 = resolveAs()
    //     0x28fe9c: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28fea0: ldr             x16, [fp, #0x20]
    // 0x28fea4: str             x16, [SP]
    // 0x28fea8: r0 = materialState()
    //     0x28fea8: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x28feac: r16 = <TextStyle?>
    //     0x28feac: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd88] TypeArguments: <TextStyle?>
    //     0x28feb0: ldr             x16, [x16, #0xd88]
    // 0x28feb4: stp             NULL, x16, [SP, #8]
    // 0x28feb8: str             x0, [SP]
    // 0x28febc: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x28febc: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x28fec0: r0 = resolveAs()
    //     0x28fec0: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x28fec4: ldr             x0, [fp, #0x18]
    // 0x28fec8: LoadField: r1 = r0->field_93
    //     0x28fec8: ldur            w1, [x0, #0x93]
    // 0x28fecc: DecompressPointer r1
    //     0x28fecc: add             x1, x1, HEAP, lsl #32
    // 0x28fed0: LoadField: r0 = r1->field_23
    //     0x28fed0: ldur            w0, [x1, #0x23]
    // 0x28fed4: DecompressPointer r0
    //     0x28fed4: add             x0, x0, HEAP, lsl #32
    // 0x28fed8: cmp             w0, NULL
    // 0x28fedc: b.eq            #0x28ff24
    // 0x28fee0: ldr             x1, [fp, #0x20]
    // 0x28fee4: LoadField: r2 = r1->field_b
    //     0x28fee4: ldur            w2, [x1, #0xb]
    // 0x28fee8: DecompressPointer r2
    //     0x28fee8: add             x2, x2, HEAP, lsl #32
    // 0x28feec: cmp             w2, NULL
    // 0x28fef0: b.eq            #0x28ff28
    // 0x28fef4: stp             NULL, x0, [SP]
    // 0x28fef8: r0 = merge()
    //     0x28fef8: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28fefc: ldur            x16, [fp, #-8]
    // 0x28ff00: stp             x16, x0, [SP]
    // 0x28ff04: r0 = merge()
    //     0x28ff04: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28ff08: stp             NULL, x0, [SP]
    // 0x28ff0c: r0 = merge()
    //     0x28ff0c: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x28ff10: LeaveFrame
    //     0x28ff10: mov             SP, fp
    //     0x28ff14: ldp             fp, lr, [SP], #0x10
    // 0x28ff18: ret
    //     0x28ff18: ret             
    // 0x28ff1c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28ff1c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28ff20: b               #0x28fdac
    // 0x28ff24: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28ff24: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28ff28: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28ff28: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getInlineLabelStyle(/* No info */) {
    // ** addr: 0x290018, size: 0x1ac
    // 0x290018: EnterFrame
    //     0x290018: stp             fp, lr, [SP, #-0x10]!
    //     0x29001c: mov             fp, SP
    // 0x290020: AllocStack(0x20)
    //     0x290020: sub             SP, SP, #0x20
    // 0x290024: CheckStackOverflow
    //     0x290024: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x290028: cmp             SP, x16
    //     0x29002c: b.ls            #0x2901b4
    // 0x290030: ldr             x0, [fp, #0x10]
    // 0x290034: r1 = LoadClassIdInstr(r0)
    //     0x290034: ldur            x1, [x0, #-1]
    //     0x290038: ubfx            x1, x1, #0xc, #0x14
    // 0x29003c: cmp             x1, #0x4cf
    // 0x290040: b.ne            #0x290054
    // 0x290044: LoadField: r1 = r0->field_7
    //     0x290044: ldur            w1, [x0, #7]
    // 0x290048: DecompressPointer r1
    //     0x290048: add             x1, x1, HEAP, lsl #32
    // 0x29004c: mov             x2, x1
    // 0x290050: b               #0x2900c0
    // 0x290054: cmp             x1, #0x4d0
    // 0x290058: b.ne            #0x290090
    // 0x29005c: r1 = 1
    //     0x29005c: movz            x1, #0x1
    // 0x290060: r0 = AllocateContext()
    //     0x290060: bl              #0x3e4e00  ; AllocateContextStub
    // 0x290064: mov             x1, x0
    // 0x290068: ldr             x0, [fp, #0x10]
    // 0x29006c: StoreField: r1->field_f = r0
    //     0x29006c: stur            w0, [x1, #0xf]
    // 0x290070: mov             x2, x1
    // 0x290074: r1 = Function '<anonymous closure>':.
    //     0x290074: add             x1, PP, #0xa, lsl #12  ; [pp+0xac70] AnonymousClosure: (0x28de08), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x290078: ldr             x1, [x1, #0xc70]
    // 0x29007c: r0 = AllocateClosure()
    //     0x29007c: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x290080: str             x0, [SP]
    // 0x290084: r0 = resolveWith()
    //     0x290084: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x290088: mov             x2, x0
    // 0x29008c: b               #0x2900c0
    // 0x290090: r1 = 1
    //     0x290090: movz            x1, #0x1
    // 0x290094: r0 = AllocateContext()
    //     0x290094: bl              #0x3e4e00  ; AllocateContextStub
    // 0x290098: mov             x1, x0
    // 0x29009c: ldr             x0, [fp, #0x10]
    // 0x2900a0: StoreField: r1->field_f = r0
    //     0x2900a0: stur            w0, [x1, #0xf]
    // 0x2900a4: mov             x2, x1
    // 0x2900a8: r1 = Function '<anonymous closure>':.
    //     0x2900a8: add             x1, PP, #0xa, lsl #12  ; [pp+0xac78] AnonymousClosure: (0x28ff2c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x2900ac: ldr             x1, [x1, #0xc78]
    // 0x2900b0: r0 = AllocateClosure()
    //     0x2900b0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2900b4: str             x0, [SP]
    // 0x2900b8: r0 = resolveWith()
    //     0x2900b8: bl              #0x28d394  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x2900bc: mov             x2, x0
    // 0x2900c0: ldr             x1, [fp, #0x20]
    // 0x2900c4: ldr             x0, [fp, #0x18]
    // 0x2900c8: stur            x2, [fp, #-8]
    // 0x2900cc: str             x1, [SP]
    // 0x2900d0: r0 = materialState()
    //     0x2900d0: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x2900d4: r16 = <TextStyle>
    //     0x2900d4: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd30] TypeArguments: <TextStyle>
    //     0x2900d8: ldr             x16, [x16, #0xd30]
    // 0x2900dc: ldur            lr, [fp, #-8]
    // 0x2900e0: stp             lr, x16, [SP, #8]
    // 0x2900e4: str             x0, [SP]
    // 0x2900e8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x2900e8: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x2900ec: r0 = resolveAs()
    //     0x2900ec: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x2900f0: stur            x0, [fp, #-8]
    // 0x2900f4: ldr             x16, [fp, #0x20]
    // 0x2900f8: str             x16, [SP]
    // 0x2900fc: r0 = decoration()
    //     0x2900fc: bl              #0x2681f4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x290100: ldr             x16, [fp, #0x20]
    // 0x290104: str             x16, [SP]
    // 0x290108: r0 = materialState()
    //     0x290108: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x29010c: r16 = <TextStyle?>
    //     0x29010c: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd88] TypeArguments: <TextStyle?>
    //     0x290110: ldr             x16, [x16, #0xd88]
    // 0x290114: stp             NULL, x16, [SP, #8]
    // 0x290118: str             x0, [SP]
    // 0x29011c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x29011c: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x290120: r0 = resolveAs()
    //     0x290120: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x290124: ldr             x16, [fp, #0x20]
    // 0x290128: str             x16, [SP]
    // 0x29012c: r0 = materialState()
    //     0x29012c: bl              #0x28d25c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x290130: r16 = <TextStyle?>
    //     0x290130: add             x16, PP, #0xd, lsl #12  ; [pp+0xdd88] TypeArguments: <TextStyle?>
    //     0x290134: ldr             x16, [x16, #0xd88]
    // 0x290138: stp             NULL, x16, [SP, #8]
    // 0x29013c: str             x0, [SP]
    // 0x290140: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x290140: ldr             x4, [PP, #0x58]  ; [pp+0x58] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x290144: r0 = resolveAs()
    //     0x290144: bl              #0x273754  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x290148: ldr             x0, [fp, #0x18]
    // 0x29014c: LoadField: r1 = r0->field_93
    //     0x29014c: ldur            w1, [x0, #0x93]
    // 0x290150: DecompressPointer r1
    //     0x290150: add             x1, x1, HEAP, lsl #32
    // 0x290154: LoadField: r0 = r1->field_23
    //     0x290154: ldur            w0, [x1, #0x23]
    // 0x290158: DecompressPointer r0
    //     0x290158: add             x0, x0, HEAP, lsl #32
    // 0x29015c: cmp             w0, NULL
    // 0x290160: b.eq            #0x2901bc
    // 0x290164: ldr             x1, [fp, #0x20]
    // 0x290168: LoadField: r2 = r1->field_b
    //     0x290168: ldur            w2, [x1, #0xb]
    // 0x29016c: DecompressPointer r2
    //     0x29016c: add             x2, x2, HEAP, lsl #32
    // 0x290170: cmp             w2, NULL
    // 0x290174: b.eq            #0x2901c0
    // 0x290178: stp             NULL, x0, [SP]
    // 0x29017c: r0 = merge()
    //     0x29017c: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x290180: ldur            x16, [fp, #-8]
    // 0x290184: stp             x16, x0, [SP]
    // 0x290188: r0 = merge()
    //     0x290188: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x29018c: stp             NULL, x0, [SP]
    // 0x290190: r0 = merge()
    //     0x290190: bl              #0x21aad4  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x290194: r16 = 1.000000
    //     0x290194: ldr             x16, [PP, #0x5298]  ; [pp+0x5298] 1
    // 0x290198: stp             x16, x0, [SP]
    // 0x29019c: r4 = const [0, 0x2, 0x2, 0x1, height, 0x1, null]
    //     0x29019c: add             x4, PP, #0x10, lsl #12  ; [pp+0x10748] List(7) [0, 0x2, 0x2, 0x1, "height", 0x1, Null]
    //     0x2901a0: ldr             x4, [x4, #0x748]
    // 0x2901a4: r0 = copyWith()
    //     0x2901a4: bl              #0x21abdc  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x2901a8: LeaveFrame
    //     0x2901a8: mov             SP, fp
    //     0x2901ac: ldp             fp, lr, [SP], #0x10
    // 0x2901b0: ret
    //     0x2901b0: ret             
    // 0x2901b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2901b4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2901b8: b               #0x290030
    // 0x2901bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2901bc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2901c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2901c0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2aec98, size: 0xa8
    // 0x2aec98: EnterFrame
    //     0x2aec98: stp             fp, lr, [SP, #-0x10]!
    //     0x2aec9c: mov             fp, SP
    // 0x2aeca0: AllocStack(0x8)
    //     0x2aeca0: sub             SP, SP, #8
    // 0x2aeca4: CheckStackOverflow
    //     0x2aeca4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2aeca8: cmp             SP, x16
    //     0x2aecac: b.ls            #0x2aed20
    // 0x2aecb0: ldr             x0, [fp, #0x10]
    // 0x2aecb4: LoadField: r1 = r0->field_1b
    //     0x2aecb4: ldur            w1, [x0, #0x1b]
    // 0x2aecb8: DecompressPointer r1
    //     0x2aecb8: add             x1, x1, HEAP, lsl #32
    // 0x2aecbc: r16 = Sentinel
    //     0x2aecbc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2aecc0: cmp             w1, w16
    // 0x2aecc4: b.eq            #0x2aed28
    // 0x2aecc8: str             x1, [SP]
    // 0x2aeccc: r0 = dispose()
    //     0x2aeccc: bl              #0x2069f4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0x2aecd0: ldr             x0, [fp, #0x10]
    // 0x2aecd4: LoadField: r1 = r0->field_23
    //     0x2aecd4: ldur            w1, [x0, #0x23]
    // 0x2aecd8: DecompressPointer r1
    //     0x2aecd8: add             x1, x1, HEAP, lsl #32
    // 0x2aecdc: r16 = Sentinel
    //     0x2aecdc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2aece0: cmp             w1, w16
    // 0x2aece4: b.eq            #0x2aed34
    // 0x2aece8: str             x1, [SP]
    // 0x2aecec: r0 = dispose()
    //     0x2aecec: bl              #0x2069f4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0x2aecf0: ldr             x0, [fp, #0x10]
    // 0x2aecf4: LoadField: r1 = r0->field_27
    //     0x2aecf4: ldur            w1, [x0, #0x27]
    // 0x2aecf8: DecompressPointer r1
    //     0x2aecf8: add             x1, x1, HEAP, lsl #32
    // 0x2aecfc: str             x1, [SP]
    // 0x2aed00: r0 = dispose()
    //     0x2aed00: bl              #0x2b5ba4  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::dispose
    // 0x2aed04: ldr             x16, [fp, #0x10]
    // 0x2aed08: str             x16, [SP]
    // 0x2aed0c: r0 = dispose()
    //     0x2aed0c: bl              #0x2aed40  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::dispose
    // 0x2aed10: r0 = Null
    //     0x2aed10: mov             x0, NULL
    // 0x2aed14: LeaveFrame
    //     0x2aed14: mov             SP, fp
    //     0x2aed18: ldp             fp, lr, [SP], #0x10
    // 0x2aed1c: ret
    //     0x2aed1c: ret             
    // 0x2aed20: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2aed20: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2aed24: b               #0x2aecb0
    // 0x2aed28: r9 = _floatingLabelController
    //     0x2aed28: add             x9, PP, #0x11, lsl #12  ; [pp+0x11be8] Field <_InputDecoratorState@73019562._floatingLabelController@73019562>: late final (offset: 0x1c)
    //     0x2aed2c: ldr             x9, [x9, #0xbe8]
    // 0x2aed30: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2aed30: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x2aed34: r9 = _shakingLabelController
    //     0x2aed34: add             x9, PP, #0x11, lsl #12  ; [pp+0x11b90] Field <_InputDecoratorState@73019562._shakingLabelController@73019562>: late final (offset: 0x24)
    //     0x2aed38: ldr             x9, [x9, #0xb90]
    // 0x2aed3c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2aed3c: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0x2c90d4, size: 0x2f0
    // 0x2c90d4: EnterFrame
    //     0x2c90d4: stp             fp, lr, [SP, #-0x10]!
    //     0x2c90d8: mov             fp, SP
    // 0x2c90dc: AllocStack(0x38)
    //     0x2c90dc: sub             SP, SP, #0x38
    // 0x2c90e0: CheckStackOverflow
    //     0x2c90e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2c90e4: cmp             SP, x16
    //     0x2c90e8: b.ls            #0x2c939c
    // 0x2c90ec: ldr             x0, [fp, #0x10]
    // 0x2c90f0: LoadField: r1 = r0->field_b
    //     0x2c90f0: ldur            w1, [x0, #0xb]
    // 0x2c90f4: DecompressPointer r1
    //     0x2c90f4: add             x1, x1, HEAP, lsl #32
    // 0x2c90f8: cmp             w1, NULL
    // 0x2c90fc: b.eq            #0x2c93a4
    // 0x2c9100: LoadField: r2 = r1->field_b
    //     0x2c9100: ldur            w2, [x1, #0xb]
    // 0x2c9104: DecompressPointer r2
    //     0x2c9104: add             x2, x2, HEAP, lsl #32
    // 0x2c9108: LoadField: r3 = r2->field_4f
    //     0x2c9108: ldur            w3, [x2, #0x4f]
    // 0x2c910c: DecompressPointer r3
    //     0x2c910c: add             x3, x3, HEAP, lsl #32
    // 0x2c9110: r16 = Instance_FloatingLabelBehavior
    //     0x2c9110: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ba0] Obj!FloatingLabelBehavior@481a21
    //     0x2c9114: ldr             x16, [x16, #0xba0]
    // 0x2c9118: cmp             w3, w16
    // 0x2c911c: b.ne            #0x2c9128
    // 0x2c9120: r1 = true
    //     0x2c9120: add             x1, NULL, #0x20  ; true
    // 0x2c9124: b               #0x2c916c
    // 0x2c9128: r16 = Instance_FloatingLabelBehavior
    //     0x2c9128: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b98] Obj!FloatingLabelBehavior@481a41
    //     0x2c912c: ldr             x16, [x16, #0xb98]
    // 0x2c9130: cmp             w3, w16
    // 0x2c9134: b.eq            #0x2c9168
    // 0x2c9138: LoadField: r2 = r1->field_27
    //     0x2c9138: ldur            w2, [x1, #0x27]
    // 0x2c913c: DecompressPointer r2
    //     0x2c913c: add             x2, x2, HEAP, lsl #32
    // 0x2c9140: tbz             w2, #4, #0x2c914c
    // 0x2c9144: r1 = true
    //     0x2c9144: add             x1, NULL, #0x20  ; true
    // 0x2c9148: b               #0x2c916c
    // 0x2c914c: LoadField: r2 = r1->field_1b
    //     0x2c914c: ldur            w2, [x1, #0x1b]
    // 0x2c9150: DecompressPointer r2
    //     0x2c9150: add             x2, x2, HEAP, lsl #32
    // 0x2c9154: tbnz            w2, #4, #0x2c9160
    // 0x2c9158: r1 = true
    //     0x2c9158: add             x1, NULL, #0x20  ; true
    // 0x2c915c: b               #0x2c916c
    // 0x2c9160: r1 = false
    //     0x2c9160: add             x1, NULL, #0x30  ; false
    // 0x2c9164: b               #0x2c916c
    // 0x2c9168: r1 = false
    //     0x2c9168: add             x1, NULL, #0x30  ; false
    // 0x2c916c: tbnz            w1, #4, #0x2c917c
    // 0x2c9170: d0 = 1.000000
    //     0x2c9170: fmov            d0, #1.00000000
    // 0x2c9174: d0 = 1.000000
    //     0x2c9174: fmov            d0, #1.00000000
    // 0x2c9178: b               #0x2c9184
    // 0x2c917c: d0 = 0.000000
    //     0x2c917c: eor             v0.16b, v0.16b, v0.16b
    // 0x2c9180: d0 = 0.000000
    //     0x2c9180: eor             v0.16b, v0.16b, v0.16b
    // 0x2c9184: r2 = inline_Allocate_Double()
    //     0x2c9184: ldp             x2, x1, [THR, #0x50]  ; THR::top
    //     0x2c9188: add             x2, x2, #0x10
    //     0x2c918c: cmp             x1, x2
    //     0x2c9190: b.ls            #0x2c93a8
    //     0x2c9194: str             x2, [THR, #0x50]  ; THR::top
    //     0x2c9198: sub             x2, x2, #0xf
    //     0x2c919c: movz            x1, #0xd148
    //     0x2c91a0: movk            x1, #0x3, lsl #16
    //     0x2c91a4: stur            x1, [x2, #-1]
    // 0x2c91a8: StoreField: r2->field_7 = d0
    //     0x2c91a8: stur            d0, [x2, #7]
    // 0x2c91ac: stur            x2, [fp, #-8]
    // 0x2c91b0: r1 = <double>
    //     0x2c91b0: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c91b4: r0 = AnimationController()
    //     0x2c91b4: bl              #0x2174fc  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x2c91b8: stur            x0, [fp, #-0x10]
    // 0x2c91bc: ldr             x16, [fp, #0x10]
    // 0x2c91c0: stp             x16, x0, [SP, #0x10]
    // 0x2c91c4: r16 = Instance_Duration
    //     0x2c91c4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b50] Obj!Duration@482ca1
    //     0x2c91c8: ldr             x16, [x16, #0xb50]
    // 0x2c91cc: ldur            lr, [fp, #-8]
    // 0x2c91d0: stp             lr, x16, [SP]
    // 0x2c91d4: r4 = const [0, 0x4, 0x4, 0x2, duration, 0x2, value, 0x3, null]
    //     0x2c91d4: add             x4, PP, #0x11, lsl #12  ; [pp+0x11bf0] List(9) [0, 0x4, 0x4, 0x2, "duration", 0x2, "value", 0x3, Null]
    //     0x2c91d8: ldr             x4, [x4, #0xbf0]
    // 0x2c91dc: r0 = AnimationController()
    //     0x2c91dc: bl              #0x2362c8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x2c91e0: ldr             x0, [fp, #0x10]
    // 0x2c91e4: LoadField: r1 = r0->field_1b
    //     0x2c91e4: ldur            w1, [x0, #0x1b]
    // 0x2c91e8: DecompressPointer r1
    //     0x2c91e8: add             x1, x1, HEAP, lsl #32
    // 0x2c91ec: r16 = Sentinel
    //     0x2c91ec: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2c91f0: cmp             w1, w16
    // 0x2c91f4: b.ne            #0x2c9200
    // 0x2c91f8: mov             x1, x0
    // 0x2c91fc: b               #0x2c9214
    // 0x2c9200: r16 = "_floatingLabelController@73019562"
    //     0x2c9200: add             x16, PP, #0x11, lsl #12  ; [pp+0x11bf8] "_floatingLabelController@73019562"
    //     0x2c9204: ldr             x16, [x16, #0xbf8]
    // 0x2c9208: str             x16, [SP]
    // 0x2c920c: r0 = _throwFieldAlreadyInitialized()
    //     0x2c920c: bl              #0x1be214  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0x2c9210: ldr             x1, [fp, #0x10]
    // 0x2c9214: ldur            x0, [fp, #-0x10]
    // 0x2c9218: StoreField: r1->field_1b = r0
    //     0x2c9218: stur            w0, [x1, #0x1b]
    //     0x2c921c: ldurb           w16, [x1, #-1]
    //     0x2c9220: ldurb           w17, [x0, #-1]
    //     0x2c9224: and             x16, x17, x16, lsr #2
    //     0x2c9228: tst             x16, HEAP, lsr #32
    //     0x2c922c: b.eq            #0x2c9234
    //     0x2c9230: bl              #0x3e4608
    // 0x2c9234: r1 = 1
    //     0x2c9234: movz            x1, #0x1
    // 0x2c9238: r0 = AllocateContext()
    //     0x2c9238: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2c923c: mov             x1, x0
    // 0x2c9240: ldr             x0, [fp, #0x10]
    // 0x2c9244: StoreField: r1->field_f = r0
    //     0x2c9244: stur            w0, [x1, #0xf]
    // 0x2c9248: mov             x2, x1
    // 0x2c924c: r1 = Function '_handleChange@73019562':.
    //     0x2c924c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11c00] AnonymousClosure: (0x2c93c4), in [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_handleChange (0x2c940c)
    //     0x2c9250: ldr             x1, [x1, #0xc00]
    // 0x2c9254: r0 = AllocateClosure()
    //     0x2c9254: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2c9258: ldur            x16, [fp, #-0x10]
    // 0x2c925c: stp             x0, x16, [SP]
    // 0x2c9260: r0 = addListener()
    //     0x2c9260: bl              #0x370130  ; [package:flutter/src/animation/animation_controller.dart] _AnimationController&Animation&AnimationEagerListenerMixin&AnimationLocalListenersMixin::addListener
    // 0x2c9264: ldr             x0, [fp, #0x10]
    // 0x2c9268: LoadField: r2 = r0->field_1b
    //     0x2c9268: ldur            w2, [x0, #0x1b]
    // 0x2c926c: DecompressPointer r2
    //     0x2c926c: add             x2, x2, HEAP, lsl #32
    // 0x2c9270: stur            x2, [fp, #-8]
    // 0x2c9274: r1 = <double>
    //     0x2c9274: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c9278: r0 = FlippedCurve()
    //     0x2c9278: bl              #0x26bcd0  ; AllocateFlippedCurveStub -> FlippedCurve (size=0x10)
    // 0x2c927c: mov             x2, x0
    // 0x2c9280: r0 = Instance_Cubic
    //     0x2c9280: ldr             x0, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x2c9284: stur            x2, [fp, #-0x10]
    // 0x2c9288: StoreField: r2->field_b = r0
    //     0x2c9288: stur            w0, [x2, #0xb]
    // 0x2c928c: r1 = <double>
    //     0x2c928c: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c9290: r0 = CurvedAnimation()
    //     0x2c9290: bl              #0x269028  ; AllocateCurvedAnimationStub -> CurvedAnimation (size=0x1c)
    // 0x2c9294: stur            x0, [fp, #-0x18]
    // 0x2c9298: r16 = Instance_Cubic
    //     0x2c9298: ldr             x16, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x2c929c: stp             x16, x0, [SP, #0x10]
    // 0x2c92a0: ldur            x16, [fp, #-8]
    // 0x2c92a4: ldur            lr, [fp, #-0x10]
    // 0x2c92a8: stp             lr, x16, [SP]
    // 0x2c92ac: r4 = const [0, 0x4, 0x4, 0x3, reverseCurve, 0x3, null]
    //     0x2c92ac: add             x4, PP, #0xc, lsl #12  ; [pp+0xc420] List(7) [0, 0x4, 0x4, 0x3, "reverseCurve", 0x3, Null]
    //     0x2c92b0: ldr             x4, [x4, #0x420]
    // 0x2c92b4: r0 = CurvedAnimation()
    //     0x2c92b4: bl              #0x268ec4  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::CurvedAnimation
    // 0x2c92b8: ldr             x0, [fp, #0x10]
    // 0x2c92bc: LoadField: r1 = r0->field_1f
    //     0x2c92bc: ldur            w1, [x0, #0x1f]
    // 0x2c92c0: DecompressPointer r1
    //     0x2c92c0: add             x1, x1, HEAP, lsl #32
    // 0x2c92c4: r16 = Sentinel
    //     0x2c92c4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2c92c8: cmp             w1, w16
    // 0x2c92cc: b.ne            #0x2c92d8
    // 0x2c92d0: mov             x2, x0
    // 0x2c92d4: b               #0x2c92ec
    // 0x2c92d8: r16 = "_floatingLabelAnimation@73019562"
    //     0x2c92d8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c08] "_floatingLabelAnimation@73019562"
    //     0x2c92dc: ldr             x16, [x16, #0xc08]
    // 0x2c92e0: str             x16, [SP]
    // 0x2c92e4: r0 = _throwFieldAlreadyInitialized()
    //     0x2c92e4: bl              #0x1be214  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0x2c92e8: ldr             x2, [fp, #0x10]
    // 0x2c92ec: ldur            x0, [fp, #-0x18]
    // 0x2c92f0: StoreField: r2->field_1f = r0
    //     0x2c92f0: stur            w0, [x2, #0x1f]
    //     0x2c92f4: ldurb           w16, [x2, #-1]
    //     0x2c92f8: ldurb           w17, [x0, #-1]
    //     0x2c92fc: and             x16, x17, x16, lsr #2
    //     0x2c9300: tst             x16, HEAP, lsr #32
    //     0x2c9304: b.eq            #0x2c930c
    //     0x2c9308: bl              #0x3e4628
    // 0x2c930c: r1 = <double>
    //     0x2c930c: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c9310: r0 = AnimationController()
    //     0x2c9310: bl              #0x2174fc  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x2c9314: stur            x0, [fp, #-8]
    // 0x2c9318: ldr             x16, [fp, #0x10]
    // 0x2c931c: stp             x16, x0, [SP, #8]
    // 0x2c9320: r16 = Instance_Duration
    //     0x2c9320: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b50] Obj!Duration@482ca1
    //     0x2c9324: ldr             x16, [x16, #0xb50]
    // 0x2c9328: str             x16, [SP]
    // 0x2c932c: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0x2c932c: add             x4, PP, #0xa, lsl #12  ; [pp+0xa128] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0x2c9330: ldr             x4, [x4, #0x128]
    // 0x2c9334: r0 = AnimationController()
    //     0x2c9334: bl              #0x2362c8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x2c9338: ldr             x0, [fp, #0x10]
    // 0x2c933c: LoadField: r1 = r0->field_23
    //     0x2c933c: ldur            w1, [x0, #0x23]
    // 0x2c9340: DecompressPointer r1
    //     0x2c9340: add             x1, x1, HEAP, lsl #32
    // 0x2c9344: r16 = Sentinel
    //     0x2c9344: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2c9348: cmp             w1, w16
    // 0x2c934c: b.ne            #0x2c9358
    // 0x2c9350: mov             x1, x0
    // 0x2c9354: b               #0x2c936c
    // 0x2c9358: r16 = "_shakingLabelController@73019562"
    //     0x2c9358: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c10] "_shakingLabelController@73019562"
    //     0x2c935c: ldr             x16, [x16, #0xc10]
    // 0x2c9360: str             x16, [SP]
    // 0x2c9364: r0 = _throwFieldAlreadyInitialized()
    //     0x2c9364: bl              #0x1be214  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0x2c9368: ldr             x1, [fp, #0x10]
    // 0x2c936c: ldur            x0, [fp, #-8]
    // 0x2c9370: StoreField: r1->field_23 = r0
    //     0x2c9370: stur            w0, [x1, #0x23]
    //     0x2c9374: ldurb           w16, [x1, #-1]
    //     0x2c9378: ldurb           w17, [x0, #-1]
    //     0x2c937c: and             x16, x17, x16, lsr #2
    //     0x2c9380: tst             x16, HEAP, lsr #32
    //     0x2c9384: b.eq            #0x2c938c
    //     0x2c9388: bl              #0x3e4608
    // 0x2c938c: r0 = Null
    //     0x2c938c: mov             x0, NULL
    // 0x2c9390: LeaveFrame
    //     0x2c9390: mov             SP, fp
    //     0x2c9394: ldp             fp, lr, [SP], #0x10
    // 0x2c9398: ret
    //     0x2c9398: ret             
    // 0x2c939c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2c939c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2c93a0: b               #0x2c90ec
    // 0x2c93a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2c93a4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2c93a8: SaveReg d0
    //     0x2c93a8: str             q0, [SP, #-0x10]!
    // 0x2c93ac: SaveReg r0
    //     0x2c93ac: str             x0, [SP, #-8]!
    // 0x2c93b0: r0 = AllocateDouble()
    //     0x2c93b0: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x2c93b4: mov             x2, x0
    // 0x2c93b8: RestoreReg r0
    //     0x2c93b8: ldr             x0, [SP], #8
    // 0x2c93bc: RestoreReg d0
    //     0x2c93bc: ldr             q0, [SP], #0x10
    // 0x2c93c0: b               #0x2c91a8
  }
  [closure] void _handleChange(dynamic) {
    // ** addr: 0x2c93c4, size: 0x48
    // 0x2c93c4: EnterFrame
    //     0x2c93c4: stp             fp, lr, [SP, #-0x10]!
    //     0x2c93c8: mov             fp, SP
    // 0x2c93cc: AllocStack(0x8)
    //     0x2c93cc: sub             SP, SP, #8
    // 0x2c93d0: SetupParameters()
    //     0x2c93d0: ldr             x0, [fp, #0x10]
    //     0x2c93d4: ldur            w1, [x0, #0x17]
    //     0x2c93d8: add             x1, x1, HEAP, lsl #32
    // 0x2c93dc: CheckStackOverflow
    //     0x2c93dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2c93e0: cmp             SP, x16
    //     0x2c93e4: b.ls            #0x2c9404
    // 0x2c93e8: LoadField: r0 = r1->field_f
    //     0x2c93e8: ldur            w0, [x1, #0xf]
    // 0x2c93ec: DecompressPointer r0
    //     0x2c93ec: add             x0, x0, HEAP, lsl #32
    // 0x2c93f0: str             x0, [SP]
    // 0x2c93f4: r0 = _handleChange()
    //     0x2c93f4: bl              #0x2c940c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_handleChange
    // 0x2c93f8: LeaveFrame
    //     0x2c93f8: mov             SP, fp
    //     0x2c93fc: ldp             fp, lr, [SP], #0x10
    // 0x2c9400: ret
    //     0x2c9400: ret             
    // 0x2c9404: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2c9404: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2c9408: b               #0x2c93e8
  }
  _ _handleChange(/* No info */) {
    // ** addr: 0x2c940c, size: 0x4c
    // 0x2c940c: EnterFrame
    //     0x2c940c: stp             fp, lr, [SP, #-0x10]!
    //     0x2c9410: mov             fp, SP
    // 0x2c9414: AllocStack(0x10)
    //     0x2c9414: sub             SP, SP, #0x10
    // 0x2c9418: CheckStackOverflow
    //     0x2c9418: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2c941c: cmp             SP, x16
    //     0x2c9420: b.ls            #0x2c9450
    // 0x2c9424: r1 = Function '<anonymous closure>':.
    //     0x2c9424: add             x1, PP, #0x11, lsl #12  ; [pp+0x11c18] Function: [dart:ui] _NativeScene::_NativeScene._ (0x3daaf0)
    //     0x2c9428: ldr             x1, [x1, #0xc18]
    // 0x2c942c: r2 = Null
    //     0x2c942c: mov             x2, NULL
    // 0x2c9430: r0 = AllocateClosure()
    //     0x2c9430: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2c9434: ldr             x16, [fp, #0x10]
    // 0x2c9438: stp             x0, x16, [SP]
    // 0x2c943c: r0 = setState()
    //     0x2c943c: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x2c9440: r0 = Null
    //     0x2c9440: mov             x0, NULL
    // 0x2c9444: LeaveFrame
    //     0x2c9444: mov             SP, fp
    //     0x2c9448: ldp             fp, lr, [SP], #0x10
    // 0x2c944c: ret
    //     0x2c944c: ret             
    // 0x2c9450: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2c9450: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2c9454: b               #0x2c9424
  }
  _ _InputDecoratorState(/* No info */) {
    // ** addr: 0x2cdaa8, size: 0xb0
    // 0x2cdaa8: EnterFrame
    //     0x2cdaa8: stp             fp, lr, [SP, #-0x10]!
    //     0x2cdaac: mov             fp, SP
    // 0x2cdab0: AllocStack(0x8)
    //     0x2cdab0: sub             SP, SP, #8
    // 0x2cdab4: r0 = Sentinel
    //     0x2cdab4: ldr             x0, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2cdab8: CheckStackOverflow
    //     0x2cdab8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cdabc: cmp             SP, x16
    //     0x2cdac0: b.ls            #0x2cdb50
    // 0x2cdac4: ldr             x1, [fp, #0x10]
    // 0x2cdac8: StoreField: r1->field_1b = r0
    //     0x2cdac8: stur            w0, [x1, #0x1b]
    // 0x2cdacc: StoreField: r1->field_1f = r0
    //     0x2cdacc: stur            w0, [x1, #0x1f]
    // 0x2cdad0: StoreField: r1->field_23 = r0
    //     0x2cdad0: stur            w0, [x1, #0x23]
    // 0x2cdad4: r0 = _InputBorderGap()
    //     0x2cdad4: bl              #0x2cdb58  ; Allocate_InputBorderGapStub -> _InputBorderGap (size=0x30)
    // 0x2cdad8: d0 = 0.000000
    //     0x2cdad8: eor             v0.16b, v0.16b, v0.16b
    // 0x2cdadc: d0 = 0.000000
    //     0x2cdadc: eor             v0.16b, v0.16b, v0.16b
    // 0x2cdae0: stur            x0, [fp, #-8]
    // 0x2cdae4: StoreField: r0->field_27 = d0
    //     0x2cdae4: stur            d0, [x0, #0x27]
    // 0x2cdae8: r1 = 0
    //     0x2cdae8: movz            x1, #0
    // 0x2cdaec: StoreField: r0->field_7 = r1
    //     0x2cdaec: stur            x1, [x0, #7]
    // 0x2cdaf0: StoreField: r0->field_13 = r1
    //     0x2cdaf0: stur            x1, [x0, #0x13]
    // 0x2cdaf4: StoreField: r0->field_1b = r1
    //     0x2cdaf4: stur            x1, [x0, #0x1b]
    // 0x2cdaf8: r0 = InitLateStaticField(0x8f0) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0x2cdaf8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x2cdafc: ldr             x0, [x0, #0x11e0]
    //     0x2cdb00: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x2cdb04: cmp             w0, w16
    //     0x2cdb08: b.ne            #0x2cdb14
    //     0x2cdb0c: ldr             x2, [PP, #0x3180]  ; [pp+0x3180] Field <ChangeNotifier._emptyListeners@311329750>: static late final (offset: 0x8f0)
    //     0x2cdb10: bl              #0x3e406c
    // 0x2cdb14: mov             x1, x0
    // 0x2cdb18: ldur            x0, [fp, #-8]
    // 0x2cdb1c: StoreField: r0->field_f = r1
    //     0x2cdb1c: stur            w1, [x0, #0xf]
    // 0x2cdb20: ldr             x1, [fp, #0x10]
    // 0x2cdb24: StoreField: r1->field_27 = r0
    //     0x2cdb24: stur            w0, [x1, #0x27]
    //     0x2cdb28: ldurb           w16, [x1, #-1]
    //     0x2cdb2c: ldurb           w17, [x0, #-1]
    //     0x2cdb30: and             x16, x17, x16, lsr #2
    //     0x2cdb34: tst             x16, HEAP, lsr #32
    //     0x2cdb38: b.eq            #0x2cdb40
    //     0x2cdb3c: bl              #0x3e4608
    // 0x2cdb40: r0 = Null
    //     0x2cdb40: mov             x0, NULL
    // 0x2cdb44: LeaveFrame
    //     0x2cdb44: mov             SP, fp
    //     0x2cdb48: ldp             fp, lr, [SP], #0x10
    // 0x2cdb4c: ret
    //     0x2cdb4c: ret             
    // 0x2cdb50: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cdb50: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cdb54: b               #0x2cdac4
  }
}

// class id: 1451, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __HelperErrorState&State&SingleTickerProviderStateMixin extends State<dynamic>
     with SingleTickerProviderStateMixin<X0 bound StatefulWidget> {

  _ _updateTicker(/* No info */) {
    // ** addr: 0x189594, size: 0x84
    // 0x189594: EnterFrame
    //     0x189594: stp             fp, lr, [SP, #-0x10]!
    //     0x189598: mov             fp, SP
    // 0x18959c: AllocStack(0x18)
    //     0x18959c: sub             SP, SP, #0x18
    // 0x1895a0: CheckStackOverflow
    //     0x1895a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1895a4: cmp             SP, x16
    //     0x1895a8: b.ls            #0x18960c
    // 0x1895ac: ldr             x0, [fp, #0x10]
    // 0x1895b0: LoadField: r1 = r0->field_13
    //     0x1895b0: ldur            w1, [x0, #0x13]
    // 0x1895b4: DecompressPointer r1
    //     0x1895b4: add             x1, x1, HEAP, lsl #32
    // 0x1895b8: stur            x1, [fp, #-8]
    // 0x1895bc: cmp             w1, NULL
    // 0x1895c0: b.eq            #0x1895fc
    // 0x1895c4: LoadField: r2 = r0->field_17
    //     0x1895c4: ldur            w2, [x0, #0x17]
    // 0x1895c8: DecompressPointer r2
    //     0x1895c8: add             x2, x2, HEAP, lsl #32
    // 0x1895cc: cmp             w2, NULL
    // 0x1895d0: b.eq            #0x189614
    // 0x1895d4: r0 = LoadClassIdInstr(r2)
    //     0x1895d4: ldur            x0, [x2, #-1]
    //     0x1895d8: ubfx            x0, x0, #0xc, #0x14
    // 0x1895dc: str             x2, [SP]
    // 0x1895e0: r0 = GDT[cid_x0 + -0xfff]()
    //     0x1895e0: sub             lr, x0, #0xfff
    //     0x1895e4: ldr             lr, [x21, lr, lsl #3]
    //     0x1895e8: blr             lr
    // 0x1895ec: eor             x1, x0, #0x10
    // 0x1895f0: ldur            x16, [fp, #-8]
    // 0x1895f4: stp             x1, x16, [SP]
    // 0x1895f8: r0 = muted=()
    //     0x1895f8: bl              #0x189680  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x1895fc: r0 = Null
    //     0x1895fc: mov             x0, NULL
    // 0x189600: LeaveFrame
    //     0x189600: mov             SP, fp
    //     0x189604: ldp             fp, lr, [SP], #0x10
    // 0x189608: ret
    //     0x189608: ret             
    // 0x18960c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x18960c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x189610: b               #0x1895ac
    // 0x189614: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x189614: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTicker(dynamic) {
    // ** addr: 0x189618, size: 0x48
    // 0x189618: EnterFrame
    //     0x189618: stp             fp, lr, [SP, #-0x10]!
    //     0x18961c: mov             fp, SP
    // 0x189620: AllocStack(0x8)
    //     0x189620: sub             SP, SP, #8
    // 0x189624: SetupParameters()
    //     0x189624: ldr             x0, [fp, #0x10]
    //     0x189628: ldur            w1, [x0, #0x17]
    //     0x18962c: add             x1, x1, HEAP, lsl #32
    // 0x189630: CheckStackOverflow
    //     0x189630: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x189634: cmp             SP, x16
    //     0x189638: b.ls            #0x189658
    // 0x18963c: LoadField: r0 = r1->field_f
    //     0x18963c: ldur            w0, [x1, #0xf]
    // 0x189640: DecompressPointer r0
    //     0x189640: add             x0, x0, HEAP, lsl #32
    // 0x189644: str             x0, [SP]
    // 0x189648: r0 = _updateTicker()
    //     0x189648: bl              #0x189594  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x18964c: LeaveFrame
    //     0x18964c: mov             SP, fp
    //     0x189650: ldp             fp, lr, [SP], #0x10
    // 0x189654: ret
    //     0x189654: ret             
    // 0x189658: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x189658: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x18965c: b               #0x18963c
  }
  _ createTicker(/* No info */) {
    // ** addr: 0x1c07f4, size: 0x94
    // 0x1c07f4: EnterFrame
    //     0x1c07f4: stp             fp, lr, [SP, #-0x10]!
    //     0x1c07f8: mov             fp, SP
    // 0x1c07fc: AllocStack(0x8)
    //     0x1c07fc: sub             SP, SP, #8
    // 0x1c0800: CheckStackOverflow
    //     0x1c0800: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0804: cmp             SP, x16
    //     0x1c0808: b.ls            #0x1c087c
    // 0x1c080c: r0 = Ticker()
    //     0x1c080c: bl              #0x1bfa08  ; AllocateTickerStub -> Ticker (size=0x1c)
    // 0x1c0810: mov             x1, x0
    // 0x1c0814: r0 = false
    //     0x1c0814: add             x0, NULL, #0x30  ; false
    // 0x1c0818: StoreField: r1->field_b = r0
    //     0x1c0818: stur            w0, [x1, #0xb]
    // 0x1c081c: ldr             x0, [fp, #0x10]
    // 0x1c0820: StoreField: r1->field_13 = r0
    //     0x1c0820: stur            w0, [x1, #0x13]
    // 0x1c0824: mov             x0, x1
    // 0x1c0828: ldr             x1, [fp, #0x18]
    // 0x1c082c: StoreField: r1->field_13 = r0
    //     0x1c082c: stur            w0, [x1, #0x13]
    //     0x1c0830: ldurb           w16, [x1, #-1]
    //     0x1c0834: ldurb           w17, [x0, #-1]
    //     0x1c0838: and             x16, x17, x16, lsr #2
    //     0x1c083c: tst             x16, HEAP, lsr #32
    //     0x1c0840: b.eq            #0x1c0848
    //     0x1c0844: bl              #0x3e4608
    // 0x1c0848: str             x1, [SP]
    // 0x1c084c: r0 = _updateTickerModeNotifier()
    //     0x1c084c: bl              #0x1c0888  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x1c0850: ldr             x16, [fp, #0x18]
    // 0x1c0854: str             x16, [SP]
    // 0x1c0858: r0 = _updateTicker()
    //     0x1c0858: bl              #0x189594  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x1c085c: ldr             x1, [fp, #0x18]
    // 0x1c0860: LoadField: r0 = r1->field_13
    //     0x1c0860: ldur            w0, [x1, #0x13]
    // 0x1c0864: DecompressPointer r0
    //     0x1c0864: add             x0, x0, HEAP, lsl #32
    // 0x1c0868: cmp             w0, NULL
    // 0x1c086c: b.eq            #0x1c0884
    // 0x1c0870: LeaveFrame
    //     0x1c0870: mov             SP, fp
    //     0x1c0874: ldp             fp, lr, [SP], #0x10
    // 0x1c0878: ret
    //     0x1c0878: ret             
    // 0x1c087c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c087c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c0880: b               #0x1c080c
    // 0x1c0884: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c0884: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x1c0888, size: 0x140
    // 0x1c0888: EnterFrame
    //     0x1c0888: stp             fp, lr, [SP, #-0x10]!
    //     0x1c088c: mov             fp, SP
    // 0x1c0890: AllocStack(0x20)
    //     0x1c0890: sub             SP, SP, #0x20
    // 0x1c0894: CheckStackOverflow
    //     0x1c0894: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0898: cmp             SP, x16
    //     0x1c089c: b.ls            #0x1c09bc
    // 0x1c08a0: ldr             x0, [fp, #0x10]
    // 0x1c08a4: LoadField: r1 = r0->field_f
    //     0x1c08a4: ldur            w1, [x0, #0xf]
    // 0x1c08a8: DecompressPointer r1
    //     0x1c08a8: add             x1, x1, HEAP, lsl #32
    // 0x1c08ac: cmp             w1, NULL
    // 0x1c08b0: b.eq            #0x1c09c4
    // 0x1c08b4: str             x1, [SP]
    // 0x1c08b8: r0 = getNotifier()
    //     0x1c08b8: bl              #0x1bf5f0  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x1c08bc: mov             x1, x0
    // 0x1c08c0: ldr             x0, [fp, #0x10]
    // 0x1c08c4: stur            x1, [fp, #-0x10]
    // 0x1c08c8: LoadField: r2 = r0->field_17
    //     0x1c08c8: ldur            w2, [x0, #0x17]
    // 0x1c08cc: DecompressPointer r2
    //     0x1c08cc: add             x2, x2, HEAP, lsl #32
    // 0x1c08d0: stur            x2, [fp, #-8]
    // 0x1c08d4: cmp             w1, w2
    // 0x1c08d8: b.ne            #0x1c08ec
    // 0x1c08dc: r0 = Null
    //     0x1c08dc: mov             x0, NULL
    // 0x1c08e0: LeaveFrame
    //     0x1c08e0: mov             SP, fp
    //     0x1c08e4: ldp             fp, lr, [SP], #0x10
    // 0x1c08e8: ret
    //     0x1c08e8: ret             
    // 0x1c08ec: cmp             w2, NULL
    // 0x1c08f0: b.eq            #0x1c0944
    // 0x1c08f4: r1 = 1
    //     0x1c08f4: movz            x1, #0x1
    // 0x1c08f8: r0 = AllocateContext()
    //     0x1c08f8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c08fc: mov             x1, x0
    // 0x1c0900: ldr             x0, [fp, #0x10]
    // 0x1c0904: StoreField: r1->field_f = r0
    //     0x1c0904: stur            w0, [x1, #0xf]
    // 0x1c0908: mov             x2, x1
    // 0x1c090c: r1 = Function '_updateTicker@216311458':.
    //     0x1c090c: add             x1, PP, #0x14, lsl #12  ; [pp+0x145d0] AnonymousClosure: (0x189618), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x189594)
    //     0x1c0910: ldr             x1, [x1, #0x5d0]
    // 0x1c0914: r0 = AllocateClosure()
    //     0x1c0914: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c0918: mov             x1, x0
    // 0x1c091c: ldur            x0, [fp, #-8]
    // 0x1c0920: r2 = LoadClassIdInstr(r0)
    //     0x1c0920: ldur            x2, [x0, #-1]
    //     0x1c0924: ubfx            x2, x2, #0xc, #0x14
    // 0x1c0928: stp             x1, x0, [SP]
    // 0x1c092c: mov             x0, x2
    // 0x1c0930: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x1c0930: sub             lr, x0, #0xd8f
    //     0x1c0934: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0938: blr             lr
    // 0x1c093c: ldr             x0, [fp, #0x10]
    // 0x1c0940: ldur            x1, [fp, #-0x10]
    // 0x1c0944: r1 = 1
    //     0x1c0944: movz            x1, #0x1
    // 0x1c0948: r0 = AllocateContext()
    //     0x1c0948: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c094c: mov             x1, x0
    // 0x1c0950: ldr             x0, [fp, #0x10]
    // 0x1c0954: StoreField: r1->field_f = r0
    //     0x1c0954: stur            w0, [x1, #0xf]
    // 0x1c0958: mov             x2, x1
    // 0x1c095c: r1 = Function '_updateTicker@216311458':.
    //     0x1c095c: add             x1, PP, #0x14, lsl #12  ; [pp+0x145d0] AnonymousClosure: (0x189618), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x189594)
    //     0x1c0960: ldr             x1, [x1, #0x5d0]
    // 0x1c0964: r0 = AllocateClosure()
    //     0x1c0964: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c0968: ldur            x1, [fp, #-0x10]
    // 0x1c096c: r2 = LoadClassIdInstr(r1)
    //     0x1c096c: ldur            x2, [x1, #-1]
    //     0x1c0970: ubfx            x2, x2, #0xc, #0x14
    // 0x1c0974: stp             x0, x1, [SP]
    // 0x1c0978: mov             x0, x2
    // 0x1c097c: r0 = GDT[cid_x0 + -0x7f2]()
    //     0x1c097c: sub             lr, x0, #0x7f2
    //     0x1c0980: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0984: blr             lr
    // 0x1c0988: ldur            x0, [fp, #-0x10]
    // 0x1c098c: ldr             x1, [fp, #0x10]
    // 0x1c0990: StoreField: r1->field_17 = r0
    //     0x1c0990: stur            w0, [x1, #0x17]
    //     0x1c0994: ldurb           w16, [x1, #-1]
    //     0x1c0998: ldurb           w17, [x0, #-1]
    //     0x1c099c: and             x16, x17, x16, lsr #2
    //     0x1c09a0: tst             x16, HEAP, lsr #32
    //     0x1c09a4: b.eq            #0x1c09ac
    //     0x1c09a8: bl              #0x3e4608
    // 0x1c09ac: r0 = Null
    //     0x1c09ac: mov             x0, NULL
    // 0x1c09b0: LeaveFrame
    //     0x1c09b0: mov             SP, fp
    //     0x1c09b4: ldp             fp, lr, [SP], #0x10
    // 0x1c09b8: ret
    //     0x1c09b8: ret             
    // 0x1c09bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c09bc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c09c0: b               #0x1c08a0
    // 0x1c09c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c09c4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ activate(/* No info */) {
    // ** addr: 0x263cac, size: 0x48
    // 0x263cac: EnterFrame
    //     0x263cac: stp             fp, lr, [SP, #-0x10]!
    //     0x263cb0: mov             fp, SP
    // 0x263cb4: AllocStack(0x8)
    //     0x263cb4: sub             SP, SP, #8
    // 0x263cb8: CheckStackOverflow
    //     0x263cb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x263cbc: cmp             SP, x16
    //     0x263cc0: b.ls            #0x263cec
    // 0x263cc4: ldr             x16, [fp, #0x10]
    // 0x263cc8: str             x16, [SP]
    // 0x263ccc: r0 = _updateTickerModeNotifier()
    //     0x263ccc: bl              #0x1c0888  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x263cd0: ldr             x16, [fp, #0x10]
    // 0x263cd4: str             x16, [SP]
    // 0x263cd8: r0 = _updateTicker()
    //     0x263cd8: bl              #0x189594  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x263cdc: r0 = Null
    //     0x263cdc: mov             x0, NULL
    // 0x263ce0: LeaveFrame
    //     0x263ce0: mov             SP, fp
    //     0x263ce4: ldp             fp, lr, [SP], #0x10
    // 0x263ce8: ret
    //     0x263ce8: ret             
    // 0x263cec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x263cec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x263cf0: b               #0x263cc4
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2aebf8, size: 0xa0
    // 0x2aebf8: EnterFrame
    //     0x2aebf8: stp             fp, lr, [SP, #-0x10]!
    //     0x2aebfc: mov             fp, SP
    // 0x2aec00: AllocStack(0x18)
    //     0x2aec00: sub             SP, SP, #0x18
    // 0x2aec04: CheckStackOverflow
    //     0x2aec04: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2aec08: cmp             SP, x16
    //     0x2aec0c: b.ls            #0x2aec90
    // 0x2aec10: ldr             x0, [fp, #0x10]
    // 0x2aec14: LoadField: r1 = r0->field_17
    //     0x2aec14: ldur            w1, [x0, #0x17]
    // 0x2aec18: DecompressPointer r1
    //     0x2aec18: add             x1, x1, HEAP, lsl #32
    // 0x2aec1c: stur            x1, [fp, #-8]
    // 0x2aec20: cmp             w1, NULL
    // 0x2aec24: b.ne            #0x2aec30
    // 0x2aec28: mov             x1, x0
    // 0x2aec2c: b               #0x2aec7c
    // 0x2aec30: r1 = 1
    //     0x2aec30: movz            x1, #0x1
    // 0x2aec34: r0 = AllocateContext()
    //     0x2aec34: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2aec38: mov             x1, x0
    // 0x2aec3c: ldr             x0, [fp, #0x10]
    // 0x2aec40: StoreField: r1->field_f = r0
    //     0x2aec40: stur            w0, [x1, #0xf]
    // 0x2aec44: mov             x2, x1
    // 0x2aec48: r1 = Function '_updateTicker@216311458':.
    //     0x2aec48: add             x1, PP, #0x14, lsl #12  ; [pp+0x145d0] AnonymousClosure: (0x189618), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x189594)
    //     0x2aec4c: ldr             x1, [x1, #0x5d0]
    // 0x2aec50: r0 = AllocateClosure()
    //     0x2aec50: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2aec54: mov             x1, x0
    // 0x2aec58: ldur            x0, [fp, #-8]
    // 0x2aec5c: r2 = LoadClassIdInstr(r0)
    //     0x2aec5c: ldur            x2, [x0, #-1]
    //     0x2aec60: ubfx            x2, x2, #0xc, #0x14
    // 0x2aec64: stp             x1, x0, [SP]
    // 0x2aec68: mov             x0, x2
    // 0x2aec6c: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x2aec6c: sub             lr, x0, #0xd8f
    //     0x2aec70: ldr             lr, [x21, lr, lsl #3]
    //     0x2aec74: blr             lr
    // 0x2aec78: ldr             x1, [fp, #0x10]
    // 0x2aec7c: StoreField: r1->field_17 = rNULL
    //     0x2aec7c: stur            NULL, [x1, #0x17]
    // 0x2aec80: r0 = Null
    //     0x2aec80: mov             x0, NULL
    // 0x2aec84: LeaveFrame
    //     0x2aec84: mov             SP, fp
    //     0x2aec88: ldp             fp, lr, [SP], #0x10
    // 0x2aec8c: ret
    //     0x2aec8c: ret             
    // 0x2aec90: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2aec90: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2aec94: b               #0x2aec10
  }
}

// class id: 1452, size: 0x28, field offset: 0x1c
class _HelperErrorState extends __HelperErrorState&State&SingleTickerProviderStateMixin {

  late AnimationController _controller; // offset: 0x1c

  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x267e50, size: 0xa4
    // 0x267e50: EnterFrame
    //     0x267e50: stp             fp, lr, [SP, #-0x10]!
    //     0x267e54: mov             fp, SP
    // 0x267e58: ldr             x0, [fp, #0x10]
    // 0x267e5c: r2 = Null
    //     0x267e5c: mov             x2, NULL
    // 0x267e60: r1 = Null
    //     0x267e60: mov             x1, NULL
    // 0x267e64: r4 = 59
    //     0x267e64: movz            x4, #0x3b
    // 0x267e68: branchIfSmi(r0, 0x267e74)
    //     0x267e68: tbz             w0, #0, #0x267e74
    // 0x267e6c: r4 = LoadClassIdInstr(r0)
    //     0x267e6c: ldur            x4, [x0, #-1]
    //     0x267e70: ubfx            x4, x4, #0xc, #0x14
    // 0x267e74: cmp             x4, #0x6c3
    // 0x267e78: b.eq            #0x267e90
    // 0x267e7c: r8 = _HelperError
    //     0x267e7c: add             x8, PP, #0x14, lsl #12  ; [pp+0x145e0] Type: _HelperError
    //     0x267e80: ldr             x8, [x8, #0x5e0]
    // 0x267e84: r3 = Null
    //     0x267e84: add             x3, PP, #0x14, lsl #12  ; [pp+0x145e8] Null
    //     0x267e88: ldr             x3, [x3, #0x5e8]
    // 0x267e8c: r0 = _HelperError()
    //     0x267e8c: bl              #0x189660  ; IsType__HelperError_Stub
    // 0x267e90: ldr             x3, [fp, #0x18]
    // 0x267e94: LoadField: r2 = r3->field_7
    //     0x267e94: ldur            w2, [x3, #7]
    // 0x267e98: DecompressPointer r2
    //     0x267e98: add             x2, x2, HEAP, lsl #32
    // 0x267e9c: ldr             x0, [fp, #0x10]
    // 0x267ea0: r1 = Null
    //     0x267ea0: mov             x1, NULL
    // 0x267ea4: cmp             w2, NULL
    // 0x267ea8: b.eq            #0x267ecc
    // 0x267eac: LoadField: r4 = r2->field_17
    //     0x267eac: ldur            w4, [x2, #0x17]
    // 0x267eb0: DecompressPointer r4
    //     0x267eb0: add             x4, x4, HEAP, lsl #32
    // 0x267eb4: r8 = X0 bound StatefulWidget
    //     0x267eb4: add             x8, PP, #9, lsl #12  ; [pp+0x9ce0] TypeParameter: X0 bound StatefulWidget
    //     0x267eb8: ldr             x8, [x8, #0xce0]
    // 0x267ebc: LoadField: r9 = r4->field_7
    //     0x267ebc: ldur            x9, [x4, #7]
    // 0x267ec0: r3 = Null
    //     0x267ec0: add             x3, PP, #0x14, lsl #12  ; [pp+0x145f8] Null
    //     0x267ec4: ldr             x3, [x3, #0x5f8]
    // 0x267ec8: blr             x9
    // 0x267ecc: ldr             x1, [fp, #0x18]
    // 0x267ed0: LoadField: r2 = r1->field_b
    //     0x267ed0: ldur            w2, [x1, #0xb]
    // 0x267ed4: DecompressPointer r2
    //     0x267ed4: add             x2, x2, HEAP, lsl #32
    // 0x267ed8: cmp             w2, NULL
    // 0x267edc: b.eq            #0x267ef0
    // 0x267ee0: r0 = Null
    //     0x267ee0: mov             x0, NULL
    // 0x267ee4: LeaveFrame
    //     0x267ee4: mov             SP, fp
    //     0x267ee8: ldp             fp, lr, [SP], #0x10
    // 0x267eec: ret
    //     0x267eec: ret             
    // 0x267ef0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x267ef0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x28c6e0, size: 0x114
    // 0x28c6e0: EnterFrame
    //     0x28c6e0: stp             fp, lr, [SP, #-0x10]!
    //     0x28c6e4: mov             fp, SP
    // 0x28c6e8: AllocStack(0x8)
    //     0x28c6e8: sub             SP, SP, #8
    // 0x28c6ec: CheckStackOverflow
    //     0x28c6ec: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28c6f0: cmp             SP, x16
    //     0x28c6f4: b.ls            #0x28c7c8
    // 0x28c6f8: ldr             x0, [fp, #0x18]
    // 0x28c6fc: LoadField: r1 = r0->field_1b
    //     0x28c6fc: ldur            w1, [x0, #0x1b]
    // 0x28c700: DecompressPointer r1
    //     0x28c700: add             x1, x1, HEAP, lsl #32
    // 0x28c704: r16 = Sentinel
    //     0x28c704: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c708: cmp             w1, w16
    // 0x28c70c: b.eq            #0x28c7d0
    // 0x28c710: LoadField: r2 = r1->field_43
    //     0x28c710: ldur            w2, [x1, #0x43]
    // 0x28c714: DecompressPointer r2
    //     0x28c714: add             x2, x2, HEAP, lsl #32
    // 0x28c718: r16 = Sentinel
    //     0x28c718: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c71c: cmp             w2, w16
    // 0x28c720: b.eq            #0x28c7dc
    // 0x28c724: r16 = Instance_AnimationStatus
    //     0x28c724: ldr             x16, [PP, #0x5630]  ; [pp+0x5630] Obj!AnimationStatus@482041
    // 0x28c728: cmp             w2, w16
    // 0x28c72c: b.ne            #0x28c758
    // 0x28c730: StoreField: r0->field_23 = rNULL
    //     0x28c730: stur            NULL, [x0, #0x23]
    // 0x28c734: LoadField: r1 = r0->field_b
    //     0x28c734: ldur            w1, [x0, #0xb]
    // 0x28c738: DecompressPointer r1
    //     0x28c738: add             x1, x1, HEAP, lsl #32
    // 0x28c73c: cmp             w1, NULL
    // 0x28c740: b.eq            #0x28c7e4
    // 0x28c744: StoreField: r0->field_1f = rNULL
    //     0x28c744: stur            NULL, [x0, #0x1f]
    // 0x28c748: r0 = Instance_SizedBox
    //     0x28c748: ldr             x0, [PP, #0x5800]  ; [pp+0x5800] Obj!SizedBox@47ba51
    // 0x28c74c: LeaveFrame
    //     0x28c74c: mov             SP, fp
    //     0x28c750: ldp             fp, lr, [SP], #0x10
    // 0x28c754: ret
    //     0x28c754: ret             
    // 0x28c758: r16 = Instance_AnimationStatus
    //     0x28c758: ldr             x16, [PP, #0x5628]  ; [pp+0x5628] Obj!AnimationStatus@482061
    // 0x28c75c: cmp             w2, w16
    // 0x28c760: b.ne            #0x28c78c
    // 0x28c764: StoreField: r0->field_1f = rNULL
    //     0x28c764: stur            NULL, [x0, #0x1f]
    // 0x28c768: LoadField: r1 = r0->field_b
    //     0x28c768: ldur            w1, [x0, #0xb]
    // 0x28c76c: DecompressPointer r1
    //     0x28c76c: add             x1, x1, HEAP, lsl #32
    // 0x28c770: cmp             w1, NULL
    // 0x28c774: b.eq            #0x28c7e8
    // 0x28c778: StoreField: r0->field_23 = rNULL
    //     0x28c778: stur            NULL, [x0, #0x23]
    // 0x28c77c: r0 = Instance_SizedBox
    //     0x28c77c: ldr             x0, [PP, #0x5800]  ; [pp+0x5800] Obj!SizedBox@47ba51
    // 0x28c780: LeaveFrame
    //     0x28c780: mov             SP, fp
    //     0x28c784: ldp             fp, lr, [SP], #0x10
    // 0x28c788: ret
    //     0x28c788: ret             
    // 0x28c78c: LoadField: r1 = r0->field_b
    //     0x28c78c: ldur            w1, [x0, #0xb]
    // 0x28c790: DecompressPointer r1
    //     0x28c790: add             x1, x1, HEAP, lsl #32
    // 0x28c794: cmp             w1, NULL
    // 0x28c798: b.eq            #0x28c7ec
    // 0x28c79c: str             x0, [SP]
    // 0x28c7a0: r0 = _usesRouter()
    //     0x28c7a0: bl              #0x2813cc  ; [package:flutter/src/material/app.dart] _MaterialAppState::_usesRouter
    // 0x28c7a4: ldr             x1, [fp, #0x18]
    // 0x28c7a8: LoadField: r2 = r1->field_b
    //     0x28c7a8: ldur            w2, [x1, #0xb]
    // 0x28c7ac: DecompressPointer r2
    //     0x28c7ac: add             x2, x2, HEAP, lsl #32
    // 0x28c7b0: cmp             w2, NULL
    // 0x28c7b4: b.eq            #0x28c7f0
    // 0x28c7b8: r0 = Instance_SizedBox
    //     0x28c7b8: ldr             x0, [PP, #0x5800]  ; [pp+0x5800] Obj!SizedBox@47ba51
    // 0x28c7bc: LeaveFrame
    //     0x28c7bc: mov             SP, fp
    //     0x28c7c0: ldp             fp, lr, [SP], #0x10
    // 0x28c7c4: ret
    //     0x28c7c4: ret             
    // 0x28c7c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28c7c8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28c7cc: b               #0x28c6f8
    // 0x28c7d0: r9 = _controller
    //     0x28c7d0: add             x9, PP, #0x14, lsl #12  ; [pp+0x145d8] Field <_HelperErrorState@73019562._controller@73019562>: late (offset: 0x1c)
    //     0x28c7d4: ldr             x9, [x9, #0x5d8]
    // 0x28c7d8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28c7d8: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28c7dc: r9 = _status
    //     0x28c7dc: ldr             x9, [PP, #0x5668]  ; [pp+0x5668] Field <AnimationController._status@337066280>: late (offset: 0x44)
    // 0x28c7e0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28c7e0: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28c7e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28c7e4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28c7e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28c7e8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28c7ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28c7ec: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28c7f0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28c7f0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2aeb90, size: 0x68
    // 0x2aeb90: EnterFrame
    //     0x2aeb90: stp             fp, lr, [SP, #-0x10]!
    //     0x2aeb94: mov             fp, SP
    // 0x2aeb98: AllocStack(0x8)
    //     0x2aeb98: sub             SP, SP, #8
    // 0x2aeb9c: CheckStackOverflow
    //     0x2aeb9c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2aeba0: cmp             SP, x16
    //     0x2aeba4: b.ls            #0x2aebe4
    // 0x2aeba8: ldr             x0, [fp, #0x10]
    // 0x2aebac: LoadField: r1 = r0->field_1b
    //     0x2aebac: ldur            w1, [x0, #0x1b]
    // 0x2aebb0: DecompressPointer r1
    //     0x2aebb0: add             x1, x1, HEAP, lsl #32
    // 0x2aebb4: r16 = Sentinel
    //     0x2aebb4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2aebb8: cmp             w1, w16
    // 0x2aebbc: b.eq            #0x2aebec
    // 0x2aebc0: str             x1, [SP]
    // 0x2aebc4: r0 = dispose()
    //     0x2aebc4: bl              #0x2069f4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0x2aebc8: ldr             x16, [fp, #0x10]
    // 0x2aebcc: str             x16, [SP]
    // 0x2aebd0: r0 = dispose()
    //     0x2aebd0: bl              #0x2aebf8  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::dispose
    // 0x2aebd4: r0 = Null
    //     0x2aebd4: mov             x0, NULL
    // 0x2aebd8: LeaveFrame
    //     0x2aebd8: mov             SP, fp
    //     0x2aebdc: ldp             fp, lr, [SP], #0x10
    // 0x2aebe0: ret
    //     0x2aebe0: ret             
    // 0x2aebe4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2aebe4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2aebe8: b               #0x2aeba8
    // 0x2aebec: r9 = _controller
    //     0x2aebec: add             x9, PP, #0x14, lsl #12  ; [pp+0x145d8] Field <_HelperErrorState@73019562._controller@73019562>: late (offset: 0x1c)
    //     0x2aebf0: ldr             x9, [x9, #0x5d8]
    // 0x2aebf4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2aebf4: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0x2c8f7c, size: 0xc4
    // 0x2c8f7c: EnterFrame
    //     0x2c8f7c: stp             fp, lr, [SP, #-0x10]!
    //     0x2c8f80: mov             fp, SP
    // 0x2c8f84: AllocStack(0x20)
    //     0x2c8f84: sub             SP, SP, #0x20
    // 0x2c8f88: CheckStackOverflow
    //     0x2c8f88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2c8f8c: cmp             SP, x16
    //     0x2c8f90: b.ls            #0x2c9034
    // 0x2c8f94: r1 = <double>
    //     0x2c8f94: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c8f98: r0 = AnimationController()
    //     0x2c8f98: bl              #0x2174fc  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x2c8f9c: stur            x0, [fp, #-8]
    // 0x2c8fa0: ldr             x16, [fp, #0x10]
    // 0x2c8fa4: stp             x16, x0, [SP, #8]
    // 0x2c8fa8: r16 = Instance_Duration
    //     0x2c8fa8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b50] Obj!Duration@482ca1
    //     0x2c8fac: ldr             x16, [x16, #0xb50]
    // 0x2c8fb0: str             x16, [SP]
    // 0x2c8fb4: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0x2c8fb4: add             x4, PP, #0xa, lsl #12  ; [pp+0xa128] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0x2c8fb8: ldr             x4, [x4, #0x128]
    // 0x2c8fbc: r0 = AnimationController()
    //     0x2c8fbc: bl              #0x2362c8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x2c8fc0: ldur            x0, [fp, #-8]
    // 0x2c8fc4: ldr             x1, [fp, #0x10]
    // 0x2c8fc8: StoreField: r1->field_1b = r0
    //     0x2c8fc8: stur            w0, [x1, #0x1b]
    //     0x2c8fcc: ldurb           w16, [x1, #-1]
    //     0x2c8fd0: ldurb           w17, [x0, #-1]
    //     0x2c8fd4: and             x16, x17, x16, lsr #2
    //     0x2c8fd8: tst             x16, HEAP, lsr #32
    //     0x2c8fdc: b.eq            #0x2c8fe4
    //     0x2c8fe0: bl              #0x3e4608
    // 0x2c8fe4: LoadField: r0 = r1->field_b
    //     0x2c8fe4: ldur            w0, [x1, #0xb]
    // 0x2c8fe8: DecompressPointer r0
    //     0x2c8fe8: add             x0, x0, HEAP, lsl #32
    // 0x2c8fec: cmp             w0, NULL
    // 0x2c8ff0: b.eq            #0x2c903c
    // 0x2c8ff4: r1 = 1
    //     0x2c8ff4: movz            x1, #0x1
    // 0x2c8ff8: r0 = AllocateContext()
    //     0x2c8ff8: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2c8ffc: mov             x1, x0
    // 0x2c9000: ldr             x0, [fp, #0x10]
    // 0x2c9004: StoreField: r1->field_f = r0
    //     0x2c9004: stur            w0, [x1, #0xf]
    // 0x2c9008: mov             x2, x1
    // 0x2c900c: r1 = Function '_handleChange@73019562':.
    //     0x2c900c: add             x1, PP, #0x14, lsl #12  ; [pp+0x14608] AnonymousClosure: (0x2c9040), in [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_handleChange (0x2c9088)
    //     0x2c9010: ldr             x1, [x1, #0x608]
    // 0x2c9014: r0 = AllocateClosure()
    //     0x2c9014: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2c9018: ldur            x16, [fp, #-8]
    // 0x2c901c: stp             x0, x16, [SP]
    // 0x2c9020: r0 = addListener()
    //     0x2c9020: bl              #0x370130  ; [package:flutter/src/animation/animation_controller.dart] _AnimationController&Animation&AnimationEagerListenerMixin&AnimationLocalListenersMixin::addListener
    // 0x2c9024: r0 = Null
    //     0x2c9024: mov             x0, NULL
    // 0x2c9028: LeaveFrame
    //     0x2c9028: mov             SP, fp
    //     0x2c902c: ldp             fp, lr, [SP], #0x10
    // 0x2c9030: ret
    //     0x2c9030: ret             
    // 0x2c9034: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2c9034: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2c9038: b               #0x2c8f94
    // 0x2c903c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2c903c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _handleChange(dynamic) {
    // ** addr: 0x2c9040, size: 0x48
    // 0x2c9040: EnterFrame
    //     0x2c9040: stp             fp, lr, [SP, #-0x10]!
    //     0x2c9044: mov             fp, SP
    // 0x2c9048: AllocStack(0x8)
    //     0x2c9048: sub             SP, SP, #8
    // 0x2c904c: SetupParameters()
    //     0x2c904c: ldr             x0, [fp, #0x10]
    //     0x2c9050: ldur            w1, [x0, #0x17]
    //     0x2c9054: add             x1, x1, HEAP, lsl #32
    // 0x2c9058: CheckStackOverflow
    //     0x2c9058: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2c905c: cmp             SP, x16
    //     0x2c9060: b.ls            #0x2c9080
    // 0x2c9064: LoadField: r0 = r1->field_f
    //     0x2c9064: ldur            w0, [x1, #0xf]
    // 0x2c9068: DecompressPointer r0
    //     0x2c9068: add             x0, x0, HEAP, lsl #32
    // 0x2c906c: str             x0, [SP]
    // 0x2c9070: r0 = _handleChange()
    //     0x2c9070: bl              #0x2c9088  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_handleChange
    // 0x2c9074: LeaveFrame
    //     0x2c9074: mov             SP, fp
    //     0x2c9078: ldp             fp, lr, [SP], #0x10
    // 0x2c907c: ret
    //     0x2c907c: ret             
    // 0x2c9080: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2c9080: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2c9084: b               #0x2c9064
  }
  _ _handleChange(/* No info */) {
    // ** addr: 0x2c9088, size: 0x4c
    // 0x2c9088: EnterFrame
    //     0x2c9088: stp             fp, lr, [SP, #-0x10]!
    //     0x2c908c: mov             fp, SP
    // 0x2c9090: AllocStack(0x10)
    //     0x2c9090: sub             SP, SP, #0x10
    // 0x2c9094: CheckStackOverflow
    //     0x2c9094: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2c9098: cmp             SP, x16
    //     0x2c909c: b.ls            #0x2c90cc
    // 0x2c90a0: r1 = Function '<anonymous closure>':.
    //     0x2c90a0: add             x1, PP, #0x14, lsl #12  ; [pp+0x14610] Function: [dart:ui] _NativeScene::_NativeScene._ (0x3daaf0)
    //     0x2c90a4: ldr             x1, [x1, #0x610]
    // 0x2c90a8: r2 = Null
    //     0x2c90a8: mov             x2, NULL
    // 0x2c90ac: r0 = AllocateClosure()
    //     0x2c90ac: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2c90b0: ldr             x16, [fp, #0x10]
    // 0x2c90b4: stp             x0, x16, [SP]
    // 0x2c90b8: r0 = setState()
    //     0x2c90b8: bl              #0x22f03c  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x2c90bc: r0 = Null
    //     0x2c90bc: mov             x0, NULL
    // 0x2c90c0: LeaveFrame
    //     0x2c90c0: mov             SP, fp
    //     0x2c90c4: ldp             fp, lr, [SP], #0x10
    // 0x2c90c8: ret
    //     0x2c90c8: ret             
    // 0x2c90cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2c90cc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2c90d0: b               #0x2c90a0
  }
}

// class id: 1453, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __BorderContainerState&State&TickerProviderStateMixin extends State<dynamic>
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x1c0364, size: 0x180
    // 0x1c0364: EnterFrame
    //     0x1c0364: stp             fp, lr, [SP, #-0x10]!
    //     0x1c0368: mov             fp, SP
    // 0x1c036c: AllocStack(0x20)
    //     0x1c036c: sub             SP, SP, #0x20
    // 0x1c0370: CheckStackOverflow
    //     0x1c0370: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0374: cmp             SP, x16
    //     0x1c0378: b.ls            #0x1c04d4
    // 0x1c037c: ldr             x0, [fp, #0x18]
    // 0x1c0380: LoadField: r1 = r0->field_17
    //     0x1c0380: ldur            w1, [x0, #0x17]
    // 0x1c0384: DecompressPointer r1
    //     0x1c0384: add             x1, x1, HEAP, lsl #32
    // 0x1c0388: cmp             w1, NULL
    // 0x1c038c: b.ne            #0x1c0398
    // 0x1c0390: str             x0, [SP]
    // 0x1c0394: r0 = _updateTickerModeNotifier()
    //     0x1c0394: bl              #0x1c0504  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x1c0398: ldr             x0, [fp, #0x18]
    // 0x1c039c: LoadField: r1 = r0->field_13
    //     0x1c039c: ldur            w1, [x0, #0x13]
    // 0x1c03a0: DecompressPointer r1
    //     0x1c03a0: add             x1, x1, HEAP, lsl #32
    // 0x1c03a4: cmp             w1, NULL
    // 0x1c03a8: b.ne            #0x1c043c
    // 0x1c03ac: r0 = InitLateStaticField(0x4d8) // [dart:collection] ::_uninitializedIndex
    //     0x1c03ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1c03b0: ldr             x0, [x0, #0x9b0]
    //     0x1c03b4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1c03b8: cmp             w0, w16
    //     0x1c03bc: b.ne            #0x1c03c8
    //     0x1c03c0: ldr             x2, [PP, #0x348]  ; [pp+0x348] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x4d8)
    //     0x1c03c4: bl              #0x3e406c
    // 0x1c03c8: r1 = <_WidgetTicker>
    //     0x1c03c8: ldr             x1, [PP, #0x5aa0]  ; [pp+0x5aa0] TypeArguments: <_WidgetTicker>
    // 0x1c03cc: stur            x0, [fp, #-8]
    // 0x1c03d0: r0 = _Set()
    //     0x1c03d0: bl              #0x191298  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x1c03d4: mov             x1, x0
    // 0x1c03d8: ldur            x0, [fp, #-8]
    // 0x1c03dc: stur            x1, [fp, #-0x10]
    // 0x1c03e0: StoreField: r1->field_1b = r0
    //     0x1c03e0: stur            w0, [x1, #0x1b]
    // 0x1c03e4: StoreField: r1->field_b = rZR
    //     0x1c03e4: stur            wzr, [x1, #0xb]
    // 0x1c03e8: r0 = InitLateStaticField(0x4dc) // [dart:collection] ::_uninitializedData
    //     0x1c03e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1c03ec: ldr             x0, [x0, #0x9b8]
    //     0x1c03f0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1c03f4: cmp             w0, w16
    //     0x1c03f8: b.ne            #0x1c0404
    //     0x1c03fc: ldr             x2, [PP, #0x358]  ; [pp+0x358] Field <::._uninitializedData@3220832>: static late final (offset: 0x4dc)
    //     0x1c0400: bl              #0x3e406c
    // 0x1c0404: mov             x1, x0
    // 0x1c0408: ldur            x0, [fp, #-0x10]
    // 0x1c040c: StoreField: r0->field_f = r1
    //     0x1c040c: stur            w1, [x0, #0xf]
    // 0x1c0410: StoreField: r0->field_13 = rZR
    //     0x1c0410: stur            wzr, [x0, #0x13]
    // 0x1c0414: StoreField: r0->field_17 = rZR
    //     0x1c0414: stur            wzr, [x0, #0x17]
    // 0x1c0418: ldr             x1, [fp, #0x18]
    // 0x1c041c: StoreField: r1->field_13 = r0
    //     0x1c041c: stur            w0, [x1, #0x13]
    //     0x1c0420: ldurb           w16, [x1, #-1]
    //     0x1c0424: ldurb           w17, [x0, #-1]
    //     0x1c0428: and             x16, x17, x16, lsr #2
    //     0x1c042c: tst             x16, HEAP, lsr #32
    //     0x1c0430: b.eq            #0x1c0438
    //     0x1c0434: bl              #0x3e4608
    // 0x1c0438: b               #0x1c0440
    // 0x1c043c: mov             x1, x0
    // 0x1c0440: ldr             x0, [fp, #0x10]
    // 0x1c0444: r0 = _WidgetTicker()
    //     0x1c0444: bl              #0x1bfbb4  ; Allocate_WidgetTickerStub -> _WidgetTicker (size=0x20)
    // 0x1c0448: mov             x2, x0
    // 0x1c044c: ldr             x1, [fp, #0x18]
    // 0x1c0450: stur            x2, [fp, #-8]
    // 0x1c0454: StoreField: r2->field_1b = r1
    //     0x1c0454: stur            w1, [x2, #0x1b]
    // 0x1c0458: r0 = false
    //     0x1c0458: add             x0, NULL, #0x30  ; false
    // 0x1c045c: StoreField: r2->field_b = r0
    //     0x1c045c: stur            w0, [x2, #0xb]
    // 0x1c0460: ldr             x0, [fp, #0x10]
    // 0x1c0464: StoreField: r2->field_13 = r0
    //     0x1c0464: stur            w0, [x2, #0x13]
    // 0x1c0468: LoadField: r0 = r1->field_17
    //     0x1c0468: ldur            w0, [x1, #0x17]
    // 0x1c046c: DecompressPointer r0
    //     0x1c046c: add             x0, x0, HEAP, lsl #32
    // 0x1c0470: cmp             w0, NULL
    // 0x1c0474: b.eq            #0x1c04dc
    // 0x1c0478: r3 = LoadClassIdInstr(r0)
    //     0x1c0478: ldur            x3, [x0, #-1]
    //     0x1c047c: ubfx            x3, x3, #0xc, #0x14
    // 0x1c0480: str             x0, [SP]
    // 0x1c0484: mov             x0, x3
    // 0x1c0488: r0 = GDT[cid_x0 + -0xfff]()
    //     0x1c0488: sub             lr, x0, #0xfff
    //     0x1c048c: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0490: blr             lr
    // 0x1c0494: eor             x1, x0, #0x10
    // 0x1c0498: ldur            x16, [fp, #-8]
    // 0x1c049c: stp             x1, x16, [SP]
    // 0x1c04a0: r0 = muted=()
    //     0x1c04a0: bl              #0x189680  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x1c04a4: ldr             x0, [fp, #0x18]
    // 0x1c04a8: LoadField: r1 = r0->field_13
    //     0x1c04a8: ldur            w1, [x0, #0x13]
    // 0x1c04ac: DecompressPointer r1
    //     0x1c04ac: add             x1, x1, HEAP, lsl #32
    // 0x1c04b0: cmp             w1, NULL
    // 0x1c04b4: b.eq            #0x1c04e0
    // 0x1c04b8: ldur            x16, [fp, #-8]
    // 0x1c04bc: stp             x16, x1, [SP]
    // 0x1c04c0: r0 = add()
    //     0x1c04c0: bl              #0x3d8c30  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x1c04c4: ldur            x0, [fp, #-8]
    // 0x1c04c8: LeaveFrame
    //     0x1c04c8: mov             SP, fp
    //     0x1c04cc: ldp             fp, lr, [SP], #0x10
    // 0x1c04d0: ret
    //     0x1c04d0: ret             
    // 0x1c04d4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c04d4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c04d8: b               #0x1c037c
    // 0x1c04dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c04dc: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c04e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c04e0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x1c0504, size: 0x140
    // 0x1c0504: EnterFrame
    //     0x1c0504: stp             fp, lr, [SP, #-0x10]!
    //     0x1c0508: mov             fp, SP
    // 0x1c050c: AllocStack(0x20)
    //     0x1c050c: sub             SP, SP, #0x20
    // 0x1c0510: CheckStackOverflow
    //     0x1c0510: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0514: cmp             SP, x16
    //     0x1c0518: b.ls            #0x1c0638
    // 0x1c051c: ldr             x0, [fp, #0x10]
    // 0x1c0520: LoadField: r1 = r0->field_f
    //     0x1c0520: ldur            w1, [x0, #0xf]
    // 0x1c0524: DecompressPointer r1
    //     0x1c0524: add             x1, x1, HEAP, lsl #32
    // 0x1c0528: cmp             w1, NULL
    // 0x1c052c: b.eq            #0x1c0640
    // 0x1c0530: str             x1, [SP]
    // 0x1c0534: r0 = getNotifier()
    //     0x1c0534: bl              #0x1bf5f0  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x1c0538: mov             x1, x0
    // 0x1c053c: ldr             x0, [fp, #0x10]
    // 0x1c0540: stur            x1, [fp, #-0x10]
    // 0x1c0544: LoadField: r2 = r0->field_17
    //     0x1c0544: ldur            w2, [x0, #0x17]
    // 0x1c0548: DecompressPointer r2
    //     0x1c0548: add             x2, x2, HEAP, lsl #32
    // 0x1c054c: stur            x2, [fp, #-8]
    // 0x1c0550: cmp             w1, w2
    // 0x1c0554: b.ne            #0x1c0568
    // 0x1c0558: r0 = Null
    //     0x1c0558: mov             x0, NULL
    // 0x1c055c: LeaveFrame
    //     0x1c055c: mov             SP, fp
    //     0x1c0560: ldp             fp, lr, [SP], #0x10
    // 0x1c0564: ret
    //     0x1c0564: ret             
    // 0x1c0568: cmp             w2, NULL
    // 0x1c056c: b.eq            #0x1c05c0
    // 0x1c0570: r1 = 1
    //     0x1c0570: movz            x1, #0x1
    // 0x1c0574: r0 = AllocateContext()
    //     0x1c0574: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c0578: mov             x1, x0
    // 0x1c057c: ldr             x0, [fp, #0x10]
    // 0x1c0580: StoreField: r1->field_f = r0
    //     0x1c0580: stur            w0, [x1, #0xf]
    // 0x1c0584: mov             x2, x1
    // 0x1c0588: r1 = Function '_updateTickers@216311458':.
    //     0x1c0588: add             x1, PP, #0x14, lsl #12  ; [pp+0x14380] AnonymousClosure: (0x1c0644), in [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers (0x1c068c)
    //     0x1c058c: ldr             x1, [x1, #0x380]
    // 0x1c0590: r0 = AllocateClosure()
    //     0x1c0590: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c0594: mov             x1, x0
    // 0x1c0598: ldur            x0, [fp, #-8]
    // 0x1c059c: r2 = LoadClassIdInstr(r0)
    //     0x1c059c: ldur            x2, [x0, #-1]
    //     0x1c05a0: ubfx            x2, x2, #0xc, #0x14
    // 0x1c05a4: stp             x1, x0, [SP]
    // 0x1c05a8: mov             x0, x2
    // 0x1c05ac: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x1c05ac: sub             lr, x0, #0xd8f
    //     0x1c05b0: ldr             lr, [x21, lr, lsl #3]
    //     0x1c05b4: blr             lr
    // 0x1c05b8: ldr             x0, [fp, #0x10]
    // 0x1c05bc: ldur            x1, [fp, #-0x10]
    // 0x1c05c0: r1 = 1
    //     0x1c05c0: movz            x1, #0x1
    // 0x1c05c4: r0 = AllocateContext()
    //     0x1c05c4: bl              #0x3e4e00  ; AllocateContextStub
    // 0x1c05c8: mov             x1, x0
    // 0x1c05cc: ldr             x0, [fp, #0x10]
    // 0x1c05d0: StoreField: r1->field_f = r0
    //     0x1c05d0: stur            w0, [x1, #0xf]
    // 0x1c05d4: mov             x2, x1
    // 0x1c05d8: r1 = Function '_updateTickers@216311458':.
    //     0x1c05d8: add             x1, PP, #0x14, lsl #12  ; [pp+0x14380] AnonymousClosure: (0x1c0644), in [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers (0x1c068c)
    //     0x1c05dc: ldr             x1, [x1, #0x380]
    // 0x1c05e0: r0 = AllocateClosure()
    //     0x1c05e0: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x1c05e4: ldur            x1, [fp, #-0x10]
    // 0x1c05e8: r2 = LoadClassIdInstr(r1)
    //     0x1c05e8: ldur            x2, [x1, #-1]
    //     0x1c05ec: ubfx            x2, x2, #0xc, #0x14
    // 0x1c05f0: stp             x0, x1, [SP]
    // 0x1c05f4: mov             x0, x2
    // 0x1c05f8: r0 = GDT[cid_x0 + -0x7f2]()
    //     0x1c05f8: sub             lr, x0, #0x7f2
    //     0x1c05fc: ldr             lr, [x21, lr, lsl #3]
    //     0x1c0600: blr             lr
    // 0x1c0604: ldur            x0, [fp, #-0x10]
    // 0x1c0608: ldr             x1, [fp, #0x10]
    // 0x1c060c: StoreField: r1->field_17 = r0
    //     0x1c060c: stur            w0, [x1, #0x17]
    //     0x1c0610: ldurb           w16, [x1, #-1]
    //     0x1c0614: ldurb           w17, [x0, #-1]
    //     0x1c0618: and             x16, x17, x16, lsr #2
    //     0x1c061c: tst             x16, HEAP, lsr #32
    //     0x1c0620: b.eq            #0x1c0628
    //     0x1c0624: bl              #0x3e4608
    // 0x1c0628: r0 = Null
    //     0x1c0628: mov             x0, NULL
    // 0x1c062c: LeaveFrame
    //     0x1c062c: mov             SP, fp
    //     0x1c0630: ldp             fp, lr, [SP], #0x10
    // 0x1c0634: ret
    //     0x1c0634: ret             
    // 0x1c0638: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c0638: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c063c: b               #0x1c051c
    // 0x1c0640: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c0640: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTickers(dynamic) {
    // ** addr: 0x1c0644, size: 0x48
    // 0x1c0644: EnterFrame
    //     0x1c0644: stp             fp, lr, [SP, #-0x10]!
    //     0x1c0648: mov             fp, SP
    // 0x1c064c: AllocStack(0x8)
    //     0x1c064c: sub             SP, SP, #8
    // 0x1c0650: SetupParameters()
    //     0x1c0650: ldr             x0, [fp, #0x10]
    //     0x1c0654: ldur            w1, [x0, #0x17]
    //     0x1c0658: add             x1, x1, HEAP, lsl #32
    // 0x1c065c: CheckStackOverflow
    //     0x1c065c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0660: cmp             SP, x16
    //     0x1c0664: b.ls            #0x1c0684
    // 0x1c0668: LoadField: r0 = r1->field_f
    //     0x1c0668: ldur            w0, [x1, #0xf]
    // 0x1c066c: DecompressPointer r0
    //     0x1c066c: add             x0, x0, HEAP, lsl #32
    // 0x1c0670: str             x0, [SP]
    // 0x1c0674: r0 = _updateTickers()
    //     0x1c0674: bl              #0x1c068c  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers
    // 0x1c0678: LeaveFrame
    //     0x1c0678: mov             SP, fp
    //     0x1c067c: ldp             fp, lr, [SP], #0x10
    // 0x1c0680: ret
    //     0x1c0680: ret             
    // 0x1c0684: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c0684: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c0688: b               #0x1c0668
  }
  _ _updateTickers(/* No info */) {
    // ** addr: 0x1c068c, size: 0x168
    // 0x1c068c: EnterFrame
    //     0x1c068c: stp             fp, lr, [SP, #-0x10]!
    //     0x1c0690: mov             fp, SP
    // 0x1c0694: AllocStack(0x28)
    //     0x1c0694: sub             SP, SP, #0x28
    // 0x1c0698: CheckStackOverflow
    //     0x1c0698: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c069c: cmp             SP, x16
    //     0x1c06a0: b.ls            #0x1c07dc
    // 0x1c06a4: ldr             x1, [fp, #0x10]
    // 0x1c06a8: LoadField: r0 = r1->field_13
    //     0x1c06a8: ldur            w0, [x1, #0x13]
    // 0x1c06ac: DecompressPointer r0
    //     0x1c06ac: add             x0, x0, HEAP, lsl #32
    // 0x1c06b0: cmp             w0, NULL
    // 0x1c06b4: b.eq            #0x1c07cc
    // 0x1c06b8: LoadField: r0 = r1->field_17
    //     0x1c06b8: ldur            w0, [x1, #0x17]
    // 0x1c06bc: DecompressPointer r0
    //     0x1c06bc: add             x0, x0, HEAP, lsl #32
    // 0x1c06c0: cmp             w0, NULL
    // 0x1c06c4: b.eq            #0x1c07e4
    // 0x1c06c8: r2 = LoadClassIdInstr(r0)
    //     0x1c06c8: ldur            x2, [x0, #-1]
    //     0x1c06cc: ubfx            x2, x2, #0xc, #0x14
    // 0x1c06d0: str             x0, [SP]
    // 0x1c06d4: mov             x0, x2
    // 0x1c06d8: r0 = GDT[cid_x0 + -0xfff]()
    //     0x1c06d8: sub             lr, x0, #0xfff
    //     0x1c06dc: ldr             lr, [x21, lr, lsl #3]
    //     0x1c06e0: blr             lr
    // 0x1c06e4: eor             x1, x0, #0x10
    // 0x1c06e8: ldr             x0, [fp, #0x10]
    // 0x1c06ec: stur            x1, [fp, #-8]
    // 0x1c06f0: LoadField: r2 = r0->field_13
    //     0x1c06f0: ldur            w2, [x0, #0x13]
    // 0x1c06f4: DecompressPointer r2
    //     0x1c06f4: add             x2, x2, HEAP, lsl #32
    // 0x1c06f8: cmp             w2, NULL
    // 0x1c06fc: b.eq            #0x1c07e8
    // 0x1c0700: str             x2, [SP]
    // 0x1c0704: r0 = iterator()
    //     0x1c0704: bl              #0x34cfcc  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x1c0708: stur            x0, [fp, #-0x18]
    // 0x1c070c: LoadField: r2 = r0->field_7
    //     0x1c070c: ldur            w2, [x0, #7]
    // 0x1c0710: DecompressPointer r2
    //     0x1c0710: add             x2, x2, HEAP, lsl #32
    // 0x1c0714: stur            x2, [fp, #-0x10]
    // 0x1c0718: ldur            x1, [fp, #-8]
    // 0x1c071c: CheckStackOverflow
    //     0x1c071c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1c0720: cmp             SP, x16
    //     0x1c0724: b.ls            #0x1c07ec
    // 0x1c0728: str             x0, [SP]
    // 0x1c072c: r0 = moveNext()
    //     0x1c072c: bl              #0x39b2b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x1c0730: tbnz            w0, #4, #0x1c07cc
    // 0x1c0734: ldur            x3, [fp, #-0x18]
    // 0x1c0738: LoadField: r4 = r3->field_33
    //     0x1c0738: ldur            w4, [x3, #0x33]
    // 0x1c073c: DecompressPointer r4
    //     0x1c073c: add             x4, x4, HEAP, lsl #32
    // 0x1c0740: stur            x4, [fp, #-0x20]
    // 0x1c0744: cmp             w4, NULL
    // 0x1c0748: b.ne            #0x1c077c
    // 0x1c074c: mov             x0, x4
    // 0x1c0750: ldur            x2, [fp, #-0x10]
    // 0x1c0754: r1 = Null
    //     0x1c0754: mov             x1, NULL
    // 0x1c0758: cmp             w2, NULL
    // 0x1c075c: b.eq            #0x1c077c
    // 0x1c0760: LoadField: r4 = r2->field_17
    //     0x1c0760: ldur            w4, [x2, #0x17]
    // 0x1c0764: DecompressPointer r4
    //     0x1c0764: add             x4, x4, HEAP, lsl #32
    // 0x1c0768: r8 = X0
    //     0x1c0768: ldr             x8, [PP, #0x390]  ; [pp+0x390] TypeParameter: X0
    // 0x1c076c: LoadField: r9 = r4->field_7
    //     0x1c076c: ldur            x9, [x4, #7]
    // 0x1c0770: r3 = Null
    //     0x1c0770: add             x3, PP, #0x14, lsl #12  ; [pp+0x14370] Null
    //     0x1c0774: ldr             x3, [x3, #0x370]
    // 0x1c0778: blr             x9
    // 0x1c077c: ldur            x1, [fp, #-8]
    // 0x1c0780: ldur            x0, [fp, #-0x20]
    // 0x1c0784: LoadField: r2 = r0->field_b
    //     0x1c0784: ldur            w2, [x0, #0xb]
    // 0x1c0788: DecompressPointer r2
    //     0x1c0788: add             x2, x2, HEAP, lsl #32
    // 0x1c078c: cmp             w1, w2
    // 0x1c0790: b.eq            #0x1c07c0
    // 0x1c0794: StoreField: r0->field_b = r1
    //     0x1c0794: stur            w1, [x0, #0xb]
    // 0x1c0798: tbnz            w1, #4, #0x1c07a8
    // 0x1c079c: str             x0, [SP]
    // 0x1c07a0: r0 = unscheduleTick()
    //     0x1c07a0: bl              #0x1bf3c4  ; [package:flutter/src/scheduler/ticker.dart] Ticker::unscheduleTick
    // 0x1c07a4: b               #0x1c07c0
    // 0x1c07a8: str             x0, [SP]
    // 0x1c07ac: r0 = shouldScheduleTick()
    //     0x1c07ac: bl              #0x1bf37c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::shouldScheduleTick
    // 0x1c07b0: tbnz            w0, #4, #0x1c07c0
    // 0x1c07b4: ldur            x16, [fp, #-0x20]
    // 0x1c07b8: str             x16, [SP]
    // 0x1c07bc: r0 = scheduleTick()
    //     0x1c07bc: bl              #0x189704  ; [package:flutter/src/scheduler/ticker.dart] Ticker::scheduleTick
    // 0x1c07c0: ldur            x0, [fp, #-0x18]
    // 0x1c07c4: ldur            x2, [fp, #-0x10]
    // 0x1c07c8: b               #0x1c0718
    // 0x1c07cc: r0 = Null
    //     0x1c07cc: mov             x0, NULL
    // 0x1c07d0: LeaveFrame
    //     0x1c07d0: mov             SP, fp
    //     0x1c07d4: ldp             fp, lr, [SP], #0x10
    // 0x1c07d8: ret
    //     0x1c07d8: ret             
    // 0x1c07dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c07dc: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c07e0: b               #0x1c06a4
    // 0x1c07e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c07e4: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c07e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x1c07e8: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x1c07ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1c07ec: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1c07f0: b               #0x1c0728
  }
  _ activate(/* No info */) {
    // ** addr: 0x263c64, size: 0x48
    // 0x263c64: EnterFrame
    //     0x263c64: stp             fp, lr, [SP, #-0x10]!
    //     0x263c68: mov             fp, SP
    // 0x263c6c: AllocStack(0x8)
    //     0x263c6c: sub             SP, SP, #8
    // 0x263c70: CheckStackOverflow
    //     0x263c70: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x263c74: cmp             SP, x16
    //     0x263c78: b.ls            #0x263ca4
    // 0x263c7c: ldr             x16, [fp, #0x10]
    // 0x263c80: str             x16, [SP]
    // 0x263c84: r0 = _updateTickerModeNotifier()
    //     0x263c84: bl              #0x1c0504  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x263c88: ldr             x16, [fp, #0x10]
    // 0x263c8c: str             x16, [SP]
    // 0x263c90: r0 = _updateTickers()
    //     0x263c90: bl              #0x1c068c  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers
    // 0x263c94: r0 = Null
    //     0x263c94: mov             x0, NULL
    // 0x263c98: LeaveFrame
    //     0x263c98: mov             SP, fp
    //     0x263c9c: ldp             fp, lr, [SP], #0x10
    // 0x263ca0: ret
    //     0x263ca0: ret             
    // 0x263ca4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x263ca4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x263ca8: b               #0x263c7c
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2aeaf0, size: 0xa0
    // 0x2aeaf0: EnterFrame
    //     0x2aeaf0: stp             fp, lr, [SP, #-0x10]!
    //     0x2aeaf4: mov             fp, SP
    // 0x2aeaf8: AllocStack(0x18)
    //     0x2aeaf8: sub             SP, SP, #0x18
    // 0x2aeafc: CheckStackOverflow
    //     0x2aeafc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2aeb00: cmp             SP, x16
    //     0x2aeb04: b.ls            #0x2aeb88
    // 0x2aeb08: ldr             x0, [fp, #0x10]
    // 0x2aeb0c: LoadField: r1 = r0->field_17
    //     0x2aeb0c: ldur            w1, [x0, #0x17]
    // 0x2aeb10: DecompressPointer r1
    //     0x2aeb10: add             x1, x1, HEAP, lsl #32
    // 0x2aeb14: stur            x1, [fp, #-8]
    // 0x2aeb18: cmp             w1, NULL
    // 0x2aeb1c: b.ne            #0x2aeb28
    // 0x2aeb20: mov             x1, x0
    // 0x2aeb24: b               #0x2aeb74
    // 0x2aeb28: r1 = 1
    //     0x2aeb28: movz            x1, #0x1
    // 0x2aeb2c: r0 = AllocateContext()
    //     0x2aeb2c: bl              #0x3e4e00  ; AllocateContextStub
    // 0x2aeb30: mov             x1, x0
    // 0x2aeb34: ldr             x0, [fp, #0x10]
    // 0x2aeb38: StoreField: r1->field_f = r0
    //     0x2aeb38: stur            w0, [x1, #0xf]
    // 0x2aeb3c: mov             x2, x1
    // 0x2aeb40: r1 = Function '_updateTickers@216311458':.
    //     0x2aeb40: add             x1, PP, #0x14, lsl #12  ; [pp+0x14380] AnonymousClosure: (0x1c0644), in [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers (0x1c068c)
    //     0x2aeb44: ldr             x1, [x1, #0x380]
    // 0x2aeb48: r0 = AllocateClosure()
    //     0x2aeb48: bl              #0x3e4f18  ; AllocateClosureStub
    // 0x2aeb4c: mov             x1, x0
    // 0x2aeb50: ldur            x0, [fp, #-8]
    // 0x2aeb54: r2 = LoadClassIdInstr(r0)
    //     0x2aeb54: ldur            x2, [x0, #-1]
    //     0x2aeb58: ubfx            x2, x2, #0xc, #0x14
    // 0x2aeb5c: stp             x1, x0, [SP]
    // 0x2aeb60: mov             x0, x2
    // 0x2aeb64: r0 = GDT[cid_x0 + -0xd8f]()
    //     0x2aeb64: sub             lr, x0, #0xd8f
    //     0x2aeb68: ldr             lr, [x21, lr, lsl #3]
    //     0x2aeb6c: blr             lr
    // 0x2aeb70: ldr             x1, [fp, #0x10]
    // 0x2aeb74: StoreField: r1->field_17 = rNULL
    //     0x2aeb74: stur            NULL, [x1, #0x17]
    // 0x2aeb78: r0 = Null
    //     0x2aeb78: mov             x0, NULL
    // 0x2aeb7c: LeaveFrame
    //     0x2aeb7c: mov             SP, fp
    //     0x2aeb80: ldp             fp, lr, [SP], #0x10
    // 0x2aeb84: ret
    //     0x2aeb84: ret             
    // 0x2aeb88: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2aeb88: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2aeb8c: b               #0x2aeb08
  }
}

// class id: 1454, size: 0x34, field offset: 0x1c
class _BorderContainerState extends __BorderContainerState&State&TickerProviderStateMixin {

  late Animation<double> _borderAnimation; // offset: 0x24
  late AnimationController _hoverColorController; // offset: 0x20
  late _InputBorderTween _border; // offset: 0x28
  late ColorTween _hoverColorTween; // offset: 0x30
  late Animation<double> _hoverAnimation; // offset: 0x2c
  late AnimationController _controller; // offset: 0x1c

  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x267a44, size: 0x338
    // 0x267a44: EnterFrame
    //     0x267a44: stp             fp, lr, [SP, #-0x10]!
    //     0x267a48: mov             fp, SP
    // 0x267a4c: AllocStack(0x20)
    //     0x267a4c: sub             SP, SP, #0x20
    // 0x267a50: CheckStackOverflow
    //     0x267a50: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x267a54: cmp             SP, x16
    //     0x267a58: b.ls            #0x267d3c
    // 0x267a5c: ldr             x0, [fp, #0x10]
    // 0x267a60: r2 = Null
    //     0x267a60: mov             x2, NULL
    // 0x267a64: r1 = Null
    //     0x267a64: mov             x1, NULL
    // 0x267a68: r4 = 59
    //     0x267a68: movz            x4, #0x3b
    // 0x267a6c: branchIfSmi(r0, 0x267a78)
    //     0x267a6c: tbz             w0, #0, #0x267a78
    // 0x267a70: r4 = LoadClassIdInstr(r0)
    //     0x267a70: ldur            x4, [x0, #-1]
    //     0x267a74: ubfx            x4, x4, #0xc, #0x14
    // 0x267a78: cmp             x4, #0x6cf
    // 0x267a7c: b.eq            #0x267a94
    // 0x267a80: r8 = _BorderContainer
    //     0x267a80: add             x8, PP, #0x14, lsl #12  ; [pp+0x14330] Type: _BorderContainer
    //     0x267a84: ldr             x8, [x8, #0x330]
    // 0x267a88: r3 = Null
    //     0x267a88: add             x3, PP, #0x14, lsl #12  ; [pp+0x14338] Null
    //     0x267a8c: ldr             x3, [x3, #0x338]
    // 0x267a90: r0 = _BorderContainer()
    //     0x267a90: bl              #0x1c04e4  ; IsType__BorderContainer_Stub
    // 0x267a94: ldr             x3, [fp, #0x18]
    // 0x267a98: LoadField: r2 = r3->field_7
    //     0x267a98: ldur            w2, [x3, #7]
    // 0x267a9c: DecompressPointer r2
    //     0x267a9c: add             x2, x2, HEAP, lsl #32
    // 0x267aa0: ldr             x0, [fp, #0x10]
    // 0x267aa4: r1 = Null
    //     0x267aa4: mov             x1, NULL
    // 0x267aa8: cmp             w2, NULL
    // 0x267aac: b.eq            #0x267ad0
    // 0x267ab0: LoadField: r4 = r2->field_17
    //     0x267ab0: ldur            w4, [x2, #0x17]
    // 0x267ab4: DecompressPointer r4
    //     0x267ab4: add             x4, x4, HEAP, lsl #32
    // 0x267ab8: r8 = X0 bound StatefulWidget
    //     0x267ab8: add             x8, PP, #9, lsl #12  ; [pp+0x9ce0] TypeParameter: X0 bound StatefulWidget
    //     0x267abc: ldr             x8, [x8, #0xce0]
    // 0x267ac0: LoadField: r9 = r4->field_7
    //     0x267ac0: ldur            x9, [x4, #7]
    // 0x267ac4: r3 = Null
    //     0x267ac4: add             x3, PP, #0x14, lsl #12  ; [pp+0x14348] Null
    //     0x267ac8: ldr             x3, [x3, #0x348]
    // 0x267acc: blr             x9
    // 0x267ad0: ldr             x1, [fp, #0x18]
    // 0x267ad4: LoadField: r0 = r1->field_b
    //     0x267ad4: ldur            w0, [x1, #0xb]
    // 0x267ad8: DecompressPointer r0
    //     0x267ad8: add             x0, x0, HEAP, lsl #32
    // 0x267adc: cmp             w0, NULL
    // 0x267ae0: b.eq            #0x267d44
    // 0x267ae4: LoadField: r2 = r0->field_b
    //     0x267ae4: ldur            w2, [x0, #0xb]
    // 0x267ae8: DecompressPointer r2
    //     0x267ae8: add             x2, x2, HEAP, lsl #32
    // 0x267aec: ldr             x3, [fp, #0x10]
    // 0x267af0: LoadField: r4 = r3->field_b
    //     0x267af0: ldur            w4, [x3, #0xb]
    // 0x267af4: DecompressPointer r4
    //     0x267af4: add             x4, x4, HEAP, lsl #32
    // 0x267af8: stur            x4, [fp, #-8]
    // 0x267afc: r0 = LoadClassIdInstr(r2)
    //     0x267afc: ldur            x0, [x2, #-1]
    //     0x267b00: ubfx            x0, x0, #0xc, #0x14
    // 0x267b04: cmp             x0, #0x2ea
    // 0x267b08: b.ne            #0x267b20
    // 0x267b0c: cmp             w2, w4
    // 0x267b10: b.eq            #0x267bd4
    // 0x267b14: mov             x0, x1
    // 0x267b18: mov             x2, x4
    // 0x267b1c: b               #0x267b44
    // 0x267b20: r0 = LoadClassIdInstr(r2)
    //     0x267b20: ldur            x0, [x2, #-1]
    //     0x267b24: ubfx            x0, x0, #0xc, #0x14
    // 0x267b28: stp             x4, x2, [SP]
    // 0x267b2c: mov             lr, x0
    // 0x267b30: ldr             lr, [x21, lr, lsl #3]
    // 0x267b34: blr             lr
    // 0x267b38: tbz             w0, #4, #0x267bd4
    // 0x267b3c: ldr             x0, [fp, #0x18]
    // 0x267b40: ldur            x2, [fp, #-8]
    // 0x267b44: LoadField: r1 = r0->field_b
    //     0x267b44: ldur            w1, [x0, #0xb]
    // 0x267b48: DecompressPointer r1
    //     0x267b48: add             x1, x1, HEAP, lsl #32
    // 0x267b4c: cmp             w1, NULL
    // 0x267b50: b.eq            #0x267d48
    // 0x267b54: LoadField: r3 = r1->field_b
    //     0x267b54: ldur            w3, [x1, #0xb]
    // 0x267b58: DecompressPointer r3
    //     0x267b58: add             x3, x3, HEAP, lsl #32
    // 0x267b5c: stur            x3, [fp, #-0x10]
    // 0x267b60: r1 = <InputBorder>
    //     0x267b60: add             x1, PP, #0x14, lsl #12  ; [pp+0x14358] TypeArguments: <InputBorder>
    //     0x267b64: ldr             x1, [x1, #0x358]
    // 0x267b68: r0 = _InputBorderTween()
    //     0x267b68: bl              #0x267d88  ; Allocate_InputBorderTweenStub -> _InputBorderTween (size=0x14)
    // 0x267b6c: mov             x1, x0
    // 0x267b70: ldur            x0, [fp, #-8]
    // 0x267b74: StoreField: r1->field_b = r0
    //     0x267b74: stur            w0, [x1, #0xb]
    // 0x267b78: ldur            x0, [fp, #-0x10]
    // 0x267b7c: StoreField: r1->field_f = r0
    //     0x267b7c: stur            w0, [x1, #0xf]
    // 0x267b80: mov             x0, x1
    // 0x267b84: ldr             x1, [fp, #0x18]
    // 0x267b88: StoreField: r1->field_27 = r0
    //     0x267b88: stur            w0, [x1, #0x27]
    //     0x267b8c: ldurb           w16, [x1, #-1]
    //     0x267b90: ldurb           w17, [x0, #-1]
    //     0x267b94: and             x16, x17, x16, lsr #2
    //     0x267b98: tst             x16, HEAP, lsr #32
    //     0x267b9c: b.eq            #0x267ba4
    //     0x267ba0: bl              #0x3e4608
    // 0x267ba4: LoadField: r0 = r1->field_1b
    //     0x267ba4: ldur            w0, [x1, #0x1b]
    // 0x267ba8: DecompressPointer r0
    //     0x267ba8: add             x0, x0, HEAP, lsl #32
    // 0x267bac: r16 = Sentinel
    //     0x267bac: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x267bb0: cmp             w0, w16
    // 0x267bb4: b.eq            #0x267d4c
    // 0x267bb8: stur            x0, [fp, #-8]
    // 0x267bbc: stp             xzr, x0, [SP]
    // 0x267bc0: r0 = value=()
    //     0x267bc0: bl              #0x209ef4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x267bc4: ldur            x16, [fp, #-8]
    // 0x267bc8: str             x16, [SP]
    // 0x267bcc: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x267bcc: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x267bd0: r0 = forward()
    //     0x267bd0: bl              #0x208e88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x267bd4: ldr             x0, [fp, #0x18]
    // 0x267bd8: ldr             x1, [fp, #0x10]
    // 0x267bdc: LoadField: r2 = r0->field_b
    //     0x267bdc: ldur            w2, [x0, #0xb]
    // 0x267be0: DecompressPointer r2
    //     0x267be0: add             x2, x2, HEAP, lsl #32
    // 0x267be4: cmp             w2, NULL
    // 0x267be8: b.eq            #0x267d58
    // 0x267bec: LoadField: r3 = r2->field_1b
    //     0x267bec: ldur            w3, [x2, #0x1b]
    // 0x267bf0: DecompressPointer r3
    //     0x267bf0: add             x3, x3, HEAP, lsl #32
    // 0x267bf4: stur            x3, [fp, #-0x10]
    // 0x267bf8: LoadField: r2 = r1->field_1b
    //     0x267bf8: ldur            w2, [x1, #0x1b]
    // 0x267bfc: DecompressPointer r2
    //     0x267bfc: add             x2, x2, HEAP, lsl #32
    // 0x267c00: stur            x2, [fp, #-8]
    // 0x267c04: cmp             w3, w2
    // 0x267c08: b.ne            #0x267c14
    // 0x267c0c: mov             x1, x0
    // 0x267c10: b               #0x267cb8
    // 0x267c14: r16 = Color
    //     0x267c14: add             x16, PP, #0xa, lsl #12  ; [pp+0xaa48] Type: Color
    //     0x267c18: ldr             x16, [x16, #0xa48]
    // 0x267c1c: r30 = Color
    //     0x267c1c: add             lr, PP, #0xa, lsl #12  ; [pp+0xaa48] Type: Color
    //     0x267c20: ldr             lr, [lr, #0xa48]
    // 0x267c24: stp             lr, x16, [SP]
    // 0x267c28: r0 = ==()
    //     0x267c28: bl              #0x36b020  ; [dart:core] _Type::==
    // 0x267c2c: tbnz            w0, #4, #0x267c48
    // 0x267c30: ldur            x0, [fp, #-0x10]
    // 0x267c34: ldur            x1, [fp, #-8]
    // 0x267c38: LoadField: r2 = r1->field_7
    //     0x267c38: ldur            x2, [x1, #7]
    // 0x267c3c: LoadField: r1 = r0->field_7
    //     0x267c3c: ldur            x1, [x0, #7]
    // 0x267c40: cmp             x2, x1
    // 0x267c44: b.eq            #0x267cb4
    // 0x267c48: ldr             x0, [fp, #0x18]
    // 0x267c4c: LoadField: r1 = r0->field_b
    //     0x267c4c: ldur            w1, [x0, #0xb]
    // 0x267c50: DecompressPointer r1
    //     0x267c50: add             x1, x1, HEAP, lsl #32
    // 0x267c54: cmp             w1, NULL
    // 0x267c58: b.eq            #0x267d5c
    // 0x267c5c: LoadField: r2 = r1->field_1b
    //     0x267c5c: ldur            w2, [x1, #0x1b]
    // 0x267c60: DecompressPointer r2
    //     0x267c60: add             x2, x2, HEAP, lsl #32
    // 0x267c64: stur            x2, [fp, #-8]
    // 0x267c68: r1 = <Color?>
    //     0x267c68: add             x1, PP, #0xd, lsl #12  ; [pp+0xdd28] TypeArguments: <Color?>
    //     0x267c6c: ldr             x1, [x1, #0xd28]
    // 0x267c70: r0 = ColorTween()
    //     0x267c70: bl              #0x267d7c  ; AllocateColorTweenStub -> ColorTween (size=0x14)
    // 0x267c74: mov             x1, x0
    // 0x267c78: r0 = Instance_Color
    //     0x267c78: add             x0, PP, #0xa, lsl #12  ; [pp+0xad48] Obj!Color@47cc81
    //     0x267c7c: ldr             x0, [x0, #0xd48]
    // 0x267c80: StoreField: r1->field_b = r0
    //     0x267c80: stur            w0, [x1, #0xb]
    // 0x267c84: ldur            x0, [fp, #-8]
    // 0x267c88: StoreField: r1->field_f = r0
    //     0x267c88: stur            w0, [x1, #0xf]
    // 0x267c8c: mov             x0, x1
    // 0x267c90: ldr             x1, [fp, #0x18]
    // 0x267c94: StoreField: r1->field_2f = r0
    //     0x267c94: stur            w0, [x1, #0x2f]
    //     0x267c98: ldurb           w16, [x1, #-1]
    //     0x267c9c: ldurb           w17, [x0, #-1]
    //     0x267ca0: and             x16, x17, x16, lsr #2
    //     0x267ca4: tst             x16, HEAP, lsr #32
    //     0x267ca8: b.eq            #0x267cb0
    //     0x267cac: bl              #0x3e4608
    // 0x267cb0: b               #0x267cb8
    // 0x267cb4: ldr             x1, [fp, #0x18]
    // 0x267cb8: ldr             x0, [fp, #0x10]
    // 0x267cbc: LoadField: r2 = r1->field_b
    //     0x267cbc: ldur            w2, [x1, #0xb]
    // 0x267cc0: DecompressPointer r2
    //     0x267cc0: add             x2, x2, HEAP, lsl #32
    // 0x267cc4: cmp             w2, NULL
    // 0x267cc8: b.eq            #0x267d60
    // 0x267ccc: LoadField: r3 = r2->field_1f
    //     0x267ccc: ldur            w3, [x2, #0x1f]
    // 0x267cd0: DecompressPointer r3
    //     0x267cd0: add             x3, x3, HEAP, lsl #32
    // 0x267cd4: LoadField: r2 = r0->field_1f
    //     0x267cd4: ldur            w2, [x0, #0x1f]
    // 0x267cd8: DecompressPointer r2
    //     0x267cd8: add             x2, x2, HEAP, lsl #32
    // 0x267cdc: cmp             w3, w2
    // 0x267ce0: b.eq            #0x267d2c
    // 0x267ce4: tbnz            w3, #4, #0x267d0c
    // 0x267ce8: LoadField: r0 = r1->field_1f
    //     0x267ce8: ldur            w0, [x1, #0x1f]
    // 0x267cec: DecompressPointer r0
    //     0x267cec: add             x0, x0, HEAP, lsl #32
    // 0x267cf0: r16 = Sentinel
    //     0x267cf0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x267cf4: cmp             w0, w16
    // 0x267cf8: b.eq            #0x267d64
    // 0x267cfc: str             x0, [SP]
    // 0x267d00: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x267d00: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x267d04: r0 = forward()
    //     0x267d04: bl              #0x208e88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x267d08: b               #0x267d2c
    // 0x267d0c: LoadField: r0 = r1->field_1f
    //     0x267d0c: ldur            w0, [x1, #0x1f]
    // 0x267d10: DecompressPointer r0
    //     0x267d10: add             x0, x0, HEAP, lsl #32
    // 0x267d14: r16 = Sentinel
    //     0x267d14: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x267d18: cmp             w0, w16
    // 0x267d1c: b.eq            #0x267d70
    // 0x267d20: str             x0, [SP]
    // 0x267d24: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x267d24: ldr             x4, [PP, #0x268]  ; [pp+0x268] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x267d28: r0 = reverse()
    //     0x267d28: bl              #0x23e360  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::reverse
    // 0x267d2c: r0 = Null
    //     0x267d2c: mov             x0, NULL
    // 0x267d30: LeaveFrame
    //     0x267d30: mov             SP, fp
    //     0x267d34: ldp             fp, lr, [SP], #0x10
    // 0x267d38: ret
    //     0x267d38: ret             
    // 0x267d3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x267d3c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x267d40: b               #0x267a5c
    // 0x267d44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x267d44: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x267d48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x267d48: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x267d4c: r9 = _controller
    //     0x267d4c: add             x9, PP, #0x14, lsl #12  ; [pp+0x14360] Field <_BorderContainerState@73019562._controller@73019562>: late (offset: 0x1c)
    //     0x267d50: ldr             x9, [x9, #0x360]
    // 0x267d54: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x267d54: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x267d58: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x267d58: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x267d5c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x267d5c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x267d60: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x267d60: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x267d64: r9 = _hoverColorController
    //     0x267d64: add             x9, PP, #0x14, lsl #12  ; [pp+0x14310] Field <_BorderContainerState@73019562._hoverColorController@73019562>: late (offset: 0x20)
    //     0x267d68: ldr             x9, [x9, #0x310]
    // 0x267d6c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x267d6c: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x267d70: r9 = _hoverColorController
    //     0x267d70: add             x9, PP, #0x14, lsl #12  ; [pp+0x14310] Field <_BorderContainerState@73019562._hoverColorController@73019562>: late (offset: 0x20)
    //     0x267d74: ldr             x9, [x9, #0x310]
    // 0x267d78: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x267d78: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x28c390, size: 0x214
    // 0x28c390: EnterFrame
    //     0x28c390: stp             fp, lr, [SP, #-0x10]!
    //     0x28c394: mov             fp, SP
    // 0x28c398: AllocStack(0x90)
    //     0x28c398: sub             SP, SP, #0x90
    // 0x28c39c: r0 = 6
    //     0x28c39c: movz            x0, #0x6
    // 0x28c3a0: CheckStackOverflow
    //     0x28c3a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x28c3a4: cmp             SP, x16
    //     0x28c3a8: b.ls            #0x28c558
    // 0x28c3ac: ldr             x3, [fp, #0x18]
    // 0x28c3b0: LoadField: r4 = r3->field_23
    //     0x28c3b0: ldur            w4, [x3, #0x23]
    // 0x28c3b4: DecompressPointer r4
    //     0x28c3b4: add             x4, x4, HEAP, lsl #32
    // 0x28c3b8: r16 = Sentinel
    //     0x28c3b8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c3bc: cmp             w4, w16
    // 0x28c3c0: b.eq            #0x28c560
    // 0x28c3c4: stur            x4, [fp, #-0x20]
    // 0x28c3c8: LoadField: r5 = r3->field_b
    //     0x28c3c8: ldur            w5, [x3, #0xb]
    // 0x28c3cc: DecompressPointer r5
    //     0x28c3cc: add             x5, x5, HEAP, lsl #32
    // 0x28c3d0: stur            x5, [fp, #-0x18]
    // 0x28c3d4: cmp             w5, NULL
    // 0x28c3d8: b.eq            #0x28c56c
    // 0x28c3dc: LoadField: r6 = r5->field_f
    //     0x28c3dc: ldur            w6, [x5, #0xf]
    // 0x28c3e0: DecompressPointer r6
    //     0x28c3e0: add             x6, x6, HEAP, lsl #32
    // 0x28c3e4: stur            x6, [fp, #-0x10]
    // 0x28c3e8: LoadField: r7 = r3->field_1f
    //     0x28c3e8: ldur            w7, [x3, #0x1f]
    // 0x28c3ec: DecompressPointer r7
    //     0x28c3ec: add             x7, x7, HEAP, lsl #32
    // 0x28c3f0: r16 = Sentinel
    //     0x28c3f0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c3f4: cmp             w7, w16
    // 0x28c3f8: b.eq            #0x28c570
    // 0x28c3fc: mov             x2, x0
    // 0x28c400: stur            x7, [fp, #-8]
    // 0x28c404: r1 = Null
    //     0x28c404: mov             x1, NULL
    // 0x28c408: r0 = AllocateArray()
    //     0x28c408: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x28c40c: mov             x2, x0
    // 0x28c410: ldur            x0, [fp, #-0x20]
    // 0x28c414: stur            x2, [fp, #-0x28]
    // 0x28c418: StoreField: r2->field_f = r0
    //     0x28c418: stur            w0, [x2, #0xf]
    // 0x28c41c: ldur            x3, [fp, #-0x10]
    // 0x28c420: StoreField: r2->field_13 = r3
    //     0x28c420: stur            w3, [x2, #0x13]
    // 0x28c424: ldur            x1, [fp, #-8]
    // 0x28c428: StoreField: r2->field_17 = r1
    //     0x28c428: stur            w1, [x2, #0x17]
    // 0x28c42c: r1 = <Listenable>
    //     0x28c42c: add             x1, PP, #0xd, lsl #12  ; [pp+0xde08] TypeArguments: <Listenable>
    //     0x28c430: ldr             x1, [x1, #0xe08]
    // 0x28c434: r0 = AllocateGrowableArray()
    //     0x28c434: bl              #0x3e4dc4  ; AllocateGrowableArrayStub
    // 0x28c438: mov             x1, x0
    // 0x28c43c: ldur            x0, [fp, #-0x28]
    // 0x28c440: stur            x1, [fp, #-8]
    // 0x28c444: StoreField: r1->field_f = r0
    //     0x28c444: stur            w0, [x1, #0xf]
    // 0x28c448: r0 = 6
    //     0x28c448: movz            x0, #0x6
    // 0x28c44c: StoreField: r1->field_b = r0
    //     0x28c44c: stur            w0, [x1, #0xb]
    // 0x28c450: r0 = _MergingListenable()
    //     0x28c450: bl              #0x28c6d4  ; Allocate_MergingListenableStub -> _MergingListenable (size=0xc)
    // 0x28c454: mov             x1, x0
    // 0x28c458: ldur            x0, [fp, #-8]
    // 0x28c45c: stur            x1, [fp, #-0x30]
    // 0x28c460: StoreField: r1->field_7 = r0
    //     0x28c460: stur            w0, [x1, #7]
    // 0x28c464: ldr             x0, [fp, #0x18]
    // 0x28c468: LoadField: r2 = r0->field_27
    //     0x28c468: ldur            w2, [x0, #0x27]
    // 0x28c46c: DecompressPointer r2
    //     0x28c46c: add             x2, x2, HEAP, lsl #32
    // 0x28c470: r16 = Sentinel
    //     0x28c470: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c474: cmp             w2, w16
    // 0x28c478: b.eq            #0x28c57c
    // 0x28c47c: ldur            x3, [fp, #-0x18]
    // 0x28c480: stur            x2, [fp, #-0x28]
    // 0x28c484: LoadField: r4 = r3->field_13
    //     0x28c484: ldur            w4, [x3, #0x13]
    // 0x28c488: DecompressPointer r4
    //     0x28c488: add             x4, x4, HEAP, lsl #32
    // 0x28c48c: stur            x4, [fp, #-8]
    // 0x28c490: ldr             x16, [fp, #0x10]
    // 0x28c494: str             x16, [SP]
    // 0x28c498: r0 = of()
    //     0x28c498: bl              #0x243f24  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x28c49c: ldr             x0, [fp, #0x18]
    // 0x28c4a0: LoadField: r1 = r0->field_b
    //     0x28c4a0: ldur            w1, [x0, #0xb]
    // 0x28c4a4: DecompressPointer r1
    //     0x28c4a4: add             x1, x1, HEAP, lsl #32
    // 0x28c4a8: cmp             w1, NULL
    // 0x28c4ac: b.eq            #0x28c588
    // 0x28c4b0: LoadField: r2 = r1->field_17
    //     0x28c4b0: ldur            w2, [x1, #0x17]
    // 0x28c4b4: DecompressPointer r2
    //     0x28c4b4: add             x2, x2, HEAP, lsl #32
    // 0x28c4b8: stur            x2, [fp, #-0x40]
    // 0x28c4bc: LoadField: r1 = r0->field_2f
    //     0x28c4bc: ldur            w1, [x0, #0x2f]
    // 0x28c4c0: DecompressPointer r1
    //     0x28c4c0: add             x1, x1, HEAP, lsl #32
    // 0x28c4c4: r16 = Sentinel
    //     0x28c4c4: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c4c8: cmp             w1, w16
    // 0x28c4cc: b.eq            #0x28c58c
    // 0x28c4d0: stur            x1, [fp, #-0x38]
    // 0x28c4d4: LoadField: r3 = r0->field_2b
    //     0x28c4d4: ldur            w3, [x0, #0x2b]
    // 0x28c4d8: DecompressPointer r3
    //     0x28c4d8: add             x3, x3, HEAP, lsl #32
    // 0x28c4dc: r16 = Sentinel
    //     0x28c4dc: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x28c4e0: cmp             w3, w16
    // 0x28c4e4: b.eq            #0x28c598
    // 0x28c4e8: stur            x3, [fp, #-0x18]
    // 0x28c4ec: r0 = _InputBorderPainter()
    //     0x28c4ec: bl              #0x28c6c8  ; Allocate_InputBorderPainterStub -> _InputBorderPainter (size=0x2c)
    // 0x28c4f0: stur            x0, [fp, #-0x48]
    // 0x28c4f4: ldur            x16, [fp, #-0x28]
    // 0x28c4f8: stp             x16, x0, [SP, #0x38]
    // 0x28c4fc: ldur            x16, [fp, #-0x20]
    // 0x28c500: ldur            lr, [fp, #-0x40]
    // 0x28c504: stp             lr, x16, [SP, #0x28]
    // 0x28c508: ldur            x16, [fp, #-0x10]
    // 0x28c50c: ldur            lr, [fp, #-8]
    // 0x28c510: stp             lr, x16, [SP, #0x18]
    // 0x28c514: ldur            x16, [fp, #-0x18]
    // 0x28c518: ldur            lr, [fp, #-0x38]
    // 0x28c51c: stp             lr, x16, [SP, #8]
    // 0x28c520: ldur            x16, [fp, #-0x30]
    // 0x28c524: str             x16, [SP]
    // 0x28c528: r0 = _InputBorderPainter()
    //     0x28c528: bl              #0x28c5a4  ; [package:flutter/src/material/input_decorator.dart] _InputBorderPainter::_InputBorderPainter
    // 0x28c52c: r0 = CustomPaint()
    //     0x28c52c: bl              #0x28017c  ; AllocateCustomPaintStub -> CustomPaint (size=0x24)
    // 0x28c530: ldur            x1, [fp, #-0x48]
    // 0x28c534: StoreField: r0->field_13 = r1
    //     0x28c534: stur            w1, [x0, #0x13]
    // 0x28c538: r1 = Instance_Size
    //     0x28c538: ldr             x1, [PP, #0x2df0]  ; [pp+0x2df0] Obj!Size@47d451
    // 0x28c53c: StoreField: r0->field_17 = r1
    //     0x28c53c: stur            w1, [x0, #0x17]
    // 0x28c540: r1 = false
    //     0x28c540: add             x1, NULL, #0x30  ; false
    // 0x28c544: StoreField: r0->field_1b = r1
    //     0x28c544: stur            w1, [x0, #0x1b]
    // 0x28c548: StoreField: r0->field_1f = r1
    //     0x28c548: stur            w1, [x0, #0x1f]
    // 0x28c54c: LeaveFrame
    //     0x28c54c: mov             SP, fp
    //     0x28c550: ldp             fp, lr, [SP], #0x10
    // 0x28c554: ret
    //     0x28c554: ret             
    // 0x28c558: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x28c558: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x28c55c: b               #0x28c3ac
    // 0x28c560: r9 = _borderAnimation
    //     0x28c560: add             x9, PP, #0x14, lsl #12  ; [pp+0x14308] Field <_BorderContainerState@73019562._borderAnimation@73019562>: late (offset: 0x24)
    //     0x28c564: ldr             x9, [x9, #0x308]
    // 0x28c568: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28c568: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28c56c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28c56c: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28c570: r9 = _hoverColorController
    //     0x28c570: add             x9, PP, #0x14, lsl #12  ; [pp+0x14310] Field <_BorderContainerState@73019562._hoverColorController@73019562>: late (offset: 0x20)
    //     0x28c574: ldr             x9, [x9, #0x310]
    // 0x28c578: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28c578: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28c57c: r9 = _border
    //     0x28c57c: add             x9, PP, #0x14, lsl #12  ; [pp+0x14318] Field <_BorderContainerState@73019562._border@73019562>: late (offset: 0x28)
    //     0x28c580: ldr             x9, [x9, #0x318]
    // 0x28c584: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28c584: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28c588: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x28c588: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x28c58c: r9 = _hoverColorTween
    //     0x28c58c: add             x9, PP, #0x14, lsl #12  ; [pp+0x14320] Field <_BorderContainerState@73019562._hoverColorTween@73019562>: late (offset: 0x30)
    //     0x28c590: ldr             x9, [x9, #0x320]
    // 0x28c594: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28c594: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x28c598: r9 = _hoverAnimation
    //     0x28c598: add             x9, PP, #0x14, lsl #12  ; [pp+0x14328] Field <_BorderContainerState@73019562._hoverAnimation@73019562>: late (offset: 0x2c)
    //     0x28c59c: ldr             x9, [x9, #0x328]
    // 0x28c5a0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x28c5a0: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0x2aea5c, size: 0x94
    // 0x2aea5c: EnterFrame
    //     0x2aea5c: stp             fp, lr, [SP, #-0x10]!
    //     0x2aea60: mov             fp, SP
    // 0x2aea64: AllocStack(0x8)
    //     0x2aea64: sub             SP, SP, #8
    // 0x2aea68: CheckStackOverflow
    //     0x2aea68: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2aea6c: cmp             SP, x16
    //     0x2aea70: b.ls            #0x2aead0
    // 0x2aea74: ldr             x0, [fp, #0x10]
    // 0x2aea78: LoadField: r1 = r0->field_1b
    //     0x2aea78: ldur            w1, [x0, #0x1b]
    // 0x2aea7c: DecompressPointer r1
    //     0x2aea7c: add             x1, x1, HEAP, lsl #32
    // 0x2aea80: r16 = Sentinel
    //     0x2aea80: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2aea84: cmp             w1, w16
    // 0x2aea88: b.eq            #0x2aead8
    // 0x2aea8c: str             x1, [SP]
    // 0x2aea90: r0 = dispose()
    //     0x2aea90: bl              #0x2069f4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0x2aea94: ldr             x0, [fp, #0x10]
    // 0x2aea98: LoadField: r1 = r0->field_1f
    //     0x2aea98: ldur            w1, [x0, #0x1f]
    // 0x2aea9c: DecompressPointer r1
    //     0x2aea9c: add             x1, x1, HEAP, lsl #32
    // 0x2aeaa0: r16 = Sentinel
    //     0x2aeaa0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2aeaa4: cmp             w1, w16
    // 0x2aeaa8: b.eq            #0x2aeae4
    // 0x2aeaac: str             x1, [SP]
    // 0x2aeab0: r0 = dispose()
    //     0x2aeab0: bl              #0x2069f4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0x2aeab4: ldr             x16, [fp, #0x10]
    // 0x2aeab8: str             x16, [SP]
    // 0x2aeabc: r0 = dispose()
    //     0x2aeabc: bl              #0x2aeaf0  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::dispose
    // 0x2aeac0: r0 = Null
    //     0x2aeac0: mov             x0, NULL
    // 0x2aeac4: LeaveFrame
    //     0x2aeac4: mov             SP, fp
    //     0x2aeac8: ldp             fp, lr, [SP], #0x10
    // 0x2aeacc: ret
    //     0x2aeacc: ret             
    // 0x2aead0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2aead0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2aead4: b               #0x2aea74
    // 0x2aead8: r9 = _controller
    //     0x2aead8: add             x9, PP, #0x14, lsl #12  ; [pp+0x14360] Field <_BorderContainerState@73019562._controller@73019562>: late (offset: 0x1c)
    //     0x2aeadc: ldr             x9, [x9, #0x360]
    // 0x2aeae0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2aeae0: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x2aeae4: r9 = _hoverColorController
    //     0x2aeae4: add             x9, PP, #0x14, lsl #12  ; [pp+0x14310] Field <_BorderContainerState@73019562._hoverColorController@73019562>: late (offset: 0x20)
    //     0x2aeae8: ldr             x9, [x9, #0x310]
    // 0x2aeaec: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x2aeaec: bl              #0x3e6504  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0x2c8cac, size: 0x2d0
    // 0x2c8cac: EnterFrame
    //     0x2c8cac: stp             fp, lr, [SP, #-0x10]!
    //     0x2c8cb0: mov             fp, SP
    // 0x2c8cb4: AllocStack(0x38)
    //     0x2c8cb4: sub             SP, SP, #0x38
    // 0x2c8cb8: CheckStackOverflow
    //     0x2c8cb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2c8cbc: cmp             SP, x16
    //     0x2c8cc0: b.ls            #0x2c8f4c
    // 0x2c8cc4: ldr             x0, [fp, #0x10]
    // 0x2c8cc8: LoadField: r1 = r0->field_b
    //     0x2c8cc8: ldur            w1, [x0, #0xb]
    // 0x2c8ccc: DecompressPointer r1
    //     0x2c8ccc: add             x1, x1, HEAP, lsl #32
    // 0x2c8cd0: cmp             w1, NULL
    // 0x2c8cd4: b.eq            #0x2c8f54
    // 0x2c8cd8: LoadField: r2 = r1->field_1f
    //     0x2c8cd8: ldur            w2, [x1, #0x1f]
    // 0x2c8cdc: DecompressPointer r2
    //     0x2c8cdc: add             x2, x2, HEAP, lsl #32
    // 0x2c8ce0: tbnz            w2, #4, #0x2c8cf0
    // 0x2c8ce4: d0 = 1.000000
    //     0x2c8ce4: fmov            d0, #1.00000000
    // 0x2c8ce8: d0 = 1.000000
    //     0x2c8ce8: fmov            d0, #1.00000000
    // 0x2c8cec: b               #0x2c8cf8
    // 0x2c8cf0: d0 = 0.000000
    //     0x2c8cf0: eor             v0.16b, v0.16b, v0.16b
    // 0x2c8cf4: d0 = 0.000000
    //     0x2c8cf4: eor             v0.16b, v0.16b, v0.16b
    // 0x2c8cf8: r2 = inline_Allocate_Double()
    //     0x2c8cf8: ldp             x2, x1, [THR, #0x50]  ; THR::top
    //     0x2c8cfc: add             x2, x2, #0x10
    //     0x2c8d00: cmp             x1, x2
    //     0x2c8d04: b.ls            #0x2c8f58
    //     0x2c8d08: str             x2, [THR, #0x50]  ; THR::top
    //     0x2c8d0c: sub             x2, x2, #0xf
    //     0x2c8d10: movz            x1, #0xd148
    //     0x2c8d14: movk            x1, #0x3, lsl #16
    //     0x2c8d18: stur            x1, [x2, #-1]
    // 0x2c8d1c: StoreField: r2->field_7 = d0
    //     0x2c8d1c: stur            d0, [x2, #7]
    // 0x2c8d20: stur            x2, [fp, #-8]
    // 0x2c8d24: r1 = <double>
    //     0x2c8d24: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c8d28: r0 = AnimationController()
    //     0x2c8d28: bl              #0x2174fc  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x2c8d2c: stur            x0, [fp, #-0x10]
    // 0x2c8d30: ldr             x16, [fp, #0x10]
    // 0x2c8d34: stp             x16, x0, [SP, #0x10]
    // 0x2c8d38: r16 = Instance_Duration
    //     0x2c8d38: add             x16, PP, #0x14, lsl #12  ; [pp+0x14368] Obj!Duration@482ce1
    //     0x2c8d3c: ldr             x16, [x16, #0x368]
    // 0x2c8d40: ldur            lr, [fp, #-8]
    // 0x2c8d44: stp             lr, x16, [SP]
    // 0x2c8d48: r4 = const [0, 0x4, 0x4, 0x2, duration, 0x2, value, 0x3, null]
    //     0x2c8d48: add             x4, PP, #0x11, lsl #12  ; [pp+0x11bf0] List(9) [0, 0x4, 0x4, 0x2, "duration", 0x2, "value", 0x3, Null]
    //     0x2c8d4c: ldr             x4, [x4, #0xbf0]
    // 0x2c8d50: r0 = AnimationController()
    //     0x2c8d50: bl              #0x2362c8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x2c8d54: ldur            x0, [fp, #-0x10]
    // 0x2c8d58: ldr             x2, [fp, #0x10]
    // 0x2c8d5c: StoreField: r2->field_1f = r0
    //     0x2c8d5c: stur            w0, [x2, #0x1f]
    //     0x2c8d60: ldurb           w16, [x2, #-1]
    //     0x2c8d64: ldurb           w17, [x0, #-1]
    //     0x2c8d68: and             x16, x17, x16, lsr #2
    //     0x2c8d6c: tst             x16, HEAP, lsr #32
    //     0x2c8d70: b.eq            #0x2c8d78
    //     0x2c8d74: bl              #0x3e4628
    // 0x2c8d78: r1 = <double>
    //     0x2c8d78: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c8d7c: r0 = AnimationController()
    //     0x2c8d7c: bl              #0x2174fc  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x2c8d80: stur            x0, [fp, #-8]
    // 0x2c8d84: ldr             x16, [fp, #0x10]
    // 0x2c8d88: stp             x16, x0, [SP, #8]
    // 0x2c8d8c: r16 = Instance_Duration
    //     0x2c8d8c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b50] Obj!Duration@482ca1
    //     0x2c8d90: ldr             x16, [x16, #0xb50]
    // 0x2c8d94: str             x16, [SP]
    // 0x2c8d98: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0x2c8d98: add             x4, PP, #0xa, lsl #12  ; [pp+0xa128] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0x2c8d9c: ldr             x4, [x4, #0x128]
    // 0x2c8da0: r0 = AnimationController()
    //     0x2c8da0: bl              #0x2362c8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x2c8da4: ldur            x0, [fp, #-8]
    // 0x2c8da8: ldr             x2, [fp, #0x10]
    // 0x2c8dac: StoreField: r2->field_1b = r0
    //     0x2c8dac: stur            w0, [x2, #0x1b]
    //     0x2c8db0: ldurb           w16, [x2, #-1]
    //     0x2c8db4: ldurb           w17, [x0, #-1]
    //     0x2c8db8: and             x16, x17, x16, lsr #2
    //     0x2c8dbc: tst             x16, HEAP, lsr #32
    //     0x2c8dc0: b.eq            #0x2c8dc8
    //     0x2c8dc4: bl              #0x3e4628
    // 0x2c8dc8: r1 = <double>
    //     0x2c8dc8: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c8dcc: r0 = FlippedCurve()
    //     0x2c8dcc: bl              #0x26bcd0  ; AllocateFlippedCurveStub -> FlippedCurve (size=0x10)
    // 0x2c8dd0: mov             x2, x0
    // 0x2c8dd4: r0 = Instance_Cubic
    //     0x2c8dd4: ldr             x0, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x2c8dd8: stur            x2, [fp, #-0x10]
    // 0x2c8ddc: StoreField: r2->field_b = r0
    //     0x2c8ddc: stur            w0, [x2, #0xb]
    // 0x2c8de0: r1 = <double>
    //     0x2c8de0: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c8de4: r0 = CurvedAnimation()
    //     0x2c8de4: bl              #0x269028  ; AllocateCurvedAnimationStub -> CurvedAnimation (size=0x1c)
    // 0x2c8de8: stur            x0, [fp, #-0x18]
    // 0x2c8dec: r16 = Instance_Cubic
    //     0x2c8dec: ldr             x16, [PP, #0x5c48]  ; [pp+0x5c48] Obj!Cubic@47bbe1
    // 0x2c8df0: stp             x16, x0, [SP, #0x10]
    // 0x2c8df4: ldur            x16, [fp, #-8]
    // 0x2c8df8: ldur            lr, [fp, #-0x10]
    // 0x2c8dfc: stp             lr, x16, [SP]
    // 0x2c8e00: r4 = const [0, 0x4, 0x4, 0x3, reverseCurve, 0x3, null]
    //     0x2c8e00: add             x4, PP, #0xc, lsl #12  ; [pp+0xc420] List(7) [0, 0x4, 0x4, 0x3, "reverseCurve", 0x3, Null]
    //     0x2c8e04: ldr             x4, [x4, #0x420]
    // 0x2c8e08: r0 = CurvedAnimation()
    //     0x2c8e08: bl              #0x268ec4  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::CurvedAnimation
    // 0x2c8e0c: ldur            x0, [fp, #-0x18]
    // 0x2c8e10: ldr             x2, [fp, #0x10]
    // 0x2c8e14: StoreField: r2->field_23 = r0
    //     0x2c8e14: stur            w0, [x2, #0x23]
    //     0x2c8e18: ldurb           w16, [x2, #-1]
    //     0x2c8e1c: ldurb           w17, [x0, #-1]
    //     0x2c8e20: and             x16, x17, x16, lsr #2
    //     0x2c8e24: tst             x16, HEAP, lsr #32
    //     0x2c8e28: b.eq            #0x2c8e30
    //     0x2c8e2c: bl              #0x3e4628
    // 0x2c8e30: LoadField: r0 = r2->field_b
    //     0x2c8e30: ldur            w0, [x2, #0xb]
    // 0x2c8e34: DecompressPointer r0
    //     0x2c8e34: add             x0, x0, HEAP, lsl #32
    // 0x2c8e38: cmp             w0, NULL
    // 0x2c8e3c: b.eq            #0x2c8f74
    // 0x2c8e40: LoadField: r3 = r0->field_b
    //     0x2c8e40: ldur            w3, [x0, #0xb]
    // 0x2c8e44: DecompressPointer r3
    //     0x2c8e44: add             x3, x3, HEAP, lsl #32
    // 0x2c8e48: stur            x3, [fp, #-8]
    // 0x2c8e4c: r1 = <InputBorder>
    //     0x2c8e4c: add             x1, PP, #0x14, lsl #12  ; [pp+0x14358] TypeArguments: <InputBorder>
    //     0x2c8e50: ldr             x1, [x1, #0x358]
    // 0x2c8e54: r0 = _InputBorderTween()
    //     0x2c8e54: bl              #0x267d88  ; Allocate_InputBorderTweenStub -> _InputBorderTween (size=0x14)
    // 0x2c8e58: mov             x1, x0
    // 0x2c8e5c: ldur            x0, [fp, #-8]
    // 0x2c8e60: StoreField: r1->field_b = r0
    //     0x2c8e60: stur            w0, [x1, #0xb]
    // 0x2c8e64: StoreField: r1->field_f = r0
    //     0x2c8e64: stur            w0, [x1, #0xf]
    // 0x2c8e68: mov             x0, x1
    // 0x2c8e6c: ldr             x2, [fp, #0x10]
    // 0x2c8e70: StoreField: r2->field_27 = r0
    //     0x2c8e70: stur            w0, [x2, #0x27]
    //     0x2c8e74: ldurb           w16, [x2, #-1]
    //     0x2c8e78: ldurb           w17, [x0, #-1]
    //     0x2c8e7c: and             x16, x17, x16, lsr #2
    //     0x2c8e80: tst             x16, HEAP, lsr #32
    //     0x2c8e84: b.eq            #0x2c8e8c
    //     0x2c8e88: bl              #0x3e4628
    // 0x2c8e8c: LoadField: r0 = r2->field_1f
    //     0x2c8e8c: ldur            w0, [x2, #0x1f]
    // 0x2c8e90: DecompressPointer r0
    //     0x2c8e90: add             x0, x0, HEAP, lsl #32
    // 0x2c8e94: stur            x0, [fp, #-8]
    // 0x2c8e98: r1 = <double>
    //     0x2c8e98: ldr             x1, [PP, #0x49a0]  ; [pp+0x49a0] TypeArguments: <double>
    // 0x2c8e9c: r0 = CurvedAnimation()
    //     0x2c8e9c: bl              #0x269028  ; AllocateCurvedAnimationStub -> CurvedAnimation (size=0x1c)
    // 0x2c8ea0: stur            x0, [fp, #-0x10]
    // 0x2c8ea4: r16 = Instance__Linear
    //     0x2c8ea4: ldr             x16, [PP, #0x55f8]  ; [pp+0x55f8] Obj!_Linear@47bfa1
    // 0x2c8ea8: stp             x16, x0, [SP, #8]
    // 0x2c8eac: ldur            x16, [fp, #-8]
    // 0x2c8eb0: str             x16, [SP]
    // 0x2c8eb4: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x2c8eb4: ldr             x4, [PP, #0x140]  ; [pp+0x140] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x2c8eb8: r0 = CurvedAnimation()
    //     0x2c8eb8: bl              #0x268ec4  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::CurvedAnimation
    // 0x2c8ebc: ldur            x0, [fp, #-0x10]
    // 0x2c8ec0: ldr             x2, [fp, #0x10]
    // 0x2c8ec4: StoreField: r2->field_2b = r0
    //     0x2c8ec4: stur            w0, [x2, #0x2b]
    //     0x2c8ec8: ldurb           w16, [x2, #-1]
    //     0x2c8ecc: ldurb           w17, [x0, #-1]
    //     0x2c8ed0: and             x16, x17, x16, lsr #2
    //     0x2c8ed4: tst             x16, HEAP, lsr #32
    //     0x2c8ed8: b.eq            #0x2c8ee0
    //     0x2c8edc: bl              #0x3e4628
    // 0x2c8ee0: LoadField: r0 = r2->field_b
    //     0x2c8ee0: ldur            w0, [x2, #0xb]
    // 0x2c8ee4: DecompressPointer r0
    //     0x2c8ee4: add             x0, x0, HEAP, lsl #32
    // 0x2c8ee8: cmp             w0, NULL
    // 0x2c8eec: b.eq            #0x2c8f78
    // 0x2c8ef0: LoadField: r3 = r0->field_1b
    //     0x2c8ef0: ldur            w3, [x0, #0x1b]
    // 0x2c8ef4: DecompressPointer r3
    //     0x2c8ef4: add             x3, x3, HEAP, lsl #32
    // 0x2c8ef8: stur            x3, [fp, #-8]
    // 0x2c8efc: r1 = <Color?>
    //     0x2c8efc: add             x1, PP, #0xd, lsl #12  ; [pp+0xdd28] TypeArguments: <Color?>
    //     0x2c8f00: ldr             x1, [x1, #0xd28]
    // 0x2c8f04: r0 = ColorTween()
    //     0x2c8f04: bl              #0x267d7c  ; AllocateColorTweenStub -> ColorTween (size=0x14)
    // 0x2c8f08: r1 = Instance_Color
    //     0x2c8f08: add             x1, PP, #0xa, lsl #12  ; [pp+0xad48] Obj!Color@47cc81
    //     0x2c8f0c: ldr             x1, [x1, #0xd48]
    // 0x2c8f10: StoreField: r0->field_b = r1
    //     0x2c8f10: stur            w1, [x0, #0xb]
    // 0x2c8f14: ldur            x1, [fp, #-8]
    // 0x2c8f18: StoreField: r0->field_f = r1
    //     0x2c8f18: stur            w1, [x0, #0xf]
    // 0x2c8f1c: ldr             x1, [fp, #0x10]
    // 0x2c8f20: StoreField: r1->field_2f = r0
    //     0x2c8f20: stur            w0, [x1, #0x2f]
    //     0x2c8f24: ldurb           w16, [x1, #-1]
    //     0x2c8f28: ldurb           w17, [x0, #-1]
    //     0x2c8f2c: and             x16, x17, x16, lsr #2
    //     0x2c8f30: tst             x16, HEAP, lsr #32
    //     0x2c8f34: b.eq            #0x2c8f3c
    //     0x2c8f38: bl              #0x3e4608
    // 0x2c8f3c: r0 = Null
    //     0x2c8f3c: mov             x0, NULL
    // 0x2c8f40: LeaveFrame
    //     0x2c8f40: mov             SP, fp
    //     0x2c8f44: ldp             fp, lr, [SP], #0x10
    // 0x2c8f48: ret
    //     0x2c8f48: ret             
    // 0x2c8f4c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2c8f4c: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2c8f50: b               #0x2c8cc4
    // 0x2c8f54: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2c8f54: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2c8f58: SaveReg d0
    //     0x2c8f58: str             q0, [SP, #-0x10]!
    // 0x2c8f5c: SaveReg r0
    //     0x2c8f5c: str             x0, [SP, #-8]!
    // 0x2c8f60: r0 = AllocateDouble()
    //     0x2c8f60: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x2c8f64: mov             x2, x0
    // 0x2c8f68: RestoreReg r0
    //     0x2c8f68: ldr             x0, [SP], #8
    // 0x2c8f6c: RestoreReg d0
    //     0x2c8f6c: ldr             q0, [SP], #0x10
    // 0x2c8f70: b               #0x2c8d1c
    // 0x2c8f74: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2c8f74: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x2c8f78: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x2c8f78: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1551, size: 0x28, field offset: 0x10
//   const constructor, 
class _Decorator extends SlottedMultiChildRenderObjectWidget<dynamic, dynamic> {

  _ updateRenderObject(/* No info */) {
    // ** addr: 0x2f4600, size: 0xdc
    // 0x2f4600: EnterFrame
    //     0x2f4600: stp             fp, lr, [SP, #-0x10]!
    //     0x2f4604: mov             fp, SP
    // 0x2f4608: AllocStack(0x10)
    //     0x2f4608: sub             SP, SP, #0x10
    // 0x2f460c: CheckStackOverflow
    //     0x2f460c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2f4610: cmp             SP, x16
    //     0x2f4614: b.ls            #0x2f46d4
    // 0x2f4618: ldr             x0, [fp, #0x10]
    // 0x2f461c: r2 = Null
    //     0x2f461c: mov             x2, NULL
    // 0x2f4620: r1 = Null
    //     0x2f4620: mov             x1, NULL
    // 0x2f4624: r4 = 59
    //     0x2f4624: movz            x4, #0x3b
    // 0x2f4628: branchIfSmi(r0, 0x2f4634)
    //     0x2f4628: tbz             w0, #0, #0x2f4634
    // 0x2f462c: r4 = LoadClassIdInstr(r0)
    //     0x2f462c: ldur            x4, [x0, #-1]
    //     0x2f4630: ubfx            x4, x4, #0xc, #0x14
    // 0x2f4634: cmp             x4, #0x20a
    // 0x2f4638: b.eq            #0x2f4650
    // 0x2f463c: r8 = _RenderDecoration
    //     0x2f463c: add             x8, PP, #0x12, lsl #12  ; [pp+0x12948] Type: _RenderDecoration
    //     0x2f4640: ldr             x8, [x8, #0x948]
    // 0x2f4644: r3 = Null
    //     0x2f4644: add             x3, PP, #0x12, lsl #12  ; [pp+0x12950] Null
    //     0x2f4648: ldr             x3, [x3, #0x950]
    // 0x2f464c: r0 = DefaultTypeTest()
    //     0x2f464c: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x2f4650: ldr             x0, [fp, #0x20]
    // 0x2f4654: LoadField: r1 = r0->field_f
    //     0x2f4654: ldur            w1, [x0, #0xf]
    // 0x2f4658: DecompressPointer r1
    //     0x2f4658: add             x1, x1, HEAP, lsl #32
    // 0x2f465c: ldr             x16, [fp, #0x10]
    // 0x2f4660: stp             x1, x16, [SP]
    // 0x2f4664: r0 = decoration=()
    //     0x2f4664: bl              #0x2f47c0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::decoration=
    // 0x2f4668: ldr             x16, [fp, #0x10]
    // 0x2f466c: r30 = false
    //     0x2f466c: add             lr, NULL, #0x30  ; false
    // 0x2f4670: stp             lr, x16, [SP]
    // 0x2f4674: r0 = _NativeScene._()
    //     0x2f4674: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f4678: ldr             x0, [fp, #0x20]
    // 0x2f467c: LoadField: r1 = r0->field_1f
    //     0x2f467c: ldur            w1, [x0, #0x1f]
    // 0x2f4680: DecompressPointer r1
    //     0x2f4680: add             x1, x1, HEAP, lsl #32
    // 0x2f4684: ldr             x16, [fp, #0x10]
    // 0x2f4688: stp             x1, x16, [SP]
    // 0x2f468c: r0 = isFocused=()
    //     0x2f468c: bl              #0x2f475c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::isFocused=
    // 0x2f4690: ldr             x16, [fp, #0x10]
    // 0x2f4694: stp             NULL, x16, [SP]
    // 0x2f4698: r0 = _NativeScene._()
    //     0x2f4698: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f469c: ldr             x0, [fp, #0x20]
    // 0x2f46a0: LoadField: r1 = r0->field_17
    //     0x2f46a0: ldur            w1, [x0, #0x17]
    // 0x2f46a4: DecompressPointer r1
    //     0x2f46a4: add             x1, x1, HEAP, lsl #32
    // 0x2f46a8: ldr             x16, [fp, #0x10]
    // 0x2f46ac: stp             x1, x16, [SP]
    // 0x2f46b0: r0 = textBaseline=()
    //     0x2f46b0: bl              #0x2f46dc  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::textBaseline=
    // 0x2f46b4: ldr             x16, [fp, #0x10]
    // 0x2f46b8: r30 = Instance_TextDirection
    //     0x2f46b8: ldr             lr, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x2f46bc: stp             lr, x16, [SP]
    // 0x2f46c0: r0 = _NativeScene._()
    //     0x2f46c0: bl              #0x3daaf0  ; [dart:ui] _NativeScene::_NativeScene._
    // 0x2f46c4: r0 = Null
    //     0x2f46c4: mov             x0, NULL
    // 0x2f46c8: LeaveFrame
    //     0x2f46c8: mov             SP, fp
    //     0x2f46cc: ldp             fp, lr, [SP], #0x10
    // 0x2f46d0: ret
    //     0x2f46d0: ret             
    // 0x2f46d4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2f46d4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2f46d8: b               #0x2f4618
  }
  _ createRenderObject(/* No info */) {
    // ** addr: 0x30e694, size: 0x98
    // 0x30e694: EnterFrame
    //     0x30e694: stp             fp, lr, [SP, #-0x10]!
    //     0x30e698: mov             fp, SP
    // 0x30e69c: AllocStack(0x50)
    //     0x30e69c: sub             SP, SP, #0x50
    // 0x30e6a0: CheckStackOverflow
    //     0x30e6a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x30e6a4: cmp             SP, x16
    //     0x30e6a8: b.ls            #0x30e724
    // 0x30e6ac: ldr             x0, [fp, #0x18]
    // 0x30e6b0: LoadField: r1 = r0->field_f
    //     0x30e6b0: ldur            w1, [x0, #0xf]
    // 0x30e6b4: DecompressPointer r1
    //     0x30e6b4: add             x1, x1, HEAP, lsl #32
    // 0x30e6b8: stur            x1, [fp, #-0x18]
    // 0x30e6bc: LoadField: r2 = r0->field_17
    //     0x30e6bc: ldur            w2, [x0, #0x17]
    // 0x30e6c0: DecompressPointer r2
    //     0x30e6c0: add             x2, x2, HEAP, lsl #32
    // 0x30e6c4: stur            x2, [fp, #-0x10]
    // 0x30e6c8: LoadField: r3 = r0->field_1f
    //     0x30e6c8: ldur            w3, [x0, #0x1f]
    // 0x30e6cc: DecompressPointer r3
    //     0x30e6cc: add             x3, x3, HEAP, lsl #32
    // 0x30e6d0: stur            x3, [fp, #-8]
    // 0x30e6d4: ldr             x16, [fp, #0x10]
    // 0x30e6d8: str             x16, [SP]
    // 0x30e6dc: r0 = of()
    //     0x30e6dc: bl              #0x218dc4  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x30e6e0: LoadField: r1 = r0->field_2b
    //     0x30e6e0: ldur            w1, [x0, #0x2b]
    // 0x30e6e4: DecompressPointer r1
    //     0x30e6e4: add             x1, x1, HEAP, lsl #32
    // 0x30e6e8: stur            x1, [fp, #-0x20]
    // 0x30e6ec: r0 = _RenderDecoration()
    //     0x30e6ec: bl              #0x30e7fc  ; Allocate_RenderDecorationStub -> _RenderDecoration (size=0x84)
    // 0x30e6f0: stur            x0, [fp, #-0x28]
    // 0x30e6f4: ldur            x16, [fp, #-0x18]
    // 0x30e6f8: stp             x16, x0, [SP, #0x18]
    // 0x30e6fc: ldur            x16, [fp, #-8]
    // 0x30e700: ldur            lr, [fp, #-0x20]
    // 0x30e704: stp             lr, x16, [SP, #8]
    // 0x30e708: ldur            x16, [fp, #-0x10]
    // 0x30e70c: str             x16, [SP]
    // 0x30e710: r0 = _RenderDecoration()
    //     0x30e710: bl              #0x30e72c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_RenderDecoration
    // 0x30e714: ldur            x0, [fp, #-0x28]
    // 0x30e718: LeaveFrame
    //     0x30e718: mov             SP, fp
    //     0x30e71c: ldp             fp, lr, [SP], #0x10
    // 0x30e720: ret
    //     0x30e720: ret             
    // 0x30e724: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x30e724: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x30e728: b               #0x30e6ac
  }
}

// class id: 1730, size: 0x30, field offset: 0xc
//   const constructor, 
class InputDecorator extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0x2cda60, size: 0x48
    // 0x2cda60: EnterFrame
    //     0x2cda60: stp             fp, lr, [SP, #-0x10]!
    //     0x2cda64: mov             fp, SP
    // 0x2cda68: AllocStack(0x10)
    //     0x2cda68: sub             SP, SP, #0x10
    // 0x2cda6c: CheckStackOverflow
    //     0x2cda6c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x2cda70: cmp             SP, x16
    //     0x2cda74: b.ls            #0x2cdaa0
    // 0x2cda78: r1 = <InputDecorator>
    //     0x2cda78: add             x1, PP, #0xf, lsl #12  ; [pp+0xfce8] TypeArguments: <InputDecorator>
    //     0x2cda7c: ldr             x1, [x1, #0xce8]
    // 0x2cda80: r0 = _InputDecoratorState()
    //     0x2cda80: bl              #0x2cdb64  ; Allocate_InputDecoratorStateStub -> _InputDecoratorState (size=0x30)
    // 0x2cda84: stur            x0, [fp, #-8]
    // 0x2cda88: str             x0, [SP]
    // 0x2cda8c: r0 = _InputDecoratorState()
    //     0x2cda8c: bl              #0x2cdaa8  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_InputDecoratorState
    // 0x2cda90: ldur            x0, [fp, #-8]
    // 0x2cda94: LeaveFrame
    //     0x2cda94: mov             SP, fp
    //     0x2cda98: ldp             fp, lr, [SP], #0x10
    // 0x2cda9c: ret
    //     0x2cda9c: ret             
    // 0x2cdaa0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x2cdaa0: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x2cdaa4: b               #0x2cda78
  }
}

// class id: 1731, size: 0x18, field offset: 0xc
//   const constructor, 
class _HelperError extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0x2cda2c, size: 0x28
    // 0x2cda2c: EnterFrame
    //     0x2cda2c: stp             fp, lr, [SP, #-0x10]!
    //     0x2cda30: mov             fp, SP
    // 0x2cda34: r1 = <_HelperError>
    //     0x2cda34: add             x1, PP, #0x12, lsl #12  ; [pp+0x12940] TypeArguments: <_HelperError>
    //     0x2cda38: ldr             x1, [x1, #0x940]
    // 0x2cda3c: r0 = _HelperErrorState()
    //     0x2cda3c: bl              #0x2cda54  ; Allocate_HelperErrorStateStub -> _HelperErrorState (size=0x28)
    // 0x2cda40: r1 = Sentinel
    //     0x2cda40: ldr             x1, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2cda44: StoreField: r0->field_1b = r1
    //     0x2cda44: stur            w1, [x0, #0x1b]
    // 0x2cda48: LeaveFrame
    //     0x2cda48: mov             SP, fp
    //     0x2cda4c: ldp             fp, lr, [SP], #0x10
    // 0x2cda50: ret
    //     0x2cda50: ret             
  }
}

// class id: 1742, size: 0x14, field offset: 0x10
//   const constructor, 
class _Shaker extends AnimatedWidget {

  _ build(/* No info */) {
    // ** addr: 0x33899c, size: 0x7c
    // 0x33899c: EnterFrame
    //     0x33899c: stp             fp, lr, [SP, #-0x10]!
    //     0x3389a0: mov             fp, SP
    // 0x3389a4: AllocStack(0x28)
    //     0x3389a4: sub             SP, SP, #0x28
    // 0x3389a8: CheckStackOverflow
    //     0x3389a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x3389ac: cmp             SP, x16
    //     0x3389b0: b.ls            #0x338a10
    // 0x3389b4: ldr             x16, [fp, #0x18]
    // 0x3389b8: str             x16, [SP]
    // 0x3389bc: r0 = translateX()
    //     0x3389bc: bl              #0x338a24  ; [package:flutter/src/material/input_decorator.dart] _Shaker::translateX
    // 0x3389c0: str             NULL, [SP, #0x10]
    // 0x3389c4: str             d0, [SP, #8]
    // 0x3389c8: str             xzr, [SP]
    // 0x3389cc: r0 = Matrix4.translationValues()
    //     0x3389cc: bl              #0x1dd508  ; [package:vector_math/vector_math_64.dart] Matrix4::Matrix4.translationValues
    // 0x3389d0: mov             x1, x0
    // 0x3389d4: ldr             x0, [fp, #0x18]
    // 0x3389d8: stur            x1, [fp, #-0x10]
    // 0x3389dc: LoadField: r2 = r0->field_f
    //     0x3389dc: ldur            w2, [x0, #0xf]
    // 0x3389e0: DecompressPointer r2
    //     0x3389e0: add             x2, x2, HEAP, lsl #32
    // 0x3389e4: stur            x2, [fp, #-8]
    // 0x3389e8: r0 = Transform()
    //     0x3389e8: bl              #0x338a18  ; AllocateTransformStub -> Transform (size=0x24)
    // 0x3389ec: ldur            x1, [fp, #-0x10]
    // 0x3389f0: StoreField: r0->field_f = r1
    //     0x3389f0: stur            w1, [x0, #0xf]
    // 0x3389f4: r1 = true
    //     0x3389f4: add             x1, NULL, #0x20  ; true
    // 0x3389f8: StoreField: r0->field_1b = r1
    //     0x3389f8: stur            w1, [x0, #0x1b]
    // 0x3389fc: ldur            x1, [fp, #-8]
    // 0x338a00: StoreField: r0->field_b = r1
    //     0x338a00: stur            w1, [x0, #0xb]
    // 0x338a04: LeaveFrame
    //     0x338a04: mov             SP, fp
    //     0x338a08: ldp             fp, lr, [SP], #0x10
    // 0x338a0c: ret
    //     0x338a0c: ret             
    // 0x338a10: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x338a10: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x338a14: b               #0x3389b4
  }
  get _ translateX(/* No info */) {
    // ** addr: 0x338a24, size: 0xf4
    // 0x338a24: EnterFrame
    //     0x338a24: stp             fp, lr, [SP, #-0x10]!
    //     0x338a28: mov             fp, SP
    // 0x338a2c: AllocStack(0x10)
    //     0x338a2c: sub             SP, SP, #0x10
    // 0x338a30: CheckStackOverflow
    //     0x338a30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x338a34: cmp             SP, x16
    //     0x338a38: b.ls            #0x338b10
    // 0x338a3c: ldr             x0, [fp, #0x10]
    // 0x338a40: LoadField: r3 = r0->field_b
    //     0x338a40: ldur            w3, [x0, #0xb]
    // 0x338a44: DecompressPointer r3
    //     0x338a44: add             x3, x3, HEAP, lsl #32
    // 0x338a48: mov             x0, x3
    // 0x338a4c: stur            x3, [fp, #-8]
    // 0x338a50: r2 = Null
    //     0x338a50: mov             x2, NULL
    // 0x338a54: r1 = Null
    //     0x338a54: mov             x1, NULL
    // 0x338a58: r8 = Animation<double>
    //     0x338a58: add             x8, PP, #0x11, lsl #12  ; [pp+0x11570] Type: Animation<double>
    //     0x338a5c: ldr             x8, [x8, #0x570]
    // 0x338a60: r3 = Null
    //     0x338a60: add             x3, PP, #0x12, lsl #12  ; [pp+0x12968] Null
    //     0x338a64: ldr             x3, [x3, #0x968]
    // 0x338a68: r0 = Animation<double>()
    //     0x338a68: bl              #0x1e107c  ; IsType_Animation<double>_Stub
    // 0x338a6c: ldur            x0, [fp, #-8]
    // 0x338a70: r1 = LoadClassIdInstr(r0)
    //     0x338a70: ldur            x1, [x0, #-1]
    //     0x338a74: ubfx            x1, x1, #0xc, #0x14
    // 0x338a78: str             x0, [SP]
    // 0x338a7c: mov             x0, x1
    // 0x338a80: r0 = GDT[cid_x0 + -0xfff]()
    //     0x338a80: sub             lr, x0, #0xfff
    //     0x338a84: ldr             lr, [x21, lr, lsl #3]
    //     0x338a88: blr             lr
    // 0x338a8c: LoadField: d1 = r0->field_7
    //     0x338a8c: ldur            d1, [x0, #7]
    // 0x338a90: d2 = 0.250000
    //     0x338a90: fmov            d2, #0.25000000
    // 0x338a94: d2 = 0.250000
    //     0x338a94: fmov            d2, #0.25000000
    // 0x338a98: fcmp            d2, d1
    // 0x338a9c: b.lt            #0x338abc
    // 0x338aa0: d2 = 4.000000
    //     0x338aa0: fmov            d2, #4.00000000
    // 0x338aa4: d2 = 4.000000
    //     0x338aa4: fmov            d2, #4.00000000
    // 0x338aa8: fneg            d3, d1
    // 0x338aac: fmul            d0, d3, d2
    // 0x338ab0: LeaveFrame
    //     0x338ab0: mov             SP, fp
    //     0x338ab4: ldp             fp, lr, [SP], #0x10
    // 0x338ab8: ret
    //     0x338ab8: ret             
    // 0x338abc: d2 = 4.000000
    //     0x338abc: fmov            d2, #4.00000000
    // 0x338ac0: d2 = 4.000000
    //     0x338ac0: fmov            d2, #4.00000000
    // 0x338ac4: d3 = 0.750000
    //     0x338ac4: fmov            d3, #0.75000000
    // 0x338ac8: d3 = 0.750000
    //     0x338ac8: fmov            d3, #0.75000000
    // 0x338acc: fcmp            d3, d1
    // 0x338ad0: b.le            #0x338af0
    // 0x338ad4: d3 = 0.500000
    //     0x338ad4: fmov            d3, #0.50000000
    // 0x338ad8: d3 = 0.500000
    //     0x338ad8: fmov            d3, #0.50000000
    // 0x338adc: fsub            d4, d1, d3
    // 0x338ae0: fmul            d0, d4, d2
    // 0x338ae4: LeaveFrame
    //     0x338ae4: mov             SP, fp
    //     0x338ae8: ldp             fp, lr, [SP], #0x10
    // 0x338aec: ret
    //     0x338aec: ret             
    // 0x338af0: d3 = 1.000000
    //     0x338af0: fmov            d3, #1.00000000
    // 0x338af4: d3 = 1.000000
    //     0x338af4: fmov            d3, #1.00000000
    // 0x338af8: fsub            d4, d3, d1
    // 0x338afc: fmul            d1, d4, d2
    // 0x338b00: fmul            d0, d1, d2
    // 0x338b04: LeaveFrame
    //     0x338b04: mov             SP, fp
    //     0x338b08: ldp             fp, lr, [SP], #0x10
    // 0x338b0c: ret
    //     0x338b0c: ret             
    // 0x338b10: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x338b10: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x338b14: b               #0x338a3c
  }
}

// class id: 1743, size: 0x24, field offset: 0xc
//   const constructor, 
class _BorderContainer extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0x2cd9b8, size: 0x3c
    // 0x2cd9b8: EnterFrame
    //     0x2cd9b8: stp             fp, lr, [SP, #-0x10]!
    //     0x2cd9bc: mov             fp, SP
    // 0x2cd9c0: r1 = <_BorderContainer>
    //     0x2cd9c0: add             x1, PP, #0x12, lsl #12  ; [pp+0x12938] TypeArguments: <_BorderContainer>
    //     0x2cd9c4: ldr             x1, [x1, #0x938]
    // 0x2cd9c8: r0 = _BorderContainerState()
    //     0x2cd9c8: bl              #0x2cd9f4  ; Allocate_BorderContainerStateStub -> _BorderContainerState (size=0x34)
    // 0x2cd9cc: r1 = Sentinel
    //     0x2cd9cc: ldr             x1, [PP, #0x40]  ; [pp+0x40] Sentinel
    // 0x2cd9d0: StoreField: r0->field_1b = r1
    //     0x2cd9d0: stur            w1, [x0, #0x1b]
    // 0x2cd9d4: StoreField: r0->field_1f = r1
    //     0x2cd9d4: stur            w1, [x0, #0x1f]
    // 0x2cd9d8: StoreField: r0->field_23 = r1
    //     0x2cd9d8: stur            w1, [x0, #0x23]
    // 0x2cd9dc: StoreField: r0->field_27 = r1
    //     0x2cd9dc: stur            w1, [x0, #0x27]
    // 0x2cd9e0: StoreField: r0->field_2b = r1
    //     0x2cd9e0: stur            w1, [x0, #0x2b]
    // 0x2cd9e4: StoreField: r0->field_2f = r1
    //     0x2cd9e4: stur            w1, [x0, #0x2f]
    // 0x2cd9e8: LeaveFrame
    //     0x2cd9e8: mov             SP, fp
    //     0x2cd9ec: ldp             fp, lr, [SP], #0x10
    // 0x2cd9f0: ret
    //     0x2cd9f0: ret             
  }
}

// class id: 1871, size: 0x14, field offset: 0x14
class _InputBorderTween extends Tween<dynamic> {

  _ lerp(/* No info */) {
    // ** addr: 0x340718, size: 0x9c
    // 0x340718: EnterFrame
    //     0x340718: stp             fp, lr, [SP, #-0x10]!
    //     0x34071c: mov             fp, SP
    // 0x340720: AllocStack(0x20)
    //     0x340720: sub             SP, SP, #0x20
    // 0x340724: CheckStackOverflow
    //     0x340724: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x340728: cmp             SP, x16
    //     0x34072c: b.ls            #0x3407a8
    // 0x340730: ldr             x0, [fp, #0x18]
    // 0x340734: LoadField: r1 = r0->field_b
    //     0x340734: ldur            w1, [x0, #0xb]
    // 0x340738: DecompressPointer r1
    //     0x340738: add             x1, x1, HEAP, lsl #32
    // 0x34073c: LoadField: r2 = r0->field_f
    //     0x34073c: ldur            w2, [x0, #0xf]
    // 0x340740: DecompressPointer r2
    //     0x340740: add             x2, x2, HEAP, lsl #32
    // 0x340744: stp             x2, x1, [SP, #8]
    // 0x340748: ldr             d0, [fp, #0x10]
    // 0x34074c: str             d0, [SP]
    // 0x340750: r0 = lerp()
    //     0x340750: bl              #0x3407b4  ; [package:flutter/src/painting/borders.dart] ShapeBorder::lerp
    // 0x340754: mov             x3, x0
    // 0x340758: stur            x3, [fp, #-8]
    // 0x34075c: cmp             w3, NULL
    // 0x340760: b.eq            #0x3407b0
    // 0x340764: mov             x0, x3
    // 0x340768: r2 = Null
    //     0x340768: mov             x2, NULL
    // 0x34076c: r1 = Null
    //     0x34076c: mov             x1, NULL
    // 0x340770: r4 = LoadClassIdInstr(r0)
    //     0x340770: ldur            x4, [x0, #-1]
    //     0x340774: ubfx            x4, x4, #0xc, #0x14
    // 0x340778: sub             x4, x4, #0x2e8
    // 0x34077c: cmp             x4, #2
    // 0x340780: b.ls            #0x340798
    // 0x340784: r8 = InputBorder
    //     0x340784: add             x8, PP, #0x14, lsl #12  ; [pp+0x14d80] Type: InputBorder
    //     0x340788: ldr             x8, [x8, #0xd80]
    // 0x34078c: r3 = Null
    //     0x34078c: add             x3, PP, #0x14, lsl #12  ; [pp+0x14d88] Null
    //     0x340790: ldr             x3, [x3, #0xd88]
    // 0x340794: r0 = InputBorder()
    //     0x340794: bl              #0x267dfc  ; IsType_InputBorder_Stub
    // 0x340798: ldur            x0, [fp, #-8]
    // 0x34079c: LeaveFrame
    //     0x34079c: mov             SP, fp
    //     0x3407a0: ldp             fp, lr, [SP], #0x10
    // 0x3407a4: ret
    //     0x3407a4: ret             
    // 0x3407a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x3407a8: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x3407ac: b               #0x340730
    // 0x3407b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x3407b0: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 1918, size: 0x2c, field offset: 0xc
class _InputBorderPainter extends CustomPainter {

  _ _InputBorderPainter(/* No info */) {
    // ** addr: 0x28c5a4, size: 0x124
    // 0x28c5a4: EnterFrame
    //     0x28c5a4: stp             fp, lr, [SP, #-0x10]!
    //     0x28c5a8: mov             fp, SP
    // 0x28c5ac: r1 = Instance_TextDirection
    //     0x28c5ac: ldr             x1, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x28c5b0: ldr             x0, [fp, #0x40]
    // 0x28c5b4: ldr             x2, [fp, #0x50]
    // 0x28c5b8: StoreField: r2->field_b = r0
    //     0x28c5b8: stur            w0, [x2, #0xb]
    //     0x28c5bc: ldurb           w16, [x2, #-1]
    //     0x28c5c0: ldurb           w17, [x0, #-1]
    //     0x28c5c4: and             x16, x17, x16, lsr #2
    //     0x28c5c8: tst             x16, HEAP, lsr #32
    //     0x28c5cc: b.eq            #0x28c5d4
    //     0x28c5d0: bl              #0x3e4628
    // 0x28c5d4: ldr             x0, [fp, #0x48]
    // 0x28c5d8: StoreField: r2->field_f = r0
    //     0x28c5d8: stur            w0, [x2, #0xf]
    //     0x28c5dc: ldurb           w16, [x2, #-1]
    //     0x28c5e0: ldurb           w17, [x0, #-1]
    //     0x28c5e4: and             x16, x17, x16, lsr #2
    //     0x28c5e8: tst             x16, HEAP, lsr #32
    //     0x28c5ec: b.eq            #0x28c5f4
    //     0x28c5f0: bl              #0x3e4628
    // 0x28c5f4: ldr             x0, [fp, #0x28]
    // 0x28c5f8: StoreField: r2->field_13 = r0
    //     0x28c5f8: stur            w0, [x2, #0x13]
    //     0x28c5fc: ldurb           w16, [x2, #-1]
    //     0x28c600: ldurb           w17, [x0, #-1]
    //     0x28c604: and             x16, x17, x16, lsr #2
    //     0x28c608: tst             x16, HEAP, lsr #32
    //     0x28c60c: b.eq            #0x28c614
    //     0x28c610: bl              #0x3e4628
    // 0x28c614: ldr             x0, [fp, #0x30]
    // 0x28c618: StoreField: r2->field_17 = r0
    //     0x28c618: stur            w0, [x2, #0x17]
    //     0x28c61c: ldurb           w16, [x2, #-1]
    //     0x28c620: ldurb           w17, [x0, #-1]
    //     0x28c624: and             x16, x17, x16, lsr #2
    //     0x28c628: tst             x16, HEAP, lsr #32
    //     0x28c62c: b.eq            #0x28c634
    //     0x28c630: bl              #0x3e4628
    // 0x28c634: StoreField: r2->field_1b = r1
    //     0x28c634: stur            w1, [x2, #0x1b]
    // 0x28c638: ldr             x0, [fp, #0x38]
    // 0x28c63c: StoreField: r2->field_1f = r0
    //     0x28c63c: stur            w0, [x2, #0x1f]
    //     0x28c640: ldurb           w16, [x2, #-1]
    //     0x28c644: ldurb           w17, [x0, #-1]
    //     0x28c648: and             x16, x17, x16, lsr #2
    //     0x28c64c: tst             x16, HEAP, lsr #32
    //     0x28c650: b.eq            #0x28c658
    //     0x28c654: bl              #0x3e4628
    // 0x28c658: ldr             x0, [fp, #0x20]
    // 0x28c65c: StoreField: r2->field_27 = r0
    //     0x28c65c: stur            w0, [x2, #0x27]
    //     0x28c660: ldurb           w16, [x2, #-1]
    //     0x28c664: ldurb           w17, [x0, #-1]
    //     0x28c668: and             x16, x17, x16, lsr #2
    //     0x28c66c: tst             x16, HEAP, lsr #32
    //     0x28c670: b.eq            #0x28c678
    //     0x28c674: bl              #0x3e4628
    // 0x28c678: ldr             x0, [fp, #0x18]
    // 0x28c67c: StoreField: r2->field_23 = r0
    //     0x28c67c: stur            w0, [x2, #0x23]
    //     0x28c680: ldurb           w16, [x2, #-1]
    //     0x28c684: ldurb           w17, [x0, #-1]
    //     0x28c688: and             x16, x17, x16, lsr #2
    //     0x28c68c: tst             x16, HEAP, lsr #32
    //     0x28c690: b.eq            #0x28c698
    //     0x28c694: bl              #0x3e4628
    // 0x28c698: ldr             x0, [fp, #0x10]
    // 0x28c69c: StoreField: r2->field_7 = r0
    //     0x28c69c: stur            w0, [x2, #7]
    //     0x28c6a0: ldurb           w16, [x2, #-1]
    //     0x28c6a4: ldurb           w17, [x0, #-1]
    //     0x28c6a8: and             x16, x17, x16, lsr #2
    //     0x28c6ac: tst             x16, HEAP, lsr #32
    //     0x28c6b0: b.eq            #0x28c6b8
    //     0x28c6b4: bl              #0x3e4628
    // 0x28c6b8: r0 = Null
    //     0x28c6b8: mov             x0, NULL
    // 0x28c6bc: LeaveFrame
    //     0x28c6bc: mov             SP, fp
    //     0x28c6c0: ldp             fp, lr, [SP], #0x10
    // 0x28c6c4: ret
    //     0x28c6c4: ret             
  }
  _ paint(/* No info */) {
    // ** addr: 0x34ee04, size: 0x230
    // 0x34ee04: EnterFrame
    //     0x34ee04: stp             fp, lr, [SP, #-0x10]!
    //     0x34ee08: mov             fp, SP
    // 0x34ee0c: AllocStack(0x78)
    //     0x34ee0c: sub             SP, SP, #0x78
    // 0x34ee10: CheckStackOverflow
    //     0x34ee10: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x34ee14: cmp             SP, x16
    //     0x34ee18: b.ls            #0x34f010
    // 0x34ee1c: ldr             x0, [fp, #0x20]
    // 0x34ee20: LoadField: r1 = r0->field_f
    //     0x34ee20: ldur            w1, [x0, #0xf]
    // 0x34ee24: DecompressPointer r1
    //     0x34ee24: add             x1, x1, HEAP, lsl #32
    // 0x34ee28: LoadField: r2 = r0->field_b
    //     0x34ee28: ldur            w2, [x0, #0xb]
    // 0x34ee2c: DecompressPointer r2
    //     0x34ee2c: add             x2, x2, HEAP, lsl #32
    // 0x34ee30: stp             x2, x1, [SP]
    // 0x34ee34: r0 = evaluate()
    //     0x34ee34: bl              #0x1e1008  ; [package:flutter/src/animation/tween.dart] Animatable::evaluate
    // 0x34ee38: stur            x0, [fp, #-8]
    // 0x34ee3c: r16 = Instance_Offset
    //     0x34ee3c: ldr             x16, [PP, #0x36e0]  ; [pp+0x36e0] Obj!Offset@47d631
    // 0x34ee40: ldr             lr, [fp, #0x10]
    // 0x34ee44: stp             lr, x16, [SP]
    // 0x34ee48: r0 = &()
    //     0x34ee48: bl              #0x1e6458  ; [dart:ui] Offset::&
    // 0x34ee4c: stur            x0, [fp, #-0x10]
    // 0x34ee50: ldr             x16, [fp, #0x20]
    // 0x34ee54: str             x16, [SP]
    // 0x34ee58: r0 = blendedColor()
    //     0x34ee58: bl              #0x34f034  ; [package:flutter/src/material/input_decorator.dart] _InputBorderPainter::blendedColor
    // 0x34ee5c: mov             x1, x0
    // 0x34ee60: stur            x1, [fp, #-0x18]
    // 0x34ee64: r0 = LoadClassIdInstr(r1)
    //     0x34ee64: ldur            x0, [x1, #-1]
    //     0x34ee68: ubfx            x0, x0, #0xc, #0x14
    // 0x34ee6c: sub             x16, x0, #0x7ee
    // 0x34ee70: cmp             x16, #1
    // 0x34ee74: b.ls            #0x34ee88
    // 0x34ee78: cmp             x0, #0x7ea
    // 0x34ee7c: b.eq            #0x34ee88
    // 0x34ee80: cmp             x0, #0x7ec
    // 0x34ee84: b.ne            #0x34ee94
    // 0x34ee88: LoadField: r0 = r1->field_7
    //     0x34ee88: ldur            x0, [x1, #7]
    // 0x34ee8c: mov             x2, x0
    // 0x34ee90: b               #0x34eea0
    // 0x34ee94: LoadField: r0 = r1->field_f
    //     0x34ee94: ldur            w0, [x1, #0xf]
    // 0x34ee98: DecompressPointer r0
    //     0x34ee98: add             x0, x0, HEAP, lsl #32
    // 0x34ee9c: LoadField: r2 = r0->field_7
    //     0x34ee9c: ldur            x2, [x0, #7]
    // 0x34eea0: r0 = 4278190080
    //     0x34eea0: orr             x0, xzr, #0xff000000
    // 0x34eea4: ubfx            x2, x2, #0, #0x20
    // 0x34eea8: and             x3, x2, x0
    // 0x34eeac: ubfx            x3, x3, #0, #0x20
    // 0x34eeb0: asr             x0, x3, #0x18
    // 0x34eeb4: cmp             x0, #0
    // 0x34eeb8: b.le            #0x34ef5c
    // 0x34eebc: ldur            x2, [fp, #-8]
    // 0x34eec0: r0 = LoadClassIdInstr(r2)
    //     0x34eec0: ldur            x0, [x2, #-1]
    //     0x34eec4: ubfx            x0, x0, #0xc, #0x14
    // 0x34eec8: ldur            x16, [fp, #-0x10]
    // 0x34eecc: stp             x16, x2, [SP, #8]
    // 0x34eed0: r16 = Instance_TextDirection
    //     0x34eed0: ldr             x16, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x34eed4: str             x16, [SP]
    // 0x34eed8: r4 = const [0, 0x3, 0x3, 0x2, textDirection, 0x2, null]
    //     0x34eed8: add             x4, PP, #0xb, lsl #12  ; [pp+0xbe80] List(7) [0, 0x3, 0x3, 0x2, "textDirection", 0x2, Null]
    //     0x34eedc: ldr             x4, [x4, #0xe80]
    // 0x34eee0: r0 = GDT[cid_x0 + -0xf8a]()
    //     0x34eee0: sub             lr, x0, #0xf8a
    //     0x34eee4: ldr             lr, [x21, lr, lsl #3]
    //     0x34eee8: blr             lr
    // 0x34eeec: stur            x0, [fp, #-0x20]
    // 0x34eef0: r16 = 112
    //     0x34eef0: movz            x16, #0x70
    // 0x34eef4: stp             x16, NULL, [SP]
    // 0x34eef8: r0 = ByteData()
    //     0x34eef8: bl              #0x18cc84  ; [dart:typed_data] ByteData::ByteData
    // 0x34eefc: stur            x0, [fp, #-0x28]
    // 0x34ef00: r0 = Paint()
    //     0x34ef00: bl              #0x1d6d08  ; AllocatePaintStub -> Paint (size=0x10)
    // 0x34ef04: mov             x1, x0
    // 0x34ef08: ldur            x0, [fp, #-0x28]
    // 0x34ef0c: stur            x1, [fp, #-0x38]
    // 0x34ef10: StoreField: r1->field_7 = r0
    //     0x34ef10: stur            w0, [x1, #7]
    // 0x34ef14: LoadField: r2 = r0->field_17
    //     0x34ef14: ldur            w2, [x0, #0x17]
    // 0x34ef18: DecompressPointer r2
    //     0x34ef18: add             x2, x2, HEAP, lsl #32
    // 0x34ef1c: stur            x2, [fp, #-0x30]
    // 0x34ef20: LoadField: r0 = r2->field_7
    //     0x34ef20: ldur            x0, [x2, #7]
    // 0x34ef24: r3 = 1
    //     0x34ef24: movz            x3, #0x1
    // 0x34ef28: str             w3, [x0, #0x34]
    // 0x34ef2c: ldur            x16, [fp, #-0x18]
    // 0x34ef30: stp             x16, x1, [SP]
    // 0x34ef34: r0 = color=()
    //     0x34ef34: bl              #0x1d6c10  ; [dart:ui] Paint::color=
    // 0x34ef38: ldur            x0, [fp, #-0x30]
    // 0x34ef3c: LoadField: r1 = r0->field_7
    //     0x34ef3c: ldur            x1, [x0, #7]
    // 0x34ef40: str             wzr, [x1, #0xc]
    // 0x34ef44: ldr             x16, [fp, #0x18]
    // 0x34ef48: ldur            lr, [fp, #-0x20]
    // 0x34ef4c: stp             lr, x16, [SP, #8]
    // 0x34ef50: ldur            x16, [fp, #-0x38]
    // 0x34ef54: str             x16, [SP]
    // 0x34ef58: r0 = drawPath()
    //     0x34ef58: bl              #0x1f3934  ; [dart:ui] _NativeCanvas::drawPath
    // 0x34ef5c: ldr             x1, [fp, #0x20]
    // 0x34ef60: ldur            x0, [fp, #-8]
    // 0x34ef64: LoadField: r2 = r1->field_17
    //     0x34ef64: ldur            w2, [x1, #0x17]
    // 0x34ef68: DecompressPointer r2
    //     0x34ef68: add             x2, x2, HEAP, lsl #32
    // 0x34ef6c: LoadField: r3 = r2->field_23
    //     0x34ef6c: ldur            w3, [x2, #0x23]
    // 0x34ef70: DecompressPointer r3
    //     0x34ef70: add             x3, x3, HEAP, lsl #32
    // 0x34ef74: stur            x3, [fp, #-0x18]
    // 0x34ef78: LoadField: d0 = r2->field_27
    //     0x34ef78: ldur            d0, [x2, #0x27]
    // 0x34ef7c: stur            d0, [fp, #-0x40]
    // 0x34ef80: LoadField: r2 = r1->field_13
    //     0x34ef80: ldur            w2, [x1, #0x13]
    // 0x34ef84: DecompressPointer r2
    //     0x34ef84: add             x2, x2, HEAP, lsl #32
    // 0x34ef88: str             x2, [SP]
    // 0x34ef8c: r0 = value()
    //     0x34ef8c: bl              #0x3a8e50  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::value
    // 0x34ef90: ldur            d0, [fp, #-0x40]
    // 0x34ef94: r1 = inline_Allocate_Double()
    //     0x34ef94: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x34ef98: add             x1, x1, #0x10
    //     0x34ef9c: cmp             x2, x1
    //     0x34efa0: b.ls            #0x34f018
    //     0x34efa4: str             x1, [THR, #0x50]  ; THR::top
    //     0x34efa8: sub             x1, x1, #0xf
    //     0x34efac: movz            x2, #0xd148
    //     0x34efb0: movk            x2, #0x3, lsl #16
    //     0x34efb4: stur            x2, [x1, #-1]
    // 0x34efb8: StoreField: r1->field_7 = d0
    //     0x34efb8: stur            d0, [x1, #7]
    // 0x34efbc: ldur            x2, [fp, #-8]
    // 0x34efc0: r3 = LoadClassIdInstr(r2)
    //     0x34efc0: ldur            x3, [x2, #-1]
    //     0x34efc4: ubfx            x3, x3, #0xc, #0x14
    // 0x34efc8: ldr             x16, [fp, #0x18]
    // 0x34efcc: stp             x16, x2, [SP, #0x28]
    // 0x34efd0: ldur            x16, [fp, #-0x10]
    // 0x34efd4: r30 = Instance_TextDirection
    //     0x34efd4: ldr             lr, [PP, #0x3500]  ; [pp+0x3500] Obj!TextDirection@482181
    // 0x34efd8: stp             lr, x16, [SP, #0x18]
    // 0x34efdc: ldur            x16, [fp, #-0x18]
    // 0x34efe0: stp             x1, x16, [SP, #8]
    // 0x34efe4: str             x0, [SP]
    // 0x34efe8: mov             x0, x3
    // 0x34efec: r4 = const [0, 0x7, 0x7, 0x4, gapExtent, 0x5, gapPercentage, 0x6, gapStart, 0x4, null]
    //     0x34efec: add             x4, PP, #0x14, lsl #12  ; [pp+0x14db0] List(11) [0, 0x7, 0x7, 0x4, "gapExtent", 0x5, "gapPercentage", 0x6, "gapStart", 0x4, Null]
    //     0x34eff0: ldr             x4, [x4, #0xdb0]
    // 0x34eff4: r0 = GDT[cid_x0 + -0xa8c]()
    //     0x34eff4: sub             lr, x0, #0xa8c
    //     0x34eff8: ldr             lr, [x21, lr, lsl #3]
    //     0x34effc: blr             lr
    // 0x34f000: r0 = Null
    //     0x34f000: mov             x0, NULL
    // 0x34f004: LeaveFrame
    //     0x34f004: mov             SP, fp
    //     0x34f008: ldp             fp, lr, [SP], #0x10
    // 0x34f00c: ret
    //     0x34f00c: ret             
    // 0x34f010: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x34f010: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x34f014: b               #0x34ee1c
    // 0x34f018: SaveReg d0
    //     0x34f018: str             q0, [SP, #-0x10]!
    // 0x34f01c: SaveReg r0
    //     0x34f01c: str             x0, [SP, #-8]!
    // 0x34f020: r0 = AllocateDouble()
    //     0x34f020: bl              #0x3e5b30  ; AllocateDoubleStub
    // 0x34f024: mov             x1, x0
    // 0x34f028: RestoreReg r0
    //     0x34f028: ldr             x0, [SP], #8
    // 0x34f02c: RestoreReg d0
    //     0x34f02c: ldr             q0, [SP], #0x10
    // 0x34f030: b               #0x34efb8
  }
  get _ blendedColor(/* No info */) {
    // ** addr: 0x34f034, size: 0x68
    // 0x34f034: EnterFrame
    //     0x34f034: stp             fp, lr, [SP, #-0x10]!
    //     0x34f038: mov             fp, SP
    // 0x34f03c: AllocStack(0x10)
    //     0x34f03c: sub             SP, SP, #0x10
    // 0x34f040: CheckStackOverflow
    //     0x34f040: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x34f044: cmp             SP, x16
    //     0x34f048: b.ls            #0x34f090
    // 0x34f04c: ldr             x0, [fp, #0x10]
    // 0x34f050: LoadField: r1 = r0->field_23
    //     0x34f050: ldur            w1, [x0, #0x23]
    // 0x34f054: DecompressPointer r1
    //     0x34f054: add             x1, x1, HEAP, lsl #32
    // 0x34f058: LoadField: r2 = r0->field_27
    //     0x34f058: ldur            w2, [x0, #0x27]
    // 0x34f05c: DecompressPointer r2
    //     0x34f05c: add             x2, x2, HEAP, lsl #32
    // 0x34f060: stp             x2, x1, [SP]
    // 0x34f064: r0 = evaluate()
    //     0x34f064: bl              #0x1e1008  ; [package:flutter/src/animation/tween.dart] Animatable::evaluate
    // 0x34f068: cmp             w0, NULL
    // 0x34f06c: b.eq            #0x34f098
    // 0x34f070: ldr             x1, [fp, #0x10]
    // 0x34f074: LoadField: r2 = r1->field_1f
    //     0x34f074: ldur            w2, [x1, #0x1f]
    // 0x34f078: DecompressPointer r2
    //     0x34f078: add             x2, x2, HEAP, lsl #32
    // 0x34f07c: stp             x2, x0, [SP]
    // 0x34f080: r0 = alphaBlend()
    //     0x34f080: bl              #0x28ee28  ; [dart:ui] Color::alphaBlend
    // 0x34f084: LeaveFrame
    //     0x34f084: mov             SP, fp
    //     0x34f088: ldp             fp, lr, [SP], #0x10
    // 0x34f08c: ret
    //     0x34f08c: ret             
    // 0x34f090: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x34f090: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x34f094: b               #0x34f04c
    // 0x34f098: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x34f098: bl              #0x3e627c  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ shouldRepaint(/* No info */) {
    // ** addr: 0x377f98, size: 0xf4
    // 0x377f98: EnterFrame
    //     0x377f98: stp             fp, lr, [SP, #-0x10]!
    //     0x377f9c: mov             fp, SP
    // 0x377fa0: AllocStack(0x10)
    //     0x377fa0: sub             SP, SP, #0x10
    // 0x377fa4: CheckStackOverflow
    //     0x377fa4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x377fa8: cmp             SP, x16
    //     0x377fac: b.ls            #0x378084
    // 0x377fb0: ldr             x0, [fp, #0x10]
    // 0x377fb4: r2 = Null
    //     0x377fb4: mov             x2, NULL
    // 0x377fb8: r1 = Null
    //     0x377fb8: mov             x1, NULL
    // 0x377fbc: r4 = 59
    //     0x377fbc: movz            x4, #0x3b
    // 0x377fc0: branchIfSmi(r0, 0x377fcc)
    //     0x377fc0: tbz             w0, #0, #0x377fcc
    // 0x377fc4: r4 = LoadClassIdInstr(r0)
    //     0x377fc4: ldur            x4, [x0, #-1]
    //     0x377fc8: ubfx            x4, x4, #0xc, #0x14
    // 0x377fcc: cmp             x4, #0x77e
    // 0x377fd0: b.eq            #0x377fe8
    // 0x377fd4: r8 = _InputBorderPainter
    //     0x377fd4: add             x8, PP, #0x14, lsl #12  ; [pp+0x14d98] Type: _InputBorderPainter
    //     0x377fd8: ldr             x8, [x8, #0xd98]
    // 0x377fdc: r3 = Null
    //     0x377fdc: add             x3, PP, #0x14, lsl #12  ; [pp+0x14da0] Null
    //     0x377fe0: ldr             x3, [x3, #0xda0]
    // 0x377fe4: r0 = DefaultTypeTest()
    //     0x377fe4: bl              #0x3e3e58  ; DefaultTypeTestStub
    // 0x377fe8: ldr             x0, [fp, #0x18]
    // 0x377fec: LoadField: r1 = r0->field_b
    //     0x377fec: ldur            w1, [x0, #0xb]
    // 0x377ff0: DecompressPointer r1
    //     0x377ff0: add             x1, x1, HEAP, lsl #32
    // 0x377ff4: ldr             x2, [fp, #0x10]
    // 0x377ff8: LoadField: r3 = r2->field_b
    //     0x377ff8: ldur            w3, [x2, #0xb]
    // 0x377ffc: DecompressPointer r3
    //     0x377ffc: add             x3, x3, HEAP, lsl #32
    // 0x378000: cmp             w1, w3
    // 0x378004: b.ne            #0x37806c
    // 0x378008: LoadField: r1 = r0->field_27
    //     0x378008: ldur            w1, [x0, #0x27]
    // 0x37800c: DecompressPointer r1
    //     0x37800c: add             x1, x1, HEAP, lsl #32
    // 0x378010: LoadField: r3 = r2->field_27
    //     0x378010: ldur            w3, [x2, #0x27]
    // 0x378014: DecompressPointer r3
    //     0x378014: add             x3, x3, HEAP, lsl #32
    // 0x378018: cmp             w1, w3
    // 0x37801c: b.ne            #0x37806c
    // 0x378020: LoadField: r1 = r0->field_13
    //     0x378020: ldur            w1, [x0, #0x13]
    // 0x378024: DecompressPointer r1
    //     0x378024: add             x1, x1, HEAP, lsl #32
    // 0x378028: LoadField: r3 = r2->field_13
    //     0x378028: ldur            w3, [x2, #0x13]
    // 0x37802c: DecompressPointer r3
    //     0x37802c: add             x3, x3, HEAP, lsl #32
    // 0x378030: cmp             w1, w3
    // 0x378034: b.ne            #0x37806c
    // 0x378038: LoadField: r1 = r0->field_f
    //     0x378038: ldur            w1, [x0, #0xf]
    // 0x37803c: DecompressPointer r1
    //     0x37803c: add             x1, x1, HEAP, lsl #32
    // 0x378040: LoadField: r3 = r2->field_f
    //     0x378040: ldur            w3, [x2, #0xf]
    // 0x378044: DecompressPointer r3
    //     0x378044: add             x3, x3, HEAP, lsl #32
    // 0x378048: cmp             w1, w3
    // 0x37804c: b.ne            #0x37806c
    // 0x378050: LoadField: r1 = r0->field_17
    //     0x378050: ldur            w1, [x0, #0x17]
    // 0x378054: DecompressPointer r1
    //     0x378054: add             x1, x1, HEAP, lsl #32
    // 0x378058: LoadField: r0 = r2->field_17
    //     0x378058: ldur            w0, [x2, #0x17]
    // 0x37805c: DecompressPointer r0
    //     0x37805c: add             x0, x0, HEAP, lsl #32
    // 0x378060: stp             x0, x1, [SP]
    // 0x378064: r0 = ==()
    //     0x378064: bl              #0x3636d8  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::==
    // 0x378068: tbz             w0, #4, #0x378074
    // 0x37806c: r0 = true
    //     0x37806c: add             x0, NULL, #0x20  ; true
    // 0x378070: b               #0x378078
    // 0x378074: r0 = false
    //     0x378074: add             x0, NULL, #0x30  ; false
    // 0x378078: LeaveFrame
    //     0x378078: mov             SP, fp
    //     0x37807c: ldp             fp, lr, [SP], #0x10
    // 0x378080: ret
    //     0x378080: ret             
    // 0x378084: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x378084: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x378088: b               #0x377fb0
  }
}

// class id: 2547, size: 0x14, field offset: 0x14
enum _DecorationSlot extends _Enum {

  _Mint field_8;
  _OneByteString field_10;

  _ _enumToString(/* No info */) {
    // ** addr: 0x311b80, size: 0x5c
    // 0x311b80: EnterFrame
    //     0x311b80: stp             fp, lr, [SP, #-0x10]!
    //     0x311b84: mov             fp, SP
    // 0x311b88: AllocStack(0x8)
    //     0x311b88: sub             SP, SP, #8
    // 0x311b8c: CheckStackOverflow
    //     0x311b8c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x311b90: cmp             SP, x16
    //     0x311b94: b.ls            #0x311bd4
    // 0x311b98: r1 = Null
    //     0x311b98: mov             x1, NULL
    // 0x311b9c: r2 = 4
    //     0x311b9c: movz            x2, #0x4
    // 0x311ba0: r0 = AllocateArray()
    //     0x311ba0: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x311ba4: r17 = "_DecorationSlot."
    //     0x311ba4: add             x17, PP, #0x14, lsl #12  ; [pp+0x14db8] "_DecorationSlot."
    //     0x311ba8: ldr             x17, [x17, #0xdb8]
    // 0x311bac: StoreField: r0->field_f = r17
    //     0x311bac: stur            w17, [x0, #0xf]
    // 0x311bb0: ldr             x1, [fp, #0x10]
    // 0x311bb4: LoadField: r2 = r1->field_f
    //     0x311bb4: ldur            w2, [x1, #0xf]
    // 0x311bb8: DecompressPointer r2
    //     0x311bb8: add             x2, x2, HEAP, lsl #32
    // 0x311bbc: StoreField: r0->field_13 = r2
    //     0x311bbc: stur            w2, [x0, #0x13]
    // 0x311bc0: str             x0, [SP]
    // 0x311bc4: r0 = _interpolate()
    //     0x311bc4: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x311bc8: LeaveFrame
    //     0x311bc8: mov             SP, fp
    //     0x311bcc: ldp             fp, lr, [SP], #0x10
    // 0x311bd0: ret
    //     0x311bd0: ret             
    // 0x311bd4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x311bd4: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x311bd8: b               #0x311b98
  }
}

// class id: 2548, size: 0x14, field offset: 0x14
enum FloatingLabelBehavior extends _Enum {

  _Mint field_8;
  _OneByteString field_10;

  _ _enumToString(/* No info */) {
    // ** addr: 0x311b24, size: 0x5c
    // 0x311b24: EnterFrame
    //     0x311b24: stp             fp, lr, [SP, #-0x10]!
    //     0x311b28: mov             fp, SP
    // 0x311b2c: AllocStack(0x8)
    //     0x311b2c: sub             SP, SP, #8
    // 0x311b30: CheckStackOverflow
    //     0x311b30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x311b34: cmp             SP, x16
    //     0x311b38: b.ls            #0x311b78
    // 0x311b3c: r1 = Null
    //     0x311b3c: mov             x1, NULL
    // 0x311b40: r2 = 4
    //     0x311b40: movz            x2, #0x4
    // 0x311b44: r0 = AllocateArray()
    //     0x311b44: bl              #0x3e5bd8  ; AllocateArrayStub
    // 0x311b48: r17 = "FloatingLabelBehavior."
    //     0x311b48: add             x17, PP, #0xa, lsl #12  ; [pp+0xad98] "FloatingLabelBehavior."
    //     0x311b4c: ldr             x17, [x17, #0xd98]
    // 0x311b50: StoreField: r0->field_f = r17
    //     0x311b50: stur            w17, [x0, #0xf]
    // 0x311b54: ldr             x1, [fp, #0x10]
    // 0x311b58: LoadField: r2 = r1->field_f
    //     0x311b58: ldur            w2, [x1, #0xf]
    // 0x311b5c: DecompressPointer r2
    //     0x311b5c: add             x2, x2, HEAP, lsl #32
    // 0x311b60: StoreField: r0->field_13 = r2
    //     0x311b60: stur            w2, [x0, #0x13]
    // 0x311b64: str             x0, [SP]
    // 0x311b68: r0 = _interpolate()
    //     0x311b68: bl              #0x18bcc0  ; [dart:core] _StringBase::_interpolate
    // 0x311b6c: LeaveFrame
    //     0x311b6c: mov             SP, fp
    //     0x311b70: ldp             fp, lr, [SP], #0x10
    // 0x311b74: ret
    //     0x311b74: ret             
    // 0x311b78: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x311b78: bl              #0x3e5cd4  ; StackOverflowSharedWithoutFPURegsStub
    // 0x311b7c: b               #0x311b3c
  }
}
